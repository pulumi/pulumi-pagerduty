{
    "name": "pagerduty",
    "description": "A Pulumi package for creating and managing pagerduty cloud resources.",
    "keywords": [
        "pulumi",
        "pagerduty"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`pagerduty` Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty).",
    "repository": "https://github.com/pulumi/pulumi-pagerduty",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiUrlOverride": {
                "type": "string"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string"
            },
            "userToken": {
                "type": "string"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "pagerduty:index/EscalationPolicyRule:EscalationPolicyRule": {
            "properties": {
                "escalationDelayInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before an unacknowledged incident escalates away from this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "A target ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "escalationDelayInMinutes",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationDelayInMinutes",
                        "id",
                        "targets"
                    ]
                }
            }
        },
        "pagerduty:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A target ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `user_reference` or `schedule_reference`. Defaults to `user_reference`. For multiple users as example, repeat the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n* `parameters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "parameters"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routingKey",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAllActions:EventOrchestrationRouterCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterCatchAllActions:EventOrchestrationRouterCatchAllActions": {
            "properties": {
                "routeTo": {
                    "type": "string",
                    "description": "The ID of the target Service for the resulting alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routeTo"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the `start` set. Router supports only one set and it's id has to be `start`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRule:EventOrchestrationRouterSetRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSetRule:EventOrchestrationRouterSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRuleActions:EventOrchestrationRouterSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRuleCondition:EventOrchestrationRouterSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the `start` set. Router supports only one set and it's id has to be `start`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationRouterSetRuleActions:EventOrchestrationRouterSetRuleActions": {
            "properties": {
                "routeTo": {
                    "type": "string",
                    "description": "The ID of the target Service for the resulting alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routeTo"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSetRuleCondition:EventOrchestrationRouterSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActions:EventOrchestrationServiceCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActions:EventOrchestrationServiceCatchAllActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationAction:EventOrchestrationServiceCatchAllActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsExtraction:EventOrchestrationServiceCatchAllActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagerdutyAutomationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction:EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction",
                    "description": "Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Service Orchestration whose rules you also want to use with event that match this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this the resulting alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsVariable:EventOrchestrationServiceCatchAllActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationAction:EventOrchestrationServiceCatchAllActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionHeader:EventOrchestrationServiceCatchAllActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionParameter:EventOrchestrationServiceCatchAllActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionHeader:EventOrchestrationServiceCatchAllActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionParameter:EventOrchestrationServiceCatchAllActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsExtraction:EventOrchestrationServiceCatchAllActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction:EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the Process Automation action to be triggered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actionId"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsVariable:EventOrchestrationServiceCatchAllActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRule:EventOrchestrationServiceSetRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRule:EventOrchestrationServiceSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActions:EventOrchestrationServiceSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleCondition:EventOrchestrationServiceSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActions:EventOrchestrationServiceSetRuleActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationAction:EventOrchestrationServiceSetRuleActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsExtraction:EventOrchestrationServiceSetRuleActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagerdutyAutomationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction:EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction",
                    "description": "Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Service Orchestration whose rules you also want to use with event that match this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this the resulting alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsVariable:EventOrchestrationServiceSetRuleActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationAction:EventOrchestrationServiceSetRuleActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionHeader:EventOrchestrationServiceSetRuleActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionParameter:EventOrchestrationServiceSetRuleActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionHeader:EventOrchestrationServiceSetRuleActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionParameter:EventOrchestrationServiceSetRuleActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsExtraction:EventOrchestrationServiceSetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction:EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the Process Automation action to be triggered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actionId"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsVariable:EventOrchestrationServiceSetRuleActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleCondition:EventOrchestrationServiceSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActions:EventOrchestrationUnroutedCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActions:EventOrchestrationUnroutedCatchAllActions": {
            "properties": {
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActionsExtraction:EventOrchestrationUnroutedCatchAllActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActionsVariable:EventOrchestrationUnroutedCatchAllActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "suppress"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActionsExtraction:EventOrchestrationUnroutedCatchAllActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActionsVariable:EventOrchestrationUnroutedCatchAllActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRule:EventOrchestrationUnroutedSetRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRule:EventOrchestrationUnroutedSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActions:EventOrchestrationUnroutedSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleCondition:EventOrchestrationUnroutedSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActions:EventOrchestrationUnroutedSetRuleActions": {
            "properties": {
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActionsExtraction:EventOrchestrationUnroutedSetRuleActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Unrouted Orchestration whose rules you also want to use with event that match this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActionsVariable:EventOrchestrationUnroutedSetRuleActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActionsExtraction:EventOrchestrationUnroutedSetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActionsVariable:EventOrchestrationUnroutedSetRuleActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleCondition:EventOrchestrationUnroutedSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/ResponsePlayResponder:ResponsePlayResponder": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of escalation policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "escalationRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderEscalationRule:ResponsePlayResponderEscalationRule"
                    },
                    "description": "The escalation rules\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the escalation policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onCallHandoffNotifications": {
                    "type": "string",
                    "description": "Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to \"if_has_services\". Could be \"if_has_services\", \"always\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderService:ResponsePlayResponderService"
                    },
                    "description": "There can be multiple services associated with a policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderTeam:ResponsePlayResponderTeam"
                    },
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of object of the target. Supported types are `user_reference`, `schedule_reference`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationRules",
                        "numLoops",
                        "onCallHandoffNotifications",
                        "services",
                        "teams"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderEscalationRule:ResponsePlayResponderEscalationRule": {
            "properties": {
                "escalationDelayInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before an unacknowledged incident escalates away from this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderEscalationRuleTarget:ResponsePlayResponderEscalationRuleTarget"
                    },
                    "description": "The targets an incident should be assigned to upon reaching this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationDelayInMinutes",
                        "id",
                        "targets"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderEscalationRuleTarget:ResponsePlayResponderEscalationRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderService:ResponsePlayResponderService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderTeam:ResponsePlayResponderTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActions:RulesetRuleActions": {
            "properties": {
                "annotates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate"
                    },
                    "description": "Note added to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction"
                    },
                    "description": "An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction"
                    },
                    "description": "Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsPriority:RulesetRuleActionsPriority"
                    },
                    "description": "The ID of the priority applied to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsRoute:RulesetRuleActionsRoute"
                    },
                    "description": "The ID of the service where the event will be routed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity"
                    },
                    "description": "The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress"
                    },
                    "description": "Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suspends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSuspend:RulesetRuleActionsSuspend"
                    },
                    "description": "An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A customized field message. This can also include variables extracted from the payload by using string interpolation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsPriority:RulesetRuleActionsPriority": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsRoute:RulesetRuleActionsRoute": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress": {
            "properties": {
                "thresholdTimeAmount": {
                    "type": "integer",
                    "description": "The number value of the `threshold_time_unit` before an incident is created. Must be greater than 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdTimeUnit": {
                    "type": "string",
                    "description": "The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "The number of alerts that should be suppressed. Must be greater than 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSuspend:RulesetRuleActionsSuspend": {
            "properties": {
                "value": {
                    "type": "integer",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditions:RulesetRuleConditions": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Operator to combine sub-conditions. Can be `and` or `or`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subconditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition"
                    },
                    "description": "List of sub-conditions that define the condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter"
                    },
                    "description": "Parameter for the sub-condition. It requires both a `path` and `value` to be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame": {
            "properties": {
                "activeBetweens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween"
                    },
                    "description": "Values for executing the rule during a specific time period.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledWeeklies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly"
                    },
                    "description": "Values for executing the rule on a recurring schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `start_time`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "[The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = \"America/Toronto\"`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleVariable:RulesetRuleVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariableParameter:RulesetRuleVariableParameter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleVariableParameter:RulesetRuleVariableParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetTeam:RulesetTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the ruleset.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/ScheduleLayer:ScheduleLayer": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "The end time of the schedule layer. If not specified, the layer does not end.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restrictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayerRestriction:ScheduleLayerRestriction"
                    },
                    "description": "A schedule layer restriction block. Restriction blocks documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationTurnLengthSeconds": {
                    "type": "integer",
                    "description": "The duration of each on-call shift in `seconds`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationVirtualStart": {
                    "type": "string",
                    "description": "The effective start time of the schedule layer. This can be before the start time of the schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the schedule layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordered list of users on this layer. The position of the user on the list determines their order in the layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rotationTurnLengthSeconds",
                "rotationVirtualStart",
                "start",
                "users"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "rotationTurnLengthSeconds",
                        "rotationVirtualStart",
                        "start",
                        "users"
                    ]
                }
            }
        },
        "pagerduty:index/ScheduleLayerRestriction:ScheduleLayerRestriction": {
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "The duration of the restriction in `seconds`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startDayOfWeek": {
                    "type": "integer",
                    "description": "Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTimeOfDay": {
                    "type": "string",
                    "description": "The start time in `HH:mm:ss` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `daily_restriction` or `weekly_restriction`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "durationSeconds",
                "startTimeOfDay",
                "type"
            ]
        },
        "pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters": {
            "properties": {
                "config": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParametersConfig:ServiceAlertGroupingParametersConfig",
                    "description": "Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceAlertGroupingParametersConfig:ServiceAlertGroupingParametersConfig": {
            "properties": {
                "aggregate": {
                    "type": "string",
                    "description": "One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency": {
            "properties": {
                "dependentServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService"
                    },
                    "description": "The service that dependents on the supporting service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportingServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService"
                    },
                    "description": "The service that supports the dependent service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dependentServices",
                "supportingServices"
            ]
        },
        "pagerduty:index/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:index/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions": {
            "properties": {
                "annotates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsAnnotate:ServiceEventRuleActionsAnnotate"
                    },
                    "description": "Note added to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsEventAction:ServiceEventRuleActionsEventAction"
                    },
                    "description": "An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsExtraction:ServiceEventRuleActionsExtraction"
                    },
                    "description": "Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsPriority:ServiceEventRuleActionsPriority"
                    },
                    "description": "The ID of the priority applied to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSeverity:ServiceEventRuleActionsSeverity"
                    },
                    "description": "The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSuppress:ServiceEventRuleActionsSuppress"
                    },
                    "description": "Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suspends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSuspend:ServiceEventRuleActionsSuspend"
                    },
                    "description": "An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsAnnotate:ServiceEventRuleActionsAnnotate": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsEventAction:ServiceEventRuleActionsEventAction": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsExtraction:ServiceEventRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "A customized field message. This can also include variables extracted from the payload by using string interpolation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsPriority:ServiceEventRuleActionsPriority": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSeverity:ServiceEventRuleActionsSeverity": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSuppress:ServiceEventRuleActionsSuppress": {
            "properties": {
                "thresholdTimeAmount": {
                    "type": "integer",
                    "description": "The number value of the `threshold_time_unit` before an incident is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdTimeUnit": {
                    "type": "string",
                    "description": "The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "The number of alerts that should be suppressed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "boolean",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSuspend:ServiceEventRuleActionsSuspend": {
            "properties": {
                "value": {
                    "type": "integer",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Operator to combine sub-conditions. Can be `and` or `or`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subconditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditionsSubcondition:ServiceEventRuleConditionsSubcondition"
                    },
                    "description": "List of sub-conditions that define the condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditionsSubcondition:ServiceEventRuleConditionsSubcondition": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditionsSubconditionParameter:ServiceEventRuleConditionsSubconditionParameter"
                    },
                    "description": "Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditionsSubconditionParameter:ServiceEventRuleConditionsSubconditionParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame": {
            "properties": {
                "activeBetweens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrameActiveBetween:ServiceEventRuleTimeFrameActiveBetween"
                    },
                    "description": "Values for executing the rule during a specific time period.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledWeeklies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrameScheduledWeekly:ServiceEventRuleTimeFrameScheduledWeekly"
                    },
                    "description": "Values for executing the rule on a recurring schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrameActiveBetween:ServiceEventRuleTimeFrameActiveBetween": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrameScheduledWeekly:ServiceEventRuleTimeFrameScheduledWeekly": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "Length of time the schedule will be active.  Unix timestamp in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the given schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariableParameter:ServiceEventRuleVariableParameter"
                    },
                    "description": "The parameters for performing the operation to populate the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of operation to populate the variable. Usually `regex`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleVariableParameter:ServiceEventRuleVariableParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value for the operation. For example, an RE2 regular expression for regex-type variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule": {
            "properties": {
                "duringSupportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours",
                    "description": "Incidents' urgency during support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outsideSupportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours",
                    "description": "Incidents' urgency outside support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter": {
            "properties": {
                "bodyMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bodyRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromEmailMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromEmailRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service integration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Can be `resolve` or `trigger`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the service integration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchPredicate": {
                    "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicate:ServiceIntegrationEmailParserMatchPredicate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueExtractors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserValueExtractor:ServiceIntegrationEmailParserValueExtractor"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "matchPredicate"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id",
                        "matchPredicate"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicate:ServiceIntegrationEmailParserMatchPredicate": {
            "properties": {
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicate"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `any` or `all`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicate": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Predicate value or valid regex.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject`, `body` or `from_addresses`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicatePredicate"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicatePredicate": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Predicate value or valid regex.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject`, `body` or `from_addresses`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matcher",
                "part",
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserValueExtractor:ServiceIntegrationEmailParserValueExtractor": {
            "properties": {
                "endsBefore": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject` or `body`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "If `type` has value `regex` this value should contain valid regex.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startsAfter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `between`, `entire` or `regex`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueName": {
                    "type": "string",
                    "description": "First value extractor should have name `incident_key` other value extractors should contain custom names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "part",
                "type",
                "valueName"
            ]
        },
        "pagerduty:index/ServiceScheduledAction:ServiceScheduledAction": {
            "properties": {
                "ats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledActionAt:ServiceScheduledActionAt"
                    },
                    "description": "A block representing when the scheduled action will occur.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toUrgency": {
                    "type": "string",
                    "description": "The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceScheduledActionAt:ServiceScheduledActionAt": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of time specification. Currently, this must be set to `named_time`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceSupportHours:ServiceSupportHours": {
            "properties": {
                "daysOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of days of week as integers. `1` to `7`, `1` being\nMonday and `7` being Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "string",
                    "description": "The support hours' ending time of day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The support hours' starting time of day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone for the support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:index/SlackConnectionConfig:SlackConnectionConfig": {
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings to filter events by PagerDuty event type. `\"incident.triggered\"` is required. The follow event types are also possible:\n- `incident.acknowledged`\n- `incident.escalated`\n- `incident.resolved`\n- `incident.reassigned`\n- `incident.annotated`\n- `incident.unacknowledged`\n- `incident.delegated`\n- `incident.priority_updated`\n- `incident.responder.added`\n- `incident.responder.replied`\n- `incident.status_update_published`\n- `incident.reopened`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "Allows you to filter events by urgency. Either `high` or `low`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "events"
            ]
        },
        "pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod": {
            "properties": {
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethodCustomHeader:WebhookSubscriptionDeliveryMethodCustomHeader"
                    },
                    "description": "The custom_header of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "temporarilyDisabled": {
                    "type": "boolean",
                    "description": "Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of the delivery method. Allowed and default value: `http_delivery_method`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The destination URL for webhook delivery.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "temporarilyDisabled"
                    ]
                }
            }
        },
        "pagerduty:index/WebhookSubscriptionDeliveryMethodCustomHeader:WebhookSubscriptionDeliveryMethodCustomHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the object being used as the filter. This field is required for all filter types except account_reference.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of object being used as the filter. Allowed values are `account_reference`, `service_reference`, and `team_reference`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/getEventOrchestrationIntegration:getEventOrchestrationIntegration": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n* `parameters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegrationParameter:getEventOrchestrationIntegrationParameter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "parameters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationIntegrationParameter:getEventOrchestrationIntegrationParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routingKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the pagerduty package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiUrlOverride": {
                "type": "string"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean"
            },
            "token": {
                "type": "string"
            },
            "userToken": {
                "type": "string"
            }
        },
        "required": [
            "token"
        ],
        "inputProperties": {
            "apiUrlOverride": {
                "type": "string"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string"
            },
            "userToken": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "pagerduty:index/addon:Addon": {
            "description": "With [add-ons](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEwNQ-install-an-add-on), third-party developers can write their own add-ons to PagerDuty's UI. Given a configuration containing a src parameter, that URL will be embedded in an iframe on a page that's available to users from a drop-down menu.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Addon(\"example\", {\n    src: \"https://intranet.example.com/status\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Addon(\"example\", src=\"https://intranet.example.com/status\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.Addon(\"example\", new Pagerduty.AddonArgs\n        {\n            Src = \"https://intranet.example.com/status\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewAddon(ctx, \"example\", \u0026pagerduty.AddonArgs{\n\t\t\tSrc: pulumi.String(\"https://intranet.example.com/status\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAdd-ons can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/addon:Addon example P3DH5M6\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "required": [
                "name",
                "src"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "requiredInputs": [
                "src"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Addon resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the add-on.\n"
                    },
                    "src": {
                        "type": "string",
                        "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/businessService:BusinessService": {
            "description": "A [business service](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODExNg-create-a-business-service) allows you to model capabilities that span multiple technical services and that may be owned by several different teams. \n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.BusinessService(\"example\", {\n    description: \"A very descriptive description of this business service\",\n    pointOfContact: \"PagerDuty Admin\",\n    team: \"P37RSRS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.BusinessService(\"example\",\n    description=\"A very descriptive description of this business service\",\n    point_of_contact=\"PagerDuty Admin\",\n    team=\"P37RSRS\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.BusinessService(\"example\", new Pagerduty.BusinessServiceArgs\n        {\n            Description = \"A very descriptive description of this business service\",\n            PointOfContact = \"PagerDuty Admin\",\n            Team = \"P37RSRS\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewBusinessService(ctx, \"example\", \u0026pagerduty.BusinessServiceArgs{\n\t\t\tDescription:    pulumi.String(\"A very descriptive description of this business service\"),\n\t\t\tPointOfContact: pulumi.String(\"PagerDuty Admin\"),\n\t\t\tTeam:           pulumi.String(\"P37RSRS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServices can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/businessService:BusinessService main PLBP09X\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "htmlUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service.\n"
                },
                "self": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the business service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                    "deprecationMessage": "This will change to a computed resource in the next major release."
                }
            },
            "required": [
                "description",
                "htmlUrl",
                "name",
                "self",
                "summary"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service.\n"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the business service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                    "deprecationMessage": "This will change to a computed resource in the next major release."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "htmlUrl": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the business service.\n"
                    },
                    "pointOfContact": {
                        "type": "string",
                        "description": "The owner of the business service.\n"
                    },
                    "self": {
                        "type": "string"
                    },
                    "summary": {
                        "type": "string"
                    },
                    "team": {
                        "type": "string",
                        "description": "ID of the team that owns the business service.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                        "deprecationMessage": "This will change to a computed resource in the next major release."
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/businessServiceSubscriber:BusinessServiceSubscriber": {
            "description": "A [business service subscriber](https://developer.pagerduty.com/api-reference/b3A6NDUwNDgxOQ-list-business-service-subscribers) allows you to subscribe users or teams to automatically receive updates about key business services.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleBusinessService = new pagerduty.BusinessService(\"exampleBusinessService\", {\n    description: \"A very descriptive description of this business service\",\n    pointOfContact: \"PagerDuty Admin\",\n    team: \"P37RSRS\",\n});\nconst engteam = new pagerduty.Team(\"engteam\", {});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {email: \"125.greenholt.earline@graham.name\"});\nconst teamExample = new pagerduty.BusinessServiceSubscriber(\"teamExample\", {\n    subscriberId: engteam.id,\n    subscriberType: \"team\",\n    businessServiceId: exampleBusinessService.id,\n});\nconst userExample = new pagerduty.BusinessServiceSubscriber(\"userExample\", {\n    subscriberId: exampleUser.id,\n    subscriberType: \"user\",\n    businessServiceId: exampleBusinessService.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_business_service = pagerduty.BusinessService(\"exampleBusinessService\",\n    description=\"A very descriptive description of this business service\",\n    point_of_contact=\"PagerDuty Admin\",\n    team=\"P37RSRS\")\nengteam = pagerduty.Team(\"engteam\")\nexample_user = pagerduty.User(\"exampleUser\", email=\"125.greenholt.earline@graham.name\")\nteam_example = pagerduty.BusinessServiceSubscriber(\"teamExample\",\n    subscriber_id=engteam.id,\n    subscriber_type=\"team\",\n    business_service_id=example_business_service.id)\nuser_example = pagerduty.BusinessServiceSubscriber(\"userExample\",\n    subscriber_id=example_user.id,\n    subscriber_type=\"user\",\n    business_service_id=example_business_service.id)\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleBusinessService = new Pagerduty.BusinessService(\"exampleBusinessService\", new Pagerduty.BusinessServiceArgs\n        {\n            Description = \"A very descriptive description of this business service\",\n            PointOfContact = \"PagerDuty Admin\",\n            Team = \"P37RSRS\",\n        });\n        var engteam = new Pagerduty.Team(\"engteam\", new Pagerduty.TeamArgs\n        {\n        });\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n        });\n        var teamExample = new Pagerduty.BusinessServiceSubscriber(\"teamExample\", new Pagerduty.BusinessServiceSubscriberArgs\n        {\n            SubscriberId = engteam.Id,\n            SubscriberType = \"team\",\n            BusinessServiceId = exampleBusinessService.Id,\n        });\n        var userExample = new Pagerduty.BusinessServiceSubscriber(\"userExample\", new Pagerduty.BusinessServiceSubscriberArgs\n        {\n            SubscriberId = exampleUser.Id,\n            SubscriberType = \"user\",\n            BusinessServiceId = exampleBusinessService.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleBusinessService, err := pagerduty.NewBusinessService(ctx, \"exampleBusinessService\", \u0026pagerduty.BusinessServiceArgs{\n\t\t\tDescription:    pulumi.String(\"A very descriptive description of this business service\"),\n\t\t\tPointOfContact: pulumi.String(\"PagerDuty Admin\"),\n\t\t\tTeam:           pulumi.String(\"P37RSRS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengteam, err := pagerduty.NewTeam(ctx, \"engteam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewBusinessServiceSubscriber(ctx, \"teamExample\", \u0026pagerduty.BusinessServiceSubscriberArgs{\n\t\t\tSubscriberId:      engteam.ID(),\n\t\t\tSubscriberType:    pulumi.String(\"team\"),\n\t\t\tBusinessServiceId: exampleBusinessService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewBusinessServiceSubscriber(ctx, \"userExample\", \u0026pagerduty.BusinessServiceSubscriberArgs{\n\t\t\tSubscriberId:      exampleUser.ID(),\n\t\t\tSubscriberType:    pulumi.String(\"user\"),\n\t\t\tBusinessServiceId: exampleBusinessService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServices can be imported using the `id` using the related business service ID, the subscriber type and the subscriber ID separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/businessServiceSubscriber:BusinessServiceSubscriber main PLBP09X.team.PLBP09X\n```\n\n ",
            "properties": {
                "businessServiceId": {
                    "type": "string",
                    "description": "The ID of the business service to subscribe to.\n"
                },
                "subscriberId": {
                    "type": "string",
                    "description": "The ID of the subscriber entity.\n"
                },
                "subscriberType": {
                    "type": "string",
                    "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n"
                }
            },
            "required": [
                "businessServiceId",
                "subscriberId",
                "subscriberType"
            ],
            "inputProperties": {
                "businessServiceId": {
                    "type": "string",
                    "description": "The ID of the business service to subscribe to.\n"
                },
                "subscriberId": {
                    "type": "string",
                    "description": "The ID of the subscriber entity.\n"
                },
                "subscriberType": {
                    "type": "string",
                    "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n"
                }
            },
            "requiredInputs": [
                "businessServiceId",
                "subscriberId",
                "subscriberType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessServiceSubscriber resources.\n",
                "properties": {
                    "businessServiceId": {
                        "type": "string",
                        "description": "The ID of the business service to subscribe to.\n"
                    },
                    "subscriberId": {
                        "type": "string",
                        "description": "The ID of the subscriber entity.\n"
                    },
                    "subscriberType": {
                        "type": "string",
                        "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/escalationPolicy:EscalationPolicy": {
            "description": "An [escalation policy](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEyNQ-create-an-escalation-policy) determines what user or schedule will be notified first, second, and so on when an incident is triggered. Escalation policies are used by one or more services.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleTeam = new pagerduty.Team(\"exampleTeam\", {description: \"All engineering\"});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [exampleTeam.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", {\n    numLoops: 2,\n    teams: [exampleTeam.id],\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [\n            {\n                type: \"user_reference\",\n                id: exampleUser.id,\n            },\n            {\n                type: \"user_reference\",\n                id: pagerduty_user.example2.id,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_team = pagerduty.Team(\"exampleTeam\", description=\"All engineering\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_team.id])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"exampleEscalationPolicy\",\n    num_loops=2,\n    teams=[example_team.id],\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[\n            pagerduty.EscalationPolicyRuleTargetArgs(\n                type=\"user_reference\",\n                id=example_user.id,\n            ),\n            pagerduty.EscalationPolicyRuleTargetArgs(\n                type=\"user_reference\",\n                id=pagerduty_user[\"example2\"][\"id\"],\n            ),\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleTeam = new Pagerduty.Team(\"exampleTeam\", new Pagerduty.TeamArgs\n        {\n            Description = \"All engineering\",\n        });\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                exampleTeam.Id,\n            },\n        });\n        var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Teams = \n            {\n                exampleTeam.Id,\n            },\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user_reference\",\n                            Id = exampleUser.Id,\n                        },\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user_reference\",\n                            Id = pagerduty_user.Example2.Id,\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := pagerduty.NewTeam(ctx, \"exampleTeam\", \u0026pagerduty.TeamArgs{\n\t\t\tDescription: pulumi.String(\"All engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"exampleEscalationPolicy\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tTeams: pulumi.String{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   pulumi.Any(pagerduty_user.Example2.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEscalation policies can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/escalationPolicy:EscalationPolicy main PLBP09X\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "string",
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "required": [
                "description",
                "name",
                "rules"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "string",
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EscalationPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the escalation policy.\n"
                    },
                    "numLoops": {
                        "type": "integer",
                        "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                        },
                        "description": "An Escalation rule block. Escalation rules documented below.\n"
                    },
                    "teams": {
                        "type": "string",
                        "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestration:EventOrchestration": {
            "description": "[Global Event Orchestrations](https://support.pagerduty.com/docs/event-orchestration#global-orchestrations) allow you define a set of Event Rules, so that when you ingest events using the Orchestration's Routing Key your events will be routed to the correct Service, based on the event's content.\n\n## Example of configuring a Global Event Orchestration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst engineering = new pagerduty.Team(\"engineering\", {});\nconst myMonitor = new pagerduty.EventOrchestration(\"myMonitor\", {\n    description: \"Send events to a pair of services\",\n    team: engineering.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nengineering = pagerduty.Team(\"engineering\")\nmy_monitor = pagerduty.EventOrchestration(\"myMonitor\",\n    description=\"Send events to a pair of services\",\n    team=engineering.id)\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var engineering = new Pagerduty.Team(\"engineering\", new Pagerduty.TeamArgs\n        {\n        });\n        var myMonitor = new Pagerduty.EventOrchestration(\"myMonitor\", new Pagerduty.EventOrchestrationArgs\n        {\n            Description = \"Send events to a pair of services\",\n            Team = engineering.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tengineering, err := pagerduty.NewTeam(ctx, \"engineering\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestration(ctx, \"myMonitor\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tDescription: pulumi.String(\"Send events to a pair of services\"),\n\t\t\tTeam:        engineering.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nEventOrchestrations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/eventOrchestration:EventOrchestration main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description of the Event Orchestration.\n"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                    },
                    "description": "An integration for the Event Orchestration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Event Orchestration.\n"
                },
                "routes": {
                    "type": "integer"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                }
            },
            "required": [
                "integrations",
                "name",
                "routes"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description of the Event Orchestration.\n"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                    },
                    "description": "An integration for the Event Orchestration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Event Orchestration.\n"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestration resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the Event Orchestration.\n"
                    },
                    "integrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                        },
                        "description": "An integration for the Event Orchestration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Event Orchestration.\n"
                    },
                    "routes": {
                        "type": "integer"
                    },
                    "team": {
                        "type": "string",
                        "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter": {
            "description": "An Orchestration Router allows users to create a set of Event Rules. The Router evaluates events sent to this Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn't match any rules, it'll be sent to service specified in the `catch_all` or to the \"Unrouted\" Orchestration if no service is specified.\n\n## Example of configuring Router rules for an Orchestration\n\nIn this example the user has defined the Router with two rules, each routing to a different service.\n\nThis example assumes services used in the `route_to` configuration already exists. So it does not show creation of service resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst router = new pagerduty.EventOrchestrationRouter(\"router\", {\n    eventOrchestration: pagerduty_event_orchestration.my_monitor.id,\n    set: {\n        rules: [\n            {\n                label: \"Events relating to our relational database\",\n                conditions: [\n                    {\n                        expression: \"event.summary matches part 'database'\",\n                    },\n                    {\n                        expression: \"event.source matches regex 'db[0-9]+-server'\",\n                    },\n                ],\n                actions: {\n                    routeTo: pageduty_service.database.id,\n                },\n            },\n            {\n                conditions: [{\n                    expression: \"event.summary matches part 'www'\",\n                }],\n                actions: {\n                    routeTo: pagerduty_service.www.id,\n                },\n            },\n        ],\n    },\n    catchAll: {\n        actions: {\n            routeTo: \"unrouted\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nrouter = pagerduty.EventOrchestrationRouter(\"router\",\n    event_orchestration=pagerduty_event_orchestration[\"my_monitor\"][\"id\"],\n    set=pagerduty.EventOrchestrationRouterSetArgs(\n        rules=[\n            pagerduty.EventOrchestrationRouterSetRuleArgs(\n                label=\"Events relating to our relational database\",\n                conditions=[\n                    pagerduty.EventOrchestrationRouterSetRuleConditionArgs(\n                        expression=\"event.summary matches part 'database'\",\n                    ),\n                    pagerduty.EventOrchestrationRouterSetRuleConditionArgs(\n                        expression=\"event.source matches regex 'db[0-9]+-server'\",\n                    ),\n                ],\n                actions=pagerduty.EventOrchestrationRouterSetRuleActionsArgs(\n                    route_to=pageduty_service[\"database\"][\"id\"],\n                ),\n            ),\n            pagerduty.EventOrchestrationRouterSetRuleArgs(\n                conditions=[pagerduty.EventOrchestrationRouterSetRuleConditionArgs(\n                    expression=\"event.summary matches part 'www'\",\n                )],\n                actions=pagerduty.EventOrchestrationRouterSetRuleActionsArgs(\n                    route_to=pagerduty_service[\"www\"][\"id\"],\n                ),\n            ),\n        ],\n    ),\n    catch_all=pagerduty.EventOrchestrationRouterCatchAllArgs(\n        actions=pagerduty.EventOrchestrationRouterCatchAllActionsArgs(\n            route_to=\"unrouted\",\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var router = new Pagerduty.EventOrchestrationRouter(\"router\", new Pagerduty.EventOrchestrationRouterArgs\n        {\n            EventOrchestration = pagerduty_event_orchestration.My_monitor.Id,\n            Set = new Pagerduty.Inputs.EventOrchestrationRouterSetArgs\n            {\n                Rules = \n                {\n                    new Pagerduty.Inputs.EventOrchestrationRouterSetRuleArgs\n                    {\n                        Label = \"Events relating to our relational database\",\n                        Conditions = \n                        {\n                            new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                            {\n                                Expression = \"event.summary matches part 'database'\",\n                            },\n                            new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                            {\n                                Expression = \"event.source matches regex 'db[0-9]+-server'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsArgs\n                        {\n                            RouteTo = pageduty_service.Database.Id,\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationRouterSetRuleArgs\n                    {\n                        Conditions = \n                        {\n                            new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                            {\n                                Expression = \"event.summary matches part 'www'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsArgs\n                        {\n                            RouteTo = pagerduty_service.Www.Id,\n                        },\n                    },\n                },\n            },\n            CatchAll = new Pagerduty.Inputs.EventOrchestrationRouterCatchAllArgs\n            {\n                Actions = new Pagerduty.Inputs.EventOrchestrationRouterCatchAllActionsArgs\n                {\n                    RouteTo = \"unrouted\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewEventOrchestrationRouter(ctx, \"router\", \u0026pagerduty.EventOrchestrationRouterArgs{\n\t\t\tEventOrchestration: pulumi.Any(pagerduty_event_orchestration.My_monitor.Id),\n\t\t\tSet: \u0026EventOrchestrationRouterSetArgs{\n\t\t\t\tRules: EventOrchestrationRouterSetRuleArray{\n\t\t\t\t\t\u0026EventOrchestrationRouterSetRuleArgs{\n\t\t\t\t\t\tLabel: pulumi.String(\"Events relating to our relational database\"),\n\t\t\t\t\t\tConditions: EventOrchestrationRouterSetRuleConditionArray{\n\t\t\t\t\t\t\t\u0026EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'database'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.source matches regex 'db[0-9]+-server'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tActions: \u0026EventOrchestrationRouterSetRuleActionsArgs{\n\t\t\t\t\t\t\tRouteTo: pulumi.Any(pageduty_service.Database.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026EventOrchestrationRouterSetRuleArgs{\n\t\t\t\t\t\tConditions: EventOrchestrationRouterSetRuleConditionArray{\n\t\t\t\t\t\t\t\u0026EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'www'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tActions: \u0026EventOrchestrationRouterSetRuleActionsArgs{\n\t\t\t\t\t\t\tRouteTo: pulumi.Any(pagerduty_service.Www.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026EventOrchestrationRouterCatchAllArgs{\n\t\t\t\tActions: \u0026EventOrchestrationRouterCatchAllActionsArgs{\n\t\t\t\t\tRouteTo: pulumi.String(\"unrouted\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nRouter can be imported using the `id` of the Event Orchestration, e.g.\n\n```sh\n $ pulumi import pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter pagerduty_event_orchestration_router 1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n\n ",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                    "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which the Router belongs.\n"
                },
                "set": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                    "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                }
            },
            "required": [
                "catchAll",
                "eventOrchestration",
                "set"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                    "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which the Router belongs.\n"
                },
                "set": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                    "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "eventOrchestration",
                "set"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationRouter resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                        "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Event Orchestration to which the Router belongs.\n"
                    },
                    "set": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                        "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationService:EventOrchestrationService": {
            "description": "\n\n\n## Import\n\nService Orchestration can be imported using the `id` of the Service, e.g.\n\n```sh\n $ pulumi import pagerduty:index/eventOrchestrationService:EventOrchestrationService pagerduty_event_orchestration_service PFEODA7\n```\n\n ",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                    },
                    "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "required": [
                "catchAll",
                "service",
                "sets"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                    },
                    "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "service",
                "sets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationService resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                        "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                        },
                        "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted": {
            "description": "An Unrouted Orchestration allows users to create a set of Event Rules that will be evaluated against all events that don't match any rules in the Orchestration's Router.\n\nThe Unrouted Orchestration evaluates events sent to it against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.\n\n## Example of configuring Unrouted Rules for an Orchestration\n\nIn this example of an Unrouted Orchestration, the rule matches only if the condition is matched.\nAlerts created for events that do not match the rule will have severity level set to `info` as defined in `catch_all` block.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst unrouted = new pagerduty.EventOrchestrationUnrouted(\"unrouted\", {\n    eventOrchestration: pagerduty_event_orchestration.my_monitor.id,\n    sets: [{\n        id: \"start\",\n        rules: [{\n            label: \"Update the summary of un-matched Critical alerts so they're easier to spot\",\n            conditions: [{\n                expression: \"event.severity matches 'critical'\",\n            }],\n            actions: {\n                severity: \"critical\",\n                extractions: [{\n                    target: \"event.summary\",\n                    template: \"[Critical Unrouted] {{event.summary}}\",\n                }],\n            },\n        }],\n    }],\n    catchAll: {\n        actions: {\n            severity: \"info\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nunrouted = pagerduty.EventOrchestrationUnrouted(\"unrouted\",\n    event_orchestration=pagerduty_event_orchestration[\"my_monitor\"][\"id\"],\n    sets=[pagerduty.EventOrchestrationUnroutedSetArgs(\n        id=\"start\",\n        rules=[pagerduty.EventOrchestrationUnroutedSetRuleArgs(\n            label=\"Update the summary of un-matched Critical alerts so they're easier to spot\",\n            conditions=[pagerduty.EventOrchestrationUnroutedSetRuleConditionArgs(\n                expression=\"event.severity matches 'critical'\",\n            )],\n            actions=pagerduty.EventOrchestrationUnroutedSetRuleActionsArgs(\n                severity=\"critical\",\n                extractions=[pagerduty.EventOrchestrationUnroutedSetRuleActionsExtractionArgs(\n                    target=\"event.summary\",\n                    template=\"[Critical Unrouted] {{event.summary}}\",\n                )],\n            ),\n        )],\n    )],\n    catch_all=pagerduty.EventOrchestrationUnroutedCatchAllArgs(\n        actions=pagerduty.EventOrchestrationUnroutedCatchAllActionsArgs(\n            severity=\"info\",\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var unrouted = new Pagerduty.EventOrchestrationUnrouted(\"unrouted\", new Pagerduty.EventOrchestrationUnroutedArgs\n        {\n            EventOrchestration = pagerduty_event_orchestration.My_monitor.Id,\n            Sets = \n            {\n                new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs\n                {\n                    Id = \"start\",\n                    Rules = \n                    {\n                        new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs\n                        {\n                            Label = \"Update the summary of un-matched Critical alerts so they're easier to spot\",\n                            Conditions = \n                            {\n                                new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleConditionArgs\n                                {\n                                    Expression = \"event.severity matches 'critical'\",\n                                },\n                            },\n                            Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs\n                            {\n                                Severity = \"critical\",\n                                Extractions = \n                                {\n                                    new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs\n                                    {\n                                        Target = \"event.summary\",\n                                        Template = \"[Critical Unrouted] {{event.summary}}\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs\n            {\n                Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs\n                {\n                    Severity = \"info\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewEventOrchestrationUnrouted(ctx, \"unrouted\", \u0026pagerduty.EventOrchestrationUnroutedArgs{\n\t\t\tEventOrchestration: pulumi.Any(pagerduty_event_orchestration.My_monitor.Id),\n\t\t\tSets: EventOrchestrationUnroutedSetArray{\n\t\t\t\t\u0026EventOrchestrationUnroutedSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: EventOrchestrationUnroutedSetRuleArray{\n\t\t\t\t\t\t\u0026EventOrchestrationUnroutedSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Update the summary of un-matched Critical alerts so they're easier to spot\"),\n\t\t\t\t\t\t\tConditions: EventOrchestrationUnroutedSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026EventOrchestrationUnroutedSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.severity matches 'critical'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026EventOrchestrationUnroutedSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tSeverity: pulumi.String(\"critical\"),\n\t\t\t\t\t\t\t\tExtractions: EventOrchestrationUnroutedSetRuleActionsExtractionArray{\n\t\t\t\t\t\t\t\t\t\u0026EventOrchestrationUnroutedSetRuleActionsExtractionArgs{\n\t\t\t\t\t\t\t\t\t\tTarget:   pulumi.String(\"event.summary\"),\n\t\t\t\t\t\t\t\t\t\tTemplate: pulumi.String(\"[Critical Unrouted] {{event.summary}}\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026EventOrchestrationUnroutedCatchAllArgs{\n\t\t\t\tActions: \u0026EventOrchestrationUnroutedCatchAllActionsArgs{\n\t\t\t\t\tSeverity: pulumi.String(\"info\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nUnrouted Orchestration can be imported using the `id` of the Event Orchestration, e.g.\n\n```sh\n $ pulumi import pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted pagerduty_event_orchestration_unrouted 1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n\n ",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                    },
                    "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "required": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                    },
                    "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationUnrouted resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                        "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                        },
                        "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventRule:EventRule": {
            "description": "*NOTE: The `pagerduty.EventRule` resource has been deprecated in favor of the pagerduty.Ruleset and pagerduty.RulesetRule resources. Please use the `ruleset` based resources for working with Event Rules.*\n\n\nAn [event rule](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/) determines what happens to an event that is sent to PagerDuty by monitoring tools and other integrations.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst second = new pagerduty.EventRule(\"second\", {\n    actionJson: JSON.stringify([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"2 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    conditionJson: JSON.stringify([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    advancedConditionJson: JSON.stringify([[\n        \"scheduled-weekly\",\n        1565392127032,\n        3600000,\n        \"America/Los_Angeles\",\n        [\n            1,\n            2,\n            3,\n            5,\n            7,\n        ],\n    ]]),\n});\nconst third = new pagerduty.EventRule(\"third\", {\n    actionJson: JSON.stringify([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"3 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    conditionJson: JSON.stringify([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n}, {\n    dependsOn: [pagerduty_event_rule.two],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_pagerduty as pagerduty\n\nsecond = pagerduty.EventRule(\"second\",\n    action_json=json.dumps([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"2 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    condition_json=json.dumps([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    advanced_condition_json=json.dumps([[\n        \"scheduled-weekly\",\n        1565392127032,\n        3600000,\n        \"America/Los_Angeles\",\n        [\n            1,\n            2,\n            3,\n            5,\n            7,\n        ],\n    ]]))\nthird = pagerduty.EventRule(\"third\",\n    action_json=json.dumps([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"3 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    condition_json=json.dumps([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    opts=pulumi.ResourceOptions(depends_on=[pagerduty_event_rule[\"two\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var second = new Pagerduty.EventRule(\"second\", new Pagerduty.EventRuleArgs\n        {\n            ActionJson = JsonSerializer.Serialize(new[]\n                {\n                    new[]\n                        {\n                            \"route\",\n                            \"P5DTL0K\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"severity\",\n                            \"warning\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"annotate\",\n                            \"2 Managed by terraform\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"priority\",\n                            \"PL451DT\",\n                        }\n                    ,\n                }\n            ),\n            ConditionJson = JsonSerializer.Serialize(new[]\n                {\n                    \"and\",\n                    new[]\n                        {\n                            \"contains\",\n                            new[]\n                                {\n                                    \"path\",\n                                    \"payload\",\n                                    \"source\",\n                                }\n                            ,\n                            \"website\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"contains\",\n                            new[]\n                                {\n                                    \"path\",\n                                    \"headers\",\n                                    \"from\",\n                                    \"0\",\n                                    \"address\",\n                                }\n                            ,\n                            \"homer\",\n                        }\n                    ,\n                }\n            ),\n            AdvancedConditionJson = JsonSerializer.Serialize(new[]\n                {\n                    new[]\n                        {\n                            \"scheduled-weekly\",\n                            1565392127032,\n                            3600000,\n                            \"America/Los_Angeles\",\n                            new[]\n                                {\n                                    1,\n                                    2,\n                                    3,\n                                    5,\n                                    7,\n                                }\n                            ,\n                        }\n                    ,\n                }\n            ),\n        });\n        var third = new Pagerduty.EventRule(\"third\", new Pagerduty.EventRuleArgs\n        {\n            ActionJson = JsonSerializer.Serialize(new[]\n                {\n                    new[]\n                        {\n                            \"route\",\n                            \"P5DTL0K\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"severity\",\n                            \"warning\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"annotate\",\n                            \"3 Managed by terraform\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"priority\",\n                            \"PL451DT\",\n                        }\n                    ,\n                }\n            ),\n            ConditionJson = JsonSerializer.Serialize(new[]\n                {\n                    \"and\",\n                    new[]\n                        {\n                            \"contains\",\n                            new[]\n                                {\n                                    \"path\",\n                                    \"payload\",\n                                    \"source\",\n                                }\n                            ,\n                            \"website\",\n                        }\n                    ,\n                    new[]\n                        {\n                            \"contains\",\n                            new[]\n                                {\n                                    \"path\",\n                                    \"headers\",\n                                    \"from\",\n                                    \"0\",\n                                    \"address\",\n                                }\n                            ,\n                            \"homer\",\n                        }\n                    ,\n                }\n            ),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                pagerduty_event_rule.Two,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal([][]string{\n\t\t\t[]string{\n\t\t\t\t\"route\",\n\t\t\t\t\"P5DTL0K\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"severity\",\n\t\t\t\t\"warning\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"annotate\",\n\t\t\t\t\"2 Managed by terraform\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"priority\",\n\t\t\t\t\"PL451DT\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\"and\",\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"payload\",\n\t\t\t\t\t\"source\",\n\t\t\t\t},\n\t\t\t\t\"website\",\n\t\t\t},\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"headers\",\n\t\t\t\t\t\"from\",\n\t\t\t\t\t\"0\",\n\t\t\t\t\t\"address\",\n\t\t\t\t},\n\t\t\t\t\"homer\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\ttmpJSON2, err := json.Marshal([][]interface{}{\n\t\t\t[]interface{}{\n\t\t\t\t\"scheduled-weekly\",\n\t\t\t\t1565392127032,\n\t\t\t\t3600000,\n\t\t\t\t\"America/Los_Angeles\",\n\t\t\t\t[]float64{\n\t\t\t\t\t1,\n\t\t\t\t\t2,\n\t\t\t\t\t3,\n\t\t\t\t\t5,\n\t\t\t\t\t7,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\t_, err := pagerduty.NewEventRule(ctx, \"second\", \u0026pagerduty.EventRuleArgs{\n\t\t\tActionJson:            pulumi.String(json0),\n\t\t\tConditionJson:         pulumi.String(json1),\n\t\t\tAdvancedConditionJson: pulumi.String(json2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON3, err := json.Marshal([][]string{\n\t\t\t[]string{\n\t\t\t\t\"route\",\n\t\t\t\t\"P5DTL0K\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"severity\",\n\t\t\t\t\"warning\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"annotate\",\n\t\t\t\t\"3 Managed by terraform\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"priority\",\n\t\t\t\t\"PL451DT\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\ttmpJSON4, err := json.Marshal([]interface{}{\n\t\t\t\"and\",\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"payload\",\n\t\t\t\t\t\"source\",\n\t\t\t\t},\n\t\t\t\t\"website\",\n\t\t\t},\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"headers\",\n\t\t\t\t\t\"from\",\n\t\t\t\t\t\"0\",\n\t\t\t\t\t\"address\",\n\t\t\t\t},\n\t\t\t\t\"homer\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson4 := string(tmpJSON4)\n\t\t_, err = pagerduty.NewEventRule(ctx, \"third\", \u0026pagerduty.EventRuleArgs{\n\t\t\tActionJson:    pulumi.String(json3),\n\t\t\tConditionJson: pulumi.String(json4),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpagerduty_event_rule.Two,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEvent rules can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/eventRule:EventRule main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n\n ",
            "properties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "required": [
                "actionJson",
                "catchAll",
                "conditionJson"
            ],
            "inputProperties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "requiredInputs": [
                "actionJson",
                "conditionJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventRule resources.\n",
                "properties": {
                    "actionJson": {
                        "type": "string",
                        "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                    },
                    "advancedConditionJson": {
                        "type": "string",
                        "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                    },
                    "catchAll": {
                        "type": "boolean",
                        "description": "A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.\n"
                    },
                    "conditionJson": {
                        "type": "string",
                        "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/extension:Extension": {
            "description": "An [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) can be associated with a service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {email: \"howard.james@example.domain\"});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionSchema: webhook.then(webhook =\u003e webhook.id),\n    extensionObjects: [exampleService.id],\n    config: `{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample_user = pagerduty.User(\"exampleUser\", email=\"howard.james@example.domain\")\nexample_escalation_policy = pagerduty.EscalationPolicy(\"exampleEscalationPolicy\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id)\nslack = pagerduty.Extension(\"slack\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_schema=webhook.id,\n    extension_objects=[example_service.id],\n    config=\"\"\"{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webhook = Output.Create(Pagerduty.GetExtensionSchema.InvokeAsync(new Pagerduty.GetExtensionSchemaArgs\n        {\n            Name = \"Generic V2 Webhook\",\n        }));\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"howard.james@example.domain\",\n        });\n        var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = exampleEscalationPolicy.Id,\n        });\n        var slack = new Pagerduty.Extension(\"slack\", new Pagerduty.ExtensionArgs\n        {\n            EndpointUrl = \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n            ExtensionSchema = webhook.Apply(webhook =\u003e webhook.Id),\n            ExtensionObjects = \n            {\n                exampleService.Id,\n            },\n            Config = @\"{\n\t\"\"restrict\"\": \"\"any\"\",\n\t\"\"notify_types\"\": {\n\t\t\t\"\"resolve\"\": false,\n\t\t\t\"\"acknowledge\"\": false,\n\t\t\t\"\"assignments\"\": false\n\t},\n\t\"\"access_token\"\": \"\"XXX\"\"\n}\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebhook, err := pagerduty.GetExtensionSchema(ctx, \u0026GetExtensionSchemaArgs{\n\t\t\tName: \"Generic V2 Webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"exampleEscalationPolicy\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtension(ctx, \"slack\", \u0026pagerduty.ExtensionArgs{\n\t\t\tEndpointUrl:     pulumi.String(\"https://generic_webhook_url/XXXXXX/BBBBBB\"),\n\t\t\tExtensionSchema: pulumi.String(webhook.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t\tConfig: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"\t\\\"restrict\\\": \\\"any\\\",\\n\", \"\t\\\"notify_types\\\": {\\n\", \"\t\t\t\\\"resolve\\\": false,\\n\", \"\t\t\t\\\"acknowledge\\\": false,\\n\", \"\t\t\t\\\"assignments\\\": false\\n\", \"\t},\\n\", \"\t\\\"access_token\\\": \\\"XXX\\\"\\n\", \"}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExtensions can be imported using the id.e.g.\n\n```sh\n $ pulumi import pagerduty:index/extension:Extension main PLBP09X\n```\n\n ",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "extensionObjects",
                "extensionSchema",
                "htmlUrl",
                "name",
                "summary",
                "type"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "extensionObjects",
                "extensionSchema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Extension resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                    },
                    "endpointUrl": {
                        "type": "string",
                        "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                    },
                    "extensionObjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is the objects for which the extension applies (An array of service ids).\n"
                    },
                    "extensionSchema": {
                        "type": "string",
                        "description": "This is the schema for this extension.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service extension.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/extensionServiceNow:ExtensionServiceNow": {
            "description": "A special case for [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) for ServiceNow.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {email: \"howard.james@example.domain\"});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n});\nconst snow = new pagerduty.ExtensionServiceNow(\"snow\", {\n    extensionSchema: webhook.then(webhook =\u003e webhook.id),\n    extensionObjects: [exampleService.id],\n    snowUser: \"meeps\",\n    snowPassword: \"zorz\",\n    syncOptions: \"manual_sync\",\n    target: \"https://foo.servicenow.com/webhook_foo\",\n    taskType: \"incident\",\n    referer: \"None\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample_user = pagerduty.User(\"exampleUser\", email=\"howard.james@example.domain\")\nexample_escalation_policy = pagerduty.EscalationPolicy(\"exampleEscalationPolicy\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id)\nsnow = pagerduty.ExtensionServiceNow(\"snow\",\n    extension_schema=webhook.id,\n    extension_objects=[example_service.id],\n    snow_user=\"meeps\",\n    snow_password=\"zorz\",\n    sync_options=\"manual_sync\",\n    target=\"https://foo.servicenow.com/webhook_foo\",\n    task_type=\"incident\",\n    referer=\"None\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webhook = Output.Create(Pagerduty.GetExtensionSchema.InvokeAsync(new Pagerduty.GetExtensionSchemaArgs\n        {\n            Name = \"Generic V2 Webhook\",\n        }));\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"howard.james@example.domain\",\n        });\n        var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = exampleEscalationPolicy.Id,\n        });\n        var snow = new Pagerduty.ExtensionServiceNow(\"snow\", new Pagerduty.ExtensionServiceNowArgs\n        {\n            ExtensionSchema = webhook.Apply(webhook =\u003e webhook.Id),\n            ExtensionObjects = \n            {\n                exampleService.Id,\n            },\n            SnowUser = \"meeps\",\n            SnowPassword = \"zorz\",\n            SyncOptions = \"manual_sync\",\n            Target = \"https://foo.servicenow.com/webhook_foo\",\n            TaskType = \"incident\",\n            Referer = \"None\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebhook, err := pagerduty.GetExtensionSchema(ctx, \u0026GetExtensionSchemaArgs{\n\t\t\tName: \"Generic V2 Webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"exampleEscalationPolicy\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtensionServiceNow(ctx, \"snow\", \u0026pagerduty.ExtensionServiceNowArgs{\n\t\t\tExtensionSchema: pulumi.String(webhook.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t\tSnowUser:     pulumi.String(\"meeps\"),\n\t\t\tSnowPassword: pulumi.String(\"zorz\"),\n\t\t\tSyncOptions:  pulumi.String(\"manual_sync\"),\n\t\t\tTarget:       pulumi.String(\"https://foo.servicenow.com/webhook_foo\"),\n\t\t\tTaskType:     pulumi.String(\"incident\"),\n\t\t\tReferer:      pulumi.String(\"None\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExtensions can be imported using the id.e.g.\n\n```sh\n $ pulumi import pagerduty:index/extensionServiceNow:ExtensionServiceNow main PLBP09X\n```\n\n ",
            "properties": {
                "endpointUrl": {
                    "type": "string"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "referer": {
                    "type": "string",
                    "description": "The ServiceNow referer.\n"
                },
                "snowPassword": {
                    "type": "string",
                    "description": "The ServiceNow password.\n"
                },
                "snowUser": {
                    "type": "string",
                    "description": "The ServiceNow username.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "syncOptions": {
                    "type": "string",
                    "description": "The ServiceNow sync option.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target Webhook URL.\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "The ServiceNow task type, typically `incident`.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "extensionObjects",
                "extensionSchema",
                "htmlUrl",
                "name",
                "referer",
                "snowPassword",
                "snowUser",
                "summary",
                "syncOptions",
                "target",
                "taskType",
                "type"
            ],
            "inputProperties": {
                "endpointUrl": {
                    "type": "string"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "referer": {
                    "type": "string",
                    "description": "The ServiceNow referer.\n"
                },
                "snowPassword": {
                    "type": "string",
                    "description": "The ServiceNow password.\n"
                },
                "snowUser": {
                    "type": "string",
                    "description": "The ServiceNow username.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "syncOptions": {
                    "type": "string",
                    "description": "The ServiceNow sync option.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target Webhook URL.\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "The ServiceNow task type, typically `incident`.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "extensionObjects",
                "extensionSchema",
                "referer",
                "snowPassword",
                "snowUser",
                "syncOptions",
                "target",
                "taskType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtensionServiceNow resources.\n",
                "properties": {
                    "endpointUrl": {
                        "type": "string"
                    },
                    "extensionObjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is the objects for which the extension applies (An array of service ids).\n"
                    },
                    "extensionSchema": {
                        "type": "string",
                        "description": "This is the schema for this extension.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service extension.\n"
                    },
                    "referer": {
                        "type": "string",
                        "description": "The ServiceNow referer.\n"
                    },
                    "snowPassword": {
                        "type": "string",
                        "description": "The ServiceNow password.\n"
                    },
                    "snowUser": {
                        "type": "string",
                        "description": "The ServiceNow username.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                    },
                    "syncOptions": {
                        "type": "string",
                        "description": "The ServiceNow sync option.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Target Webhook URL.\n"
                    },
                    "taskType": {
                        "type": "string",
                        "description": "The ServiceNow task type, typically `incident`.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/maintenanceWindow:MaintenanceWindow": {
            "description": "A [maintenance window](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE1OA-create-a-maintenance-window) is used to temporarily disable one or more services for a set period of time. No incidents will be triggered and no notifications will be received while a service is disabled by a maintenance window.\n\nMaintenance windows are specified to start at a certain time and end after they have begun. Once started, a maintenance window cannot be deleted; it can only be ended immediately to re-enable the service.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.MaintenanceWindow(\"example\", {\n    startTime: \"2015-11-09T20:00:00-05:00\",\n    endTime: \"2015-11-09T22:00:00-05:00\",\n    services: [pagerduty_service.example.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.MaintenanceWindow(\"example\",\n    start_time=\"2015-11-09T20:00:00-05:00\",\n    end_time=\"2015-11-09T22:00:00-05:00\",\n    services=[pagerduty_service[\"example\"][\"id\"]])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.MaintenanceWindow(\"example\", new Pagerduty.MaintenanceWindowArgs\n        {\n            StartTime = \"2015-11-09T20:00:00-05:00\",\n            EndTime = \"2015-11-09T22:00:00-05:00\",\n            Services = \n            {\n                pagerduty_service.Example.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewMaintenanceWindow(ctx, \"example\", \u0026pagerduty.MaintenanceWindowArgs{\n\t\t\tStartTime: pulumi.String(\"2015-11-09T20:00:00-05:00\"),\n\t\t\tEndTime:   pulumi.String(\"2015-11-09T22:00:00-05:00\"),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_service.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMaintenance windows can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/maintenanceWindow:MaintenanceWindow main PLBP09X\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n",
                    "default": "Managed by Pulumi"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "required": [
                "description",
                "endTime",
                "services",
                "startTime"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n",
                    "default": "Managed by Pulumi"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "requiredInputs": [
                "endTime",
                "services",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the maintenance window.\n",
                        "default": "Managed by Pulumi"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of service IDs to include in the maintenance window.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/responsePlay:ResponsePlay": {
            "description": "A [response play](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE2Ng-create-a-response-play) allows you to create packages of Incident Actions that can be applied during an Incident's life cycle.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team.example.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleResponsePlay = new pagerduty.ResponsePlay(\"exampleResponsePlay\", {\n    from: exampleUser.email,\n    responders: [{\n        type: \"escalation_policy_reference\",\n        id: exampleEscalationPolicy.id,\n    }],\n    subscribers: [{\n        type: \"user_reference\",\n        id: exampleUser.id,\n    }],\n    runnability: \"services\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"exampleEscalationPolicy\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_response_play = pagerduty.ResponsePlay(\"exampleResponsePlay\",\n    from_=example_user.email,\n    responders=[pagerduty.ResponsePlayResponderArgs(\n        type=\"escalation_policy_reference\",\n        id=example_escalation_policy.id,\n    )],\n    subscribers=[pagerduty.ResponsePlaySubscriberArgs(\n        type=\"user_reference\",\n        id=example_user.id,\n    )],\n    runnability=\"services\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"exampleEscalationPolicy\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleResponsePlay = new Pagerduty.ResponsePlay(\"exampleResponsePlay\", new Pagerduty.ResponsePlayArgs\n        {\n            From = exampleUser.Email,\n            Responders = \n            {\n                new Pagerduty.Inputs.ResponsePlayResponderArgs\n                {\n                    Type = \"escalation_policy_reference\",\n                    Id = exampleEscalationPolicy.Id,\n                },\n            },\n            Subscribers = \n            {\n                new Pagerduty.Inputs.ResponsePlaySubscriberArgs\n                {\n                    Type = \"user_reference\",\n                    Id = exampleUser.Id,\n                },\n            },\n            Runnability = \"services\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"exampleEscalationPolicy\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewResponsePlay(ctx, \"exampleResponsePlay\", \u0026pagerduty.ResponsePlayArgs{\n\t\t\tFrom: exampleUser.Email,\n\t\t\tResponders: ResponsePlayResponderArray{\n\t\t\t\t\u0026ResponsePlayResponderArgs{\n\t\t\t\t\tType: pulumi.String(\"escalation_policy_reference\"),\n\t\t\t\t\tId:   exampleEscalationPolicy.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSubscribers: ResponsePlaySubscriberArray{\n\t\t\t\t\u0026ResponsePlaySubscriberArgs{\n\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRunnability: pulumi.String(\"services\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nResponse Plays can be imported using the `id.from(email)`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/responsePlay:ResponsePlay main 16208303-022b-f745-f2f5-560e537a2a74.user@email.com\n```\n\n ",
            "properties": {
                "conferenceNumber": {
                    "type": "string",
                    "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                },
                "conferenceUrl": {
                    "type": "string",
                    "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "from": {
                    "type": "string",
                    "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the response play.\n"
                },
                "responders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                    },
                    "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                },
                "respondersMessage": {
                    "type": "string",
                    "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                },
                "runnability": {
                    "type": "string",
                    "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                },
                "subscribers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                    },
                    "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                },
                "subscribersMessage": {
                    "type": "string",
                    "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The ID of the team associated with the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "required": [
                "description",
                "from",
                "name"
            ],
            "inputProperties": {
                "conferenceNumber": {
                    "type": "string",
                    "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                },
                "conferenceUrl": {
                    "type": "string",
                    "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "from": {
                    "type": "string",
                    "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the response play.\n"
                },
                "responders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                    },
                    "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                },
                "respondersMessage": {
                    "type": "string",
                    "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                },
                "runnability": {
                    "type": "string",
                    "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                },
                "subscribers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                    },
                    "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                },
                "subscribersMessage": {
                    "type": "string",
                    "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The ID of the team associated with the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "requiredInputs": [
                "from"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResponsePlay resources.\n",
                "properties": {
                    "conferenceNumber": {
                        "type": "string",
                        "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                    },
                    "conferenceUrl": {
                        "type": "string",
                        "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "from": {
                        "type": "string",
                        "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the response play.\n"
                    },
                    "responders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                        },
                        "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                    },
                    "respondersMessage": {
                        "type": "string",
                        "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                    },
                    "runnability": {
                        "type": "string",
                        "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                    },
                    "subscribers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                        },
                        "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                    },
                    "subscribersMessage": {
                        "type": "string",
                        "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "The ID of the team associated with the response play.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/ruleset:Ruleset": {
            "description": "[Rulesets](https://support.pagerduty.com/docs/rulesets) allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst fooTeam = new pagerduty.Team(\"fooTeam\", {});\nconst fooRuleset = new pagerduty.Ruleset(\"fooRuleset\", {team: {\n    id: fooTeam.id,\n}});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo_team = pagerduty.Team(\"fooTeam\")\nfoo_ruleset = pagerduty.Ruleset(\"fooRuleset\", team=pagerduty.RulesetTeamArgs(\n    id=foo_team.id,\n))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooTeam = new Pagerduty.Team(\"fooTeam\", new Pagerduty.TeamArgs\n        {\n        });\n        var fooRuleset = new Pagerduty.Ruleset(\"fooRuleset\", new Pagerduty.RulesetArgs\n        {\n            Team = new Pagerduty.Inputs.RulesetTeamArgs\n            {\n                Id = fooTeam.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooTeam, err := pagerduty.NewTeam(ctx, \"fooTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRuleset(ctx, \"fooRuleset\", \u0026pagerduty.RulesetArgs{\n\t\t\tTeam: \u0026RulesetTeamArgs{\n\t\t\t\tId: fooTeam.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRulesets can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/ruleset:Ruleset main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Routing keys routed to this ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ruleset. Currently, only sets to `global`.\n"
                }
            },
            "required": [
                "name",
                "routingKeys",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ruleset resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the ruleset.\n"
                    },
                    "routingKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Routing keys routed to this ruleset.\n"
                    },
                    "team": {
                        "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                        "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of ruleset. Currently, only sets to `global`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/rulesetRule:RulesetRule": {
            "description": "An [event rule](https://support.pagerduty.com/docs/rulesets#section-create-event-rules) allows you to set actions that should be taken on events that meet your designated rule criteria.\n\n\n## Import\n\nRuleset rules can be imported using the related `ruleset` ID and the `ruleset_rule` ID separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/rulesetRule:RulesetRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601\n```\n\n ",
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "required": [
                "ruleset"
            ],
            "inputProperties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "requiredInputs": [
                "ruleset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RulesetRule resources.\n",
                "properties": {
                    "actions": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                        "description": "Actions to apply to an event if the conditions match.\n"
                    },
                    "catchAll": {
                        "type": "boolean",
                        "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                    },
                    "conditions": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                        "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position/index of the rule within the ruleset.\n"
                    },
                    "ruleset": {
                        "type": "string",
                        "description": "The ID of the ruleset that the rule belongs to.\n"
                    },
                    "timeFrame": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                        "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                        },
                        "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/schedule:Schedule": {
            "description": "A [schedule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE4Mg-create-a-schedule) determines the time periods that users are on call. Only on-call users are eligible to receive notifications from incidents.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"exampleUser\", {email: \"125.greenholt.earline@graham.name\"});\nconst exampleTeam = new pagerduty.Team(\"exampleTeam\", {});\nconst foo = new pagerduty.Schedule(\"foo\", {\n    timeZone: \"America/New_York\",\n    layers: [{\n        name: \"Night Shift\",\n        start: \"2015-11-06T20:00:00-05:00\",\n        rotationVirtualStart: \"2015-11-06T20:00:00-05:00\",\n        rotationTurnLengthSeconds: 86400,\n        users: [exampleUser.id],\n        restrictions: [{\n            type: \"daily_restriction\",\n            startTimeOfDay: \"08:00:00\",\n            durationSeconds: 32400,\n        }],\n    }],\n    teams: [exampleTeam.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\", email=\"125.greenholt.earline@graham.name\")\nexample_team = pagerduty.Team(\"exampleTeam\")\nfoo = pagerduty.Schedule(\"foo\",\n    time_zone=\"America/New_York\",\n    layers=[pagerduty.ScheduleLayerArgs(\n        name=\"Night Shift\",\n        start=\"2015-11-06T20:00:00-05:00\",\n        rotation_virtual_start=\"2015-11-06T20:00:00-05:00\",\n        rotation_turn_length_seconds=86400,\n        users=[example_user.id],\n        restrictions=[pagerduty.ScheduleLayerRestrictionArgs(\n            type=\"daily_restriction\",\n            start_time_of_day=\"08:00:00\",\n            duration_seconds=32400,\n        )],\n    )],\n    teams=[example_team.id])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n        });\n        var exampleTeam = new Pagerduty.Team(\"exampleTeam\", new Pagerduty.TeamArgs\n        {\n        });\n        var foo = new Pagerduty.Schedule(\"foo\", new Pagerduty.ScheduleArgs\n        {\n            TimeZone = \"America/New_York\",\n            Layers = \n            {\n                new Pagerduty.Inputs.ScheduleLayerArgs\n                {\n                    Name = \"Night Shift\",\n                    Start = \"2015-11-06T20:00:00-05:00\",\n                    RotationVirtualStart = \"2015-11-06T20:00:00-05:00\",\n                    RotationTurnLengthSeconds = 86400,\n                    Users = \n                    {\n                        exampleUser.Id,\n                    },\n                    Restrictions = \n                    {\n                        new Pagerduty.Inputs.ScheduleLayerRestrictionArgs\n                        {\n                            Type = \"daily_restriction\",\n                            StartTimeOfDay = \"08:00:00\",\n                            DurationSeconds = 32400,\n                        },\n                    },\n                },\n            },\n            Teams = \n            {\n                exampleTeam.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := pagerduty.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewSchedule(ctx, \"foo\", \u0026pagerduty.ScheduleArgs{\n\t\t\tTimeZone: pulumi.String(\"America/New_York\"),\n\t\t\tLayers: ScheduleLayerArray{\n\t\t\t\t\u0026ScheduleLayerArgs{\n\t\t\t\t\tName:                      pulumi.String(\"Night Shift\"),\n\t\t\t\t\tStart:                     pulumi.String(\"2015-11-06T20:00:00-05:00\"),\n\t\t\t\t\tRotationVirtualStart:      pulumi.String(\"2015-11-06T20:00:00-05:00\"),\n\t\t\t\t\tRotationTurnLengthSeconds: pulumi.Int(86400),\n\t\t\t\t\tUsers: pulumi.StringArray{\n\t\t\t\t\t\texampleUser.ID(),\n\t\t\t\t\t},\n\t\t\t\t\tRestrictions: ScheduleLayerRestrictionArray{\n\t\t\t\t\t\t\u0026ScheduleLayerRestrictionArgs{\n\t\t\t\t\t\t\tType:            pulumi.String(\"daily_restriction\"),\n\t\t\t\t\t\t\tStartTimeOfDay:  pulumi.String(\"08:00:00\"),\n\t\t\t\t\t\t\tDurationSeconds: pulumi.Int(32400),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSchedules can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/schedule:Schedule main PLBP09X\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule.\n",
                    "default": "Managed by Pulumi"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the schedule.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                }
            },
            "required": [
                "description",
                "layers",
                "name",
                "timeZone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule.\n",
                    "default": "Managed by Pulumi"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the schedule.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                }
            },
            "requiredInputs": [
                "layers",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schedule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the schedule.\n",
                        "default": "Managed by Pulumi"
                    },
                    "layers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                        },
                        "description": "A schedule layer block. Schedule layers documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schedule.\n"
                    },
                    "overflow": {
                        "type": "boolean",
                        "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Teams associated with the schedule.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/service:Service": {
            "description": "A [service](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-create-a-service) represents something you monitor (like a web service, email service, or database service). It is a container for related incidents that associates them with escalation policies.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team.example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: pagerduty_escalation_policy.example.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"],\n    alert_creation=\"create_alerts_and_incidents\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = pagerduty_escalation_policy.Example.Id,\n            AlertCreation = \"create_alerts_and_incidents\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Example.Id),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServices can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/service:Service main PLBP09X\n```\n\n ",
            "properties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.type`"
                },
                "alertGroupingParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                },
                "alertGroupingTimeout": {
                    "type": "string",
                    "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "htmlUrl": {
                    "type": "string"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "lastIncidentTimestamp": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "status": {
                    "type": "string"
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                },
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n"
                }
            },
            "required": [
                "alertGrouping",
                "alertGroupingTimeout",
                "createdAt",
                "description",
                "escalationPolicy",
                "htmlUrl",
                "incidentUrgencyRule",
                "lastIncidentTimestamp",
                "name",
                "status",
                "type"
            ],
            "inputProperties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.type`"
                },
                "alertGroupingParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                },
                "alertGroupingTimeout": {
                    "type": "string",
                    "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                }
            },
            "requiredInputs": [
                "escalationPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "acknowledgementTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                    },
                    "alertCreation": {
                        "type": "string",
                        "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.\n"
                    },
                    "alertGrouping": {
                        "type": "string",
                        "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                        "deprecationMessage": "Use `alert_grouping_parameters.type`"
                    },
                    "alertGroupingParameters": {
                        "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                        "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                    },
                    "alertGroupingTimeout": {
                        "type": "string",
                        "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                        "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                    },
                    "autoResolveTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "escalationPolicy": {
                        "type": "string",
                        "description": "The escalation policy used by this service.\n"
                    },
                    "htmlUrl": {
                        "type": "string"
                    },
                    "incidentUrgencyRule": {
                        "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                    },
                    "lastIncidentTimestamp": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service.\n"
                    },
                    "scheduledActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "supportHours": {
                        "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceDependency:ServiceDependency": {
            "description": "A [service dependency](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Mg-associate-service-dependencies) is a relationship between two services that this service uses, or that are used by this service, and are critical for successful operation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.ServiceDependency(\"foo\", {dependency: {\n    dependentServices: [{\n        id: pagerduty_business_service.foo.id,\n        type: pagerduty_business_service.foo.type,\n    }],\n    supportingServices: [{\n        id: pagerduty_service.foo.id,\n        type: pagerduty_service.foo.type,\n    }],\n}});\nconst bar = new pagerduty.ServiceDependency(\"bar\", {dependency: {\n    dependentServices: [{\n        id: pagerduty_business_service.foo.id,\n        type: pagerduty_business_service.foo.type,\n    }],\n    supportingServices: [{\n        id: pagerduty_service.two.id,\n        type: pagerduty_service.two.type,\n    }],\n}});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.ServiceDependency(\"foo\", dependency=pagerduty.ServiceDependencyDependencyArgs(\n    dependent_services=[pagerduty.ServiceDependencyDependencyDependentServiceArgs(\n        id=pagerduty_business_service[\"foo\"][\"id\"],\n        type=pagerduty_business_service[\"foo\"][\"type\"],\n    )],\n    supporting_services=[pagerduty.ServiceDependencyDependencySupportingServiceArgs(\n        id=pagerduty_service[\"foo\"][\"id\"],\n        type=pagerduty_service[\"foo\"][\"type\"],\n    )],\n))\nbar = pagerduty.ServiceDependency(\"bar\", dependency=pagerduty.ServiceDependencyDependencyArgs(\n    dependent_services=[pagerduty.ServiceDependencyDependencyDependentServiceArgs(\n        id=pagerduty_business_service[\"foo\"][\"id\"],\n        type=pagerduty_business_service[\"foo\"][\"type\"],\n    )],\n    supporting_services=[pagerduty.ServiceDependencyDependencySupportingServiceArgs(\n        id=pagerduty_service[\"two\"][\"id\"],\n        type=pagerduty_service[\"two\"][\"type\"],\n    )],\n))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Pagerduty.ServiceDependency(\"foo\", new Pagerduty.ServiceDependencyArgs\n        {\n            Dependency = new Pagerduty.Inputs.ServiceDependencyDependencyArgs\n            {\n                DependentServices = \n                {\n                    new Pagerduty.Inputs.ServiceDependencyDependencyDependentServiceArgs\n                    {\n                        Id = pagerduty_business_service.Foo.Id,\n                        Type = pagerduty_business_service.Foo.Type,\n                    },\n                },\n                SupportingServices = \n                {\n                    new Pagerduty.Inputs.ServiceDependencyDependencySupportingServiceArgs\n                    {\n                        Id = pagerduty_service.Foo.Id,\n                        Type = pagerduty_service.Foo.Type,\n                    },\n                },\n            },\n        });\n        var bar = new Pagerduty.ServiceDependency(\"bar\", new Pagerduty.ServiceDependencyArgs\n        {\n            Dependency = new Pagerduty.Inputs.ServiceDependencyDependencyArgs\n            {\n                DependentServices = \n                {\n                    new Pagerduty.Inputs.ServiceDependencyDependencyDependentServiceArgs\n                    {\n                        Id = pagerduty_business_service.Foo.Id,\n                        Type = pagerduty_business_service.Foo.Type,\n                    },\n                },\n                SupportingServices = \n                {\n                    new Pagerduty.Inputs.ServiceDependencyDependencySupportingServiceArgs\n                    {\n                        Id = pagerduty_service.Two.Id,\n                        Type = pagerduty_service.Two.Type,\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewServiceDependency(ctx, \"foo\", \u0026pagerduty.ServiceDependencyArgs{\n\t\t\tDependency: \u0026ServiceDependencyDependencyArgs{\n\t\t\t\tDependentServices: ServiceDependencyDependencyDependentServiceArray{\n\t\t\t\t\t\u0026ServiceDependencyDependencyDependentServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(pagerduty_business_service.Foo.Id),\n\t\t\t\t\t\tType: pulumi.Any(pagerduty_business_service.Foo.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSupportingServices: ServiceDependencyDependencySupportingServiceArray{\n\t\t\t\t\t\u0026ServiceDependencyDependencySupportingServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(pagerduty_service.Foo.Id),\n\t\t\t\t\t\tType: pulumi.Any(pagerduty_service.Foo.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceDependency(ctx, \"bar\", \u0026pagerduty.ServiceDependencyArgs{\n\t\t\tDependency: \u0026ServiceDependencyDependencyArgs{\n\t\t\t\tDependentServices: ServiceDependencyDependencyDependentServiceArray{\n\t\t\t\t\t\u0026ServiceDependencyDependencyDependentServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(pagerduty_business_service.Foo.Id),\n\t\t\t\t\t\tType: pulumi.Any(pagerduty_business_service.Foo.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSupportingServices: ServiceDependencyDependencySupportingServiceArray{\n\t\t\t\t\t\u0026ServiceDependencyDependencySupportingServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(pagerduty_service.Two.Id),\n\t\t\t\t\t\tType: pulumi.Any(pagerduty_service.Two.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService dependencies can be imported using the related supporting service id, supporting service type (`business_service` or `service`) and the dependency id separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/serviceDependency:ServiceDependency main P4B2Z7G.business_service.D5RTHKRNGU4PYE90PJ\n```\n\n ",
            "properties": {
                "dependency": {
                    "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                    "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                }
            },
            "required": [
                "dependency"
            ],
            "inputProperties": {
                "dependency": {
                    "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                    "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                }
            },
            "requiredInputs": [
                "dependency"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceDependency resources.\n",
                "properties": {
                    "dependency": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                        "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceEventRule:ServiceEventRule": {
            "description": "A [service event rule](https://support.pagerduty.com/docs/rulesets#service-event-rules) allows you to set actions that should be taken on events for a service that meet the designated rule criteria.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Service(\"example\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: pagerduty_escalation_policy.example.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\nconst foo = new pagerduty.ServiceEventRule(\"foo\", {\n    service: example.id,\n    position: 0,\n    disabled: true,\n    conditions: {\n        operator: \"and\",\n        subconditions: [{\n            operator: \"contains\",\n            parameters: [{\n                value: \"disk space\",\n                path: \"summary\",\n            }],\n        }],\n    },\n    variables: [{\n        type: \"regex\",\n        name: \"Src\",\n        parameters: [{\n            value: \"(.*)\",\n            path: \"source\",\n        }],\n    }],\n    actions: {\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n        extractions: [\n            {\n                target: \"dedup_key\",\n                source: \"source\",\n                regex: \"(.*)\",\n            },\n            {\n                target: \"summary\",\n                template: \"Warning: Disk Space Low on {{Src}}\",\n            },\n        ],\n    },\n});\nconst bar = new pagerduty.ServiceEventRule(\"bar\", {\n    service: pagerduty_service.foo.id,\n    position: 1,\n    disabled: true,\n    conditions: {\n        operator: \"and\",\n        subconditions: [{\n            operator: \"contains\",\n            parameters: [{\n                value: \"cpu spike\",\n                path: \"summary\",\n            }],\n        }],\n    },\n    actions: {\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Service(\"example\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"],\n    alert_creation=\"create_alerts_and_incidents\")\nfoo = pagerduty.ServiceEventRule(\"foo\",\n    service=example.id,\n    position=0,\n    disabled=True,\n    conditions=pagerduty.ServiceEventRuleConditionsArgs(\n        operator=\"and\",\n        subconditions=[pagerduty.ServiceEventRuleConditionsSubconditionArgs(\n            operator=\"contains\",\n            parameters=[pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs(\n                value=\"disk space\",\n                path=\"summary\",\n            )],\n        )],\n    ),\n    variables=[pagerduty.ServiceEventRuleVariableArgs(\n        type=\"regex\",\n        name=\"Src\",\n        parameters=[pagerduty.ServiceEventRuleVariableParameterArgs(\n            value=\"(.*)\",\n            path=\"source\",\n        )],\n    )],\n    actions=pagerduty.ServiceEventRuleActionsArgs(\n        annotates=[pagerduty.ServiceEventRuleActionsAnnotateArgs(\n            value=\"From Terraform\",\n        )],\n        extractions=[\n            pagerduty.ServiceEventRuleActionsExtractionArgs(\n                target=\"dedup_key\",\n                source=\"source\",\n                regex=\"(.*)\",\n            ),\n            pagerduty.ServiceEventRuleActionsExtractionArgs(\n                target=\"summary\",\n                template=\"Warning: Disk Space Low on {{Src}}\",\n            ),\n        ],\n    ))\nbar = pagerduty.ServiceEventRule(\"bar\",\n    service=pagerduty_service[\"foo\"][\"id\"],\n    position=1,\n    disabled=True,\n    conditions=pagerduty.ServiceEventRuleConditionsArgs(\n        operator=\"and\",\n        subconditions=[pagerduty.ServiceEventRuleConditionsSubconditionArgs(\n            operator=\"contains\",\n            parameters=[pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs(\n                value=\"cpu spike\",\n                path=\"summary\",\n            )],\n        )],\n    ),\n    actions=pagerduty.ServiceEventRuleActionsArgs(\n        annotates=[pagerduty.ServiceEventRuleActionsAnnotateArgs(\n            value=\"From Terraform\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.Service(\"example\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = pagerduty_escalation_policy.Example.Id,\n            AlertCreation = \"create_alerts_and_incidents\",\n        });\n        var foo = new Pagerduty.ServiceEventRule(\"foo\", new Pagerduty.ServiceEventRuleArgs\n        {\n            Service = example.Id,\n            Position = 0,\n            Disabled = true,\n            Conditions = new Pagerduty.Inputs.ServiceEventRuleConditionsArgs\n            {\n                Operator = \"and\",\n                Subconditions = \n                {\n                    new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"disk space\",\n                                Path = \"summary\",\n                            },\n                        },\n                    },\n                },\n            },\n            Variables = \n            {\n                new Pagerduty.Inputs.ServiceEventRuleVariableArgs\n                {\n                    Type = \"regex\",\n                    Name = \"Src\",\n                    Parameters = \n                    {\n                        new Pagerduty.Inputs.ServiceEventRuleVariableParameterArgs\n                        {\n                            Value = \"(.*)\",\n                            Path = \"source\",\n                        },\n                    },\n                },\n            },\n            Actions = new Pagerduty.Inputs.ServiceEventRuleActionsArgs\n            {\n                Annotates = \n                {\n                    new Pagerduty.Inputs.ServiceEventRuleActionsAnnotateArgs\n                    {\n                        Value = \"From Terraform\",\n                    },\n                },\n                Extractions = \n                {\n                    new Pagerduty.Inputs.ServiceEventRuleActionsExtractionArgs\n                    {\n                        Target = \"dedup_key\",\n                        Source = \"source\",\n                        Regex = \"(.*)\",\n                    },\n                    new Pagerduty.Inputs.ServiceEventRuleActionsExtractionArgs\n                    {\n                        Target = \"summary\",\n                        Template = \"Warning: Disk Space Low on {{Src}}\",\n                    },\n                },\n            },\n        });\n        var bar = new Pagerduty.ServiceEventRule(\"bar\", new Pagerduty.ServiceEventRuleArgs\n        {\n            Service = pagerduty_service.Foo.Id,\n            Position = 1,\n            Disabled = true,\n            Conditions = new Pagerduty.Inputs.ServiceEventRuleConditionsArgs\n            {\n                Operator = \"and\",\n                Subconditions = \n                {\n                    new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"cpu spike\",\n                                Path = \"summary\",\n                            },\n                        },\n                    },\n                },\n            },\n            Actions = new Pagerduty.Inputs.ServiceEventRuleActionsArgs\n            {\n                Annotates = \n                {\n                    new Pagerduty.Inputs.ServiceEventRuleActionsAnnotateArgs\n                    {\n                        Value = \"From Terraform\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Example.Id),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceEventRule(ctx, \"foo\", \u0026pagerduty.ServiceEventRuleArgs{\n\t\t\tService:  example.ID(),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(true),\n\t\t\tConditions: \u0026ServiceEventRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: ServiceEventRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026ServiceEventRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: ServiceEventRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026ServiceEventRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tVariables: ServiceEventRuleVariableArray{\n\t\t\t\t\u0026ServiceEventRuleVariableArgs{\n\t\t\t\t\tType: pulumi.String(\"regex\"),\n\t\t\t\t\tName: pulumi.String(\"Src\"),\n\t\t\t\t\tParameters: ServiceEventRuleVariableParameterArray{\n\t\t\t\t\t\t\u0026ServiceEventRuleVariableParameterArgs{\n\t\t\t\t\t\t\tValue: pulumi.String(\"(.*)\"),\n\t\t\t\t\t\t\tPath:  pulumi.String(\"source\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026ServiceEventRuleActionsArgs{\n\t\t\t\tAnnotates: ServiceEventRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026ServiceEventRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tExtractions: ServiceEventRuleActionsExtractionArray{\n\t\t\t\t\t\u0026ServiceEventRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget: pulumi.String(\"dedup_key\"),\n\t\t\t\t\t\tSource: pulumi.String(\"source\"),\n\t\t\t\t\t\tRegex:  pulumi.String(\"(.*)\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ServiceEventRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget:   pulumi.String(\"summary\"),\n\t\t\t\t\t\tTemplate: pulumi.String(\"Warning: Disk Space Low on {{Src}}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceEventRule(ctx, \"bar\", \u0026pagerduty.ServiceEventRuleArgs{\n\t\t\tService:  pulumi.Any(pagerduty_service.Foo.Id),\n\t\t\tPosition: pulumi.Int(1),\n\t\t\tDisabled: pulumi.Bool(true),\n\t\t\tConditions: \u0026ServiceEventRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: ServiceEventRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026ServiceEventRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: ServiceEventRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026ServiceEventRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"cpu spike\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026ServiceEventRuleActionsArgs{\n\t\t\t\tAnnotates: ServiceEventRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026ServiceEventRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService event rules can be imported using using the related `service` id and the `service_event_rule` id separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/serviceEventRule:ServiceEventRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601\n```\n\n ",
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "required": [
                "service"
            ],
            "inputProperties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEventRule resources.\n",
                "properties": {
                    "actions": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                        "description": "Actions to apply to an event if the conditions match.\n"
                    },
                    "conditions": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                        "description": "Conditions evaluated to check if an event matches this event rule.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position/index of the rule within the service.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The ID of the service that the rule belongs to.\n"
                    },
                    "timeFrame": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                        "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                        },
                        "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceIntegration:ServiceIntegration": {
            "description": "A [service integration](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1services~1%7Bid%7D~1integrations/post) is an integration that belongs to a service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team.example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: pagerduty_escalation_policy.example.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"exampleServiceIntegration\", {\n    type: \"generic_events_api_inbound_integration\",\n    service: exampleService.id,\n});\nconst apiv2 = new pagerduty.ServiceIntegration(\"apiv2\", {\n    type: \"events_api_v2_inbound_integration\",\n    integrationKey: \"12345678910testtesttesttesttes\",\n    service: exampleService.id,\n});\nconst emailX = new pagerduty.ServiceIntegration(\"emailX\", {\n    type: \"generic_email_inbound_integration\",\n    integrationEmail: \"ecommerce@subdomain.pagerduty.com\",\n    service: exampleService.id,\n});\nconst datadogVendor = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst datadogServiceIntegration = new pagerduty.ServiceIntegration(\"datadogServiceIntegration\", {\n    service: exampleService.id,\n    vendor: datadogVendor.then(datadogVendor =\u003e datadogVendor.id),\n});\nconst cloudwatchVendor = pagerduty.getVendor({\n    name: \"Cloudwatch\",\n});\nconst cloudwatchServiceIntegration = new pagerduty.ServiceIntegration(\"cloudwatchServiceIntegration\", {\n    service: exampleService.id,\n    vendor: cloudwatchVendor.then(cloudwatchVendor =\u003e cloudwatchVendor.id),\n});\nconst emailVendor = pagerduty.getVendor({\n    name: \"Email\",\n});\nconst emailServiceIntegration = new pagerduty.ServiceIntegration(\"emailServiceIntegration\", {\n    service: exampleService.id,\n    vendor: emailVendor.then(emailVendor =\u003e emailVendor.id),\n    integrationEmail: \"s1@your_account.pagerduty.com\",\n    emailIncidentCreation: \"use_rules\",\n    emailFilterMode: \"and-rules-email\",\n    emailFilters: [\n        {\n            bodyMode: \"always\",\n            bodyRegex: undefined,\n            fromEmailMode: \"match\",\n            fromEmailRegex: \"(@foo.test*)\",\n            subjectMode: \"match\",\n            subjectRegex: \"(CRITICAL*)\",\n        },\n        {\n            bodyMode: \"always\",\n            bodyRegex: undefined,\n            fromEmailMode: \"match\",\n            fromEmailRegex: \"(@bar.com*)\",\n            subjectMode: \"match\",\n            subjectRegex: \"(CRITICAL*)\",\n        },\n    ],\n    emailParsers: [{\n        action: \"resolve\",\n        matchPredicate: {\n            type: \"any\",\n            predicates: [\n                {\n                    matcher: \"foo\",\n                    part: \"subject\",\n                    type: \"contains\",\n                },\n                {\n                    type: \"not\",\n                    predicates: [{\n                        matcher: \"(bar*)\",\n                        part: \"body\",\n                        type: \"regex\",\n                    }],\n                },\n            ],\n        },\n        valueExtractors: [\n            {\n                endsBefore: \"end\",\n                part: \"subject\",\n                startsAfter: \"start\",\n                type: \"between\",\n                valueName: \"incident_key\",\n            },\n            {\n                endsBefore: \"end\",\n                part: \"subject\",\n                startsAfter: \"start\",\n                type: \"between\",\n                valueName: \"FieldName1\",\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    type=\"generic_events_api_inbound_integration\",\n    service=example_service.id)\napiv2 = pagerduty.ServiceIntegration(\"apiv2\",\n    type=\"events_api_v2_inbound_integration\",\n    integration_key=\"12345678910testtesttesttesttes\",\n    service=example_service.id)\nemail_x = pagerduty.ServiceIntegration(\"emailX\",\n    type=\"generic_email_inbound_integration\",\n    integration_email=\"ecommerce@subdomain.pagerduty.com\",\n    service=example_service.id)\ndatadog_vendor = pagerduty.get_vendor(name=\"Datadog\")\ndatadog_service_integration = pagerduty.ServiceIntegration(\"datadogServiceIntegration\",\n    service=example_service.id,\n    vendor=datadog_vendor.id)\ncloudwatch_vendor = pagerduty.get_vendor(name=\"Cloudwatch\")\ncloudwatch_service_integration = pagerduty.ServiceIntegration(\"cloudwatchServiceIntegration\",\n    service=example_service.id,\n    vendor=cloudwatch_vendor.id)\nemail_vendor = pagerduty.get_vendor(name=\"Email\")\nemail_service_integration = pagerduty.ServiceIntegration(\"emailServiceIntegration\",\n    service=example_service.id,\n    vendor=email_vendor.id,\n    integration_email=\"s1@your_account.pagerduty.com\",\n    email_incident_creation=\"use_rules\",\n    email_filter_mode=\"and-rules-email\",\n    email_filters=[\n        pagerduty.ServiceIntegrationEmailFilterArgs(\n            body_mode=\"always\",\n            body_regex=None,\n            from_email_mode=\"match\",\n            from_email_regex=\"(@foo.test*)\",\n            subject_mode=\"match\",\n            subject_regex=\"(CRITICAL*)\",\n        ),\n        pagerduty.ServiceIntegrationEmailFilterArgs(\n            body_mode=\"always\",\n            body_regex=None,\n            from_email_mode=\"match\",\n            from_email_regex=\"(@bar.com*)\",\n            subject_mode=\"match\",\n            subject_regex=\"(CRITICAL*)\",\n        ),\n    ],\n    email_parsers=[pagerduty.ServiceIntegrationEmailParserArgs(\n        action=\"resolve\",\n        match_predicate=pagerduty.ServiceIntegrationEmailParserMatchPredicateArgs(\n            type=\"any\",\n            predicates=[\n                pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicateArgs(\n                    matcher=\"foo\",\n                    part=\"subject\",\n                    type=\"contains\",\n                ),\n                pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicateArgs(\n                    type=\"not\",\n                    predicates=[pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs(\n                        matcher=\"(bar*)\",\n                        part=\"body\",\n                        type=\"regex\",\n                    )],\n                ),\n            ],\n        ),\n        value_extractors=[\n            pagerduty.ServiceIntegrationEmailParserValueExtractorArgs(\n                ends_before=\"end\",\n                part=\"subject\",\n                starts_after=\"start\",\n                type=\"between\",\n                value_name=\"incident_key\",\n            ),\n            pagerduty.ServiceIntegrationEmailParserValueExtractorArgs(\n                ends_before=\"end\",\n                part=\"subject\",\n                starts_after=\"start\",\n                type=\"between\",\n                value_name=\"FieldName1\",\n            ),\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = pagerduty_escalation_policy.Example.Id,\n        });\n        var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"exampleServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Type = \"generic_events_api_inbound_integration\",\n            Service = exampleService.Id,\n        });\n        var apiv2 = new Pagerduty.ServiceIntegration(\"apiv2\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Type = \"events_api_v2_inbound_integration\",\n            IntegrationKey = \"12345678910testtesttesttesttes\",\n            Service = exampleService.Id,\n        });\n        var emailX = new Pagerduty.ServiceIntegration(\"emailX\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Type = \"generic_email_inbound_integration\",\n            IntegrationEmail = \"ecommerce@subdomain.pagerduty.com\",\n            Service = exampleService.Id,\n        });\n        var datadogVendor = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs\n        {\n            Name = \"Datadog\",\n        }));\n        var datadogServiceIntegration = new Pagerduty.ServiceIntegration(\"datadogServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Service = exampleService.Id,\n            Vendor = datadogVendor.Apply(datadogVendor =\u003e datadogVendor.Id),\n        });\n        var cloudwatchVendor = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs\n        {\n            Name = \"Cloudwatch\",\n        }));\n        var cloudwatchServiceIntegration = new Pagerduty.ServiceIntegration(\"cloudwatchServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Service = exampleService.Id,\n            Vendor = cloudwatchVendor.Apply(cloudwatchVendor =\u003e cloudwatchVendor.Id),\n        });\n        var emailVendor = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs\n        {\n            Name = \"Email\",\n        }));\n        var emailServiceIntegration = new Pagerduty.ServiceIntegration(\"emailServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Service = exampleService.Id,\n            Vendor = emailVendor.Apply(emailVendor =\u003e emailVendor.Id),\n            IntegrationEmail = \"s1@your_account.pagerduty.com\",\n            EmailIncidentCreation = \"use_rules\",\n            EmailFilterMode = \"and-rules-email\",\n            EmailFilters = \n            {\n                new Pagerduty.Inputs.ServiceIntegrationEmailFilterArgs\n                {\n                    BodyMode = \"always\",\n                    BodyRegex = null,\n                    FromEmailMode = \"match\",\n                    FromEmailRegex = \"(@foo.test*)\",\n                    SubjectMode = \"match\",\n                    SubjectRegex = \"(CRITICAL*)\",\n                },\n                new Pagerduty.Inputs.ServiceIntegrationEmailFilterArgs\n                {\n                    BodyMode = \"always\",\n                    BodyRegex = null,\n                    FromEmailMode = \"match\",\n                    FromEmailRegex = \"(@bar.com*)\",\n                    SubjectMode = \"match\",\n                    SubjectRegex = \"(CRITICAL*)\",\n                },\n            },\n            EmailParsers = \n            {\n                new Pagerduty.Inputs.ServiceIntegrationEmailParserArgs\n                {\n                    Action = \"resolve\",\n                    MatchPredicate = new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicateArgs\n                    {\n                        Type = \"any\",\n                        Predicates = \n                        {\n                            new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicateArgs\n                            {\n                                Matcher = \"foo\",\n                                Part = \"subject\",\n                                Type = \"contains\",\n                            },\n                            new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicateArgs\n                            {\n                                Type = \"not\",\n                                Predicates = \n                                {\n                                    new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs\n                                    {\n                                        Matcher = \"(bar*)\",\n                                        Part = \"body\",\n                                        Type = \"regex\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                    ValueExtractors = \n                    {\n                        new Pagerduty.Inputs.ServiceIntegrationEmailParserValueExtractorArgs\n                        {\n                            EndsBefore = \"end\",\n                            Part = \"subject\",\n                            StartsAfter = \"start\",\n                            Type = \"between\",\n                            ValueName = \"incident_key\",\n                        },\n                        new Pagerduty.Inputs.ServiceIntegrationEmailParserValueExtractorArgs\n                        {\n                            EndsBefore = \"end\",\n                            Part = \"subject\",\n                            StartsAfter = \"start\",\n                            Type = \"between\",\n                            ValueName = \"FieldName1\",\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"exampleServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tType:    pulumi.String(\"generic_events_api_inbound_integration\"),\n\t\t\tService: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"apiv2\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tType:           pulumi.String(\"events_api_v2_inbound_integration\"),\n\t\t\tIntegrationKey: pulumi.String(\"12345678910testtesttesttesttes\"),\n\t\t\tService:        exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"emailX\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tType:             pulumi.String(\"generic_email_inbound_integration\"),\n\t\t\tIntegrationEmail: pulumi.String(\"ecommerce@subdomain.pagerduty.com\"),\n\t\t\tService:          exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatadogVendor, err := pagerduty.GetVendor(ctx, \u0026GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"datadogServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tService: exampleService.ID(),\n\t\t\tVendor:  pulumi.String(datadogVendor.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcloudwatchVendor, err := pagerduty.GetVendor(ctx, \u0026GetVendorArgs{\n\t\t\tName: \"Cloudwatch\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"cloudwatchServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tService: exampleService.ID(),\n\t\t\tVendor:  pulumi.String(cloudwatchVendor.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailVendor, err := pagerduty.GetVendor(ctx, \u0026GetVendorArgs{\n\t\t\tName: \"Email\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"emailServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tService:               exampleService.ID(),\n\t\t\tVendor:                pulumi.String(emailVendor.Id),\n\t\t\tIntegrationEmail:      pulumi.String(\"s1@your_account.pagerduty.com\"),\n\t\t\tEmailIncidentCreation: pulumi.String(\"use_rules\"),\n\t\t\tEmailFilterMode:       pulumi.String(\"and-rules-email\"),\n\t\t\tEmailFilters: ServiceIntegrationEmailFilterArray{\n\t\t\t\t\u0026ServiceIntegrationEmailFilterArgs{\n\t\t\t\t\tBodyMode:       pulumi.String(\"always\"),\n\t\t\t\t\tBodyRegex:      nil,\n\t\t\t\t\tFromEmailMode:  pulumi.String(\"match\"),\n\t\t\t\t\tFromEmailRegex: pulumi.String(\"(@foo.test*)\"),\n\t\t\t\t\tSubjectMode:    pulumi.String(\"match\"),\n\t\t\t\t\tSubjectRegex:   pulumi.String(\"(CRITICAL*)\"),\n\t\t\t\t},\n\t\t\t\t\u0026ServiceIntegrationEmailFilterArgs{\n\t\t\t\t\tBodyMode:       pulumi.String(\"always\"),\n\t\t\t\t\tBodyRegex:      nil,\n\t\t\t\t\tFromEmailMode:  pulumi.String(\"match\"),\n\t\t\t\t\tFromEmailRegex: pulumi.String(\"(@bar.com*)\"),\n\t\t\t\t\tSubjectMode:    pulumi.String(\"match\"),\n\t\t\t\t\tSubjectRegex:   pulumi.String(\"(CRITICAL*)\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEmailParsers: ServiceIntegrationEmailParserArray{\n\t\t\t\t\u0026ServiceIntegrationEmailParserArgs{\n\t\t\t\t\tAction: pulumi.String(\"resolve\"),\n\t\t\t\t\tMatchPredicate: \u0026ServiceIntegrationEmailParserMatchPredicateArgs{\n\t\t\t\t\t\tType: pulumi.String(\"any\"),\n\t\t\t\t\t\tPredicates: ServiceIntegrationEmailParserMatchPredicatePredicateArray{\n\t\t\t\t\t\t\t\u0026ServiceIntegrationEmailParserMatchPredicatePredicateArgs{\n\t\t\t\t\t\t\t\tMatcher: pulumi.String(\"foo\"),\n\t\t\t\t\t\t\t\tPart:    pulumi.String(\"subject\"),\n\t\t\t\t\t\t\t\tType:    pulumi.String(\"contains\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026ServiceIntegrationEmailParserMatchPredicatePredicateArgs{\n\t\t\t\t\t\t\t\tType: pulumi.String(\"not\"),\n\t\t\t\t\t\t\t\tPredicates: ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray{\n\t\t\t\t\t\t\t\t\t\u0026ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs{\n\t\t\t\t\t\t\t\t\t\tMatcher: pulumi.String(\"(bar*)\"),\n\t\t\t\t\t\t\t\t\t\tPart:    pulumi.String(\"body\"),\n\t\t\t\t\t\t\t\t\t\tType:    pulumi.String(\"regex\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tValueExtractors: ServiceIntegrationEmailParserValueExtractorArray{\n\t\t\t\t\t\t\u0026ServiceIntegrationEmailParserValueExtractorArgs{\n\t\t\t\t\t\t\tEndsBefore:  pulumi.String(\"end\"),\n\t\t\t\t\t\t\tPart:        pulumi.String(\"subject\"),\n\t\t\t\t\t\t\tStartsAfter: pulumi.String(\"start\"),\n\t\t\t\t\t\t\tType:        pulumi.String(\"between\"),\n\t\t\t\t\t\t\tValueName:   pulumi.String(\"incident_key\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026ServiceIntegrationEmailParserValueExtractorArgs{\n\t\t\t\t\t\t\tEndsBefore:  pulumi.String(\"end\"),\n\t\t\t\t\t\t\tPart:        pulumi.String(\"subject\"),\n\t\t\t\t\t\t\tStartsAfter: pulumi.String(\"start\"),\n\t\t\t\t\t\t\tType:        pulumi.String(\"between\"),\n\t\t\t\t\t\t\tValueName:   pulumi.String(\"FieldName1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServices can be imported using their related `service` id and service integration `id` separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/serviceIntegration:ServiceIntegration main PLSSSSS.PLIIIII\n```\n\n ",
            "properties": {
                "emailFilterMode": {
                    "type": "string",
                    "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                },
                "emailFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                    }
                },
                "emailIncidentCreation": {
                    "type": "string",
                    "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                },
                "emailParsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                    }
                },
                "emailParsingFallback": {
                    "type": "string",
                    "description": "Can be `open_new_incident` or `discard`.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n"
                }
            },
            "required": [
                "emailFilterMode",
                "emailIncidentCreation",
                "emailParsingFallback",
                "htmlUrl",
                "integrationEmail",
                "integrationKey",
                "name",
                "service",
                "type",
                "vendor"
            ],
            "inputProperties": {
                "emailFilterMode": {
                    "type": "string",
                    "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                },
                "emailFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                    }
                },
                "emailIncidentCreation": {
                    "type": "string",
                    "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                },
                "emailParsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                    }
                },
                "emailParsingFallback": {
                    "type": "string",
                    "description": "Can be `open_new_incident` or `discard`.\n"
                },
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n"
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceIntegration resources.\n",
                "properties": {
                    "emailFilterMode": {
                        "type": "string",
                        "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                    },
                    "emailFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                        }
                    },
                    "emailIncidentCreation": {
                        "type": "string",
                        "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                    },
                    "emailParsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                        }
                    },
                    "emailParsingFallback": {
                        "type": "string",
                        "description": "Can be `open_new_incident` or `discard`.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "integrationEmail": {
                        "type": "string",
                        "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service integration.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The ID of the service the integration should belong to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/slackConnection:SlackConnection": {
            "description": "A [slack connection](https://developer.pagerduty.com/api-reference/YXBpOjExMjA5NTQ0-pager-duty-slack-integration-api) allows you to connect a workspace in Slack to a PagerDuty service or team which allows you to acknowledge and resolve PagerDuty incidents from the Slack user interface.\n\n**NOTES for using this resource:**\n* To first use this resource you will need to [map your PagerDuty account to a valid Slack Workspace](https://support.pagerduty.com/docs/slack-integration-guide#integration-walkthrough). *This can only be done through the PagerDuty UI.*\n* This resource requires a PagerDuty [user-level API key](https://support.pagerduty.com/docs/generating-api-keys#section-generating-a-personal-rest-api-key). This can be set as the `user_token` on the provider tag or as the `PAGERDUTY_USER_TOKEN` environment variable.\n* This resource is for configuring Slack V2 Next Generation connections. If you configured your Slack integration (V1 or V2) prior to August 10, 2021, you may migrate to the Slack V2 Next Generation update using this [migration instructions](https://support.pagerduty.com/docs/slack-integration-guide#migrate-to-slack-v2-next-generation), but if you configured your Slack integration after that date, you will have access to the update out of the box.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst fooTeam = new pagerduty.Team(\"fooTeam\", {});\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst fooSlackConnection = new pagerduty.SlackConnection(\"fooSlackConnection\", {\n    sourceId: fooTeam.id,\n    sourceType: \"team_reference\",\n    workspaceId: \"T02A123LV1A\",\n    channelId: \"C02CABCDAC9\",\n    notificationType: \"responder\",\n    configs: [{\n        events: [\n            \"incident.triggered\",\n            \"incident.acknowledged\",\n            \"incident.escalated\",\n            \"incident.resolved\",\n            \"incident.reassigned\",\n            \"incident.annotated\",\n            \"incident.unacknowledged\",\n            \"incident.delegated\",\n            \"incident.priority_updated\",\n            \"incident.responder.added\",\n            \"incident.responder.replied\",\n            \"incident.status_update_published\",\n            \"incident.reopened\",\n        ],\n        priorities: [p1.then(p1 =\u003e p1.id)],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo_team = pagerduty.Team(\"fooTeam\")\np1 = pagerduty.get_priority(name=\"P1\")\nfoo_slack_connection = pagerduty.SlackConnection(\"fooSlackConnection\",\n    source_id=foo_team.id,\n    source_type=\"team_reference\",\n    workspace_id=\"T02A123LV1A\",\n    channel_id=\"C02CABCDAC9\",\n    notification_type=\"responder\",\n    configs=[pagerduty.SlackConnectionConfigArgs(\n        events=[\n            \"incident.triggered\",\n            \"incident.acknowledged\",\n            \"incident.escalated\",\n            \"incident.resolved\",\n            \"incident.reassigned\",\n            \"incident.annotated\",\n            \"incident.unacknowledged\",\n            \"incident.delegated\",\n            \"incident.priority_updated\",\n            \"incident.responder.added\",\n            \"incident.responder.replied\",\n            \"incident.status_update_published\",\n            \"incident.reopened\",\n        ],\n        priorities=[p1.id],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooTeam = new Pagerduty.Team(\"fooTeam\", new Pagerduty.TeamArgs\n        {\n        });\n        var p1 = Output.Create(Pagerduty.GetPriority.InvokeAsync(new Pagerduty.GetPriorityArgs\n        {\n            Name = \"P1\",\n        }));\n        var fooSlackConnection = new Pagerduty.SlackConnection(\"fooSlackConnection\", new Pagerduty.SlackConnectionArgs\n        {\n            SourceId = fooTeam.Id,\n            SourceType = \"team_reference\",\n            WorkspaceId = \"T02A123LV1A\",\n            ChannelId = \"C02CABCDAC9\",\n            NotificationType = \"responder\",\n            Configs = \n            {\n                new Pagerduty.Inputs.SlackConnectionConfigArgs\n                {\n                    Events = \n                    {\n                        \"incident.triggered\",\n                        \"incident.acknowledged\",\n                        \"incident.escalated\",\n                        \"incident.resolved\",\n                        \"incident.reassigned\",\n                        \"incident.annotated\",\n                        \"incident.unacknowledged\",\n                        \"incident.delegated\",\n                        \"incident.priority_updated\",\n                        \"incident.responder.added\",\n                        \"incident.responder.replied\",\n                        \"incident.status_update_published\",\n                        \"incident.reopened\",\n                    },\n                    Priorities = \n                    {\n                        p1.Apply(p1 =\u003e p1.Id),\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooTeam, err := pagerduty.NewTeam(ctx, \"fooTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewSlackConnection(ctx, \"fooSlackConnection\", \u0026pagerduty.SlackConnectionArgs{\n\t\t\tSourceId:         fooTeam.ID(),\n\t\t\tSourceType:       pulumi.String(\"team_reference\"),\n\t\t\tWorkspaceId:      pulumi.String(\"T02A123LV1A\"),\n\t\t\tChannelId:        pulumi.String(\"C02CABCDAC9\"),\n\t\t\tNotificationType: pulumi.String(\"responder\"),\n\t\t\tConfigs: SlackConnectionConfigArray{\n\t\t\t\t\u0026SlackConnectionConfigArgs{\n\t\t\t\t\tEvents: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"incident.triggered\"),\n\t\t\t\t\t\tpulumi.String(\"incident.acknowledged\"),\n\t\t\t\t\t\tpulumi.String(\"incident.escalated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.resolved\"),\n\t\t\t\t\t\tpulumi.String(\"incident.reassigned\"),\n\t\t\t\t\t\tpulumi.String(\"incident.annotated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.unacknowledged\"),\n\t\t\t\t\t\tpulumi.String(\"incident.delegated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.priority_updated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.responder.added\"),\n\t\t\t\t\t\tpulumi.String(\"incident.responder.replied\"),\n\t\t\t\t\t\tpulumi.String(\"incident.status_update_published\"),\n\t\t\t\t\t\tpulumi.String(\"incident.reopened\"),\n\t\t\t\t\t},\n\t\t\t\t\tPriorities: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(p1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSlack connections can be imported using the related `workspace` ID and the `slack_connection` ID separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/slackConnection:SlackConnection main T02A123LV1A.PUABCDL\n```\n\n ",
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "The ID of a Slack channel in the workspace.\n"
                },
                "channelName": {
                    "type": "string"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                    },
                    "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                },
                "sourceName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                }
            },
            "required": [
                "channelId",
                "channelName",
                "configs",
                "notificationType",
                "sourceId",
                "sourceName",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "channelId": {
                    "type": "string",
                    "description": "The ID of a Slack channel in the workspace.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                    },
                    "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                }
            },
            "requiredInputs": [
                "channelId",
                "configs",
                "notificationType",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SlackConnection resources.\n",
                "properties": {
                    "channelId": {
                        "type": "string",
                        "description": "The ID of a Slack channel in the workspace.\n"
                    },
                    "channelName": {
                        "type": "string"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                        },
                        "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                    },
                    "notificationType": {
                        "type": "string",
                        "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                    },
                    "sourceName": {
                        "type": "string"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/tag:Tag": {
            "description": "A [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIxOA-create-a-tag) is applied to Escalation Policies, Teams or Users and can be used to filter them.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Tag(\"example\", {\n    label: \"Product\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Tag(\"example\", label=\"Product\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.Tag(\"example\", new Pagerduty.TagArgs\n        {\n            Label = \"Product\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewTag(ctx, \"example\", \u0026pagerduty.TagArgs{\n\t\t\tLabel: pulumi.String(\"Product\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTags can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/tag:Tag main PLBP09X\n```\n\n ",
            "properties": {
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the tag.\n"
                },
                "summary": {
                    "type": "string"
                }
            },
            "required": [
                "htmlUrl",
                "label",
                "summary"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "The label of the tag.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the tag.\n"
                    },
                    "summary": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/tagAssignment:TagAssignment": {
            "description": "A [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEwMA-assign-tags) is applied to Escalation Policies, Teams or Users and can be used to filter them.\n\n\n## Import\n\nTag assignments can be imported using the `id` which is constructed by taking the `entity` Type, `entity` ID and the `tag` ID separated by a dot, e.g.\n\n```sh\n $ pulumi import pagerduty:index/tagAssignment:TagAssignment main users.P7HHMVK.PYC7IQQ\n```\n\n ",
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the tag.\n"
                }
            },
            "required": [
                "entityId",
                "entityType",
                "tagId"
            ],
            "inputProperties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the tag.\n"
                }
            },
            "requiredInputs": [
                "entityId",
                "entityType",
                "tagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagAssignment resources.\n",
                "properties": {
                    "entityId": {
                        "type": "string",
                        "description": "The ID of the entity.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "The ID of the tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/team:Team": {
            "description": "A [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMg-create-a-team) is a collection of users and escalation policies that represent a group of people within an organization.\n\nThe account must have the `teams` ability to use the following resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst parent = new pagerduty.Team(\"parent\", {description: \"Product and Engineering\"});\nconst example = new pagerduty.Team(\"example\", {\n    description: \"All engineering\",\n    parent: parent.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nparent = pagerduty.Team(\"parent\", description=\"Product and Engineering\")\nexample = pagerduty.Team(\"example\",\n    description=\"All engineering\",\n    parent=parent.id)\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var parent = new Pagerduty.Team(\"parent\", new Pagerduty.TeamArgs\n        {\n            Description = \"Product and Engineering\",\n        });\n        var example = new Pagerduty.Team(\"example\", new Pagerduty.TeamArgs\n        {\n            Description = \"All engineering\",\n            Parent = parent.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparent, err := pagerduty.NewTeam(ctx, \"parent\", \u0026pagerduty.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Product and Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTeam(ctx, \"example\", \u0026pagerduty.TeamArgs{\n\t\t\tDescription: pulumi.String(\"All engineering\"),\n\t\t\tParent:      parent.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTeams can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/team:Team main PLBP09X\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                }
            },
            "required": [
                "description",
                "htmlUrl",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/teamMembership:TeamMembership": {
            "description": "A [team membership](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMg-add-a-user-to-a-team) manages memberships within a team.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst fooUser = new pagerduty.User(\"fooUser\", {email: \"foo@bar.com\"});\nconst fooTeam = new pagerduty.Team(\"fooTeam\", {description: \"foo\"});\nconst fooTeamMembership = new pagerduty.TeamMembership(\"fooTeamMembership\", {\n    userId: fooUser.id,\n    teamId: fooTeam.id,\n    role: \"manager\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo_user = pagerduty.User(\"fooUser\", email=\"foo@bar.com\")\nfoo_team = pagerduty.Team(\"fooTeam\", description=\"foo\")\nfoo_team_membership = pagerduty.TeamMembership(\"fooTeamMembership\",\n    user_id=foo_user.id,\n    team_id=foo_team.id,\n    role=\"manager\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooUser = new Pagerduty.User(\"fooUser\", new Pagerduty.UserArgs\n        {\n            Email = \"foo@bar.com\",\n        });\n        var fooTeam = new Pagerduty.Team(\"fooTeam\", new Pagerduty.TeamArgs\n        {\n            Description = \"foo\",\n        });\n        var fooTeamMembership = new Pagerduty.TeamMembership(\"fooTeamMembership\", new Pagerduty.TeamMembershipArgs\n        {\n            UserId = fooUser.Id,\n            TeamId = fooTeam.Id,\n            Role = \"manager\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooUser, err := pagerduty.NewUser(ctx, \"fooUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"foo@bar.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooTeam, err := pagerduty.NewTeam(ctx, \"fooTeam\", \u0026pagerduty.TeamArgs{\n\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTeamMembership(ctx, \"fooTeamMembership\", \u0026pagerduty.TeamMembershipArgs{\n\t\t\tUserId: fooUser.ID(),\n\t\t\tTeamId: fooTeam.ID(),\n\t\t\tRole:   pulumi.String(\"manager\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTeam memberships can be imported using the `user_id` and `team_id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/teamMembership:TeamMembership main PLBP09X:PLB09Z\n```\n\n ",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.  \nThese roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "required": [
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.  \nThese roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "requiredInputs": [
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembership resources.\n",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.  \nThese roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team in which the user will belong.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user to add to the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/user:User": {
            "description": "A [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzNA-create-a-user) is a member of a PagerDuty account that have the ability to interact with incidents and other data on the account.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\", email=\"125.greenholt.earline@graham.name\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.User(\"example\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/user:User main PLBP09X\n```\n\n ",
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the user's avatar.\n"
                },
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "invitationSent": {
                    "type": "boolean",
                    "description": "If true, the user has an outstanding invitation.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the user. Default is account default timezone.\n"
                }
            },
            "required": [
                "avatarUrl",
                "color",
                "description",
                "email",
                "htmlUrl",
                "invitationSent",
                "name",
                "teams",
                "timeZone"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the user. Default is account default timezone.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The URL of the user's avatar.\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "invitationSent": {
                        "type": "boolean",
                        "description": "If true, the user has an outstanding invitation.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user's title.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                        "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone of the user. Default is account default timezone.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userContactMethod:UserContactMethod": {
            "description": "A [contact method](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI0MA-create-a-user-contact-method) is a contact method for a PagerDuty user (email, phone or SMS).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team.example.id],\n});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    userId: example.id,\n    type: \"email_contact_method\",\n    address: \"foo@bar.com\",\n    label: \"Work\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    userId: example.id,\n    type: \"sms_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nemail = pagerduty.UserContactMethod(\"email\",\n    user_id=example.id,\n    type=\"email_contact_method\",\n    address=\"foo@bar.com\",\n    label=\"Work\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nsms = pagerduty.UserContactMethod(\"sms\",\n    user_id=example.id,\n    type=\"sms_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.User(\"example\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var email = new Pagerduty.UserContactMethod(\"email\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"email_contact_method\",\n            Address = \"foo@bar.com\",\n            Label = \"Work\",\n        });\n        var phone = new Pagerduty.UserContactMethod(\"phone\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"phone_contact_method\",\n            CountryCode = 1,\n            Address = \"2025550199\",\n            Label = \"Work\",\n        });\n        var sms = new Pagerduty.UserContactMethod(\"sms\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"sms_contact_method\",\n            CountryCode = 1,\n            Address = \"2025550199\",\n            Label = \"Work\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"email\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:  example.ID(),\n\t\t\tType:    pulumi.String(\"email_contact_method\"),\n\t\t\tAddress: pulumi.String(\"foo@bar.com\"),\n\t\t\tLabel:   pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"phone\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"phone_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"sms\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"sms_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContact methods can be imported using the `user_id` and the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/userContactMethod:UserContactMethod main PLBP09X:PLBP09X\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "blacklisted": {
                    "type": "boolean",
                    "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If true, this phone is capable of receiving SMS messages.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "address",
                "blacklisted",
                "enabled",
                "label",
                "type",
                "userId"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "address",
                "label",
                "type",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserContactMethod resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                    },
                    "countryCode": {
                        "type": "integer",
                        "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If true, this phone is capable of receiving SMS messages.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                    },
                    "sendShortEmail": {
                        "type": "boolean",
                        "description": "Send an abbreviated email message instead of the standard email output.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userNotificationRule:UserNotificationRule": {
            "description": "A [notification rule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI0NQ-create-a-user-notification-rule) configures where and when a PagerDuty user is notified when a triggered incident is assigned to them. Unique notification rules can be created for both high and low-urgency incidents.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {email: \"125.greenholt.earline@graham.name\"});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    userId: example.id,\n    type: \"email_contact_method\",\n    address: \"foo@bar.com\",\n    label: \"Work\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    userId: example.id,\n    type: \"sms_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst highUrgencyPhone = new pagerduty.UserNotificationRule(\"highUrgencyPhone\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"high\",\n    contactMethod: {\n        type: \"phone_contact_method\",\n        id: phone.id,\n    },\n});\nconst lowUrgencyEmail = new pagerduty.UserNotificationRule(\"lowUrgencyEmail\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"email_contact_method\",\n        id: email.id,\n    },\n});\nconst lowUrgencySms = new pagerduty.UserNotificationRule(\"lowUrgencySms\", {\n    userId: example.id,\n    startDelayInMinutes: 10,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"sms_contact_method\",\n        id: sms.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\", email=\"125.greenholt.earline@graham.name\")\nemail = pagerduty.UserContactMethod(\"email\",\n    user_id=example.id,\n    type=\"email_contact_method\",\n    address=\"foo@bar.com\",\n    label=\"Work\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nsms = pagerduty.UserContactMethod(\"sms\",\n    user_id=example.id,\n    type=\"sms_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nhigh_urgency_phone = pagerduty.UserNotificationRule(\"highUrgencyPhone\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"high\",\n    contact_method={\n        \"type\": \"phone_contact_method\",\n        \"id\": phone.id,\n    })\nlow_urgency_email = pagerduty.UserNotificationRule(\"lowUrgencyEmail\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"email_contact_method\",\n        \"id\": email.id,\n    })\nlow_urgency_sms = pagerduty.UserNotificationRule(\"lowUrgencySms\",\n    user_id=example.id,\n    start_delay_in_minutes=10,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"sms_contact_method\",\n        \"id\": sms.id,\n    })\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Pagerduty.User(\"example\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n        });\n        var email = new Pagerduty.UserContactMethod(\"email\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"email_contact_method\",\n            Address = \"foo@bar.com\",\n            Label = \"Work\",\n        });\n        var phone = new Pagerduty.UserContactMethod(\"phone\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"phone_contact_method\",\n            CountryCode = 1,\n            Address = \"2025550199\",\n            Label = \"Work\",\n        });\n        var sms = new Pagerduty.UserContactMethod(\"sms\", new Pagerduty.UserContactMethodArgs\n        {\n            UserId = example.Id,\n            Type = \"sms_contact_method\",\n            CountryCode = 1,\n            Address = \"2025550199\",\n            Label = \"Work\",\n        });\n        var highUrgencyPhone = new Pagerduty.UserNotificationRule(\"highUrgencyPhone\", new Pagerduty.UserNotificationRuleArgs\n        {\n            UserId = example.Id,\n            StartDelayInMinutes = 1,\n            Urgency = \"high\",\n            ContactMethod = \n            {\n                { \"type\", \"phone_contact_method\" },\n                { \"id\", phone.Id },\n            },\n        });\n        var lowUrgencyEmail = new Pagerduty.UserNotificationRule(\"lowUrgencyEmail\", new Pagerduty.UserNotificationRuleArgs\n        {\n            UserId = example.Id,\n            StartDelayInMinutes = 1,\n            Urgency = \"low\",\n            ContactMethod = \n            {\n                { \"type\", \"email_contact_method\" },\n                { \"id\", email.Id },\n            },\n        });\n        var lowUrgencySms = new Pagerduty.UserNotificationRule(\"lowUrgencySms\", new Pagerduty.UserNotificationRuleArgs\n        {\n            UserId = example.Id,\n            StartDelayInMinutes = 10,\n            Urgency = \"low\",\n            ContactMethod = \n            {\n                { \"type\", \"sms_contact_method\" },\n                { \"id\", sms.Id },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temail, err := pagerduty.NewUserContactMethod(ctx, \"email\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:  example.ID(),\n\t\t\tType:    pulumi.String(\"email_contact_method\"),\n\t\t\tAddress: pulumi.String(\"foo@bar.com\"),\n\t\t\tLabel:   pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tphone, err := pagerduty.NewUserContactMethod(ctx, \"phone\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"phone_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsms, err := pagerduty.NewUserContactMethod(ctx, \"sms\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"sms_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"highUrgencyPhone\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(1),\n\t\t\tUrgency:             pulumi.String(\"high\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"phone_contact_method\"),\n\t\t\t\t\"id\":   phone.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"lowUrgencyEmail\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(1),\n\t\t\tUrgency:             pulumi.String(\"low\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"email_contact_method\"),\n\t\t\t\t\"id\":   email.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"lowUrgencySms\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(10),\n\t\t\tUrgency:             pulumi.String(\"low\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"sms_contact_method\"),\n\t\t\t\t\"id\":   sms.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUser notification rules can be imported using the `user_id` and the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/userNotificationRule:UserNotificationRule main PXPGF42:PPSCXAN\n```\n\n ",
            "properties": {
                "contactMethod": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "inputProperties": {
                "contactMethod": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserNotificationRule resources.\n",
                "properties": {
                    "contactMethod": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A contact method block, configured as a block described below.\n"
                    },
                    "startDelayInMinutes": {
                        "type": "integer",
                        "description": "The delay before firing the rule, in minutes.\n"
                    },
                    "urgency": {
                        "type": "string",
                        "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/webhookSubscription:WebhookSubscription": {
            "description": "A [webhook subscription](https://developer.pagerduty.com/docs/ZG9jOjExMDI5NTkw-v3-overview) allow you to receive HTTP callbacks when incidents are created, updated and deleted. These are also known as V3 Webhooks.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getService({\n    name: \"My Service\",\n});\nconst foo = new pagerduty.WebhookSubscription(\"foo\", {\n    deliveryMethods: [{\n        type: \"http_delivery_method\",\n        url: \"https://example.com/receive_a_pagerduty_webhook\",\n        customHeaders: [\n            {\n                name: \"X-Foo\",\n                value: \"foo\",\n            },\n            {\n                name: \"X-Bar\",\n                value: \"bar\",\n            },\n        ],\n    }],\n    description: `%s`,\n    events: [\n        \"incident.acknowledged\",\n        \"incident.annotated\",\n        \"incident.delegated\",\n        \"incident.escalated\",\n        \"incident.priority_updated\",\n        \"incident.reassigned\",\n        \"incident.reopened\",\n        \"incident.resolved\",\n        \"incident.responder.added\",\n        \"incident.responder.replied\",\n        \"incident.status_update_published\",\n        \"incident.triggered\",\n        \"incident.unacknowledged\",\n    ],\n    active: true,\n    filters: [{\n        id: example.then(example =\u003e example.id),\n        type: \"service_reference\",\n    }],\n    type: \"webhook_subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service(name=\"My Service\")\nfoo = pagerduty.WebhookSubscription(\"foo\",\n    delivery_methods=[pagerduty.WebhookSubscriptionDeliveryMethodArgs(\n        type=\"http_delivery_method\",\n        url=\"https://example.com/receive_a_pagerduty_webhook\",\n        custom_headers=[\n            pagerduty.WebhookSubscriptionDeliveryMethodCustomHeaderArgs(\n                name=\"X-Foo\",\n                value=\"foo\",\n            ),\n            pagerduty.WebhookSubscriptionDeliveryMethodCustomHeaderArgs(\n                name=\"X-Bar\",\n                value=\"bar\",\n            ),\n        ],\n    )],\n    description=\"%s\",\n    events=[\n        \"incident.acknowledged\",\n        \"incident.annotated\",\n        \"incident.delegated\",\n        \"incident.escalated\",\n        \"incident.priority_updated\",\n        \"incident.reassigned\",\n        \"incident.reopened\",\n        \"incident.resolved\",\n        \"incident.responder.added\",\n        \"incident.responder.replied\",\n        \"incident.status_update_published\",\n        \"incident.triggered\",\n        \"incident.unacknowledged\",\n    ],\n    active=True,\n    filters=[pagerduty.WebhookSubscriptionFilterArgs(\n        id=example.id,\n        type=\"service_reference\",\n    )],\n    type=\"webhook_subscription\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Pagerduty.GetService.InvokeAsync(new Pagerduty.GetServiceArgs\n        {\n            Name = \"My Service\",\n        }));\n        var foo = new Pagerduty.WebhookSubscription(\"foo\", new Pagerduty.WebhookSubscriptionArgs\n        {\n            DeliveryMethods = \n            {\n                new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodArgs\n                {\n                    Type = \"http_delivery_method\",\n                    Url = \"https://example.com/receive_a_pagerduty_webhook\",\n                    CustomHeaders = \n                    {\n                        new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodCustomHeaderArgs\n                        {\n                            Name = \"X-Foo\",\n                            Value = \"foo\",\n                        },\n                        new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodCustomHeaderArgs\n                        {\n                            Name = \"X-Bar\",\n                            Value = \"bar\",\n                        },\n                    },\n                },\n            },\n            Description = \"%s\",\n            Events = \n            {\n                \"incident.acknowledged\",\n                \"incident.annotated\",\n                \"incident.delegated\",\n                \"incident.escalated\",\n                \"incident.priority_updated\",\n                \"incident.reassigned\",\n                \"incident.reopened\",\n                \"incident.resolved\",\n                \"incident.responder.added\",\n                \"incident.responder.replied\",\n                \"incident.status_update_published\",\n                \"incident.triggered\",\n                \"incident.unacknowledged\",\n            },\n            Active = true,\n            Filters = \n            {\n                new Pagerduty.Inputs.WebhookSubscriptionFilterArgs\n                {\n                    Id = example.Apply(example =\u003e example.Id),\n                    Type = \"service_reference\",\n                },\n            },\n            Type = \"webhook_subscription\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupService(ctx, \u0026GetServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewWebhookSubscription(ctx, \"foo\", \u0026pagerduty.WebhookSubscriptionArgs{\n\t\t\tDeliveryMethods: WebhookSubscriptionDeliveryMethodArray{\n\t\t\t\t\u0026WebhookSubscriptionDeliveryMethodArgs{\n\t\t\t\t\tType: pulumi.String(\"http_delivery_method\"),\n\t\t\t\t\tUrl:  pulumi.String(\"https://example.com/receive_a_pagerduty_webhook\"),\n\t\t\t\t\tCustomHeaders: WebhookSubscriptionDeliveryMethodCustomHeaderArray{\n\t\t\t\t\t\t\u0026WebhookSubscriptionDeliveryMethodCustomHeaderArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"X-Foo\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026WebhookSubscriptionDeliveryMethodCustomHeaderArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"X-Bar\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(fmt.Sprintf(\"%v%v\", \"%\", \"s\")),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"incident.acknowledged\"),\n\t\t\t\tpulumi.String(\"incident.annotated\"),\n\t\t\t\tpulumi.String(\"incident.delegated\"),\n\t\t\t\tpulumi.String(\"incident.escalated\"),\n\t\t\t\tpulumi.String(\"incident.priority_updated\"),\n\t\t\t\tpulumi.String(\"incident.reassigned\"),\n\t\t\t\tpulumi.String(\"incident.reopened\"),\n\t\t\t\tpulumi.String(\"incident.resolved\"),\n\t\t\t\tpulumi.String(\"incident.responder.added\"),\n\t\t\t\tpulumi.String(\"incident.responder.replied\"),\n\t\t\t\tpulumi.String(\"incident.status_update_published\"),\n\t\t\t\tpulumi.String(\"incident.triggered\"),\n\t\t\t\tpulumi.String(\"incident.unacknowledged\"),\n\t\t\t},\n\t\t\tActive: pulumi.Bool(true),\n\t\t\tFilters: WebhookSubscriptionFilterArray{\n\t\t\t\t\u0026WebhookSubscriptionFilterArgs{\n\t\t\t\t\tId:   pulumi.String(example.Id),\n\t\t\t\t\tType: pulumi.String(\"service_reference\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"webhook_subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nWebhook Subscriptions can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import pagerduty:index/webhookSubscription:WebhookSubscription main PUABCDL\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Determines whether the subscription will produce webhook events.\n"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                    },
                    "description": "The object describing where to send the webhooks.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the webhook subscription\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of outbound event types the webhook will receive. The follow event types are possible: \n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                    },
                    "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                }
            },
            "required": [
                "active",
                "deliveryMethods",
                "events",
                "filters"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Determines whether the subscription will produce webhook events.\n"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                    },
                    "description": "The object describing where to send the webhooks.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the webhook subscription\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of outbound event types the webhook will receive. The follow event types are possible: \n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                    },
                    "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                }
            },
            "requiredInputs": [
                "deliveryMethods",
                "events",
                "filters"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookSubscription resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Determines whether the subscription will produce webhook events.\n"
                    },
                    "deliveryMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                        },
                        "description": "The object describing where to send the webhooks.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the webhook subscription\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of outbound event types the webhook will receive. The follow event types are possible: \n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                        },
                        "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pagerduty:index/getBusinessService:getBusinessService": {
            "description": "Use this data source to get information about a specific [business service][1].\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pulumi.output(pagerduty.getBusinessService({\n    name: \"My Service\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_business_service(name=\"My Service\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Pagerduty.GetBusinessService.InvokeAsync(new Pagerduty.GetBusinessServiceArgs\n        {\n            Name = \"My Service\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupBusinessService(ctx, \u0026GetBusinessServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBusinessService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The business service name to use to find a business service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBusinessService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found business service.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `business_service`. Can be used for passing to a service dependency.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "pagerduty:index/getEscalationPolicy:getEscalationPolicy": {
            "description": "Use this data source to get information about a specific [escalation policy](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEyNA-list-escalation-policies) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst testEscalationPolicy = pagerduty.getEscalationPolicy({\n    name: \"Engineering Escalation Policy\",\n});\nconst testService = new pagerduty.Service(\"testService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: testEscalationPolicy.then(testEscalationPolicy =\u003e testEscalationPolicy.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest_escalation_policy = pagerduty.get_escalation_policy(name=\"Engineering Escalation Policy\")\ntest_service = pagerduty.Service(\"testService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=test_escalation_policy.id)\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testEscalationPolicy = Output.Create(Pagerduty.GetEscalationPolicy.InvokeAsync(new Pagerduty.GetEscalationPolicyArgs\n        {\n            Name = \"Engineering Escalation Policy\",\n        }));\n        var testService = new Pagerduty.Service(\"testService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = testEscalationPolicy.Apply(testEscalationPolicy =\u003e testEscalationPolicy.Id),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestEscalationPolicy, err := pagerduty.LookupEscalationPolicy(ctx, \u0026GetEscalationPolicyArgs{\n\t\t\tName: \"Engineering Escalation Policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewService(ctx, \"testService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.String(testEscalationPolicy.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEscalationPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find an escalation policy in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEscalationPolicy.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found escalation policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getEventOrchestration:getEventOrchestration": {
            "description": "Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestration.\n",
                "properties": {
                    "integrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegration:getEventOrchestrationIntegration"
                        },
                        "description": "An integration for the Event Orchestration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Global Event orchestration to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegration:getEventOrchestrationIntegration"
                        },
                        "description": "An integration for the Event Orchestration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found Event Orchestration.\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrations",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getExtensionSchema:getExtensionSchema": {
            "description": "Use this data source to get information about a specific [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMA-list-extension-schemas) vendor that you can use for a service (e.g: Slack, Generic Webhook, ServiceNow).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"howard.james@example.domain\",\n    teams: [pagerduty_team.example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: pagerduty_escalation_policy.example.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionSchema: webhook.then(webhook =\u003e webhook.id),\n    extensionObjects: [exampleService.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"howard.james@example.domain\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nslack = pagerduty.Extension(\"slack\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_schema=webhook.id,\n    extension_objects=[example_service.id])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webhook = Output.Create(Pagerduty.GetExtensionSchema.InvokeAsync(new Pagerduty.GetExtensionSchemaArgs\n        {\n            Name = \"Generic V2 Webhook\",\n        }));\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"howard.james@example.domain\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = pagerduty_escalation_policy.Example.Id,\n        });\n        var slack = new Pagerduty.Extension(\"slack\", new Pagerduty.ExtensionArgs\n        {\n            EndpointUrl = \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n            ExtensionSchema = webhook.Apply(webhook =\u003e webhook.Id),\n            ExtensionObjects = \n            {\n                exampleService.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebhook, err := pagerduty.GetExtensionSchema(ctx, \u0026GetExtensionSchemaArgs{\n\t\t\tName: \"Generic V2 Webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtension(ctx, \"slack\", \u0026pagerduty.ExtensionArgs{\n\t\t\tEndpointUrl:     pulumi.String(\"https://generic_webhook_url/XXXXXX/BBBBBB\"),\n\t\t\tExtensionSchema: pulumi.String(webhook.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getExtensionSchema.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The extension name to use to find an extension vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExtensionSchema.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found extension vendor.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The generic service type for this extension vendor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "pagerduty:index/getPriority:getPriority": {
            "description": "Use this data source to get information about a specific [priority](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE2NA-list-priorities) that you can use for other PagerDuty resources. A priority is a label representing the importance and impact of an incident. This feature is only available on Standard and Enterprise plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst fooRuleset = new pagerduty.Ruleset(\"fooRuleset\", {});\nconst fooRulesetRule = new pagerduty.RulesetRule(\"fooRulesetRule\", {\n    ruleset: fooRuleset.id,\n    position: 0,\n    disabled: false,\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions: {\n        routes: [{\n            value: \"P5DTL0K\",\n        }],\n        priorities: [{\n            value: p1.then(p1 =\u003e p1.id),\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\np1 = pagerduty.get_priority(name=\"P1\")\nfoo_ruleset = pagerduty.Ruleset(\"fooRuleset\")\nfoo_ruleset_rule = pagerduty.RulesetRule(\"fooRulesetRule\",\n    ruleset=foo_ruleset.id,\n    position=0,\n    disabled=False,\n    conditions=pagerduty.RulesetRuleConditionsArgs(\n        operator=\"and\",\n        subconditions=[\n            pagerduty.RulesetRuleConditionsSubconditionArgs(\n                operator=\"contains\",\n                parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(\n                    value=\"disk space\",\n                    path=\"payload.summary\",\n                )],\n            ),\n            pagerduty.RulesetRuleConditionsSubconditionArgs(\n                operator=\"contains\",\n                parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(\n                    value=\"db\",\n                    path=\"payload.source\",\n                )],\n            ),\n        ],\n    ),\n    actions=pagerduty.RulesetRuleActionsArgs(\n        routes=[pagerduty.RulesetRuleActionsRouteArgs(\n            value=\"P5DTL0K\",\n        )],\n        priorities=[pagerduty.RulesetRuleActionsPriorityArgs(\n            value=p1.id,\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var p1 = Output.Create(Pagerduty.GetPriority.InvokeAsync(new Pagerduty.GetPriorityArgs\n        {\n            Name = \"P1\",\n        }));\n        var fooRuleset = new Pagerduty.Ruleset(\"fooRuleset\", new Pagerduty.RulesetArgs\n        {\n        });\n        var fooRulesetRule = new Pagerduty.RulesetRule(\"fooRulesetRule\", new Pagerduty.RulesetRuleArgs\n        {\n            Ruleset = fooRuleset.Id,\n            Position = 0,\n            Disabled = false,\n            Conditions = new Pagerduty.Inputs.RulesetRuleConditionsArgs\n            {\n                Operator = \"and\",\n                Subconditions = \n                {\n                    new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"disk space\",\n                                Path = \"payload.summary\",\n                            },\n                        },\n                    },\n                    new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"db\",\n                                Path = \"payload.source\",\n                            },\n                        },\n                    },\n                },\n            },\n            Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n            {\n                Routes = \n                {\n                    new Pagerduty.Inputs.RulesetRuleActionsRouteArgs\n                    {\n                        Value = \"P5DTL0K\",\n                    },\n                },\n                Priorities = \n                {\n                    new Pagerduty.Inputs.RulesetRuleActionsPriorityArgs\n                    {\n                        Value = p1.Apply(p1 =\u003e p1.Id),\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooRuleset, err := pagerduty.NewRuleset(ctx, \"fooRuleset\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"fooRulesetRule\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  fooRuleset.ID(),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tConditions: \u0026RulesetRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: RulesetRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"db\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026RulesetRuleActionsArgs{\n\t\t\t\tRoutes: RulesetRuleActionsRouteArray{\n\t\t\t\t\t\u0026RulesetRuleActionsRouteArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"P5DTL0K\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPriorities: RulesetRuleActionsPriorityArray{\n\t\t\t\t\t\u0026RulesetRuleActionsPriorityArgs{\n\t\t\t\t\t\tValue: pulumi.String(p1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPriority.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the priority to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPriority.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the found priority.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found priority.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getRuleset:getRuleset": {
            "description": "Use this data source to get information about a specific [ruleset](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE3MQ-list-rulesets) that you can use for managing and grouping [event rules](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE3Ng-list-event-rules).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getRuleset({\n    name: \"My Ruleset\",\n});\nconst foo = new pagerduty.RulesetRule(\"foo\", {\n    ruleset: example.then(example =\u003e example.id),\n    position: 0,\n    disabled: false,\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions: {\n        routes: [{\n            value: \"P5DTL0K\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_ruleset(name=\"My Ruleset\")\nfoo = pagerduty.RulesetRule(\"foo\",\n    ruleset=example.id,\n    position=0,\n    disabled=False,\n    conditions=pagerduty.RulesetRuleConditionsArgs(\n        operator=\"and\",\n        subconditions=[\n            pagerduty.RulesetRuleConditionsSubconditionArgs(\n                operator=\"contains\",\n                parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(\n                    value=\"disk space\",\n                    path=\"payload.summary\",\n                )],\n            ),\n            pagerduty.RulesetRuleConditionsSubconditionArgs(\n                operator=\"contains\",\n                parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(\n                    value=\"db\",\n                    path=\"payload.source\",\n                )],\n            ),\n        ],\n    ),\n    actions=pagerduty.RulesetRuleActionsArgs(\n        routes=[pagerduty.RulesetRuleActionsRouteArgs(\n            value=\"P5DTL0K\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Pagerduty.GetRuleset.InvokeAsync(new Pagerduty.GetRulesetArgs\n        {\n            Name = \"My Ruleset\",\n        }));\n        var foo = new Pagerduty.RulesetRule(\"foo\", new Pagerduty.RulesetRuleArgs\n        {\n            Ruleset = example.Apply(example =\u003e example.Id),\n            Position = 0,\n            Disabled = false,\n            Conditions = new Pagerduty.Inputs.RulesetRuleConditionsArgs\n            {\n                Operator = \"and\",\n                Subconditions = \n                {\n                    new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"disk space\",\n                                Path = \"payload.summary\",\n                            },\n                        },\n                    },\n                    new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                    {\n                        Operator = \"contains\",\n                        Parameters = \n                        {\n                            new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                            {\n                                Value = \"db\",\n                                Path = \"payload.source\",\n                            },\n                        },\n                    },\n                },\n            },\n            Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n            {\n                Routes = \n                {\n                    new Pagerduty.Inputs.RulesetRuleActionsRouteArgs\n                    {\n                        Value = \"P5DTL0K\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupRuleset(ctx, \u0026GetRulesetArgs{\n\t\t\tName: \"My Ruleset\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"foo\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  pulumi.String(example.Id),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tConditions: \u0026RulesetRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: RulesetRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"db\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026RulesetRuleActionsArgs{\n\t\t\t\tRoutes: RulesetRuleActionsRouteArray{\n\t\t\t\t\t\u0026RulesetRuleActionsRouteArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"P5DTL0K\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Default Global Ruleset\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst defaultGlobal = pulumi.output(pagerduty.getRuleset({\n    name: \"Default Global\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndefault_global = pagerduty.get_ruleset(name=\"Default Global\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultGlobal = Output.Create(Pagerduty.GetRuleset.InvokeAsync(new Pagerduty.GetRulesetArgs\n        {\n            Name = \"Default Global\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupRuleset(ctx, \u0026GetRulesetArgs{\n\t\t\tName: \"Default Global\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRuleset.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ruleset to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRuleset.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found ruleset.\n"
                    },
                    "routingKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Routing keys routed to this ruleset.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "routingKeys",
                    "id"
                ]
            }
        },
        "pagerduty:index/getSchedule:getSchedule": {
            "description": "Use this data source to get information about a specific [schedule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE4MQ-list-schedules) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst test = pagerduty.getSchedule({\n    name: \"Daily Engineering Rotation\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"schedule\",\n            id: test.then(test =\u003e test.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest = pagerduty.get_schedule(name=\"Daily Engineering Rotation\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"schedule\",\n            id=test.id,\n        )],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Pagerduty.GetSchedule.InvokeAsync(new Pagerduty.GetScheduleArgs\n        {\n            Name = \"Daily Engineering Rotation\",\n        }));\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"schedule\",\n                            Id = test.Apply(test =\u003e test.Id),\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pagerduty.LookupSchedule(ctx, \u0026GetScheduleArgs{\n\t\t\tName: \"Daily Engineering Rotation\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"schedule\"),\n\t\t\t\t\t\t\tId:   pulumi.String(test.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find a schedule in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchedule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found schedule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getService:getService": {
            "description": "Use this data source to get information about a specific [service](https://api-reference.pagerduty.com/#!/Services/get_services).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleService = pagerduty.getService({\n    name: \"My Service\",\n});\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"exampleServiceIntegration\", {\n    vendor: datadog.then(datadog =\u003e datadog.id),\n    service: exampleService.then(exampleService =\u003e exampleService.id),\n    type: \"generic_events_api_inbound_integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_service = pagerduty.get_service(name=\"My Service\")\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    vendor=datadog.id,\n    service=example_service.id,\n    type=\"generic_events_api_inbound_integration\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleService = Output.Create(Pagerduty.GetService.InvokeAsync(new Pagerduty.GetServiceArgs\n        {\n            Name = \"My Service\",\n        }));\n        var datadog = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs\n        {\n            Name = \"Datadog\",\n        }));\n        var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"exampleServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Vendor = datadog.Apply(datadog =\u003e datadog.Id),\n            Service = exampleService.Apply(exampleService =\u003e exampleService.Id),\n            Type = \"generic_events_api_inbound_integration\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleService, err := pagerduty.LookupService(ctx, \u0026GetServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatadog, err := pagerduty.GetVendor(ctx, \u0026GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"exampleServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tVendor:  pulumi.String(datadog.Id),\n\t\t\tService: pulumi.String(exampleService.Id),\n\t\t\tType:    pulumi.String(\"generic_events_api_inbound_integration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The service name to use to find a service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found service.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "pagerduty:index/getServiceIntegration:getServiceIntegration": {
            "description": "Use this data source to get information about a specific service_integration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pulumi.output(pagerduty.getServiceIntegration({\n    integrationSummary: \"Datadog\",\n    serviceName: \"My Service\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service_integration(integration_summary=\"Datadog\",\n    service_name=\"My Service\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Pagerduty.GetServiceIntegration.InvokeAsync(new Pagerduty.GetServiceIntegrationArgs\n        {\n            IntegrationSummary = \"Datadog\",\n            ServiceName = \"My Service\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupServiceIntegration(ctx, \u0026GetServiceIntegrationArgs{\n\t\t\tIntegrationSummary: \"Datadog\",\n\t\t\tServiceName:        \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceIntegration.\n",
                "properties": {
                    "integrationSummary": {
                        "type": "string",
                        "description": "The integration summary used to find the desired integration on the service.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name to use to find a service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationSummary",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "The integration key for the integration. This can be used to configure alerts.\n"
                    },
                    "integrationSummary": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "integrationKey",
                    "integrationSummary",
                    "serviceName",
                    "id"
                ]
            }
        },
        "pagerduty:index/getTag:getTag": {
            "description": "Use this data source to get information about a specific [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIxNw-list-tags) that you can use to assign to users, teams, and escalation_policies.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst devops = pagerduty.getTag({\n    label: \"devops\",\n});\nconst foo = new pagerduty.TagAssignment(\"foo\", {\n    tagId: devops.then(devops =\u003e devops.id),\n    entityId: me.then(me =\u003e me.id),\n    entityType: \"users\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\ndevops = pagerduty.get_tag(label=\"devops\")\nfoo = pagerduty.TagAssignment(\"foo\",\n    tag_id=devops.id,\n    entity_id=me.id,\n    entity_type=\"users\")\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var me = Output.Create(Pagerduty.GetUser.InvokeAsync(new Pagerduty.GetUserArgs\n        {\n            Email = \"me@example.com\",\n        }));\n        var devops = Output.Create(Pagerduty.GetTag.InvokeAsync(new Pagerduty.GetTagArgs\n        {\n            Label = \"devops\",\n        }));\n        var foo = new Pagerduty.TagAssignment(\"foo\", new Pagerduty.TagAssignmentArgs\n        {\n            TagId = devops.Apply(devops =\u003e devops.Id),\n            EntityId = me.Apply(me =\u003e me.Id),\n            EntityType = \"users\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevops, err := pagerduty.LookupTag(ctx, \u0026GetTagArgs{\n\t\t\tLabel: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTagAssignment(ctx, \"foo\", \u0026pagerduty.TagAssignmentArgs{\n\t\t\tTagId:      pulumi.String(devops.Id),\n\t\t\tEntityId:   pulumi.String(me.Id),\n\t\t\tEntityType: pulumi.String(\"users\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label of the tag to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "id"
                ]
            }
        },
        "pagerduty:index/getTeam:getTeam": {
            "description": "Use this data source to get information about a specific [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMw-list-teams) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst devops = pagerduty.getTeam({\n    name: \"devops\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    teams: [devops.then(devops =\u003e devops.id)],\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: me.then(me =\u003e me.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\ndevops = pagerduty.get_team(name=\"devops\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    teams=[devops.id],\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=me.id,\n        )],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var me = Output.Create(Pagerduty.GetUser.InvokeAsync(new Pagerduty.GetUserArgs\n        {\n            Email = \"me@example.com\",\n        }));\n        var devops = Output.Create(Pagerduty.GetTeam.InvokeAsync(new Pagerduty.GetTeamArgs\n        {\n            Name = \"devops\",\n        }));\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Teams = \n            {\n                devops.Apply(devops =\u003e devops.Id),\n            },\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = me.Apply(me =\u003e me.Id),\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevops, err := pagerduty.LookupTeam(ctx, \u0026GetTeamArgs{\n\t\t\tName: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tTeams: pulumi.String{\n\t\t\t\tdevops.Id,\n\t\t\t},\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   pulumi.String(me.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the team to find in the PagerDuty API.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the found team.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found team.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getUser:getUser": {
            "description": "Use this data source to get information about a specific [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: me.then(me =\u003e me.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=me.id,\n        )],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var me = Output.Create(Pagerduty.GetUser.InvokeAsync(new Pagerduty.GetUserArgs\n        {\n            Email = \"me@example.com\",\n        }));\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = me.Apply(me =\u003e me.Id),\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   pulumi.String(me.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email to use to find a user in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getUserContactMethod:getUserContactMethod": {
            "description": "Use this data source to get information about a specific [contact method](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzOQ-list-a-user-s-contact-methods) of a PagerDuty [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst phonePush = me.then(me =\u003e pagerduty.getUserContactMethod({\n    userId: me.id,\n    type: \"push_notification_contact_method\",\n    label: \"iPhone (John)\",\n}));\nconst lowUrgencySms = new pagerduty.UserNotificationRule(\"lowUrgencySms\", {\n    userId: me.then(me =\u003e me.id),\n    startDelayInMinutes: 5,\n    urgency: \"high\",\n    contactMethod: {\n        type: \"push_notification_contact_method\",\n        id: phonePush.then(phonePush =\u003e phonePush.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\nphone_push = pagerduty.get_user_contact_method(user_id=me.id,\n    type=\"push_notification_contact_method\",\n    label=\"iPhone (John)\")\nlow_urgency_sms = pagerduty.UserNotificationRule(\"lowUrgencySms\",\n    user_id=me.id,\n    start_delay_in_minutes=5,\n    urgency=\"high\",\n    contact_method={\n        \"type\": \"push_notification_contact_method\",\n        \"id\": phone_push.id,\n    })\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var me = Output.Create(Pagerduty.GetUser.InvokeAsync(new Pagerduty.GetUserArgs\n        {\n            Email = \"me@example.com\",\n        }));\n        var phonePush = me.Apply(me =\u003e Output.Create(Pagerduty.GetUserContactMethod.InvokeAsync(new Pagerduty.GetUserContactMethodArgs\n        {\n            UserId = me.Id,\n            Type = \"push_notification_contact_method\",\n            Label = \"iPhone (John)\",\n        })));\n        var lowUrgencySms = new Pagerduty.UserNotificationRule(\"lowUrgencySms\", new Pagerduty.UserNotificationRuleArgs\n        {\n            UserId = me.Apply(me =\u003e me.Id),\n            StartDelayInMinutes = 5,\n            Urgency = \"high\",\n            ContactMethod = \n            {\n                { \"type\", \"push_notification_contact_method\" },\n                { \"id\", phonePush.Apply(phonePush =\u003e phonePush.Id) },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tphonePush, err := pagerduty.LookupUserContactMethod(ctx, \u0026GetUserContactMethodArgs{\n\t\t\tUserId: me.Id,\n\t\t\tType:   \"push_notification_contact_method\",\n\t\t\tLabel:  \"iPhone (John)\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"lowUrgencySms\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              pulumi.String(me.Id),\n\t\t\tStartDelayInMinutes: pulumi.Int(5),\n\t\t\tUrgency:             pulumi.String(\"high\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"push_notification_contact_method\"),\n\t\t\t\t\"id\":   pulumi.String(phonePush.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserContactMethod.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", \"Ashley's iPhone\", etc.).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "type",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserContactMethod.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)\n"
                    },
                    "countryCode": {
                        "type": "integer",
                        "description": "The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", \"Ashley's iPhone\", etc.).\n"
                    },
                    "sendShortEmail": {
                        "type": "boolean",
                        "description": "Send an abbreviated email message instead of the standard email output. (Email contact method only.)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the found contact method. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "blacklisted",
                    "countryCode",
                    "deviceType",
                    "enabled",
                    "label",
                    "sendShortEmail",
                    "type",
                    "userId",
                    "id"
                ]
            }
        },
        "pagerduty:index/getVendor:getVendor": {
            "description": "Use this data source to get information about a specific [vendor](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI1OQ-list-vendors) that you can use for a service integration (e.g. Amazon Cloudwatch, Splunk, Datadog).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst exampleUser = new pagerduty.User(\"exampleUser\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team.example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: exampleUser.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"exampleService\", {\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: pagerduty_escalation_policy.example.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"exampleServiceIntegration\", {\n    vendor: datadog.then(datadog =\u003e datadog.id),\n    service: exampleService.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[pagerduty.EscalationPolicyRuleArgs(\n        escalation_delay_in_minutes=10,\n        targets=[pagerduty.EscalationPolicyRuleTargetArgs(\n            type=\"user\",\n            id=example_user.id,\n        )],\n    )])\nexample_service = pagerduty.Service(\"exampleService\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    vendor=datadog.id,\n    service=example_service.id)\n```\n```csharp\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var datadog = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs\n        {\n            Name = \"Datadog\",\n        }));\n        var exampleUser = new Pagerduty.User(\"exampleUser\", new Pagerduty.UserArgs\n        {\n            Email = \"125.greenholt.earline@graham.name\",\n            Teams = \n            {\n                pagerduty_team.Example.Id,\n            },\n        });\n        var foo = new Pagerduty.EscalationPolicy(\"foo\", new Pagerduty.EscalationPolicyArgs\n        {\n            NumLoops = 2,\n            Rules = \n            {\n                new Pagerduty.Inputs.EscalationPolicyRuleArgs\n                {\n                    EscalationDelayInMinutes = 10,\n                    Targets = \n                    {\n                        new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                        {\n                            Type = \"user\",\n                            Id = exampleUser.Id,\n                        },\n                    },\n                },\n            },\n        });\n        var exampleService = new Pagerduty.Service(\"exampleService\", new Pagerduty.ServiceArgs\n        {\n            AutoResolveTimeout = \"14400\",\n            AcknowledgementTimeout = \"600\",\n            EscalationPolicy = pagerduty_escalation_policy.Example.Id,\n        });\n        var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"exampleServiceIntegration\", new Pagerduty.ServiceIntegrationArgs\n        {\n            Vendor = datadog.Apply(datadog =\u003e datadog.Id),\n            Service = exampleService.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatadog, err := pagerduty.GetVendor(ctx, \u0026GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"exampleUser\", \u0026pagerduty.UserArgs{\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.Any(pagerduty_team.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: EscalationPolicyRuleArray{\n\t\t\t\t\u0026EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"exampleService\", \u0026pagerduty.ServiceArgs{\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"exampleServiceIntegration\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tVendor:  pulumi.String(datadog.Id),\n\t\t\tService: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVendor.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The vendor name to use to find a vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVendor.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found vendor.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The generic service type for this vendor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing pagerduty cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-pagerduty` repo](https://github.com/pulumi/pulumi-pagerduty/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`PagerDuty/terraform-provider-pagerduty` repo](https://github.com/PagerDuty/terraform-provider-pagerduty/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-pagerduty` repo](https://github.com/pulumi/pulumi-pagerduty/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`PagerDuty/terraform-provider-pagerduty` repo](https://github.com/PagerDuty/terraform-provider-pagerduty/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}