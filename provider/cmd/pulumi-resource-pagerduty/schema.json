{
    "name": "pagerduty",
    "description": "A Pulumi package for creating and managing pagerduty cloud resources.",
    "keywords": [
        "pulumi",
        "pagerduty"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`pagerduty` Terraform Provider](https://github.com/terraform-providers/terraform-provider-pagerduty).",
    "repository": "https://github.com/pulumi/pulumi-pagerduty",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "PAGERDUTY_TOKEN"
                    ]
                }
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "pagerduty:/EscalationPolicyRule:EscalationPolicyRule": {
            "properties": {
                "escalationDelayInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before an unacknowledged incident escalates away from this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "A target ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "escalationDelayInMinutes",
                "targets"
            ]
        },
        "pagerduty:/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A target ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `user`, `schedule`, `user_reference` or `schedule_reference`. Defaults to `user_reference`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:/RulesetRuleActions:RulesetRuleActions": {
            "properties": {
                "annotates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate"
                    },
                    "description": "Note added to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction"
                    },
                    "description": "Allows you to copy important data from one event field to another. Extraction rules must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax). Extraction objects consist of the following fields:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsPriority:RulesetRuleActionsPriority"
                    },
                    "description": "The ID of the priority applied to the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsRoute:RulesetRuleActionsRoute"
                    },
                    "description": "The ID of the service where the event will be routed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity"
                    },
                    "description": "The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suppresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress"
                    },
                    "description": "Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "The conditions that need to be met for the extraction to happen.\n* *NOTE: A rule can have multiple `extraction` objects attributed to it.*\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "Field where the data is being copied from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "Field where the data is being copied to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsPriority:RulesetRuleActionsPriority": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsRoute:RulesetRuleActionsRoute": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress": {
            "properties": {
                "thresholdTimeAmount": {
                    "type": "integer",
                    "description": "The number value of the `threshold_time_unit` before an incident is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdTimeUnit": {
                    "type": "string",
                    "description": "The `minutes`,`hours`, or `days` that the `threshold_time_amount` should be measured. \n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "The number of alerts that should be suppressed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleConditions:RulesetRuleConditions": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Operator to combine sub-conditions. Can be `and` or `or`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subconditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition"
                    },
                    "description": "List of sub-conditions that define the the condition. \n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter"
                    },
                    "description": "Parameter for the sub-condition. It requires both a `path` and `value` to be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleTimeFrame:RulesetRuleTimeFrame": {
            "properties": {
                "activeBetweens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween"
                    },
                    "description": "Values for executing the rule during a specific time period.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledWeeklies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly"
                    },
                    "description": "Values for executing the rule on a recurring schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "Length of time the schedule will be active.  Unix timestamp in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the given schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/RulesetTeam:RulesetTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the ruleset.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:/ScheduleLayer:ScheduleLayer": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "The end time of the schedule layer. If not specified, the layer does not end.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the schedule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restrictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ScheduleLayerRestriction:ScheduleLayerRestriction"
                    },
                    "description": "A schedule layer restriction block. Restriction blocks documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationTurnLengthSeconds": {
                    "type": "integer",
                    "description": "The duration of each on-call shift in `seconds`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationVirtualStart": {
                    "type": "string",
                    "description": "The effective start time of the schedule layer. This can be before the start time of the schedule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the schedule layer. This value will not be read back from the PagerDuty API because the API will always return a new `start` time, which represents the last updated time of the schedule layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordered list of users on this layer. The position of the user on the list determines their order in the layer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rotationTurnLengthSeconds",
                "rotationVirtualStart",
                "start",
                "users"
            ]
        },
        "pagerduty:/ScheduleLayerRestriction:ScheduleLayerRestriction": {
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "The duration of the restriction in `seconds`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startDayOfWeek": {
                    "type": "integer",
                    "description": "Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTimeOfDay": {
                    "type": "string",
                    "description": "The start time in `HH:mm:ss` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `daily_restriction` or `weekly_restriction`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "durationSeconds",
                "startTimeOfDay",
                "type"
            ]
        },
        "pagerduty:/ServiceDependencyDependency:ServiceDependencyDependency": {
            "properties": {
                "dependentServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService"
                    },
                    "description": "The service that id dependent on the supporting service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportingServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService"
                    },
                    "description": "The service that supports  the  dependent service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dependentServices",
                "supportingServices"
            ]
        },
        "pagerduty:/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule": {
            "properties": {
                "duringSupportHours": {
                    "$ref": "#/types/pagerduty:/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours",
                    "description": "Incidents' urgency during support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outsideSupportHours": {
                    "$ref": "#/types/pagerduty:/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours",
                    "description": "Incidents' urgency outside of support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/ServiceScheduledAction:ServiceScheduledAction": {
            "properties": {
                "ats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceScheduledActionAt:ServiceScheduledActionAt"
                    },
                    "description": "A block representing when the scheduled action will occur.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toUrgency": {
                    "type": "string",
                    "description": "The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/ServiceScheduledActionAt:ServiceScheduledActionAt": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of time specification. Currently, this must be set to `named_time`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/ServiceSupportHours:ServiceSupportHours": {
            "properties": {
                "daysOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of days of week as integers. `1` to `7`, `1` being\nMonday and `7` being Sunday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "string",
                    "description": "The support hours' ending time of day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The support hours' starting time of day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone for the support hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "pagerduty:/UserNotificationRuleContactMethod:UserNotificationRuleContactMethod": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the referenced contact method.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of contact method. Can be `email_contact_method`, `phone_contact_method`, `push_notification_contact_method` or `sms_contact_method`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the pagerduty package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "PAGERDUTY_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "pagerduty:index/addon:Addon": {
            "description": "With [add-ons](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Add-ons/get_addons), third-party developers can write their own add-ons to PagerDuty's UI. Given a configuration containing a src parameter, that URL will be embedded in an iframe on a page that's available to users from a drop-down menu.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Addon(\"example\", {\n    src: \"https://intranet.example.com/status\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Addon(\"example\", src=\"https://intranet.example.com/status\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "required": [
                "name",
                "src"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "requiredInputs": [
                "src"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Addon resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the add-on.\n"
                    },
                    "src": {
                        "type": "string",
                        "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/businessService:BusinessService": {
            "description": "A [business service](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Business_Services/get_business_services) allows you to model capabilities that span multiple technical services and that may be owned by several different teams. \n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.BusinessService(\"example\", {\n    description: \"A very descriptive description of this business service\",\n    pointOfContact: \"PagerDuty Admin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.BusinessService(\"example\",\n    description=\"A very descriptive description of this business service\",\n    point_of_contact=\"PagerDuty Admin\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "htmlUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service. \n"
                },
                "self": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Default value is `business_service`. Can also be set as `business_service_reference`.\n"
                }
            },
            "required": [
                "htmlUrl",
                "name",
                "self",
                "summary"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service. \n"
                },
                "type": {
                    "type": "string",
                    "description": "Default value is `business_service`. Can also be set as `business_service_reference`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessService resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "htmlUrl": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the business service.\n"
                    },
                    "pointOfContact": {
                        "type": "string",
                        "description": "The owner of the business service. \n"
                    },
                    "self": {
                        "type": "string"
                    },
                    "summary": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Default value is `business_service`. Can also be set as `business_service_reference`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/escalationPolicy:EscalationPolicy": {
            "description": "An [escalation policy](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Escalation_Policies/get_escalation_policies) determines what user or schedule will be notified first, second, and so on when an incident is triggered. Escalation policies are used by one or more services.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleTeam = new pagerduty.Team(\"example\", {\n    description: \"All engineering\",\n});\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [exampleTeam.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n    teams: [exampleTeam.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_team = pagerduty.Team(\"exampleTeam\", description=\"All engineering\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_team.id])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"exampleEscalationPolicy\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }],\n    teams=[example_team.id])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "required": [
                "name",
                "rules"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EscalationPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the escalation policy.\n"
                    },
                    "numLoops": {
                        "type": "integer",
                        "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:/EscalationPolicyRule:EscalationPolicyRule"
                        },
                        "description": "An Escalation rule block. Escalation rules documented below.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventRule:EventRule": {
            "properties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "A boolean that indicates whether the rule is a catch all for the account. This field is read-only through the PagerDuty API.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "required": [
                "actionJson",
                "catchAll",
                "conditionJson"
            ],
            "inputProperties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "requiredInputs": [
                "actionJson",
                "conditionJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventRule resources.\n",
                "properties": {
                    "actionJson": {
                        "type": "string",
                        "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                    },
                    "advancedConditionJson": {
                        "type": "string",
                        "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.\n"
                    },
                    "catchAll": {
                        "type": "boolean",
                        "description": "A boolean that indicates whether the rule is a catch all for the account. This field is read-only through the PagerDuty API.\n"
                    },
                    "conditionJson": {
                        "type": "string",
                        "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/extension:Extension": {
            "description": "An [extension](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Extensions/post_extensions) can be associated with a service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pulumi.output(pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n}, { async: true }));\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"howard.james@example.domain\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    acknowledgementTimeout: \"600\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: pagerduty_escalation_policy_example.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    config: `{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n`,\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionObjects: [exampleService.id],\n    extensionSchema: webhook.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"howard.james@example.domain\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }])\nexample_service = pagerduty.Service(\"exampleService\",\n    acknowledgement_timeout=600,\n    auto_resolve_timeout=14400,\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nslack = pagerduty.Extension(\"slack\",\n    config=\"\"\"{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n\n\"\"\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_objects=[example_service.id],\n    extension_schema=webhook.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.  \n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty..getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty..Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "extensionObjects",
                "extensionSchema",
                "htmlUrl",
                "name",
                "type"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.  \n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty..getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty..Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "extensionObjects",
                "extensionSchema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Extension resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                    },
                    "endpointUrl": {
                        "type": "string",
                        "description": "The url of the extension.  \n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `pagerduty..getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty..Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n"
                    },
                    "extensionObjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is the objects for which the extension applies (An array of service ids).\n"
                    },
                    "extensionSchema": {
                        "type": "string",
                        "description": "This is the schema for this extension.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service extension.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/maintenanceWindow:MaintenanceWindow": {
            "description": "A [maintenance window](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Maintenance_Windows/get_maintenance_windows) is used to temporarily disable one or more services for a set period of time. No incidents will be triggered and no notifications will be received while a service is disabled by a maintenance window.\n\nMaintenance windows are specified to start at a certain time and end after they have begun. Once started, a maintenance window cannot be deleted; it can only be ended immediately to re-enable the service.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.MaintenanceWindow(\"example\", {\n    endTime: \"2015-11-09T22:00:00-05:00\",\n    services: [pagerduty_service_example.id],\n    startTime: \"2015-11-09T20:00:00-05:00\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.MaintenanceWindow(\"example\",\n    end_time=\"2015-11-09T22:00:00-05:00\",\n    services=[pagerduty_service[\"example\"][\"id\"]],\n    start_time=\"2015-11-09T20:00:00-05:00\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "required": [
                "endTime",
                "services",
                "startTime"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "requiredInputs": [
                "endTime",
                "services",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the maintenance window.\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of service IDs to include in the maintenance window.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/ruleset:Ruleset": {
            "description": "[Rulesets](https://support.pagerduty.com/docs/rulesets) allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst fooTeam = new pagerduty.Team(\"fooTeam\", {});\nconst fooRuleset = new pagerduty.Ruleset(\"fooRuleset\", {team: {\n    id: fooTeam.id,\n}});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo_team = pagerduty.Team(\"fooTeam\")\nfoo_ruleset = pagerduty.Ruleset(\"fooRuleset\", team={\n    \"id\": foo_team.id,\n})\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Routing keys routed to this ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ruleset. Currently only sets to `global`.\n"
                }
            },
            "required": [
                "name",
                "routingKeys",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ruleset resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the ruleset.\n"
                    },
                    "routingKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Routing keys routed to this ruleset.\n"
                    },
                    "team": {
                        "$ref": "#/types/pagerduty:/RulesetTeam:RulesetTeam",
                        "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of ruleset. Currently only sets to `global`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/rulesetRule:RulesetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules). \n"
                }
            },
            "required": [
                "ruleset"
            ],
            "inputProperties": {
                "actions": {
                    "$ref": "#/types/pagerduty:/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules). \n"
                }
            },
            "requiredInputs": [
                "ruleset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RulesetRule resources.\n",
                "properties": {
                    "actions": {
                        "$ref": "#/types/pagerduty:/RulesetRuleActions:RulesetRuleActions",
                        "description": "Actions to apply to an event if the conditions match.\n"
                    },
                    "conditions": {
                        "$ref": "#/types/pagerduty:/RulesetRuleConditions:RulesetRuleConditions",
                        "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch all rule, though.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position/index of the rule within the ruleset.\n"
                    },
                    "ruleset": {
                        "type": "string",
                        "description": "The ID of the ruleset that the rule belongs to.\n"
                    },
                    "timeFrame": {
                        "$ref": "#/types/pagerduty:/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                        "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules). \n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/schedule:Schedule": {
            "description": "A [schedule](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Schedules/get_schedules) determines the time periods that users are on call. Only on-call users are eligible to receive notifications from incidents.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.Schedule(\"foo\", {\n    layers: [{\n        name: \"Night Shift\",\n        restrictions: [{\n            durationSeconds: 32400,\n            startTimeOfDay: \"08:00:00\",\n            type: \"daily_restriction\",\n        }],\n        rotationTurnLengthSeconds: 86400,\n        rotationVirtualStart: \"2015-11-06T20:00:00-05:00\",\n        start: \"2015-11-06T20:00:00-05:00\",\n        users: [pagerduty_user_foo.id],\n    }],\n    timeZone: \"America/New_York\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.Schedule(\"foo\",\n    layers=[{\n        \"name\": \"Night Shift\",\n        \"restriction\": [{\n            \"durationSeconds\": 32400,\n            \"startTimeOfDay\": \"08:00:00\",\n            \"type\": \"daily_restriction\",\n        }],\n        \"rotationTurnLengthSeconds\": 86400,\n        \"rotationVirtualStart\": \"2015-11-06T20:00:00-05:00\",\n        \"start\": \"2015-11-06T20:00:00-05:00\",\n        \"users\": [pagerduty_user[\"foo\"][\"id\"]],\n    }],\n    time_zone=\"America/New_York\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g Europe/Berlin).\n"
                }
            },
            "required": [
                "layers",
                "name",
                "timeZone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g Europe/Berlin).\n"
                }
            },
            "requiredInputs": [
                "layers",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schedule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the schedule\n"
                    },
                    "layers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:/ScheduleLayer:ScheduleLayer"
                        },
                        "description": "A schedule layer block. Schedule layers documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schedule.\n"
                    },
                    "overflow": {
                        "type": "boolean",
                        "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone of the schedule (e.g Europe/Berlin).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/service:Service": {
            "description": "A [service](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Services/get_services) represents something you monitor (like a web service, email service, or database service). It is a container for related incidents that associates them with escalation policies.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    acknowledgementTimeout: \"600\",\n    alertCreation: \"create_incidents\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: pagerduty_escalation_policy_example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }])\nexample_service = pagerduty.Service(\"exampleService\",\n    acknowledgement_timeout=600,\n    alert_creation=\"create_incidents\",\n    auto_resolve_timeout=14400,\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.\n"
                },
                "alertGroupingTimeout": {
                    "type": "integer",
                    "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "htmlUrl": {
                    "type": "string"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "lastIncidentTimestamp": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "status": {
                    "type": "string"
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:/ServiceSupportHours:ServiceSupportHours"
                }
            },
            "required": [
                "createdAt",
                "escalationPolicy",
                "htmlUrl",
                "incidentUrgencyRule",
                "lastIncidentTimestamp",
                "name",
                "status"
            ],
            "inputProperties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.\n"
                },
                "alertGroupingTimeout": {
                    "type": "integer",
                    "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "description": {
                    "type": "string"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:/ServiceSupportHours:ServiceSupportHours"
                }
            },
            "requiredInputs": [
                "escalationPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "acknowledgementTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.\n"
                    },
                    "alertCreation": {
                        "type": "string",
                        "description": "Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value \"create_incidents\" is default: events will create an incident that cannot be merged. Value \"create_alerts_and_incidents\" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.\n"
                    },
                    "alertGrouping": {
                        "type": "string",
                        "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.\n"
                    },
                    "alertGroupingTimeout": {
                        "type": "integer",
                        "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n"
                    },
                    "autoResolveTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "escalationPolicy": {
                        "type": "string",
                        "description": "The escalation policy used by this service.\n"
                    },
                    "htmlUrl": {
                        "type": "string"
                    },
                    "incidentUrgencyRule": {
                        "$ref": "#/types/pagerduty:/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                    },
                    "lastIncidentTimestamp": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service.\n"
                    },
                    "scheduledActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:/ServiceScheduledAction:ServiceScheduledAction"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "supportHours": {
                        "$ref": "#/types/pagerduty:/ServiceSupportHours:ServiceSupportHours"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceDependency:ServiceDependency": {
            "description": "A [service dependency](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1service_dependencies~1associate/post) is a relationship between a business service and technical and business services that this service uses, or that are used by this service, and are critical for successful operation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.ServiceDependency(\"foo\", {dependency: [{\n    dependent_service: [{\n        id: pagerduty_business_service.foo.id,\n        type: \"business_service\",\n    }],\n    supporting_service: [{\n        id: pagerduty_service.foo.id,\n        type: \"service\",\n    }],\n}]});\nconst bar = new pagerduty.ServiceDependency(\"bar\", {dependency: [{\n    dependent_service: [{\n        id: pagerduty_business_service.foo.id,\n        type: \"business_service\",\n    }],\n    supporting_service: [{\n        id: pagerduty_service.two.id,\n        type: \"service\",\n    }],\n}]});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.ServiceDependency(\"foo\", dependency=[{\n    \"dependent_service\": [{\n        \"id\": pagerduty_business_service[\"foo\"][\"id\"],\n        \"type\": \"business_service\",\n    }],\n    \"supporting_service\": [{\n        \"id\": pagerduty_service[\"foo\"][\"id\"],\n        \"type\": \"service\",\n    }],\n}])\nbar = pagerduty.ServiceDependency(\"bar\", dependency=[{\n    \"dependent_service\": [{\n        \"id\": pagerduty_business_service[\"foo\"][\"id\"],\n        \"type\": \"business_service\",\n    }],\n    \"supporting_service\": [{\n        \"id\": pagerduty_service[\"two\"][\"id\"],\n        \"type\": \"service\",\n    }],\n}])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceDependencyDependency:ServiceDependencyDependency"
                    },
                    "description": "The relationship between the `supporting_service` and `dependent_service`.\n"
                }
            },
            "required": [
                "dependencies"
            ],
            "inputProperties": {
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:/ServiceDependencyDependency:ServiceDependencyDependency"
                    },
                    "description": "The relationship between the `supporting_service` and `dependent_service`.\n"
                }
            },
            "requiredInputs": [
                "dependencies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceDependency resources.\n",
                "properties": {
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:/ServiceDependencyDependency:ServiceDependencyDependency"
                        },
                        "description": "The relationship between the `supporting_service` and `dependent_service`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceIntegration:ServiceIntegration": {
            "description": "A [service integration](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Services/post_services_id_integrations) is an integration that belongs to a service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    acknowledgementTimeout: \"600\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: pagerduty_escalation_policy_example.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"example\", {\n    service: exampleService.id,\n    type: \"generic_events_api_inbound_integration\",\n});\nconst datadogVendor = pulumi.output(pagerduty.getVendor({\n    name: \"Datadog\",\n}, { async: true }));\nconst datadogServiceIntegration = new pagerduty.ServiceIntegration(\"datadog\", {\n    service: exampleService.id,\n    vendor: datadogVendor.id,\n});\nconst cloudwatchVendor = pulumi.output(pagerduty.getVendor({\n    name: \"Cloudwatch\",\n}, { async: true }));\nconst cloudwatchServiceIntegration = new pagerduty.ServiceIntegration(\"cloudwatch\", {\n    service: exampleService.id,\n    vendor: cloudwatchVendor.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }])\nexample_service = pagerduty.Service(\"exampleService\",\n    acknowledgement_timeout=600,\n    auto_resolve_timeout=14400,\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    service=example_service.id,\n    type=\"generic_events_api_inbound_integration\")\ndatadog_vendor = pagerduty.get_vendor(name=\"Datadog\")\ndatadog_service_integration = pagerduty.ServiceIntegration(\"datadogServiceIntegration\",\n    service=example_service.id,\n    vendor=datadog_vendor.id)\ncloudwatch_vendor = pagerduty.get_vendor(name=\"Cloudwatch\")\ncloudwatch_service_integration = pagerduty.ServiceIntegration(\"cloudwatchServiceIntegration\",\n    service=example_service.id,\n    vendor=cloudwatch_vendor.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).\n"
                }
            },
            "required": [
                "htmlUrl",
                "integrationEmail",
                "integrationKey",
                "name",
                "service",
                "type",
                "vendor"
            ],
            "inputProperties": {
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).\n"
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceIntegration resources.\n",
                "properties": {
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "integrationEmail": {
                        "type": "string",
                        "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service integration.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The ID of the service the integration should belong to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/team:Team": {
            "description": "A [team](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Teams/get_teams) is a collection of users and escalation policies that represent a group of people within an organization.\n\nThe account must have the `teams` ability to use the following resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Team(\"example\", {\n    description: \"All engineering\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Team(\"example\", description=\"All engineering\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                }
            },
            "required": [
                "htmlUrl",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/teamMembership:TeamMembership": {
            "description": "A [team membership](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Teams/put_teams_id_users_user_id) manages memberships within a team.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst fooUser = new pagerduty.User(\"foo\", {\n    email: \"foo@bar.com\",\n});\nconst fooTeam = new pagerduty.Team(\"foo\", {\n    description: \"foo\",\n});\nconst fooTeamMembership = new pagerduty.TeamMembership(\"foo\", {\n    role: \"manager\",\n    teamId: fooTeam.id,\n    userId: fooUser.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo_user = pagerduty.User(\"fooUser\", email=\"foo@bar.com\")\nfoo_team = pagerduty.Team(\"fooTeam\", description=\"foo\")\nfoo_team_membership = pagerduty.TeamMembership(\"fooTeamMembership\",\n    role=\"manager\",\n    team_id=foo_team.id,\n    user_id=foo_user.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "required": [
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "requiredInputs": [
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembership resources.\n",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team in which the user will belong.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user to add to the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/user:User": {
            "description": "A [user](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users) is a member of a PagerDuty account that have the ability to interact with incidents and other data on the account.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\", email=\"125.greenholt.earline@graham.name\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the user's avatar.\n"
                },
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "invitationSent": {
                    "type": "boolean",
                    "description": "If true, the user has an outstanding invitation.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Account must have the `read_only_users` ability to set a user as a `read_only_user`. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user` or `user`\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty..TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone of the user\n"
                }
            },
            "required": [
                "avatarUrl",
                "color",
                "email",
                "htmlUrl",
                "invitationSent",
                "name",
                "teams",
                "timeZone"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Account must have the `read_only_users` ability to set a user as a `read_only_user`. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user` or `user`\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty..TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone of the user\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The URL of the user's avatar.\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "invitationSent": {
                        "type": "boolean",
                        "description": "If true, the user has an outstanding invitation.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user's title.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The user role. Account must have the `read_only_users` ability to set a user as a `read_only_user`. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user` or `user`\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of teams the user should belong to. Please use `pagerduty..TeamMembership` instead.\n",
                        "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The timezone of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userContactMethod:UserContactMethod": {
            "description": "A [contact method](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users_id_contact_methods) is a contact method for a PagerDuty user (email, phone or SMS).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team_example.id],\n});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    address: \"foo@bar.com\",\n    label: \"Work\",\n    type: \"email_contact_method\",\n    userId: example.id,\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    address: \"2025550199\",\n    countryCode: 1,\n    label: \"Work\",\n    type: \"phone_contact_method\",\n    userId: example.id,\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    address: \"2025550199\",\n    countryCode: 1,\n    label: \"Work\",\n    type: \"sms_contact_method\",\n    userId: example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nemail = pagerduty.UserContactMethod(\"email\",\n    address=\"foo@bar.com\",\n    label=\"Work\",\n    type=\"email_contact_method\",\n    user_id=example.id)\nphone = pagerduty.UserContactMethod(\"phone\",\n    address=\"2025550199\",\n    country_code=\"+1\",\n    label=\"Work\",\n    type=\"phone_contact_method\",\n    user_id=example.id)\nsms = pagerduty.UserContactMethod(\"sms\",\n    address=\"2025550199\",\n    country_code=\"+1\",\n    label=\"Work\",\n    type=\"sms_contact_method\",\n    user_id=example.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "blacklisted": {
                    "type": "boolean",
                    "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If true, this phone is capable of receiving SMS messages.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "address",
                "blacklisted",
                "enabled",
                "label",
                "type",
                "userId"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "address",
                "label",
                "type",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserContactMethod resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                    },
                    "countryCode": {
                        "type": "integer",
                        "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If true, this phone is capable of receiving SMS messages.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                    },
                    "sendShortEmail": {
                        "type": "boolean",
                        "description": "Send an abbreviated email message instead of the standard email output.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userNotificationRule:UserNotificationRule": {
            "description": "A [notification rule](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users_id_notification_rules_notification_rule_id) configures where and when a PagerDuty user is notified when a triggered incident is assigned to him. Unique notification rules can be created for both high and low-urgency incidents.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {email: \"125.greenholt.earline@graham.name\"});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    userId: example.id,\n    type: \"email_contact_method\",\n    address: \"foo@bar.com\",\n    label: \"Work\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: \"+1\",\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    userId: example.id,\n    type: \"sms_contact_method\",\n    countryCode: \"+1\",\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst highUrgencyPhone = new pagerduty.UserNotificationRule(\"highUrgencyPhone\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"high\",\n    contactMethod: {\n        type: \"phone_contact_method\",\n        id: phone.id,\n    },\n});\nconst lowUrgencyEmail = new pagerduty.UserNotificationRule(\"lowUrgencyEmail\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"email_contact_method\",\n        id: email.id,\n    },\n});\nconst lowUrgencySms = new pagerduty.UserNotificationRule(\"lowUrgencySms\", {\n    userId: example.id,\n    startDelayInMinutes: 10,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"sms_contact_method\",\n        id: sms.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\", email=\"125.greenholt.earline@graham.name\")\nemail = pagerduty.UserContactMethod(\"email\",\n    user_id=example.id,\n    type=\"email_contact_method\",\n    address=\"foo@bar.com\",\n    label=\"Work\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=\"+1\",\n    address=\"2025550199\",\n    label=\"Work\")\nsms = pagerduty.UserContactMethod(\"sms\",\n    user_id=example.id,\n    type=\"sms_contact_method\",\n    country_code=\"+1\",\n    address=\"2025550199\",\n    label=\"Work\")\nhigh_urgency_phone = pagerduty.UserNotificationRule(\"highUrgencyPhone\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"high\",\n    contact_method={\n        \"type\": \"phone_contact_method\",\n        \"id\": phone.id,\n    })\nlow_urgency_email = pagerduty.UserNotificationRule(\"lowUrgencyEmail\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"email_contact_method\",\n        \"id\": email.id,\n    })\nlow_urgency_sms = pagerduty.UserNotificationRule(\"lowUrgencySms\",\n    user_id=example.id,\n    start_delay_in_minutes=10,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"sms_contact_method\",\n        \"id\": sms.id,\n    })\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "contactMethod": {
                    "$ref": "#/types/pagerduty:/UserNotificationRuleContactMethod:UserNotificationRuleContactMethod",
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "inputProperties": {
                "contactMethod": {
                    "$ref": "#/types/pagerduty:/UserNotificationRuleContactMethod:UserNotificationRuleContactMethod",
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserNotificationRule resources.\n",
                "properties": {
                    "contactMethod": {
                        "$ref": "#/types/pagerduty:/UserNotificationRuleContactMethod:UserNotificationRuleContactMethod",
                        "description": "A contact method block, configured as a block described below.\n"
                    },
                    "startDelayInMinutes": {
                        "type": "integer",
                        "description": "The delay before firing the rule, in minutes.\n"
                    },
                    "urgency": {
                        "type": "string",
                        "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pagerduty:index/getBusinessService:getBusinessService": {
            "description": "Use this data source to get information about a specific [business service](https://api-reference.pagerduty.com/#!/Business_Services/get_business_services).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pulumi.output(pagerduty.getBusinessService({\n    name: \"My Service\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_business_service(name=\"My Service\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBusinessService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The business service name to use to find a business service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBusinessService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found business service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getEscalationPolicy:getEscalationPolicy": {
            "description": "Use this data source to get information about a specific [escalation policy](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Escalation_Policies/get_escalation_policies) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst testEscalationPolicy = pulumi.output(pagerduty.getEscalationPolicy({\n    name: \"Engineering Escalation Policy\",\n}, { async: true }));\nconst testService = new pagerduty.Service(\"test\", {\n    acknowledgementTimeout: \"600\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: testEscalationPolicy.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest_escalation_policy = pagerduty.get_escalation_policy(name=\"Engineering Escalation Policy\")\ntest_service = pagerduty.Service(\"testService\",\n    acknowledgement_timeout=600,\n    auto_resolve_timeout=14400,\n    escalation_policy=test_escalation_policy.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEscalationPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find an escalation policy in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEscalationPolicy.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found escalation policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getExtensionSchema:getExtensionSchema": {
            "description": "Use this data source to get information about a specific [extension](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Extension_Schemas/get_extension_schemas) vendor that you can use for a service (e.g: Slack, Generic Webhook, ServiceNow).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pulumi.output(pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n}, { async: true }));\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"howard.james@example.domain\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    acknowledgementTimeout: \"600\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: pagerduty_escalation_policy_example.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionObjects: [exampleService.id],\n    extensionSchema: webhook.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"howard.james@example.domain\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }])\nexample_service = pagerduty.Service(\"exampleService\",\n    acknowledgement_timeout=600,\n    auto_resolve_timeout=14400,\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nslack = pagerduty.Extension(\"slack\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_objects=[example_service.id],\n    extension_schema=webhook.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExtensionSchema.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The extension name to use to find an extension vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExtensionSchema.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found extension vendor.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The generic service type for this extension vendor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "pagerduty:index/getPriority:getPriority": {
            "description": "Use this data source to get information about a specific [priority](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1priorities/get) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst fooRuleset = new pagerduty.Ruleset(\"fooRuleset\", {});\nconst fooRulesetRule = new pagerduty.RulesetRule(\"fooRulesetRule\", {\n    ruleset: fooRuleset.id,\n    position: 0,\n    disabled: \"false\",\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameter: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameter: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions: {\n        route: [{\n            value: \"P5DTL0K\",\n        }],\n        priority: [{\n            value: pagerduty_priority.p1.id,\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\np1 = pagerduty.get_priority(name=\"P1\")\nfoo_ruleset = pagerduty.Ruleset(\"fooRuleset\")\nfoo_ruleset_rule = pagerduty.RulesetRule(\"fooRulesetRule\",\n    ruleset=foo_ruleset.id,\n    position=0,\n    disabled=\"false\",\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [\n            {\n                \"operator\": \"contains\",\n                \"parameter\": [{\n                    \"value\": \"disk space\",\n                    \"path\": \"payload.summary\",\n                }],\n            },\n            {\n                \"operator\": \"contains\",\n                \"parameter\": [{\n                    \"value\": \"db\",\n                    \"path\": \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions={\n        \"route\": [{\n            \"value\": \"P5DTL0K\",\n        }],\n        \"priority\": [{\n            \"value\": pagerduty_priority[\"p1\"][\"id\"],\n        }],\n    })\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPriority.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the priority to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPriority.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the found priority.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found priority.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getSchedule:getSchedule": {
            "description": "Use this data source to get information about a specific [schedule](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Schedules/get_schedules) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst test = pulumi.output(pagerduty.getSchedule({\n    name: \"Daily Engineering Rotation\",\n}, { async: true }));\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: test.id,\n            type: \"schedule\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest = pagerduty.get_schedule(name=\"Daily Engineering Rotation\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": test.id,\n            \"type\": \"schedule\",\n        }],\n    }])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find a schedule in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchedule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found schedule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getService:getService": {
            "description": "Use this data source to get information about a specific [service](https://api-reference.pagerduty.com/#!/Services/get_services).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst exampleService = pagerduty.getService({\n    name: \"My Service\",\n});\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"exampleServiceIntegration\", {\n    vendor: datadog.then(datadog =\u003e datadog.id),\n    service: exampleService.then(exampleService =\u003e exampleService.id),\n    type: \"generic_events_api_inbound_integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample_service = pagerduty.get_service(name=\"My Service\")\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    vendor=datadog.id,\n    service=example_service.id,\n    type=\"generic_events_api_inbound_integration\")\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The service name to use to find a service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getTeam:getTeam": {
            "description": "Use this data source to get information about a specific [team](https://v1.developer.pagerduty.com/documentation/rest/teams/list) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pulumi.output(pagerduty.getUser({\n    email: \"me@example.com\",\n}, { async: true }));\nconst devops = pulumi.output(pagerduty.getTeam({\n    name: \"devops\",\n}, { async: true }));\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: me.id,\n            type: \"user\",\n        }],\n    }],\n    teams: [devops.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\ndevops = pagerduty.get_team(name=\"devops\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": me.id,\n            \"type\": \"user\",\n        }],\n    }],\n    teams=[devops.id])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the team to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the found team.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the found team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getUser:getUser": {
            "description": "Use this data source to get information about a specific [user](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users) that you can use for other PagerDuty resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pulumi.output(pagerduty.getUser({\n    email: \"me@example.com\",\n}, { async: true }));\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: me.id,\n            type: \"user\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": me.id,\n            \"type\": \"user\",\n        }],\n    }])\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email to use to find a user in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "name",
                    "id"
                ]
            }
        },
        "pagerduty:index/getVendor:getVendor": {
            "description": "Use this data source to get information about a specific [vendor](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Vendors/get_vendors) that you can use for a service integration (e.g Amazon Cloudwatch, Splunk, Datadog).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst datadog = pulumi.output(pagerduty.getVendor({\n    name: \"Datadog\",\n}, { async: true }));\nconst exampleUser = new pagerduty.User(\"example\", {\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [pagerduty_team_example.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            id: exampleUser.id,\n            type: \"user\",\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    acknowledgementTimeout: \"600\",\n    autoResolveTimeout: \"14400\",\n    escalationPolicy: pagerduty_escalation_policy_example.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"example\", {\n    service: exampleService.id,\n    type: \"generic_events_api_inbound_integration\",\n    vendor: datadog.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample_user = pagerduty.User(\"exampleUser\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[pagerduty_team[\"example\"][\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    num_loops=2,\n    rules=[{\n        \"escalationDelayInMinutes\": 10,\n        \"target\": [{\n            \"id\": example_user.id,\n            \"type\": \"user\",\n        }],\n    }])\nexample_service = pagerduty.Service(\"exampleService\",\n    acknowledgement_timeout=600,\n    auto_resolve_timeout=14400,\n    escalation_policy=pagerduty_escalation_policy[\"example\"][\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"exampleServiceIntegration\",\n    service=example_service.id,\n    type=\"generic_events_api_inbound_integration\",\n    vendor=datadog.id)\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVendor.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The vendor name to use to find a vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVendor.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name of the found vendor.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The generic service type for this vendor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "packageDescription": "A Pulumi package for creating and managing pagerduty cloud resources.",
            "packageName": "",
            "typescriptVersion": ""
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}