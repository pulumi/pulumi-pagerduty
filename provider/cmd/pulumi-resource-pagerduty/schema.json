{
    "name": "pagerduty",
    "description": "A Pulumi package for creating and managing pagerduty cloud resources.",
    "keywords": [
        "pulumi",
        "pagerduty"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`pagerduty` Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty).",
    "repository": "https://github.com/pulumi/pulumi-pagerduty",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing pagerduty cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-pagerduty` repo](https://github.com/pulumi/pulumi-pagerduty/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-pagerduty` repo](https://github.com/PagerDuty/terraform-provider-pagerduty/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/PagerDuty/terraform-provider-pagerduty)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-pagerduty` repo](https://github.com/pulumi/pulumi-pagerduty/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-pagerduty` repo](https://github.com/PagerDuty/terraform-provider-pagerduty/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiUrlOverride": {
                "type": "string"
            },
            "insecureTls": {
                "type": "boolean"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string"
            },
            "useAppOauthScopedToken": {
                "$ref": "#/types/pagerduty:config/useAppOauthScopedToken:useAppOauthScopedToken"
            },
            "userToken": {
                "type": "string"
            }
        }
    },
    "types": {
        "pagerduty:config/useAppOauthScopedToken:useAppOauthScopedToken": {
            "properties": {
                "pdClientId": {
                    "type": "string"
                },
                "pdClientSecret": {
                    "type": "string"
                },
                "pdSubdomain": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/AutomationActionsActionActionDataReference:AutomationActionsActionActionDataReference": {
            "properties": {
                "invocationCommand": {
                    "type": "string",
                    "description": "The command to execute the script with.\n"
                },
                "processAutomationJobArguments": {
                    "type": "string",
                    "description": "The arguments to pass to the Process Automation job execution.\n"
                },
                "processAutomationJobId": {
                    "type": "string",
                    "description": "The ID of the Process Automation job to execute.\n"
                },
                "processAutomationNodeFilter": {
                    "type": "string",
                    "description": "The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).\n"
                },
                "script": {
                    "type": "string",
                    "description": "Body of the script to be executed on the Runner. Max length is 16777215 characters.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EscalationPolicyRule:EscalationPolicyRule": {
            "properties": {
                "escalationDelayInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before an unacknowledged incident escalates away from this rule.\n"
                },
                "escalationRuleAssignmentStrategy": {
                    "$ref": "#/types/pagerduty:index/EscalationPolicyRuleEscalationRuleAssignmentStrategy:EscalationPolicyRuleEscalationRuleAssignmentStrategy",
                    "description": "The strategy used to assign the escalation rule to an incident. Documented below.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the escalation policy.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget"
                    }
                }
            },
            "type": "object",
            "required": [
                "escalationDelayInMinutes",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationDelayInMinutes",
                        "escalationRuleAssignmentStrategy",
                        "id",
                        "targets"
                    ]
                }
            }
        },
        "pagerduty:index/EscalationPolicyRuleEscalationRuleAssignmentStrategy:EscalationPolicyRuleEscalationRuleAssignmentStrategy": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Can be `round_robin` or `assign_to_everyone`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A target ID\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `user_reference` or `schedule_reference`. Defaults to `user_reference`. For multiple users as example, repeat the target.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCacheVariableCondition:EventOrchestrationGlobalCacheVariableCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCacheVariableConfiguration:EventOrchestrationGlobalCacheVariableConfiguration": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against the field specified via the `source` argument. This field is only used when `type` is `recent_value`\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths). This field is only used when `type` is `recent_value`\n"
                },
                "ttlSeconds": {
                    "type": "integer",
                    "description": "The number of seconds indicating how long to count incoming trigger events for. This field is only used when `type` is `trigger_event_count`\n"
                },
                "type": {
                    "type": "string",
                    "description": "The [type of value](https://support.pagerduty.com/docs/event-orchestration-variables) to store into the Cache Variable. Can be one of: `recent_value` or `trigger_event_count`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAll:EventOrchestrationGlobalCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActions:EventOrchestrationGlobalCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` *except* `route_to` action.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActions:EventOrchestrationGlobalCatchAllActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n"
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationAction:EventOrchestrationGlobalCatchAllActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n"
                },
                "dropEvent": {
                    "type": "boolean",
                    "description": "When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.\n"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service's settings, with what is configured by this action.\n"
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsExtraction:EventOrchestrationGlobalCatchAllActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "incidentCustomFieldUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate:EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate"
                    },
                    "description": "Assign a custom field to the resulting incident.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.\n"
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n"
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsVariable:EventOrchestrationGlobalCatchAllActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationAction:EventOrchestrationGlobalCatchAllActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationActionHeader:EventOrchestrationGlobalCatchAllActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationActionParameter:EventOrchestrationGlobalCatchAllActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationActionHeader:EventOrchestrationGlobalCatchAllActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsAutomationActionParameter:EventOrchestrationGlobalCatchAllActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this parameter\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsExtraction:EventOrchestrationGlobalCatchAllActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate:EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The custom field id\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to this custom field\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalCatchAllActionsVariable:EventOrchestrationGlobalCatchAllActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSet:EventOrchestrationGlobalSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRule:EventOrchestrationGlobalSetRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRule:EventOrchestrationGlobalSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActions:EventOrchestrationGlobalSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleCondition:EventOrchestrationGlobalSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the rule within the set.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActions:EventOrchestrationGlobalSetRuleActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n"
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationAction:EventOrchestrationGlobalSetRuleActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n"
                },
                "dropEvent": {
                    "type": "boolean",
                    "description": "When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.\n"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service's settings, with what is configured by this action.\n"
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsExtraction:EventOrchestrationGlobalSetRuleActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "incidentCustomFieldUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate:EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate"
                    },
                    "description": "Assign a custom field to the resulting incident.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.\n"
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n"
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsVariable:EventOrchestrationGlobalSetRuleActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationAction:EventOrchestrationGlobalSetRuleActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationActionHeader:EventOrchestrationGlobalSetRuleActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationActionParameter:EventOrchestrationGlobalSetRuleActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationActionHeader:EventOrchestrationGlobalSetRuleActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsAutomationActionParameter:EventOrchestrationGlobalSetRuleActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this parameter\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsExtraction:EventOrchestrationGlobalSetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate:EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The custom field id\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to this custom field\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleActionsVariable:EventOrchestrationGlobalSetRuleActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationGlobalSetRuleCondition:EventOrchestrationGlobalSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n"
                },
                "label": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "label",
                        "parameters"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routingKey",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAllActions:EventOrchestrationRouterCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterCatchAllActions:EventOrchestrationRouterCatchAllActions": {
            "properties": {
                "routeTo": {
                    "type": "string",
                    "description": "Defines where an alert will be sent if doesn't match any rules. Can either be the ID of a Service *or* the string `\"unrouted\"` to send events to the Unrouted Orchestration.\n"
                }
            },
            "type": "object",
            "required": [
                "routeTo"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the `start` set. Router supports only one set and it's id has to be `start`\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRule:EventOrchestrationRouterSetRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSetRule:EventOrchestrationRouterSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRuleActions:EventOrchestrationRouterSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRuleCondition:EventOrchestrationRouterSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will *always* match against the rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the rule within the `start` set.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationRouterSetRuleActions:EventOrchestrationRouterSetRuleActions": {
            "properties": {
                "dynamicRouteTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSetRuleActionsDynamicRouteTo:EventOrchestrationRouterSetRuleActionsDynamicRouteTo"
                    },
                    "description": "supports the following:\n"
                },
                "routeTo": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationRouterSetRuleActionsDynamicRouteTo:EventOrchestrationRouterSetRuleActionsDynamicRouteTo": {
            "properties": {
                "lookupBy": {
                    "type": "string",
                    "description": "Indicates whether the extracted value from the source is a service's name or ID. Allowed values are: `service_name`, `service_id`\n\nIf an event has a value at the specified `source`, and if the `regex` successfully matches the value, and if the matching portion is valid Service ID or Name, then the event will be routed to that service. Otherwise the event will be checked against any subsequent router rules.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "The regular expression, used to extract a value from the source field. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to a field in an event.\n"
                }
            },
            "type": "object",
            "required": [
                "lookupBy",
                "regex",
                "source"
            ]
        },
        "pagerduty:index/EventOrchestrationRouterSetRuleCondition:EventOrchestrationRouterSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCacheVariableCondition:EventOrchestrationServiceCacheVariableCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCacheVariableConfiguration:EventOrchestrationServiceCacheVariableConfiguration": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against the field specified via the `source` argument. This field is only used when `type` is `recent_value`\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths). This field is only used when `type` is `recent_value`\n"
                },
                "ttlSeconds": {
                    "type": "integer",
                    "description": "The number of seconds indicating how long to count incoming trigger events for. This field is only used when `type` is `trigger_event_count`\n"
                },
                "type": {
                    "type": "string",
                    "description": "The [type of value](https://support.pagerduty.com/docs/event-orchestration-variables) to store into the Cache Variable. Can be one of: `recent_value` or `trigger_event_count`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActions:EventOrchestrationServiceCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` *except* `route_to` action.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActions:EventOrchestrationServiceCatchAllActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n"
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationAction:EventOrchestrationServiceCatchAllActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service's settings, with what is configured by this action.\n"
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsExtraction:EventOrchestrationServiceCatchAllActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "incidentCustomFieldUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate:EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate"
                    },
                    "description": "Assign a custom field to the resulting incident.\n"
                },
                "pagerdutyAutomationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction:EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction",
                    "description": "Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.\n"
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n"
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsVariable:EventOrchestrationServiceCatchAllActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationAction:EventOrchestrationServiceCatchAllActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionHeader:EventOrchestrationServiceCatchAllActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionParameter:EventOrchestrationServiceCatchAllActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionHeader:EventOrchestrationServiceCatchAllActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsAutomationActionParameter:EventOrchestrationServiceCatchAllActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this parameter\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsExtraction:EventOrchestrationServiceCatchAllActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate:EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The custom field id\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to this custom field\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction:EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the Process Automation action to be triggered.\n"
                }
            },
            "type": "object",
            "required": [
                "actionId"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceCatchAllActionsVariable:EventOrchestrationServiceCatchAllActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRule:EventOrchestrationServiceSetRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRule:EventOrchestrationServiceSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActions:EventOrchestrationServiceSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleCondition:EventOrchestrationServiceSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the rule within the set.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActions:EventOrchestrationServiceSetRuleActions": {
            "properties": {
                "annotate": {
                    "type": "string",
                    "description": "Add this text as a note on the resulting incident.\n"
                },
                "automationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationAction:EventOrchestrationServiceSetRuleActionsAutomationAction",
                    "description": "Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.\n"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service's settings, with what is configured by this action.\n"
                },
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsExtraction:EventOrchestrationServiceSetRuleActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "incidentCustomFieldUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate:EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate"
                    },
                    "description": "Assign a custom field to the resulting incident.\n"
                },
                "pagerdutyAutomationAction": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction:EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction",
                    "description": "Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.\n"
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "suppress": {
                    "type": "boolean",
                    "description": "Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.\n"
                },
                "suspend": {
                    "type": "integer",
                    "description": "The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsVariable:EventOrchestrationServiceSetRuleActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationAction:EventOrchestrationServiceSetRuleActionsAutomationAction": {
            "properties": {
                "autoSend": {
                    "type": "boolean",
                    "description": "When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionHeader:EventOrchestrationServiceSetRuleActionsAutomationActionHeader"
                    },
                    "description": "Specify custom key/value pairs that'll be sent with the webhook request as request headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this Webhook.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionParameter:EventOrchestrationServiceSetRuleActionsAutomationActionParameter"
                    },
                    "description": "Specify custom key/value pairs that'll be included in the webhook request's JSON payload.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The API endpoint where PagerDuty's servers will send the webhook request.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionHeader:EventOrchestrationServiceSetRuleActionsAutomationActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the header\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this header\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsAutomationActionParameter:EventOrchestrationServiceSetRuleActionsAutomationActionParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name to identify the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of this parameter\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsExtraction:EventOrchestrationServiceSetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate:EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The custom field id\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to this custom field\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction:EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the Process Automation action to be triggered.\n"
                }
            },
            "type": "object",
            "required": [
                "actionId"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleActionsVariable:EventOrchestrationServiceSetRuleActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationServiceSetRuleCondition:EventOrchestrationServiceSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActions:EventOrchestrationUnroutedCatchAllActions",
                    "description": "These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` *except* `route_to` action.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActions:EventOrchestrationUnroutedCatchAllActions": {
            "properties": {
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActionsExtraction:EventOrchestrationUnroutedCatchAllActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "suppress": {
                    "type": "boolean"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAllActionsVariable:EventOrchestrationUnroutedCatchAllActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "suppress"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActionsExtraction:EventOrchestrationUnroutedCatchAllActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedCatchAllActionsVariable:EventOrchestrationUnroutedCatchAllActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRule:EventOrchestrationUnroutedSetRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRule:EventOrchestrationUnroutedSetRule": {
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActions:EventOrchestrationUnroutedSetRuleActions",
                    "description": "Actions that will be taken to change the resulting alert and incident, when an event matches this rule.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleCondition:EventOrchestrationUnroutedSetRuleCondition"
                    },
                    "description": "Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the rule within the set.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A description of this rule's purpose.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActions:EventOrchestrationUnroutedSetRuleActions": {
            "properties": {
                "eventAction": {
                    "type": "string",
                    "description": "sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActionsExtraction:EventOrchestrationUnroutedSetRuleActionsExtraction"
                    },
                    "description": "Replace any CEF field or Custom Details object field using custom variables.\n"
                },
                "routeTo": {
                    "type": "string",
                    "description": "The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSetRuleActionsVariable:EventOrchestrationUnroutedSetRuleActionsVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActionsExtraction:EventOrchestrationUnroutedSetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.\n"
                },
                "template": {
                    "type": "string",
                    "description": "A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:\n* Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`\n* Combine the event severity \u0026 summary with template like: `{{event.severity}}:{{event.summary}}`\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleActionsVariable:EventOrchestrationUnroutedSetRuleActionsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Only `regex` is supported\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "type",
                "value"
            ]
        },
        "pagerduty:index/EventOrchestrationUnroutedSetRuleCondition:EventOrchestrationUnroutedSetRuleCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "pagerduty:index/IncidentWorkflowStep:IncidentWorkflowStep": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the incident workflow.\n"
                },
                "inlineStepsInputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStepInlineStepsInput:IncidentWorkflowStepInlineStepsInput"
                    },
                    "description": "The list of inputs that contain a series of inline steps for the workflow action.\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStepInput:IncidentWorkflowStepInput"
                    },
                    "description": "The list of standard inputs for the workflow action.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow step.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id",
                        "inputs",
                        "name"
                    ]
                }
            }
        },
        "pagerduty:index/IncidentWorkflowStepInlineStepsInput:IncidentWorkflowStepInlineStepsInput": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the input.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStepInlineStepsInputStep:IncidentWorkflowStepInlineStepsInputStep"
                    },
                    "description": "The inline steps of the input. An inline step adheres to the step schema described above.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "steps"
                    ]
                }
            }
        },
        "pagerduty:index/IncidentWorkflowStepInlineStepsInputStep:IncidentWorkflowStepInlineStepsInputStep": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStepInlineStepsInputStepInput:IncidentWorkflowStepInlineStepsInputStepInput"
                    },
                    "description": "The list of standard inputs for the workflow action.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow step.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "inputs",
                        "name"
                    ]
                }
            }
        },
        "pagerduty:index/IncidentWorkflowStepInlineStepsInputStepInput:IncidentWorkflowStepInlineStepsInputStepInput": {
            "properties": {
                "generated": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the input.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the input.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "generated",
                        "name",
                        "value"
                    ]
                }
            }
        },
        "pagerduty:index/IncidentWorkflowStepInput:IncidentWorkflowStepInput": {
            "properties": {
                "generated": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the input.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the input.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "generated",
                        "name",
                        "value"
                    ]
                }
            }
        },
        "pagerduty:index/IncidentWorkflowTriggerPermissions:IncidentWorkflowTriggerPermissions": {
            "properties": {
                "restricted": {
                    "type": "boolean",
                    "description": "If `true`, indicates that the Trigger can only be started by authorized Users. If `false` (default), any user can start this Trigger. Applicable only to `manual`-type triggers.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team whose members can manually start this Trigger. Required and allowed only if `restricted` is `true`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "restricted"
                    ]
                }
            }
        },
        "pagerduty:index/ProviderUseAppOauthScopedToken:ProviderUseAppOauthScopedToken": {
            "properties": {
                "pdClientId": {
                    "type": "string"
                },
                "pdClientSecret": {
                    "type": "string"
                },
                "pdSubdomain": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ResponsePlayResponder:ResponsePlayResponder": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of escalation policy\n"
                },
                "escalationRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderEscalationRule:ResponsePlayResponderEscalationRule"
                    },
                    "description": "The escalation rules\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the user defined as the responder\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the escalation policy\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "onCallHandoffNotifications": {
                    "type": "string",
                    "description": "Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to \"if_has_services\". Could be \"if_has_services\", \"always\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderService:ResponsePlayResponderService"
                    },
                    "description": "There can be multiple services associated with a policy.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderTeam:ResponsePlayResponderTeam"
                    },
                    "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Should be set as `escalation_policy` for escalation policy responders.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationRules",
                        "numLoops",
                        "onCallHandoffNotifications",
                        "services",
                        "teams"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderEscalationRule:ResponsePlayResponderEscalationRule": {
            "properties": {
                "escalationDelayInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before an unacknowledged incident escalates away from this rule.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the response play.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponderEscalationRuleTarget:ResponsePlayResponderEscalationRuleTarget"
                    },
                    "description": "The targets an incident should be assigned to upon reaching this rule.\n"
                }
            },
            "type": "object",
            "required": [
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "escalationDelayInMinutes",
                        "id",
                        "targets"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderEscalationRuleTarget:ResponsePlayResponderEscalationRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of object of the target. Supported types are `user_reference`, `schedule_reference`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderService:ResponsePlayResponderService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlayResponderTeam:ResponsePlayResponderTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActions:RulesetRuleActions": {
            "properties": {
                "annotates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate"
                    },
                    "description": "Note added to the event.\n"
                },
                "eventActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction"
                    },
                    "description": "An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction"
                    },
                    "description": "Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:\n"
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsPriority:RulesetRuleActionsPriority"
                    },
                    "description": "The ID of the priority applied to the event.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsRoute:RulesetRuleActionsRoute"
                    },
                    "description": "The ID of the service where the event will be routed.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity"
                    },
                    "description": "The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.\n"
                },
                "suppresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress"
                    },
                    "description": "Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.\n"
                },
                "suspends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActionsSuspend:RulesetRuleActionsSuspend"
                    },
                    "description": "An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsAnnotate:RulesetRuleActionsAnnotate": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsEventAction:RulesetRuleActionsEventAction": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsExtraction:RulesetRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).\n\n*- **OR** -*\n"
                },
                "source": {
                    "type": "string",
                    "description": "Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n\n*NOTE: A rule can have multiple `extraction` objects attributed to it.*\n"
                },
                "template": {
                    "type": "string",
                    "description": "A customized field message. This can also include variables extracted from the payload by using string interpolation.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsPriority:RulesetRuleActionsPriority": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsRoute:RulesetRuleActionsRoute": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSeverity:RulesetRuleActionsSeverity": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSuppress:RulesetRuleActionsSuppress": {
            "properties": {
                "thresholdTimeAmount": {
                    "type": "integer",
                    "description": "The number value of the `threshold_time_unit` before an incident is created. Must be greater than 0.\n"
                },
                "thresholdTimeUnit": {
                    "type": "string",
                    "description": "The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.\n"
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "The number of alerts that should be suppressed. Must be greater than 0.\n"
                },
                "value": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleActionsSuspend:RulesetRuleActionsSuspend": {
            "properties": {
                "value": {
                    "type": "integer",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditions:RulesetRuleConditions": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Operator to combine sub-conditions. Can be `and` or `or`.\n"
                },
                "subconditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition"
                    },
                    "description": "List of sub-conditions that define the condition.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditionsSubcondition:RulesetRuleConditionsSubcondition": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter"
                    },
                    "description": "Parameter for the sub-condition. It requires both a `path` and `value` to be set.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleConditionsSubconditionParameter:RulesetRuleConditionsSubconditionParameter": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame": {
            "properties": {
                "activeBetweens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween"
                    },
                    "description": "Values for executing the rule during a specific time period.\n"
                },
                "scheduledWeeklies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly"
                    },
                    "description": "Values for executing the rule on a recurring schedule.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrameActiveBetween:RulesetRuleTimeFrameActiveBetween": {
            "properties": {
                "endTime": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "integer",
                    "description": "A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the *date* of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000\u0026tz=America%2FNew_York).\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleTimeFrameScheduledWeekly:RulesetRuleTimeFrameScheduledWeekly": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `start_time`.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the *date* of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000\u0026tz=America%2FNew_York).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "[The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = \"America/Toronto\"`\n"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleVariable:RulesetRuleVariable": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariableParameter:RulesetRuleVariableParameter"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetRuleVariableParameter:RulesetRuleVariableParameter": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/RulesetTeam:RulesetTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the ruleset.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pagerduty:index/ScheduleFinalSchedule:ScheduleFinalSchedule": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "renderedCoveragePercentage": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "renderedCoveragePercentage"
                    ]
                }
            }
        },
        "pagerduty:index/ScheduleLayer:ScheduleLayer": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "The end time of the schedule layer. If not specified, the layer does not end.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the schedule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule layer.\n"
                },
                "renderedCoveragePercentage": {
                    "type": "string"
                },
                "restrictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayerRestriction:ScheduleLayerRestriction"
                    },
                    "description": "A schedule layer restriction block. Restriction blocks documented below.\n"
                },
                "rotationTurnLengthSeconds": {
                    "type": "integer",
                    "description": "The duration of each on-call shift in `seconds`.\n"
                },
                "rotationVirtualStart": {
                    "type": "string",
                    "description": "The effective start time of the schedule layer. This can be before the start time of the schedule.\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the schedule layer.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordered list of users on this layer. The position of the user on the list determines their order in the layer.\n"
                }
            },
            "type": "object",
            "required": [
                "rotationTurnLengthSeconds",
                "rotationVirtualStart",
                "start",
                "users"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "renderedCoveragePercentage",
                        "rotationTurnLengthSeconds",
                        "rotationVirtualStart",
                        "start",
                        "users"
                    ]
                }
            }
        },
        "pagerduty:index/ScheduleLayerRestriction:ScheduleLayerRestriction": {
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "description": "The duration of the restriction in `seconds`.\n"
                },
                "startDayOfWeek": {
                    "type": "integer",
                    "description": "Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.\n"
                },
                "startTimeOfDay": {
                    "type": "string",
                    "description": "The start time in `HH:mm:ss` format.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `daily_restriction` or `weekly_restriction`.\n"
                }
            },
            "type": "object",
            "required": [
                "durationSeconds",
                "startTimeOfDay",
                "type"
            ]
        },
        "pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters": {
            "properties": {
                "config": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParametersConfig:ServiceAlertGroupingParametersConfig",
                    "description": "Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of alert grouping; one of `intelligent`, `time` or `content_based`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "config"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceAlertGroupingParametersConfig:ServiceAlertGroupingParametersConfig": {
            "properties": {
                "aggregate": {
                    "type": "string",
                    "description": "One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "The maximum amount of time allowed between Alerts. This setting applies only when `type` is set to `intelligent` or `content_based`. Value must be between `300` and `3600` or exactly `86400` (86400 is supported only for `content_based` alert grouping). Any Alerts arriving greater than `time_window` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeWindow"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceAutoPauseNotificationsParameters:ServiceAutoPauseNotificationsParameters": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "timeout"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency": {
            "properties": {
                "dependentServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService"
                    },
                    "description": "The service that dependents on the supporting service. Dependency dependent service documented below.\n"
                },
                "supportingServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService"
                    },
                    "description": "The service that supports the dependent service. Dependency supporting service documented below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceDependencyDependencyDependentService:ServiceDependencyDependencyDependentService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:index/ServiceDependencyDependencySupportingService:ServiceDependencyDependencySupportingService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the service dependency.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions": {
            "properties": {
                "annotates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsAnnotate:ServiceEventRuleActionsAnnotate"
                    },
                    "description": "Note added to the event.\n"
                },
                "eventActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsEventAction:ServiceEventRuleActionsEventAction"
                    },
                    "description": "An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.\n"
                },
                "extractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsExtraction:ServiceEventRuleActionsExtraction"
                    },
                    "description": "Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:\n"
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsPriority:ServiceEventRuleActionsPriority"
                    },
                    "description": "The ID of the priority applied to the event.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSeverity:ServiceEventRuleActionsSeverity"
                    },
                    "description": "The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.\n"
                },
                "suppresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSuppress:ServiceEventRuleActionsSuppress"
                    },
                    "description": "Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).\n"
                },
                "suspends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActionsSuspend:ServiceEventRuleActionsSuspend"
                    },
                    "description": "An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsAnnotate:ServiceEventRuleActionsAnnotate": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsEventAction:ServiceEventRuleActionsEventAction": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsExtraction:ServiceEventRuleActionsExtraction": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).\n\n*- **OR** -*\n"
                },
                "source": {
                    "type": "string",
                    "description": "Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n\n*NOTE: A rule can have multiple `extraction` objects attributed to it.*\n"
                },
                "template": {
                    "type": "string",
                    "description": "A customized field message. This can also include variables extracted from the payload by using string interpolation.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsPriority:ServiceEventRuleActionsPriority": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSeverity:ServiceEventRuleActionsSeverity": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSuppress:ServiceEventRuleActionsSuppress": {
            "properties": {
                "thresholdTimeAmount": {
                    "type": "integer",
                    "description": "The number value of the `threshold_time_unit` before an incident is created.\n"
                },
                "thresholdTimeUnit": {
                    "type": "string",
                    "description": "The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.\n"
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "The number of alerts that should be suppressed.\n"
                },
                "value": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleActionsSuspend:ServiceEventRuleActionsSuspend": {
            "properties": {
                "value": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Operator to combine sub-conditions. Can be `and` or `or`.\n"
                },
                "subconditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditionsSubcondition:ServiceEventRuleConditionsSubcondition"
                    },
                    "description": "List of sub-conditions that define the condition.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditionsSubcondition:ServiceEventRuleConditionsSubcondition": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditionsSubconditionParameter:ServiceEventRuleConditionsSubconditionParameter"
                    },
                    "description": "Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleConditionsSubconditionParameter:ServiceEventRuleConditionsSubconditionParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame": {
            "properties": {
                "activeBetweens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrameActiveBetween:ServiceEventRuleTimeFrameActiveBetween"
                    },
                    "description": "Values for executing the rule during a specific time period.\n"
                },
                "scheduledWeeklies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrameScheduledWeekly:ServiceEventRuleTimeFrameScheduledWeekly"
                    },
                    "description": "Values for executing the rule on a recurring schedule.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrameActiveBetween:ServiceEventRuleTimeFrameActiveBetween": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleTimeFrameScheduledWeekly:ServiceEventRuleTimeFrameScheduledWeekly": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "Length of time the schedule will be active.  Unix timestamp in milliseconds.\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the given schedule.\n"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariableParameter:ServiceEventRuleVariableParameter"
                    },
                    "description": "The parameters for performing the operation to populate the variable.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of operation to populate the variable. Usually `regex`.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceEventRuleVariableParameter:ServiceEventRuleVariableParameter": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule": {
            "properties": {
                "duringSupportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours",
                    "description": "Incidents' urgency during support hours.\n"
                },
                "outsideSupportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours",
                    "description": "Incidents' urgency outside support hours.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of incident urgency: `constant` or `use_support_hours` (when depending on specific support hours; see `support_hours`).\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIncidentUrgencyRuleDuringSupportHours:ServiceIncidentUrgencyRuleDuringSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIncidentUrgencyRuleOutsideSupportHours:ServiceIncidentUrgencyRuleOutsideSupportHours": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter": {
            "properties": {
                "bodyMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n"
                },
                "bodyRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n"
                },
                "fromEmailMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n"
                },
                "fromEmailRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service integration.\n"
                },
                "subjectMode": {
                    "type": "string",
                    "description": "Can be `always` or `match`.\n"
                },
                "subjectRegex": {
                    "type": "string",
                    "description": "Should be a valid regex or `null`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Can be `resolve` or `trigger`.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the service integration.\n"
                },
                "matchPredicate": {
                    "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicate:ServiceIntegrationEmailParserMatchPredicate"
                },
                "valueExtractors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserValueExtractor:ServiceIntegrationEmailParserValueExtractor"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "matchPredicate"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id",
                        "matchPredicate"
                    ]
                }
            }
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicate:ServiceIntegrationEmailParserMatchPredicate": {
            "properties": {
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicate"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `any` or `all`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicate": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Predicate value or valid regex.\n"
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject`, `body` or `from_addresses`.\n"
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicatePredicate"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserMatchPredicatePredicatePredicate:ServiceIntegrationEmailParserMatchPredicatePredicatePredicate": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Predicate value or valid regex.\n"
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject`, `body` or `from_addresses`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.\n"
                }
            },
            "type": "object",
            "required": [
                "matcher",
                "part",
                "type"
            ]
        },
        "pagerduty:index/ServiceIntegrationEmailParserValueExtractor:ServiceIntegrationEmailParserValueExtractor": {
            "properties": {
                "endsBefore": {
                    "type": "string"
                },
                "part": {
                    "type": "string",
                    "description": "Can be `subject` or `body`.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "If `type` has value `regex` this value should contain valid regex.\n\n**Note:** You can use the `pagerduty.getVendor` data source to locate the appropriate vendor ID.\n"
                },
                "startsAfter": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Can be `between`, `entire` or `regex`.\n"
                },
                "valueName": {
                    "type": "string",
                    "description": "First value extractor should have name `incident_key` other value extractors should contain custom names.\n"
                }
            },
            "type": "object",
            "required": [
                "part",
                "type",
                "valueName"
            ]
        },
        "pagerduty:index/ServiceScheduledAction:ServiceScheduledAction": {
            "properties": {
                "ats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledActionAt:ServiceScheduledActionAt"
                    },
                    "description": "A block representing when the scheduled action will occur.\n"
                },
                "toUrgency": {
                    "type": "string",
                    "description": "The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of scheduled action. Currently, this must be set to `urgency_change`.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceScheduledActionAt:ServiceScheduledActionAt": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.\n\nNote that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.\n\nBelow is an example for a `pagerduty.Service` resource with `incident_urgency_rules` with `type = \"use_support_hours\"`, `support_hours` and a default `scheduled_action` as well.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.Service(\"foo\", {\n    name: \"bar\",\n    description: \"bar bar bar\",\n    autoResolveTimeout: \"3600\",\n    acknowledgementTimeout: \"3600\",\n    escalationPolicy: fooPagerdutyEscalationPolicy.id,\n    incidentUrgencyRule: {\n        type: \"use_support_hours\",\n        duringSupportHours: {\n            type: \"constant\",\n            urgency: \"high\",\n        },\n        outsideSupportHours: {\n            type: \"constant\",\n            urgency: \"low\",\n        },\n    },\n    supportHours: {\n        type: \"fixed_time_per_day\",\n        timeZone: \"America/Lima\",\n        startTime: \"09:00:00\",\n        endTime: \"17:00:00\",\n        daysOfWeeks: [\n            1,\n            2,\n            3,\n            4,\n            5,\n        ],\n    },\n    scheduledActions: [{\n        type: \"urgency_change\",\n        toUrgency: \"high\",\n        ats: [{\n            type: \"named_time\",\n            name: \"support_hours_start\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.Service(\"foo\",\n    name=\"bar\",\n    description=\"bar bar bar\",\n    auto_resolve_timeout=\"3600\",\n    acknowledgement_timeout=\"3600\",\n    escalation_policy=foo_pagerduty_escalation_policy[\"id\"],\n    incident_urgency_rule={\n        \"type\": \"use_support_hours\",\n        \"during_support_hours\": {\n            \"type\": \"constant\",\n            \"urgency\": \"high\",\n        },\n        \"outside_support_hours\": {\n            \"type\": \"constant\",\n            \"urgency\": \"low\",\n        },\n    },\n    support_hours={\n        \"type\": \"fixed_time_per_day\",\n        \"time_zone\": \"America/Lima\",\n        \"start_time\": \"09:00:00\",\n        \"end_time\": \"17:00:00\",\n        \"days_of_weeks\": [\n            1,\n            2,\n            3,\n            4,\n            5,\n        ],\n    },\n    scheduled_actions=[{\n        \"type\": \"urgency_change\",\n        \"to_urgency\": \"high\",\n        \"ats\": [{\n            \"type\": \"named_time\",\n            \"name\": \"support_hours_start\",\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.Service(\"foo\", new()\n    {\n        Name = \"bar\",\n        Description = \"bar bar bar\",\n        AutoResolveTimeout = \"3600\",\n        AcknowledgementTimeout = \"3600\",\n        EscalationPolicy = fooPagerdutyEscalationPolicy.Id,\n        IncidentUrgencyRule = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleArgs\n        {\n            Type = \"use_support_hours\",\n            DuringSupportHours = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs\n            {\n                Type = \"constant\",\n                Urgency = \"high\",\n            },\n            OutsideSupportHours = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs\n            {\n                Type = \"constant\",\n                Urgency = \"low\",\n            },\n        },\n        SupportHours = new Pagerduty.Inputs.ServiceSupportHoursArgs\n        {\n            Type = \"fixed_time_per_day\",\n            TimeZone = \"America/Lima\",\n            StartTime = \"09:00:00\",\n            EndTime = \"17:00:00\",\n            DaysOfWeeks = new[]\n            {\n                1,\n                2,\n                3,\n                4,\n                5,\n            },\n        },\n        ScheduledActions = new[]\n        {\n            new Pagerduty.Inputs.ServiceScheduledActionArgs\n            {\n                Type = \"urgency_change\",\n                ToUrgency = \"high\",\n                Ats = new[]\n                {\n                    new Pagerduty.Inputs.ServiceScheduledActionAtArgs\n                    {\n                        Type = \"named_time\",\n                        Name = \"support_hours_start\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewService(ctx, \"foo\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"bar\"),\n\t\t\tDescription:            pulumi.String(\"bar bar bar\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"3600\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"3600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(fooPagerdutyEscalationPolicy.Id),\n\t\t\tIncidentUrgencyRule: \u0026pagerduty.ServiceIncidentUrgencyRuleArgs{\n\t\t\t\tType: pulumi.String(\"use_support_hours\"),\n\t\t\t\tDuringSupportHours: \u0026pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs{\n\t\t\t\t\tType:    pulumi.String(\"constant\"),\n\t\t\t\t\tUrgency: pulumi.String(\"high\"),\n\t\t\t\t},\n\t\t\t\tOutsideSupportHours: \u0026pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{\n\t\t\t\t\tType:    pulumi.String(\"constant\"),\n\t\t\t\t\tUrgency: pulumi.String(\"low\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSupportHours: \u0026pagerduty.ServiceSupportHoursArgs{\n\t\t\t\tType:      pulumi.String(\"fixed_time_per_day\"),\n\t\t\t\tTimeZone:  pulumi.String(\"America/Lima\"),\n\t\t\t\tStartTime: pulumi.String(\"09:00:00\"),\n\t\t\t\tEndTime:   pulumi.String(\"17:00:00\"),\n\t\t\t\tDaysOfWeeks: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(1),\n\t\t\t\t\tpulumi.Int(2),\n\t\t\t\t\tpulumi.Int(3),\n\t\t\t\t\tpulumi.Int(4),\n\t\t\t\t\tpulumi.Int(5),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScheduledActions: pagerduty.ServiceScheduledActionArray{\n\t\t\t\t\u0026pagerduty.ServiceScheduledActionArgs{\n\t\t\t\t\tType:      pulumi.String(\"urgency_change\"),\n\t\t\t\t\tToUrgency: pulumi.String(\"high\"),\n\t\t\t\t\tAts: pagerduty.ServiceScheduledActionAtArray{\n\t\t\t\t\t\t\u0026pagerduty.ServiceScheduledActionAtArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"named_time\"),\n\t\t\t\t\t\t\tName: pulumi.String(\"support_hours_start\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;\nimport com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;\nimport com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Service(\"foo\", ServiceArgs.builder()\n            .name(\"bar\")\n            .description(\"bar bar bar\")\n            .autoResolveTimeout(3600)\n            .acknowledgementTimeout(3600)\n            .escalationPolicy(fooPagerdutyEscalationPolicy.id())\n            .incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs.builder()\n                .type(\"use_support_hours\")\n                .duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs.builder()\n                    .type(\"constant\")\n                    .urgency(\"high\")\n                    .build())\n                .outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs.builder()\n                    .type(\"constant\")\n                    .urgency(\"low\")\n                    .build())\n                .build())\n            .supportHours(ServiceSupportHoursArgs.builder()\n                .type(\"fixed_time_per_day\")\n                .timeZone(\"America/Lima\")\n                .startTime(\"09:00:00\")\n                .endTime(\"17:00:00\")\n                .daysOfWeeks(                \n                    1,\n                    2,\n                    3,\n                    4,\n                    5)\n                .build())\n            .scheduledActions(ServiceScheduledActionArgs.builder()\n                .type(\"urgency_change\")\n                .toUrgency(\"high\")\n                .ats(ServiceScheduledActionAtArgs.builder()\n                    .type(\"named_time\")\n                    .name(\"support_hours_start\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:Service\n    properties:\n      name: bar\n      description: bar bar bar\n      autoResolveTimeout: 3600\n      acknowledgementTimeout: 3600\n      escalationPolicy: ${fooPagerdutyEscalationPolicy.id}\n      incidentUrgencyRule:\n        type: use_support_hours\n        duringSupportHours:\n          type: constant\n          urgency: high\n        outsideSupportHours:\n          type: constant\n          urgency: low\n      supportHours:\n        type: fixed_time_per_day\n        timeZone: America/Lima\n        startTime: 09:00:00\n        endTime: 17:00:00\n        daysOfWeeks:\n          - 1\n          - 2\n          - 3\n          - 4\n          - 5\n      scheduledActions:\n        - type: urgency_change\n          toUrgency: high\n          ats:\n            - type: named_time\n              name: support_hours_start\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of time specification. Currently, this must be set to `named_time`.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/ServiceSupportHours:ServiceSupportHours": {
            "properties": {
                "daysOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of days of week as integers. `1` to `7`, `1` being\nMonday and `7` being Sunday.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The support hours' ending time of day.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The support hours' starting time of day.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone for the support hours.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of support hours. Can be `fixed_time_per_day`.\n"
                }
            },
            "type": "object"
        },
        "pagerduty:index/SlackConnectionConfig:SlackConnectionConfig": {
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings to filter events by PagerDuty event type. `\"incident.triggered\"` is required. The follow event types are also possible:\n- `incident.acknowledged`\n- `incident.escalated`\n- `incident.resolved`\n- `incident.reassigned`\n- `incident.annotated`\n- `incident.unacknowledged`\n- `incident.delegated`\n- `incident.priority_updated`\n- `incident.responder.added`\n- `incident.responder.replied`\n- `incident.status_update_published`\n- `incident.reopened`\n"
                },
                "priorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through pagerduty.getPriority data source.\n- When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.\n- When set to `[\"*\"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Allows you to filter events by urgency. Either `high` or `low`.\n"
                }
            },
            "type": "object",
            "required": [
                "events"
            ]
        },
        "pagerduty:index/UserHandoffNotificationRuleContactMethod:UserHandoffNotificationRuleContactMethod": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the contact method.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the contact method. May be (`email_contact_method`, `email_contact_method_reference`, `phone_contact_method`, `phone_contact_method_reference`, `push_notification_contact_method`, `push_notification_contact_method_reference`, `sms_contact_method`, `sms_contact_method_reference`).\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod": {
            "properties": {
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethodCustomHeader:WebhookSubscriptionDeliveryMethodCustomHeader"
                    },
                    "description": "The custom_header of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.\n"
                },
                "temporarilyDisabled": {
                    "type": "boolean",
                    "description": "Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the type of the delivery method. Allowed and default value: `http_delivery_method`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The destination URL for webhook delivery.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "temporarilyDisabled"
                    ]
                }
            }
        },
        "pagerduty:index/WebhookSubscriptionDeliveryMethodCustomHeader:WebhookSubscriptionDeliveryMethodCustomHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the object being used as the filter. This field is required for all filter types except account_reference.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object being used as the filter. Allowed values are `account_reference`, `service_reference`, and `team_reference`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "pagerduty:index/getAutomationActionsActionActionDataReference:getAutomationActionsActionActionDataReference": {
            "properties": {
                "invocationCommand": {
                    "type": "string",
                    "description": "(Optional) The command to execute the script with.\n"
                },
                "processAutomationJobArguments": {
                    "type": "string",
                    "description": "(Optional) The arguments to pass to the Process Automation job execution.\n"
                },
                "processAutomationJobId": {
                    "type": "string",
                    "description": "(Required for `process_automation` action_type) The ID of the Process Automation job to execute.\n"
                },
                "processAutomationNodeFilter": {
                    "type": "string",
                    "description": "(Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).\n"
                },
                "script": {
                    "type": "string",
                    "description": "(Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.\n"
                }
            },
            "type": "object",
            "required": [
                "invocationCommand",
                "processAutomationJobArguments",
                "processAutomationJobId",
                "processAutomationNodeFilter",
                "script"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationGlobalCacheVariableCondition:getEventOrchestrationGlobalCacheVariableCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationGlobalCacheVariableConfiguration:getEventOrchestrationGlobalCacheVariableConfiguration": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against the field specified via the `source` argument. This field is only used when `type` is `recent_value`\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths). This field is only used when `type` is `recent_value`\n"
                },
                "ttlSeconds": {
                    "type": "integer",
                    "description": "The number of seconds indicating how long to count incoming trigger events for. This field is only used when `type` is `trigger_event_count`\n"
                },
                "type": {
                    "type": "string",
                    "description": "The [type of value](https://support.pagerduty.com/docs/event-orchestration-variables) to store into the Cache Variable. Can be one of: `recent_value` or `trigger_event_count`.\n"
                }
            },
            "type": "object",
            "required": [
                "regex",
                "source",
                "ttlSeconds",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationIntegrationDetail:getEventOrchestrationIntegrationDetail": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n"
                },
                "label": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegrationDetailParameter:getEventOrchestrationIntegrationDetailParameter"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "parameters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationIntegrationDetailParameter:getEventOrchestrationIntegrationDetailParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n"
                }
            },
            "type": "object",
            "required": [
                "routingKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationIntegrationParameter:getEventOrchestrationIntegrationParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n"
                }
            },
            "type": "object",
            "required": [
                "routingKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationServiceCacheVariableCondition:getEventOrchestrationServiceCacheVariableCondition": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationServiceCacheVariableConfiguration:getEventOrchestrationServiceCacheVariableConfiguration": {
            "properties": {
                "regex": {
                    "type": "string",
                    "description": "A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against the field specified via the `source` argument. This field is only used when `type` is `recent_value`\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths). This field is only used when `type` is `recent_value`\n"
                },
                "ttlSeconds": {
                    "type": "integer",
                    "description": "The number of seconds indicating how long to count incoming trigger events for. This field is only used when `type` is `trigger_event_count`\n"
                },
                "type": {
                    "type": "string",
                    "description": "The [type of value](https://support.pagerduty.com/docs/event-orchestration-variables) to store into the Cache Variable. Can be one of: `recent_value` or `trigger_event_count`.\n"
                }
            },
            "type": "object",
            "required": [
                "regex",
                "source",
                "ttlSeconds",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationsEventOrchestration:getEventOrchestrationsEventOrchestration": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getEventOrchestrationsEventOrchestrationIntegration:getEventOrchestrationsEventOrchestrationIntegration"
                    },
                    "description": "An integration for the Event Orchestration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the found Event Orchestration.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "integrations",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationsEventOrchestrationIntegration:getEventOrchestrationsEventOrchestrationIntegration": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the integration\n"
                },
                "label": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getEventOrchestrationsEventOrchestrationIntegrationParameter:getEventOrchestrationsEventOrchestrationIntegrationParameter"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "parameters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getEventOrchestrationsEventOrchestrationIntegrationParameter:getEventOrchestrationsEventOrchestrationIntegrationParameter": {
            "properties": {
                "routingKey": {
                    "type": "string",
                    "description": "Routing key that routes to this Orchestration.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the routing key. `global` is the default type.\n"
                }
            },
            "type": "object",
            "required": [
                "routingKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getLicensesLicense:getLicensesLicense": {
            "properties": {
                "allocationsAvailable": {
                    "type": "integer",
                    "description": "Available allocations to assign to users\n"
                },
                "currentValue": {
                    "type": "integer",
                    "description": "The number of allocations already assigned to users\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the license\n"
                },
                "htmlUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "Allows to override the default behavior for setting the `id` attribute that is required for data sources.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the license\n"
                },
                "roleGroup": {
                    "type": "string",
                    "description": "The role group for the license that determines the available `valid_roles`\n"
                },
                "self": {
                    "type": "string"
                },
                "summary": {
                    "type": "string",
                    "description": "Summary of the license\n"
                },
                "type": {
                    "type": "string"
                },
                "validRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed roles that may be assigned to a user with this license\n"
                }
            },
            "type": "object",
            "required": [
                "allocationsAvailable",
                "currentValue",
                "description",
                "htmlUrl",
                "id",
                "name",
                "roleGroup",
                "self",
                "summary",
                "type",
                "validRoles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getServiceTeam:getServiceTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the found service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The service name to use to find a service in the PagerDuty API.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsResourceScoresScore:getStandardsResourceScoresScore": {
            "properties": {
                "passing": {
                    "type": "integer",
                    "description": "Number of standards this resource successfully complies to.\n"
                },
                "total": {
                    "type": "integer",
                    "description": "Number of standards associated to this resource.\n"
                }
            },
            "type": "object",
            "required": [
                "passing",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsResourceScoresStandard:getStandardsResourceScoresStandard": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the standard is currently active and applicable to the resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides a textual description of the standard.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Identifier of said resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of the standard.\n"
                },
                "pass": {
                    "type": "boolean",
                    "description": "Indicates whether the resource complies to this standard.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the standard.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "description",
                "id",
                "name",
                "pass",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsResourcesScoresResource:getStandardsResourcesScoresResource": {
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "Unique Identifier.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the object the standards are associated to. Allowed values are `technical_services`.\n"
                },
                "score": {
                    "$ref": "#/types/pagerduty:index/getStandardsResourcesScoresResourceScore:getStandardsResourcesScoresResourceScore",
                    "description": "Summary of the scores for standards associated with this resource.\n"
                },
                "standards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getStandardsResourcesScoresResourceStandard:getStandardsResourcesScoresResourceStandard"
                    },
                    "description": "The list of standards evaluated against.\n"
                }
            },
            "type": "object",
            "required": [
                "resourceId",
                "resourceType",
                "score",
                "standards"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsResourcesScoresResourceScore:getStandardsResourcesScoresResourceScore": {
            "properties": {
                "passing": {
                    "type": "integer",
                    "description": "Number of standards this resource successfully complies to.\n"
                },
                "total": {
                    "type": "integer",
                    "description": "Number of standards associated to this resource.\n"
                }
            },
            "type": "object",
            "required": [
                "passing",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsResourcesScoresResourceStandard:getStandardsResourcesScoresResourceStandard": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the standard is currently active and applicable to the resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides a textual description of the standard.\n"
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of the standard.\n"
                },
                "pass": {
                    "type": "boolean",
                    "description": "Indicates whether the resource complies to this standard.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the standard.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "description",
                "id",
                "name",
                "pass",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsStandard:getStandardsStandard": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the standard is currently active and applicable to the resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides a textual description of the standard.\n"
                },
                "exclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getStandardsStandardExclusion:getStandardsStandardExclusion"
                    },
                    "description": "A list of exceptions for the application of this standard.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the resource being included.\n"
                },
                "inclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/getStandardsStandardInclusion:getStandardsStandardInclusion"
                    },
                    "description": "A list of explict instances this standard applies to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of the standard.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Filter by `resource_type` the received standards. Allowed values are `technical_service`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of resource this inclusion applies to.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "description",
                "exclusions",
                "id",
                "inclusions",
                "name",
                "resourceType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsStandardExclusion:getStandardsStandardExclusion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the resource being included.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of resource this inclusion applies to.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getStandardsStandardInclusion:getStandardsStandardInclusion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the resource being included.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of resource this inclusion applies to.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getTeamMembersMember:getTeamMembersMember": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the found user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The team role of the found user.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `user_reference`. Can be used for passing to another object as dependency.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "role",
                "summary",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pagerduty:index/getUsersUser:getUsersUser": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The human-friendly description of the found user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the found user.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the found user.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The job title of the found user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name of the found user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the found user.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone of the found user.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "email",
                "id",
                "jobTitle",
                "name",
                "role",
                "timeZone",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the pagerduty package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiUrlOverride": {
                "type": "string"
            },
            "insecureTls": {
                "type": "boolean"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean"
            },
            "token": {
                "type": "string"
            },
            "useAppOauthScopedToken": {
                "$ref": "#/types/pagerduty:index/ProviderUseAppOauthScopedToken:ProviderUseAppOauthScopedToken"
            },
            "userToken": {
                "type": "string"
            }
        },
        "inputProperties": {
            "apiUrlOverride": {
                "type": "string"
            },
            "insecureTls": {
                "type": "boolean"
            },
            "serviceRegion": {
                "type": "string"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "default": false
            },
            "token": {
                "type": "string"
            },
            "useAppOauthScopedToken": {
                "$ref": "#/types/pagerduty:index/ProviderUseAppOauthScopedToken:ProviderUseAppOauthScopedToken"
            },
            "userToken": {
                "type": "string"
            }
        }
    },
    "resources": {
        "pagerduty:index/addon:Addon": {
            "description": "With [add-ons](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEwNQ-install-an-add-on), third-party developers can write their own add-ons to PagerDuty's UI. Given a configuration containing a src parameter, that URL will be embedded in an iframe on a page that's available to users from a drop-down menu.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Addon(\"example\", {\n    name: \"Internal Status Page\",\n    src: \"https://intranet.example.com/status\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Addon(\"example\",\n    name=\"Internal Status Page\",\n    src=\"https://intranet.example.com/status\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Addon(\"example\", new()\n    {\n        Name = \"Internal Status Page\",\n        Src = \"https://intranet.example.com/status\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewAddon(ctx, \"example\", \u0026pagerduty.AddonArgs{\n\t\t\tName: pulumi.String(\"Internal Status Page\"),\n\t\t\tSrc:  pulumi.String(\"https://intranet.example.com/status\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Addon;\nimport com.pulumi.pagerduty.AddonArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Addon(\"example\", AddonArgs.builder()\n            .name(\"Internal Status Page\")\n            .src(\"https://intranet.example.com/status\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Addon\n    properties:\n      name: Internal Status Page\n      src: https://intranet.example.com/status\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAdd-ons can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/addon:Addon example P3DH5M6\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "required": [
                "name",
                "src"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the add-on.\n"
                },
                "src": {
                    "type": "string",
                    "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                }
            },
            "requiredInputs": [
                "src"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Addon resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the add-on.\n"
                    },
                    "src": {
                        "type": "string",
                        "description": "The source URL to display in a frame in the PagerDuty UI. `HTTPS` is required.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/automationActionsAction:AutomationActionsAction": {
            "description": "An Automation Actions [action](https://developer.pagerduty.com/api-reference/d64584a4371d3-create-an-automation-action) invokes jobs and workflows that are staged in Runbook Automation or Process Automation. It may also execute a command line script run by a Process Automation runner installed in your infrastructure.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst paActionExample = new pagerduty.AutomationActionsAction(\"pa_action_example\", {\n    name: \"PA Action created via TF\",\n    description: \"Description of the PA Action created via TF\",\n    actionType: \"process_automation\",\n    actionDataReference: {\n        processAutomationJobId: \"P123456\",\n    },\n});\nconst scriptActionExample = new pagerduty.AutomationActionsAction(\"script_action_example\", {\n    name: \"Script Action created via TF\",\n    description: \"Description of the Script Action created via TF\",\n    actionType: \"script\",\n    actionDataReference: {\n        script: \"print(\\\"Hello from a Python script!\\\")\",\n        invocationCommand: \"/usr/local/bin/python3\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\npa_action_example = pagerduty.AutomationActionsAction(\"pa_action_example\",\n    name=\"PA Action created via TF\",\n    description=\"Description of the PA Action created via TF\",\n    action_type=\"process_automation\",\n    action_data_reference={\n        \"process_automation_job_id\": \"P123456\",\n    })\nscript_action_example = pagerduty.AutomationActionsAction(\"script_action_example\",\n    name=\"Script Action created via TF\",\n    description=\"Description of the Script Action created via TF\",\n    action_type=\"script\",\n    action_data_reference={\n        \"script\": \"print(\\\"Hello from a Python script!\\\")\",\n        \"invocation_command\": \"/usr/local/bin/python3\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var paActionExample = new Pagerduty.AutomationActionsAction(\"pa_action_example\", new()\n    {\n        Name = \"PA Action created via TF\",\n        Description = \"Description of the PA Action created via TF\",\n        ActionType = \"process_automation\",\n        ActionDataReference = new Pagerduty.Inputs.AutomationActionsActionActionDataReferenceArgs\n        {\n            ProcessAutomationJobId = \"P123456\",\n        },\n    });\n\n    var scriptActionExample = new Pagerduty.AutomationActionsAction(\"script_action_example\", new()\n    {\n        Name = \"Script Action created via TF\",\n        Description = \"Description of the Script Action created via TF\",\n        ActionType = \"script\",\n        ActionDataReference = new Pagerduty.Inputs.AutomationActionsActionActionDataReferenceArgs\n        {\n            Script = \"print(\\\"Hello from a Python script!\\\")\",\n            InvocationCommand = \"/usr/local/bin/python3\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewAutomationActionsAction(ctx, \"pa_action_example\", \u0026pagerduty.AutomationActionsActionArgs{\n\t\t\tName:        pulumi.String(\"PA Action created via TF\"),\n\t\t\tDescription: pulumi.String(\"Description of the PA Action created via TF\"),\n\t\t\tActionType:  pulumi.String(\"process_automation\"),\n\t\t\tActionDataReference: \u0026pagerduty.AutomationActionsActionActionDataReferenceArgs{\n\t\t\t\tProcessAutomationJobId: pulumi.String(\"P123456\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewAutomationActionsAction(ctx, \"script_action_example\", \u0026pagerduty.AutomationActionsActionArgs{\n\t\t\tName:        pulumi.String(\"Script Action created via TF\"),\n\t\t\tDescription: pulumi.String(\"Description of the Script Action created via TF\"),\n\t\t\tActionType:  pulumi.String(\"script\"),\n\t\t\tActionDataReference: \u0026pagerduty.AutomationActionsActionActionDataReferenceArgs{\n\t\t\t\tScript:            pulumi.String(\"print(\\\"Hello from a Python script!\\\")\"),\n\t\t\t\tInvocationCommand: pulumi.String(\"/usr/local/bin/python3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.AutomationActionsAction;\nimport com.pulumi.pagerduty.AutomationActionsActionArgs;\nimport com.pulumi.pagerduty.inputs.AutomationActionsActionActionDataReferenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var paActionExample = new AutomationActionsAction(\"paActionExample\", AutomationActionsActionArgs.builder()\n            .name(\"PA Action created via TF\")\n            .description(\"Description of the PA Action created via TF\")\n            .actionType(\"process_automation\")\n            .actionDataReference(AutomationActionsActionActionDataReferenceArgs.builder()\n                .processAutomationJobId(\"P123456\")\n                .build())\n            .build());\n\n        var scriptActionExample = new AutomationActionsAction(\"scriptActionExample\", AutomationActionsActionArgs.builder()\n            .name(\"Script Action created via TF\")\n            .description(\"Description of the Script Action created via TF\")\n            .actionType(\"script\")\n            .actionDataReference(AutomationActionsActionActionDataReferenceArgs.builder()\n                .script(\"print(\\\"Hello from a Python script!\\\")\")\n                .invocationCommand(\"/usr/local/bin/python3\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  paActionExample:\n    type: pagerduty:AutomationActionsAction\n    name: pa_action_example\n    properties:\n      name: PA Action created via TF\n      description: Description of the PA Action created via TF\n      actionType: process_automation\n      actionDataReference:\n        processAutomationJobId: P123456\n  scriptActionExample:\n    type: pagerduty:AutomationActionsAction\n    name: script_action_example\n    properties:\n      name: Script Action created via TF\n      description: Description of the Script Action created via TF\n      actionType: script\n      actionDataReference:\n        script: print(\"Hello from a Python script!\")\n        invocationCommand: /usr/local/bin/python3\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nActions can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/automationActionsAction:AutomationActionsAction example 01DER7CUUBF7TH4116K0M4WKPU\n```\n",
            "properties": {
                "actionClassification": {
                    "type": "string",
                    "description": "The category of the action. The only allowed values are `diagnostic` and `remediation`.\n"
                },
                "actionDataReference": {
                    "$ref": "#/types/pagerduty:index/AutomationActionsActionActionDataReference:AutomationActionsActionActionDataReference",
                    "description": "Action Data block. Action Data is documented below.\n"
                },
                "actionType": {
                    "type": "string",
                    "description": "The type of the action. The only allowed values are `process_automation` and `script`. Cannot be changed once set.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The time action was created. Represented as an ISO 8601 timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the action. Max length is 1024 characters.\n"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "(Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action. Max length is 255 characters.\n"
                },
                "runnerId": {
                    "type": "string",
                    "description": "The Process Automation Actions runner to associate the action with. Cannot be changed for the `process_automation` action type once set.\n"
                },
                "runnerType": {
                    "type": "string",
                    "description": "(Optional) The type of the runner associated with the action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `action`.\n"
                }
            },
            "required": [
                "actionDataReference",
                "actionType",
                "creationTime",
                "modifyTime",
                "name",
                "runnerType",
                "type"
            ],
            "inputProperties": {
                "actionClassification": {
                    "type": "string",
                    "description": "The category of the action. The only allowed values are `diagnostic` and `remediation`.\n"
                },
                "actionDataReference": {
                    "$ref": "#/types/pagerduty:index/AutomationActionsActionActionDataReference:AutomationActionsActionActionDataReference",
                    "description": "Action Data block. Action Data is documented below.\n"
                },
                "actionType": {
                    "type": "string",
                    "description": "The type of the action. The only allowed values are `process_automation` and `script`. Cannot be changed once set.\n",
                    "willReplaceOnChanges": true
                },
                "creationTime": {
                    "type": "string",
                    "description": "The time action was created. Represented as an ISO 8601 timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the action. Max length is 1024 characters.\n"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "(Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action. Max length is 255 characters.\n"
                },
                "runnerId": {
                    "type": "string",
                    "description": "The Process Automation Actions runner to associate the action with. Cannot be changed for the `process_automation` action type once set.\n"
                },
                "runnerType": {
                    "type": "string",
                    "description": "(Optional) The type of the runner associated with the action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `action`.\n"
                }
            },
            "requiredInputs": [
                "actionDataReference",
                "actionType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationActionsAction resources.\n",
                "properties": {
                    "actionClassification": {
                        "type": "string",
                        "description": "The category of the action. The only allowed values are `diagnostic` and `remediation`.\n"
                    },
                    "actionDataReference": {
                        "$ref": "#/types/pagerduty:index/AutomationActionsActionActionDataReference:AutomationActionsActionActionDataReference",
                        "description": "Action Data block. Action Data is documented below.\n"
                    },
                    "actionType": {
                        "type": "string",
                        "description": "The type of the action. The only allowed values are `process_automation` and `script`. Cannot be changed once set.\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time action was created. Represented as an ISO 8601 timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the action. Max length is 1024 characters.\n"
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "(Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the action. Max length is 255 characters.\n"
                    },
                    "runnerId": {
                        "type": "string",
                        "description": "The Process Automation Actions runner to associate the action with. Cannot be changed for the `process_automation` action type once set.\n"
                    },
                    "runnerType": {
                        "type": "string",
                        "description": "(Optional) The type of the runner associated with the action.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `action`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation": {
            "description": "An Automation Actions [action association with a service](https://developer.pagerduty.com/api-reference/5d2f051f3fb43-associate-an-automation-action-with-a-service) configures the relation of a specific Action with a Service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user_reference\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: foo.id,\n    alertCreation: \"create_alerts_and_incidents\",\n    autoPauseNotificationsParameters: {\n        enabled: true,\n        timeout: 300,\n    },\n});\nconst paActionExample = new pagerduty.AutomationActionsAction(\"pa_action_example\", {\n    name: \"PA Action created via TF\",\n    description: \"Description of the PA Action created via TF\",\n    actionType: \"process_automation\",\n    actionDataReference: {\n        processAutomationJobId: \"P123456\",\n    },\n});\nconst fooAutomationActionsActionServiceAssociation = new pagerduty.AutomationActionsActionServiceAssociation(\"foo\", {\n    actionId: paActionExample.id,\n    serviceId: exampleService.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user_reference\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=foo.id,\n    alert_creation=\"create_alerts_and_incidents\",\n    auto_pause_notifications_parameters={\n        \"enabled\": True,\n        \"timeout\": 300,\n    })\npa_action_example = pagerduty.AutomationActionsAction(\"pa_action_example\",\n    name=\"PA Action created via TF\",\n    description=\"Description of the PA Action created via TF\",\n    action_type=\"process_automation\",\n    action_data_reference={\n        \"process_automation_job_id\": \"P123456\",\n    })\nfoo_automation_actions_action_service_association = pagerduty.AutomationActionsActionServiceAssociation(\"foo\",\n    action_id=pa_action_example.id,\n    service_id=example_service.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = foo.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n        AutoPauseNotificationsParameters = new Pagerduty.Inputs.ServiceAutoPauseNotificationsParametersArgs\n        {\n            Enabled = true,\n            Timeout = 300,\n        },\n    });\n\n    var paActionExample = new Pagerduty.AutomationActionsAction(\"pa_action_example\", new()\n    {\n        Name = \"PA Action created via TF\",\n        Description = \"Description of the PA Action created via TF\",\n        ActionType = \"process_automation\",\n        ActionDataReference = new Pagerduty.Inputs.AutomationActionsActionActionDataReferenceArgs\n        {\n            ProcessAutomationJobId = \"P123456\",\n        },\n    });\n\n    var fooAutomationActionsActionServiceAssociation = new Pagerduty.AutomationActionsActionServiceAssociation(\"foo\", new()\n    {\n        ActionId = paActionExample.Id,\n        ServiceId = exampleService.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo, err := pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       foo.ID(),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t\tAutoPauseNotificationsParameters: \u0026pagerduty.ServiceAutoPauseNotificationsParametersArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tTimeout: pulumi.Int(300),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpaActionExample, err := pagerduty.NewAutomationActionsAction(ctx, \"pa_action_example\", \u0026pagerduty.AutomationActionsActionArgs{\n\t\t\tName:        pulumi.String(\"PA Action created via TF\"),\n\t\t\tDescription: pulumi.String(\"Description of the PA Action created via TF\"),\n\t\t\tActionType:  pulumi.String(\"process_automation\"),\n\t\t\tActionDataReference: \u0026pagerduty.AutomationActionsActionActionDataReferenceArgs{\n\t\t\t\tProcessAutomationJobId: pulumi.String(\"P123456\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewAutomationActionsActionServiceAssociation(ctx, \"foo\", \u0026pagerduty.AutomationActionsActionServiceAssociationArgs{\n\t\t\tActionId:  paActionExample.ID(),\n\t\t\tServiceId: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.inputs.ServiceAutoPauseNotificationsParametersArgs;\nimport com.pulumi.pagerduty.AutomationActionsAction;\nimport com.pulumi.pagerduty.AutomationActionsActionArgs;\nimport com.pulumi.pagerduty.inputs.AutomationActionsActionActionDataReferenceArgs;\nimport com.pulumi.pagerduty.AutomationActionsActionServiceAssociation;\nimport com.pulumi.pagerduty.AutomationActionsActionServiceAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user_reference\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(foo.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .autoPauseNotificationsParameters(ServiceAutoPauseNotificationsParametersArgs.builder()\n                .enabled(true)\n                .timeout(300)\n                .build())\n            .build());\n\n        var paActionExample = new AutomationActionsAction(\"paActionExample\", AutomationActionsActionArgs.builder()\n            .name(\"PA Action created via TF\")\n            .description(\"Description of the PA Action created via TF\")\n            .actionType(\"process_automation\")\n            .actionDataReference(AutomationActionsActionActionDataReferenceArgs.builder()\n                .processAutomationJobId(\"P123456\")\n                .build())\n            .build());\n\n        var fooAutomationActionsActionServiceAssociation = new AutomationActionsActionServiceAssociation(\"fooAutomationActionsActionServiceAssociation\", AutomationActionsActionServiceAssociationArgs.builder()\n            .actionId(paActionExample.id())\n            .serviceId(exampleService.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user_reference\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${foo.id}\n      alertCreation: create_alerts_and_incidents\n      autoPauseNotificationsParameters:\n        enabled: true\n        timeout: 300\n  paActionExample:\n    type: pagerduty:AutomationActionsAction\n    name: pa_action_example\n    properties:\n      name: PA Action created via TF\n      description: Description of the PA Action created via TF\n      actionType: process_automation\n      actionDataReference:\n        processAutomationJobId: P123456\n  fooAutomationActionsActionServiceAssociation:\n    type: pagerduty:AutomationActionsActionServiceAssociation\n    name: foo\n    properties:\n      actionId: ${paActionExample.id}\n      serviceId: ${exampleService.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAction service association can be imported using the `action_id` and `service_id` separated by a colon, e.g.\n\n```sh\n$ pulumi import pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z\n```\n",
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the action.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Id of the service associated to the action.\n"
                }
            },
            "required": [
                "actionId",
                "serviceId"
            ],
            "inputProperties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the action.\n",
                    "willReplaceOnChanges": true
                },
                "serviceId": {
                    "type": "string",
                    "description": "Id of the service associated to the action.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actionId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationActionsActionServiceAssociation resources.\n",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "Id of the action.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Id of the service associated to the action.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/automationActionsActionTeamAssociation:AutomationActionsActionTeamAssociation": {
            "description": "An Automation Actions [action association with a team](https://developer.pagerduty.com/api-reference/8f722dd91a4ba-associate-an-automation-action-with-a-team) configures the relation of a specific Action with a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Team(\"example\", {\n    name: \"Engineering\",\n    description: \"All engineering\",\n});\nconst paActionExample = new pagerduty.AutomationActionsAction(\"pa_action_example\", {\n    name: \"PA Action created via TF\",\n    description: \"Description of the PA Action created via TF\",\n    actionType: \"process_automation\",\n    actionDataReference: {\n        processAutomationJobId: \"P123456\",\n    },\n});\nconst foo = new pagerduty.AutomationActionsActionTeamAssociation(\"foo\", {\n    actionId: paActionExample.id,\n    teamId: example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Team(\"example\",\n    name=\"Engineering\",\n    description=\"All engineering\")\npa_action_example = pagerduty.AutomationActionsAction(\"pa_action_example\",\n    name=\"PA Action created via TF\",\n    description=\"Description of the PA Action created via TF\",\n    action_type=\"process_automation\",\n    action_data_reference={\n        \"process_automation_job_id\": \"P123456\",\n    })\nfoo = pagerduty.AutomationActionsActionTeamAssociation(\"foo\",\n    action_id=pa_action_example.id,\n    team_id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Team(\"example\", new()\n    {\n        Name = \"Engineering\",\n        Description = \"All engineering\",\n    });\n\n    var paActionExample = new Pagerduty.AutomationActionsAction(\"pa_action_example\", new()\n    {\n        Name = \"PA Action created via TF\",\n        Description = \"Description of the PA Action created via TF\",\n        ActionType = \"process_automation\",\n        ActionDataReference = new Pagerduty.Inputs.AutomationActionsActionActionDataReferenceArgs\n        {\n            ProcessAutomationJobId = \"P123456\",\n        },\n    });\n\n    var foo = new Pagerduty.AutomationActionsActionTeamAssociation(\"foo\", new()\n    {\n        ActionId = paActionExample.Id,\n        TeamId = example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewTeam(ctx, \"example\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"Engineering\"),\n\t\t\tDescription: pulumi.String(\"All engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpaActionExample, err := pagerduty.NewAutomationActionsAction(ctx, \"pa_action_example\", \u0026pagerduty.AutomationActionsActionArgs{\n\t\t\tName:        pulumi.String(\"PA Action created via TF\"),\n\t\t\tDescription: pulumi.String(\"Description of the PA Action created via TF\"),\n\t\t\tActionType:  pulumi.String(\"process_automation\"),\n\t\t\tActionDataReference: \u0026pagerduty.AutomationActionsActionActionDataReferenceArgs{\n\t\t\t\tProcessAutomationJobId: pulumi.String(\"P123456\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewAutomationActionsActionTeamAssociation(ctx, \"foo\", \u0026pagerduty.AutomationActionsActionTeamAssociationArgs{\n\t\t\tActionId: paActionExample.ID(),\n\t\t\tTeamId:   example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.AutomationActionsAction;\nimport com.pulumi.pagerduty.AutomationActionsActionArgs;\nimport com.pulumi.pagerduty.inputs.AutomationActionsActionActionDataReferenceArgs;\nimport com.pulumi.pagerduty.AutomationActionsActionTeamAssociation;\nimport com.pulumi.pagerduty.AutomationActionsActionTeamAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Team(\"example\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .description(\"All engineering\")\n            .build());\n\n        var paActionExample = new AutomationActionsAction(\"paActionExample\", AutomationActionsActionArgs.builder()\n            .name(\"PA Action created via TF\")\n            .description(\"Description of the PA Action created via TF\")\n            .actionType(\"process_automation\")\n            .actionDataReference(AutomationActionsActionActionDataReferenceArgs.builder()\n                .processAutomationJobId(\"P123456\")\n                .build())\n            .build());\n\n        var foo = new AutomationActionsActionTeamAssociation(\"foo\", AutomationActionsActionTeamAssociationArgs.builder()\n            .actionId(paActionExample.id())\n            .teamId(example.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n      description: All engineering\n  paActionExample:\n    type: pagerduty:AutomationActionsAction\n    name: pa_action_example\n    properties:\n      name: PA Action created via TF\n      description: Description of the PA Action created via TF\n      actionType: process_automation\n      actionDataReference:\n        processAutomationJobId: P123456\n  foo:\n    type: pagerduty:AutomationActionsActionTeamAssociation\n    properties:\n      actionId: ${paActionExample.id}\n      teamId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAction team association can be imported using the `action_id` and `team_id` separated by a colon, e.g.\n\n```sh\n$ pulumi import pagerduty:index/automationActionsActionTeamAssociation:AutomationActionsActionTeamAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z\n```\n",
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the action.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Id of the team associated to the action.\n"
                }
            },
            "required": [
                "actionId",
                "teamId"
            ],
            "inputProperties": {
                "actionId": {
                    "type": "string",
                    "description": "Id of the action.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Id of the team associated to the action.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actionId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationActionsActionTeamAssociation resources.\n",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "Id of the action.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Id of the team associated to the action.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/automationActionsRunner:AutomationActionsRunner": {
            "description": "An Automation Actions [runner](https://developer.pagerduty.com/api-reference/d78999fb7e863-create-an-automation-action-runner) is the method for how actions are executed. This can be done locally using an installed runner agent or as a connection to a PD Runbook Automation instance.\n\n\u003e Only Runbook Automation (runbook) runners can be created.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst config = new pulumi.Config();\nconst RUNBOOK_API_KEY = config.require(\"RUNBOOK_API_KEY\");\nconst example = new pagerduty.AutomationActionsRunner(\"example\", {\n    name: \"Runner created via TF\",\n    description: \"Description of the Runner created via TF\",\n    runnerType: \"runbook\",\n    runbookBaseUri: \"rdcat.stg\",\n    runbookApiKey: RUNBOOK_API_KEY,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nconfig = pulumi.Config()\nrunboo_k__ap_i__key = config.require(\"RUNBOOK_API_KEY\")\nexample = pagerduty.AutomationActionsRunner(\"example\",\n    name=\"Runner created via TF\",\n    description=\"Description of the Runner created via TF\",\n    runner_type=\"runbook\",\n    runbook_base_uri=\"rdcat.stg\",\n    runbook_api_key=runboo_k__ap_i__key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var RUNBOOK_API_KEY = config.Require(\"RUNBOOK_API_KEY\");\n    var example = new Pagerduty.AutomationActionsRunner(\"example\", new()\n    {\n        Name = \"Runner created via TF\",\n        Description = \"Description of the Runner created via TF\",\n        RunnerType = \"runbook\",\n        RunbookBaseUri = \"rdcat.stg\",\n        RunbookApiKey = RUNBOOK_API_KEY,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tRUNBOOK_API_KEY := cfg.Require(\"RUNBOOK_API_KEY\")\n\t\t_, err := pagerduty.NewAutomationActionsRunner(ctx, \"example\", \u0026pagerduty.AutomationActionsRunnerArgs{\n\t\t\tName:           pulumi.String(\"Runner created via TF\"),\n\t\t\tDescription:    pulumi.String(\"Description of the Runner created via TF\"),\n\t\t\tRunnerType:     pulumi.String(\"runbook\"),\n\t\t\tRunbookBaseUri: pulumi.String(\"rdcat.stg\"),\n\t\t\tRunbookApiKey:  pulumi.String(RUNBOOK_API_KEY),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.AutomationActionsRunner;\nimport com.pulumi.pagerduty.AutomationActionsRunnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var RUNBOOK_API_KEY = config.get(\"RUNBOOK_API_KEY\");\n        var example = new AutomationActionsRunner(\"example\", AutomationActionsRunnerArgs.builder()\n            .name(\"Runner created via TF\")\n            .description(\"Description of the Runner created via TF\")\n            .runnerType(\"runbook\")\n            .runbookBaseUri(\"rdcat.stg\")\n            .runbookApiKey(RUNBOOK_API_KEY)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  # Assumes the TF_VAR_RUNBOOK_API_KEY variable is defined in the environment\n  RUNBOOK_API_KEY:\n    type: string\nresources:\n  example:\n    type: pagerduty:AutomationActionsRunner\n    properties:\n      name: Runner created via TF\n      description: Description of the Runner created via TF\n      runnerType: runbook\n      runbookBaseUri: rdcat.stg\n      runbookApiKey: ${RUNBOOK_API_KEY}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n-\u003e In the example below the `runbook_api_key` attribute has been omitted to avoid resource replacement after the import.\n\nRunners can be imported using the `id`, e.g.\n\nresource \"pagerduty_automation_actions_runner\" \"example\" {\n\n  name = \"Runner created via TF\"\n\n  description = \"Description of the Runner created via TF\"\n\n  runner_type = \"runbook\"\n\n  runbook_base_uri = \"rdcat.stg\"\n\n}\n\n```sh\n$ pulumi import pagerduty:index/automationActionsRunner:AutomationActionsRunner example 01DER7CUUBF7TH4116K0M4WKPU\n```\n\n",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "The time runner was created. Represented as an ISO 8601 timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the runner. Max length is 1024 characters.\n"
                },
                "lastSeen": {
                    "type": "string",
                    "description": "(Optional) The last time runner has been seen. Represented as an ISO 8601 timestamp.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the runner. Max length is 255 characters.\n"
                },
                "runbookApiKey": {
                    "type": "string",
                    "description": "The unique User API Token created in Runbook Automation.\n",
                    "secret": true
                },
                "runbookBaseUri": {
                    "type": "string",
                    "description": "The subdomain for your Runbook Automation Instance.\n"
                },
                "runnerType": {
                    "type": "string",
                    "description": "The type of runner. The only allowed values is `runbook`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `runner`.\n"
                }
            },
            "required": [
                "creationTime",
                "lastSeen",
                "name",
                "runnerType",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the runner. Max length is 1024 characters.\n"
                },
                "lastSeen": {
                    "type": "string",
                    "description": "(Optional) The last time runner has been seen. Represented as an ISO 8601 timestamp.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the runner. Max length is 255 characters.\n"
                },
                "runbookApiKey": {
                    "type": "string",
                    "description": "The unique User API Token created in Runbook Automation.\n",
                    "secret": true
                },
                "runbookBaseUri": {
                    "type": "string",
                    "description": "The subdomain for your Runbook Automation Instance.\n"
                },
                "runnerType": {
                    "type": "string",
                    "description": "The type of runner. The only allowed values is `runbook`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "runnerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationActionsRunner resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "The time runner was created. Represented as an ISO 8601 timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the runner. Max length is 1024 characters.\n"
                    },
                    "lastSeen": {
                        "type": "string",
                        "description": "(Optional) The last time runner has been seen. Represented as an ISO 8601 timestamp.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the runner. Max length is 255 characters.\n"
                    },
                    "runbookApiKey": {
                        "type": "string",
                        "description": "The unique User API Token created in Runbook Automation.\n",
                        "secret": true
                    },
                    "runbookBaseUri": {
                        "type": "string",
                        "description": "The subdomain for your Runbook Automation Instance.\n"
                    },
                    "runnerType": {
                        "type": "string",
                        "description": "The type of runner. The only allowed values is `runbook`.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `runner`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation": {
            "description": "An Automation Actions [runner association with a team](https://developer.pagerduty.com/api-reference/f662de6271a6e-associate-a-runner-with-a-team) configures the relation of a specific Runner with a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst teamEntEng = new pagerduty.Team(\"team_ent_eng\", {\n    name: \"Enterprise Engineering\",\n    description: \"Enterprise engineering\",\n});\nconst paRunbookRunner = new pagerduty.AutomationActionsRunner(\"pa_runbook_runner\", {\n    name: \"Runner created via TF\",\n    description: \"Description of the Runner created via TF\",\n    runnerType: \"runbook\",\n    runbookBaseUri: \"cat-cat\",\n    runbookApiKey: \"cat-secret\",\n});\nconst paRunnerEntEngAssoc = new pagerduty.AutomationActionsRunnerTeamAssociation(\"pa_runner_ent_eng_assoc\", {\n    runnerId: paRunbookRunner.id,\n    teamId: teamEntEng.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nteam_ent_eng = pagerduty.Team(\"team_ent_eng\",\n    name=\"Enterprise Engineering\",\n    description=\"Enterprise engineering\")\npa_runbook_runner = pagerduty.AutomationActionsRunner(\"pa_runbook_runner\",\n    name=\"Runner created via TF\",\n    description=\"Description of the Runner created via TF\",\n    runner_type=\"runbook\",\n    runbook_base_uri=\"cat-cat\",\n    runbook_api_key=\"cat-secret\")\npa_runner_ent_eng_assoc = pagerduty.AutomationActionsRunnerTeamAssociation(\"pa_runner_ent_eng_assoc\",\n    runner_id=pa_runbook_runner.id,\n    team_id=team_ent_eng.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var teamEntEng = new Pagerduty.Team(\"team_ent_eng\", new()\n    {\n        Name = \"Enterprise Engineering\",\n        Description = \"Enterprise engineering\",\n    });\n\n    var paRunbookRunner = new Pagerduty.AutomationActionsRunner(\"pa_runbook_runner\", new()\n    {\n        Name = \"Runner created via TF\",\n        Description = \"Description of the Runner created via TF\",\n        RunnerType = \"runbook\",\n        RunbookBaseUri = \"cat-cat\",\n        RunbookApiKey = \"cat-secret\",\n    });\n\n    var paRunnerEntEngAssoc = new Pagerduty.AutomationActionsRunnerTeamAssociation(\"pa_runner_ent_eng_assoc\", new()\n    {\n        RunnerId = paRunbookRunner.Id,\n        TeamId = teamEntEng.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteamEntEng, err := pagerduty.NewTeam(ctx, \"team_ent_eng\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"Enterprise Engineering\"),\n\t\t\tDescription: pulumi.String(\"Enterprise engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpaRunbookRunner, err := pagerduty.NewAutomationActionsRunner(ctx, \"pa_runbook_runner\", \u0026pagerduty.AutomationActionsRunnerArgs{\n\t\t\tName:           pulumi.String(\"Runner created via TF\"),\n\t\t\tDescription:    pulumi.String(\"Description of the Runner created via TF\"),\n\t\t\tRunnerType:     pulumi.String(\"runbook\"),\n\t\t\tRunbookBaseUri: pulumi.String(\"cat-cat\"),\n\t\t\tRunbookApiKey:  pulumi.String(\"cat-secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewAutomationActionsRunnerTeamAssociation(ctx, \"pa_runner_ent_eng_assoc\", \u0026pagerduty.AutomationActionsRunnerTeamAssociationArgs{\n\t\t\tRunnerId: paRunbookRunner.ID(),\n\t\t\tTeamId:   teamEntEng.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.AutomationActionsRunner;\nimport com.pulumi.pagerduty.AutomationActionsRunnerArgs;\nimport com.pulumi.pagerduty.AutomationActionsRunnerTeamAssociation;\nimport com.pulumi.pagerduty.AutomationActionsRunnerTeamAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var teamEntEng = new Team(\"teamEntEng\", TeamArgs.builder()\n            .name(\"Enterprise Engineering\")\n            .description(\"Enterprise engineering\")\n            .build());\n\n        var paRunbookRunner = new AutomationActionsRunner(\"paRunbookRunner\", AutomationActionsRunnerArgs.builder()\n            .name(\"Runner created via TF\")\n            .description(\"Description of the Runner created via TF\")\n            .runnerType(\"runbook\")\n            .runbookBaseUri(\"cat-cat\")\n            .runbookApiKey(\"cat-secret\")\n            .build());\n\n        var paRunnerEntEngAssoc = new AutomationActionsRunnerTeamAssociation(\"paRunnerEntEngAssoc\", AutomationActionsRunnerTeamAssociationArgs.builder()\n            .runnerId(paRunbookRunner.id())\n            .teamId(teamEntEng.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  teamEntEng:\n    type: pagerduty:Team\n    name: team_ent_eng\n    properties:\n      name: Enterprise Engineering\n      description: Enterprise engineering\n  paRunbookRunner:\n    type: pagerduty:AutomationActionsRunner\n    name: pa_runbook_runner\n    properties:\n      name: Runner created via TF\n      description: Description of the Runner created via TF\n      runnerType: runbook\n      runbookBaseUri: cat-cat\n      runbookApiKey: cat-secret\n  paRunnerEntEngAssoc:\n    type: pagerduty:AutomationActionsRunnerTeamAssociation\n    name: pa_runner_ent_eng_assoc\n    properties:\n      runnerId: ${paRunbookRunner.id}\n      teamId: ${teamEntEng.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRunner team association can be imported using the `runner_id` and `team_id` separated by a colon, e.g.\n\n```sh\n$ pulumi import pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z\n```\n",
            "properties": {
                "runnerId": {
                    "type": "string",
                    "description": "Id of the runner.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Id of the team associated with the runner.\n"
                }
            },
            "required": [
                "runnerId",
                "teamId"
            ],
            "inputProperties": {
                "runnerId": {
                    "type": "string",
                    "description": "Id of the runner.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Id of the team associated with the runner.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "runnerId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationActionsRunnerTeamAssociation resources.\n",
                "properties": {
                    "runnerId": {
                        "type": "string",
                        "description": "Id of the runner.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Id of the team associated with the runner.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/businessService:BusinessService": {
            "description": "A [business service](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODExNg-create-a-business-service) allows you to model capabilities that span multiple technical services and that may be owned by several different teams.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.BusinessService(\"example\", {\n    name: \"My Web App\",\n    description: \"A very descriptive description of this business service\",\n    pointOfContact: \"PagerDuty Admin\",\n    team: \"P37RSRS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.BusinessService(\"example\",\n    name=\"My Web App\",\n    description=\"A very descriptive description of this business service\",\n    point_of_contact=\"PagerDuty Admin\",\n    team=\"P37RSRS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.BusinessService(\"example\", new()\n    {\n        Name = \"My Web App\",\n        Description = \"A very descriptive description of this business service\",\n        PointOfContact = \"PagerDuty Admin\",\n        Team = \"P37RSRS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewBusinessService(ctx, \"example\", \u0026pagerduty.BusinessServiceArgs{\n\t\t\tName:           pulumi.String(\"My Web App\"),\n\t\t\tDescription:    pulumi.String(\"A very descriptive description of this business service\"),\n\t\t\tPointOfContact: pulumi.String(\"PagerDuty Admin\"),\n\t\t\tTeam:           pulumi.String(\"P37RSRS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.BusinessService;\nimport com.pulumi.pagerduty.BusinessServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new BusinessService(\"example\", BusinessServiceArgs.builder()\n            .name(\"My Web App\")\n            .description(\"A very descriptive description of this business service\")\n            .pointOfContact(\"PagerDuty Admin\")\n            .team(\"P37RSRS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:BusinessService\n    properties:\n      name: My Web App\n      description: A very descriptive description of this business service\n      pointOfContact: PagerDuty Admin\n      team: P37RSRS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServices can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/businessService:BusinessService main PLBP09X\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "A URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service.\n"
                },
                "self": {
                    "type": "string",
                    "description": "The API show URL at which the object is accessible.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the business service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                    "deprecationMessage": "This will become a computed attribute in the next major release."
                }
            },
            "required": [
                "description",
                "htmlUrl",
                "name",
                "self",
                "summary",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the business service.\n"
                },
                "pointOfContact": {
                    "type": "string",
                    "description": "The owner of the business service.\n"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the business service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                    "deprecationMessage": "This will become a computed attribute in the next major release."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "A URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the business service.\n"
                    },
                    "pointOfContact": {
                        "type": "string",
                        "description": "The owner of the business service.\n"
                    },
                    "self": {
                        "type": "string",
                        "description": "The API show URL at which the object is accessible.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "ID of the team that owns the business service.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "**Deprecated** (Optional) Default (and only supported) value is `business_service`.\n",
                        "deprecationMessage": "This will become a computed attribute in the next major release."
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/businessServiceSubscriber:BusinessServiceSubscriber": {
            "description": "A [business service subscriber](https://developer.pagerduty.com/api-reference/b3A6NDUwNDgxOQ-list-business-service-subscribers) allows you to subscribe users or teams to automatically receive updates about key business services.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.BusinessService(\"example\", {\n    name: \"My Web App\",\n    description: \"A very descriptive description of this business service\",\n    pointOfContact: \"PagerDuty Admin\",\n    team: \"P37RSRS\",\n});\nconst engteam = new pagerduty.Team(\"engteam\", {name: \"Engineering\"});\nconst exampleUser = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst teamExample = new pagerduty.BusinessServiceSubscriber(\"team_example\", {\n    subscriberId: engteam.id,\n    subscriberType: \"team\",\n    businessServiceId: example.id,\n});\nconst userExample = new pagerduty.BusinessServiceSubscriber(\"user_example\", {\n    subscriberId: exampleUser.id,\n    subscriberType: \"user\",\n    businessServiceId: example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.BusinessService(\"example\",\n    name=\"My Web App\",\n    description=\"A very descriptive description of this business service\",\n    point_of_contact=\"PagerDuty Admin\",\n    team=\"P37RSRS\")\nengteam = pagerduty.Team(\"engteam\", name=\"Engineering\")\nexample_user = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nteam_example = pagerduty.BusinessServiceSubscriber(\"team_example\",\n    subscriber_id=engteam.id,\n    subscriber_type=\"team\",\n    business_service_id=example.id)\nuser_example = pagerduty.BusinessServiceSubscriber(\"user_example\",\n    subscriber_id=example_user.id,\n    subscriber_type=\"user\",\n    business_service_id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.BusinessService(\"example\", new()\n    {\n        Name = \"My Web App\",\n        Description = \"A very descriptive description of this business service\",\n        PointOfContact = \"PagerDuty Admin\",\n        Team = \"P37RSRS\",\n    });\n\n    var engteam = new Pagerduty.Team(\"engteam\", new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var exampleUser = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var teamExample = new Pagerduty.BusinessServiceSubscriber(\"team_example\", new()\n    {\n        SubscriberId = engteam.Id,\n        SubscriberType = \"team\",\n        BusinessServiceId = example.Id,\n    });\n\n    var userExample = new Pagerduty.BusinessServiceSubscriber(\"user_example\", new()\n    {\n        SubscriberId = exampleUser.Id,\n        SubscriberType = \"user\",\n        BusinessServiceId = example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewBusinessService(ctx, \"example\", \u0026pagerduty.BusinessServiceArgs{\n\t\t\tName:           pulumi.String(\"My Web App\"),\n\t\t\tDescription:    pulumi.String(\"A very descriptive description of this business service\"),\n\t\t\tPointOfContact: pulumi.String(\"PagerDuty Admin\"),\n\t\t\tTeam:           pulumi.String(\"P37RSRS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengteam, err := pagerduty.NewTeam(ctx, \"engteam\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewBusinessServiceSubscriber(ctx, \"team_example\", \u0026pagerduty.BusinessServiceSubscriberArgs{\n\t\t\tSubscriberId:      engteam.ID(),\n\t\t\tSubscriberType:    pulumi.String(\"team\"),\n\t\t\tBusinessServiceId: example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewBusinessServiceSubscriber(ctx, \"user_example\", \u0026pagerduty.BusinessServiceSubscriberArgs{\n\t\t\tSubscriberId:      exampleUser.ID(),\n\t\t\tSubscriberType:    pulumi.String(\"user\"),\n\t\t\tBusinessServiceId: example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.BusinessService;\nimport com.pulumi.pagerduty.BusinessServiceArgs;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.BusinessServiceSubscriber;\nimport com.pulumi.pagerduty.BusinessServiceSubscriberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new BusinessService(\"example\", BusinessServiceArgs.builder()\n            .name(\"My Web App\")\n            .description(\"A very descriptive description of this business service\")\n            .pointOfContact(\"PagerDuty Admin\")\n            .team(\"P37RSRS\")\n            .build());\n\n        var engteam = new Team(\"engteam\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var teamExample = new BusinessServiceSubscriber(\"teamExample\", BusinessServiceSubscriberArgs.builder()\n            .subscriberId(engteam.id())\n            .subscriberType(\"team\")\n            .businessServiceId(example.id())\n            .build());\n\n        var userExample = new BusinessServiceSubscriber(\"userExample\", BusinessServiceSubscriberArgs.builder()\n            .subscriberId(exampleUser.id())\n            .subscriberType(\"user\")\n            .businessServiceId(example.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:BusinessService\n    properties:\n      name: My Web App\n      description: A very descriptive description of this business service\n      pointOfContact: PagerDuty Admin\n      team: P37RSRS\n  engteam:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n  exampleUser:\n    type: pagerduty:User\n    name: example\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  teamExample:\n    type: pagerduty:BusinessServiceSubscriber\n    name: team_example\n    properties:\n      subscriberId: ${engteam.id}\n      subscriberType: team\n      businessServiceId: ${example.id}\n  userExample:\n    type: pagerduty:BusinessServiceSubscriber\n    name: user_example\n    properties:\n      subscriberId: ${exampleUser.id}\n      subscriberType: user\n      businessServiceId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServices can be imported using the `id` using the related business service ID, the subscriber type and the subscriber ID separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/businessServiceSubscriber:BusinessServiceSubscriber main PLBP09X.team.PLBP09X\n```\n",
            "properties": {
                "businessServiceId": {
                    "type": "string",
                    "description": "The ID of the business service to subscribe to.\n"
                },
                "subscriberId": {
                    "type": "string",
                    "description": "The ID of the subscriber entity.\n"
                },
                "subscriberType": {
                    "type": "string",
                    "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n"
                }
            },
            "required": [
                "businessServiceId",
                "subscriberId",
                "subscriberType"
            ],
            "inputProperties": {
                "businessServiceId": {
                    "type": "string",
                    "description": "The ID of the business service to subscribe to.\n",
                    "willReplaceOnChanges": true
                },
                "subscriberId": {
                    "type": "string",
                    "description": "The ID of the subscriber entity.\n",
                    "willReplaceOnChanges": true
                },
                "subscriberType": {
                    "type": "string",
                    "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "businessServiceId",
                "subscriberId",
                "subscriberType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessServiceSubscriber resources.\n",
                "properties": {
                    "businessServiceId": {
                        "type": "string",
                        "description": "The ID of the business service to subscribe to.\n",
                        "willReplaceOnChanges": true
                    },
                    "subscriberId": {
                        "type": "string",
                        "description": "The ID of the subscriber entity.\n",
                        "willReplaceOnChanges": true
                    },
                    "subscriberType": {
                        "type": "string",
                        "description": "Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/escalationPolicy:EscalationPolicy": {
            "description": "An [escalation policy](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEyNQ-create-an-escalation-policy) determines what user or schedule will be notified first, second, and so on when an incident is triggered. Escalation policies are used by one or more services.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Team(\"example\", {\n    name: \"Engineering\",\n    description: \"All engineering\",\n});\nconst exampleUser = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [example.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    teams: example.id,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [\n            {\n                type: \"user_reference\",\n                id: exampleUser.id,\n            },\n            {\n                type: \"user_reference\",\n                id: example2.id,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Team(\"example\",\n    name=\"Engineering\",\n    description=\"All engineering\")\nexample_user = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example.id])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    teams=example.id,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [\n            {\n                \"type\": \"user_reference\",\n                \"id\": example_user.id,\n            },\n            {\n                \"type\": \"user_reference\",\n                \"id\": example2[\"id\"],\n            },\n        ],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Team(\"example\", new()\n    {\n        Name = \"Engineering\",\n        Description = \"All engineering\",\n    });\n\n    var exampleUser = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            example.Id,\n        },\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Teams = example.Id,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = exampleUser.Id,\n                    },\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = example2.Id,\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewTeam(ctx, \"example\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"Engineering\"),\n\t\t\tDescription: pulumi.String(\"All engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texample.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tTeams:    example.ID(),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   exampleUser.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   pulumi.Any(example2.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Team(\"example\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .description(\"All engineering\")\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(example.id())\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .teams(example.id())\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(                \n                    EscalationPolicyRuleTargetArgs.builder()\n                        .type(\"user_reference\")\n                        .id(exampleUser.id())\n                        .build(),\n                    EscalationPolicyRuleTargetArgs.builder()\n                        .type(\"user_reference\")\n                        .id(example2.id())\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n      description: All engineering\n  exampleUser:\n    type: pagerduty:User\n    name: example\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${example.id}\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      teams: ${example.id}\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user_reference\n              id: ${exampleUser.id}\n            - type: user_reference\n              id: ${example2.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEscalation policies can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/escalationPolicy:EscalationPolicy main PLBP09X\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "string",
                    "description": "Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "required": [
                "description",
                "name",
                "rules"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the escalation policy.\n"
                },
                "numLoops": {
                    "type": "integer",
                    "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "An Escalation rule block. Escalation rules documented below.\n"
                },
                "teams": {
                    "type": "string",
                    "description": "Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EscalationPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the escalation policy.\n"
                    },
                    "numLoops": {
                        "type": "integer",
                        "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EscalationPolicyRule:EscalationPolicyRule"
                        },
                        "description": "An Escalation rule block. Escalation rules documented below.\n"
                    },
                    "teams": {
                        "type": "string",
                        "description": "Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestration:EventOrchestration": {
            "description": "[Event Orchestrations](https://support.pagerduty.com/docs/event-orchestration) allow you define a set of Event Rules, so that when you ingest events using the Orchestration's Routing Key your events will be routed to the correct Global and/or Service Orchestration, based on the event's content.\n\n## Example of configuring an Event Orchestration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst engineering = new pagerduty.Team(\"engineering\", {name: \"Engineering\"});\nconst myMonitor = new pagerduty.EventOrchestration(\"my_monitor\", {\n    name: \"My Monitoring Orchestration\",\n    description: \"Send events to a pair of services\",\n    team: engineering.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nengineering = pagerduty.Team(\"engineering\", name=\"Engineering\")\nmy_monitor = pagerduty.EventOrchestration(\"my_monitor\",\n    name=\"My Monitoring Orchestration\",\n    description=\"Send events to a pair of services\",\n    team=engineering.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineering = new Pagerduty.Team(\"engineering\", new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var myMonitor = new Pagerduty.EventOrchestration(\"my_monitor\", new()\n    {\n        Name = \"My Monitoring Orchestration\",\n        Description = \"Send events to a pair of services\",\n        Team = engineering.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tengineering, err := pagerduty.NewTeam(ctx, \"engineering\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestration(ctx, \"my_monitor\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName:        pulumi.String(\"My Monitoring Orchestration\"),\n\t\t\tDescription: pulumi.String(\"Send events to a pair of services\"),\n\t\t\tTeam:        engineering.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var engineering = new Team(\"engineering\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var myMonitor = new EventOrchestration(\"myMonitor\", EventOrchestrationArgs.builder()\n            .name(\"My Monitoring Orchestration\")\n            .description(\"Send events to a pair of services\")\n            .team(engineering.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  engineering:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n  myMonitor:\n    type: pagerduty:EventOrchestration\n    name: my_monitor\n    properties:\n      name: My Monitoring Orchestration\n      description: Send events to a pair of services\n      team: ${engineering.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEventOrchestrations can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestration:EventOrchestration main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description of the Event Orchestration.\n"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                    },
                    "description": "An integration for the Event Orchestration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Event Orchestration.\n"
                },
                "routes": {
                    "type": "integer"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                }
            },
            "required": [
                "integrations",
                "name",
                "routes"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description of the Event Orchestration.\n"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                    },
                    "description": "An integration for the Event Orchestration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Event Orchestration.\n"
                },
                "team": {
                    "type": "string",
                    "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestration resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the Event Orchestration.\n"
                    },
                    "integrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationIntegration:EventOrchestrationIntegration"
                        },
                        "description": "An integration for the Event Orchestration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Event Orchestration.\n"
                    },
                    "routes": {
                        "type": "integer"
                    },
                    "team": {
                        "type": "string",
                        "description": "ID of the team that owns the Event Orchestration. If none is specified, only admins have access.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal": {
            "description": "A [Global Orchestration](https://support.pagerduty.com/docs/event-orchestration#global-orchestrations) allows you to create a set of Event Rules. The Global Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Global Orchestration for further processing.\n\n## Example of configuring a Global Orchestration\n\nThis example shows creating `Team`, and `Event Orchestration` resources followed by creating a Global Orchestration to handle Events sent to that Event Orchestration.\n\nThis example also shows using the pagerduty.getPriority and pagerduty.EscalationPolicy data sources to configure `priority` and `escalation_policy` actions for a rule.\n\nThis example shows a Global Orchestration that has nested sets: a rule in the \"start\" set has a `route_to` action pointing at the \"step-two\" set.\n\nThe `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set. In this example the `catch_all` doesn't have any `actions` so it'll leave events as-is.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst databaseTeam = new pagerduty.Team(\"database_team\", {name: \"Database Team\"});\nconst eventOrchestration = new pagerduty.EventOrchestration(\"event_orchestration\", {\n    name: \"Example Orchestration\",\n    team: databaseTeam.id,\n});\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst sreEscPolicy = pagerduty.getEscalationPolicy({\n    name: \"SRE Escalation Policy\",\n});\nconst global = new pagerduty.EventOrchestrationGlobal(\"global\", {\n    eventOrchestration: eventOrchestration.id,\n    sets: [\n        {\n            id: \"start\",\n            rules: [{\n                label: \"Always annotate a note to all events\",\n                actions: {\n                    annotate: \"This incident was created by the Database Team via a Global Orchestration\",\n                    routeTo: \"step-two\",\n                },\n            }],\n        },\n        {\n            id: \"step-two\",\n            rules: [\n                {\n                    label: \"Drop events that are marked as no-op\",\n                    conditions: [{\n                        expression: \"event.summary matches 'no-op'\",\n                    }],\n                    actions: {\n                        dropEvent: true,\n                    },\n                },\n                {\n                    label: \"If the DB host is running out of space, then page the SRE team\",\n                    conditions: [{\n                        expression: \"event.summary matches part 'running out of space'\",\n                    }],\n                    actions: {\n                        escalationPolicy: sreEscPolicy.then(sreEscPolicy =\u003e sreEscPolicy.id),\n                    },\n                },\n                {\n                    label: \"If there's something wrong on the replica, then mark the alert as a warning\",\n                    conditions: [{\n                        expression: \"event.custom_details.hostname matches part 'replica'\",\n                    }],\n                    actions: {\n                        severity: \"warning\",\n                    },\n                },\n                {\n                    label: \"Otherwise, set the incident to P1 and run a diagnostic\",\n                    actions: {\n                        priority: p1.then(p1 =\u003e p1.id),\n                        automationAction: {\n                            name: \"db-diagnostic\",\n                            url: \"https://example.com/run-diagnostic\",\n                            autoSend: true,\n                        },\n                    },\n                },\n            ],\n        },\n    ],\n    catchAll: {\n        actions: {},\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatabase_team = pagerduty.Team(\"database_team\", name=\"Database Team\")\nevent_orchestration = pagerduty.EventOrchestration(\"event_orchestration\",\n    name=\"Example Orchestration\",\n    team=database_team.id)\np1 = pagerduty.get_priority(name=\"P1\")\nsre_esc_policy = pagerduty.get_escalation_policy(name=\"SRE Escalation Policy\")\nglobal_ = pagerduty.EventOrchestrationGlobal(\"global\",\n    event_orchestration=event_orchestration.id,\n    sets=[\n        {\n            \"id\": \"start\",\n            \"rules\": [{\n                \"label\": \"Always annotate a note to all events\",\n                \"actions\": {\n                    \"annotate\": \"This incident was created by the Database Team via a Global Orchestration\",\n                    \"route_to\": \"step-two\",\n                },\n            }],\n        },\n        {\n            \"id\": \"step-two\",\n            \"rules\": [\n                {\n                    \"label\": \"Drop events that are marked as no-op\",\n                    \"conditions\": [{\n                        \"expression\": \"event.summary matches 'no-op'\",\n                    }],\n                    \"actions\": {\n                        \"drop_event\": True,\n                    },\n                },\n                {\n                    \"label\": \"If the DB host is running out of space, then page the SRE team\",\n                    \"conditions\": [{\n                        \"expression\": \"event.summary matches part 'running out of space'\",\n                    }],\n                    \"actions\": {\n                        \"escalation_policy\": sre_esc_policy.id,\n                    },\n                },\n                {\n                    \"label\": \"If there's something wrong on the replica, then mark the alert as a warning\",\n                    \"conditions\": [{\n                        \"expression\": \"event.custom_details.hostname matches part 'replica'\",\n                    }],\n                    \"actions\": {\n                        \"severity\": \"warning\",\n                    },\n                },\n                {\n                    \"label\": \"Otherwise, set the incident to P1 and run a diagnostic\",\n                    \"actions\": {\n                        \"priority\": p1.id,\n                        \"automation_action\": {\n                            \"name\": \"db-diagnostic\",\n                            \"url\": \"https://example.com/run-diagnostic\",\n                            \"auto_send\": True,\n                        },\n                    },\n                },\n            ],\n        },\n    ],\n    catch_all={\n        \"actions\": {},\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var databaseTeam = new Pagerduty.Team(\"database_team\", new()\n    {\n        Name = \"Database Team\",\n    });\n\n    var eventOrchestration = new Pagerduty.EventOrchestration(\"event_orchestration\", new()\n    {\n        Name = \"Example Orchestration\",\n        Team = databaseTeam.Id,\n    });\n\n    var p1 = Pagerduty.GetPriority.Invoke(new()\n    {\n        Name = \"P1\",\n    });\n\n    var sreEscPolicy = Pagerduty.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"SRE Escalation Policy\",\n    });\n\n    var @global = new Pagerduty.EventOrchestrationGlobal(\"global\", new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Sets = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationGlobalSetArgs\n            {\n                Id = \"start\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"Always annotate a note to all events\",\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            Annotate = \"This incident was created by the Database Team via a Global Orchestration\",\n                            RouteTo = \"step-two\",\n                        },\n                    },\n                },\n            },\n            new Pagerduty.Inputs.EventOrchestrationGlobalSetArgs\n            {\n                Id = \"step-two\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"Drop events that are marked as no-op\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleConditionArgs\n                            {\n                                Expression = \"event.summary matches 'no-op'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            DropEvent = true,\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"If the DB host is running out of space, then page the SRE team\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleConditionArgs\n                            {\n                                Expression = \"event.summary matches part 'running out of space'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            EscalationPolicy = sreEscPolicy.Apply(getEscalationPolicyResult =\u003e getEscalationPolicyResult.Id),\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"If there's something wrong on the replica, then mark the alert as a warning\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleConditionArgs\n                            {\n                                Expression = \"event.custom_details.hostname matches part 'replica'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            Severity = \"warning\",\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"Otherwise, set the incident to P1 and run a diagnostic\",\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            Priority = p1.Apply(getPriorityResult =\u003e getPriorityResult.Id),\n                            AutomationAction = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsAutomationActionArgs\n                            {\n                                Name = \"db-diagnostic\",\n                                Url = \"https://example.com/run-diagnostic\",\n                                AutoSend = true,\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationGlobalCatchAllArgs\n        {\n            Actions = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabaseTeam, err := pagerduty.NewTeam(ctx, \"database_team\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Database Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\teventOrchestration, err := pagerduty.NewEventOrchestration(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Example Orchestration\"),\n\t\t\tTeam: databaseTeam.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026pagerduty.GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsreEscPolicy, err := pagerduty.LookupEscalationPolicy(ctx, \u0026pagerduty.LookupEscalationPolicyArgs{\n\t\t\tName: \"SRE Escalation Policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationGlobal(ctx, \"global\", \u0026pagerduty.EventOrchestrationGlobalArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tSets: pagerduty.EventOrchestrationGlobalSetArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationGlobalSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Always annotate a note to all events\"),\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tAnnotate: pulumi.String(\"This incident was created by the Database Team via a Global Orchestration\"),\n\t\t\t\t\t\t\t\tRouteTo:  pulumi.String(\"step-two\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetArgs{\n\t\t\t\t\tId: pulumi.String(\"step-two\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationGlobalSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Drop events that are marked as no-op\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationGlobalSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches 'no-op'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tDropEvent: pulumi.Bool(true),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"If the DB host is running out of space, then page the SRE team\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationGlobalSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'running out of space'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tEscalationPolicy: pulumi.String(sreEscPolicy.Id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"If there's something wrong on the replica, then mark the alert as a warning\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationGlobalSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.custom_details.hostname matches part 'replica'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tSeverity: pulumi.String(\"warning\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Otherwise, set the incident to P1 and run a diagnostic\"),\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tPriority: pulumi.String(p1.Id),\n\t\t\t\t\t\t\t\tAutomationAction: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsAutomationActionArgs{\n\t\t\t\t\t\t\t\t\tName:     pulumi.String(\"db-diagnostic\"),\n\t\t\t\t\t\t\t\t\tUrl:      pulumi.String(\"https://example.com/run-diagnostic\"),\n\t\t\t\t\t\t\t\t\tAutoSend: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationGlobalCatchAllArgs{\n\t\t\t\tActions: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetPriorityArgs;\nimport com.pulumi.pagerduty.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.pagerduty.EventOrchestrationGlobal;\nimport com.pulumi.pagerduty.EventOrchestrationGlobalArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseTeam = new Team(\"databaseTeam\", TeamArgs.builder()\n            .name(\"Database Team\")\n            .build());\n\n        var eventOrchestration = new EventOrchestration(\"eventOrchestration\", EventOrchestrationArgs.builder()\n            .name(\"Example Orchestration\")\n            .team(databaseTeam.id())\n            .build());\n\n        final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()\n            .name(\"P1\")\n            .build());\n\n        final var sreEscPolicy = PagerdutyFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"SRE Escalation Policy\")\n            .build());\n\n        var global = new EventOrchestrationGlobal(\"global\", EventOrchestrationGlobalArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .sets(            \n                EventOrchestrationGlobalSetArgs.builder()\n                    .id(\"start\")\n                    .rules(EventOrchestrationGlobalSetRuleArgs.builder()\n                        .label(\"Always annotate a note to all events\")\n                        .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                            .annotate(\"This incident was created by the Database Team via a Global Orchestration\")\n                            .routeTo(\"step-two\")\n                            .build())\n                        .build())\n                    .build(),\n                EventOrchestrationGlobalSetArgs.builder()\n                    .id(\"step-two\")\n                    .rules(                    \n                        EventOrchestrationGlobalSetRuleArgs.builder()\n                            .label(\"Drop events that are marked as no-op\")\n                            .conditions(EventOrchestrationGlobalSetRuleConditionArgs.builder()\n                                .expression(\"event.summary matches 'no-op'\")\n                                .build())\n                            .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                                .dropEvent(true)\n                                .build())\n                            .build(),\n                        EventOrchestrationGlobalSetRuleArgs.builder()\n                            .label(\"If the DB host is running out of space, then page the SRE team\")\n                            .conditions(EventOrchestrationGlobalSetRuleConditionArgs.builder()\n                                .expression(\"event.summary matches part 'running out of space'\")\n                                .build())\n                            .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                                .escalationPolicy(sreEscPolicy.applyValue(getEscalationPolicyResult -\u003e getEscalationPolicyResult.id()))\n                                .build())\n                            .build(),\n                        EventOrchestrationGlobalSetRuleArgs.builder()\n                            .label(\"If there's something wrong on the replica, then mark the alert as a warning\")\n                            .conditions(EventOrchestrationGlobalSetRuleConditionArgs.builder()\n                                .expression(\"event.custom_details.hostname matches part 'replica'\")\n                                .build())\n                            .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                                .severity(\"warning\")\n                                .build())\n                            .build(),\n                        EventOrchestrationGlobalSetRuleArgs.builder()\n                            .label(\"Otherwise, set the incident to P1 and run a diagnostic\")\n                            .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                                .priority(p1.applyValue(getPriorityResult -\u003e getPriorityResult.id()))\n                                .automationAction(EventOrchestrationGlobalSetRuleActionsAutomationActionArgs.builder()\n                                    .name(\"db-diagnostic\")\n                                    .url(\"https://example.com/run-diagnostic\")\n                                    .autoSend(true)\n                                    .build())\n                                .build())\n                            .build())\n                    .build())\n            .catchAll(EventOrchestrationGlobalCatchAllArgs.builder()\n                .actions()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  databaseTeam:\n    type: pagerduty:Team\n    name: database_team\n    properties:\n      name: Database Team\n  eventOrchestration:\n    type: pagerduty:EventOrchestration\n    name: event_orchestration\n    properties:\n      name: Example Orchestration\n      team: ${databaseTeam.id}\n  global:\n    type: pagerduty:EventOrchestrationGlobal\n    properties:\n      eventOrchestration: ${eventOrchestration.id}\n      sets:\n        - id: start\n          rules:\n            - label: Always annotate a note to all events\n              actions:\n                annotate: This incident was created by the Database Team via a Global Orchestration\n                routeTo: step-two\n        - id: step-two\n          rules:\n            - label: Drop events that are marked as no-op\n              conditions:\n                - expression: event.summary matches 'no-op'\n              actions:\n                dropEvent: true\n            - label: If the DB host is running out of space, then page the SRE team\n              conditions:\n                - expression: event.summary matches part 'running out of space'\n              actions:\n                escalationPolicy: ${sreEscPolicy.id}\n            - label: If there's something wrong on the replica, then mark the alert as a warning\n              conditions:\n                - expression: event.custom_details.hostname matches part 'replica'\n              actions:\n                severity: warning\n            - label: Otherwise, set the incident to P1 and run a diagnostic\n              actions:\n                priority: ${p1.id}\n                automationAction:\n                  name: db-diagnostic\n                  url: https://example.com/run-diagnostic\n                  autoSend: true\n      catchAll:\n        actions: {}\nvariables:\n  p1:\n    fn::invoke:\n      Function: pagerduty:getPriority\n      Arguments:\n        name: P1\n  sreEscPolicy:\n    fn::invoke:\n      Function: pagerduty:getEscalationPolicy\n      Arguments:\n        name: SRE Escalation Policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGlobal Orchestration can be imported using the `id` of the Event Orchestration, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal global 1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAll:EventOrchestrationGlobalCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which this Global Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSet:EventOrchestrationGlobalSet"
                    },
                    "description": "A Global Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "required": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAll:EventOrchestrationGlobalCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which this Global Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSet:EventOrchestrationGlobalSet"
                    },
                    "description": "A Global Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationGlobal resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCatchAll:EventOrchestrationGlobalCatchAll",
                        "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Event Orchestration to which this Global Orchestration belongs to.\n"
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalSet:EventOrchestrationGlobalSet"
                        },
                        "description": "A Global Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable": {
            "description": "A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration\n\n## Example of configuring a Cache Variable for a Global Event Orchestration\n\nThis example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst databaseTeam = new pagerduty.Team(\"database_team\", {name: \"Database Team\"});\nconst eventOrchestration = new pagerduty.EventOrchestration(\"event_orchestration\", {\n    name: \"Example Orchestration\",\n    team: databaseTeam.id,\n});\nconst cacheVar = new pagerduty.EventOrchestrationGlobalCacheVariable(\"cache_var\", {\n    eventOrchestration: eventOrchestration.id,\n    name: \"recent_host\",\n    conditions: [{\n        expression: \"event.source exists\",\n    }],\n    configuration: {\n        type: \"recent_value\",\n        source: \"event.source\",\n        regex: \".*\",\n    },\n});\nconst global = new pagerduty.EventOrchestrationGlobal(\"global\", {\n    eventOrchestration: eventOrchestration.id,\n    sets: [{\n        id: \"start\",\n        rules: [{\n            label: \"Always annotate the incident with the event source for all events\",\n            actions: {\n                annotate: \"Last time, we saw this incident occur on host: {{cache_var.recent_host}}\",\n            },\n        }],\n    }],\n    catchAll: {\n        actions: {},\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatabase_team = pagerduty.Team(\"database_team\", name=\"Database Team\")\nevent_orchestration = pagerduty.EventOrchestration(\"event_orchestration\",\n    name=\"Example Orchestration\",\n    team=database_team.id)\ncache_var = pagerduty.EventOrchestrationGlobalCacheVariable(\"cache_var\",\n    event_orchestration=event_orchestration.id,\n    name=\"recent_host\",\n    conditions=[{\n        \"expression\": \"event.source exists\",\n    }],\n    configuration={\n        \"type\": \"recent_value\",\n        \"source\": \"event.source\",\n        \"regex\": \".*\",\n    })\nglobal_ = pagerduty.EventOrchestrationGlobal(\"global\",\n    event_orchestration=event_orchestration.id,\n    sets=[{\n        \"id\": \"start\",\n        \"rules\": [{\n            \"label\": \"Always annotate the incident with the event source for all events\",\n            \"actions\": {\n                \"annotate\": \"Last time, we saw this incident occur on host: {{cache_var.recent_host}}\",\n            },\n        }],\n    }],\n    catch_all={\n        \"actions\": {},\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var databaseTeam = new Pagerduty.Team(\"database_team\", new()\n    {\n        Name = \"Database Team\",\n    });\n\n    var eventOrchestration = new Pagerduty.EventOrchestration(\"event_orchestration\", new()\n    {\n        Name = \"Example Orchestration\",\n        Team = databaseTeam.Id,\n    });\n\n    var cacheVar = new Pagerduty.EventOrchestrationGlobalCacheVariable(\"cache_var\", new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Name = \"recent_host\",\n        Conditions = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationGlobalCacheVariableConditionArgs\n            {\n                Expression = \"event.source exists\",\n            },\n        },\n        Configuration = new Pagerduty.Inputs.EventOrchestrationGlobalCacheVariableConfigurationArgs\n        {\n            Type = \"recent_value\",\n            Source = \"event.source\",\n            Regex = \".*\",\n        },\n    });\n\n    var @global = new Pagerduty.EventOrchestrationGlobal(\"global\", new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Sets = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationGlobalSetArgs\n            {\n                Id = \"start\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleArgs\n                    {\n                        Label = \"Always annotate the incident with the event source for all events\",\n                        Actions = new Pagerduty.Inputs.EventOrchestrationGlobalSetRuleActionsArgs\n                        {\n                            Annotate = \"Last time, we saw this incident occur on host: {{cache_var.recent_host}}\",\n                        },\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationGlobalCatchAllArgs\n        {\n            Actions = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabaseTeam, err := pagerduty.NewTeam(ctx, \"database_team\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Database Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\teventOrchestration, err := pagerduty.NewEventOrchestration(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Example Orchestration\"),\n\t\t\tTeam: databaseTeam.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationGlobalCacheVariable(ctx, \"cache_var\", \u0026pagerduty.EventOrchestrationGlobalCacheVariableArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tName:               pulumi.String(\"recent_host\"),\n\t\t\tConditions: pagerduty.EventOrchestrationGlobalCacheVariableConditionArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalCacheVariableConditionArgs{\n\t\t\t\t\tExpression: pulumi.String(\"event.source exists\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConfiguration: \u0026pagerduty.EventOrchestrationGlobalCacheVariableConfigurationArgs{\n\t\t\t\tType:   pulumi.String(\"recent_value\"),\n\t\t\t\tSource: pulumi.String(\"event.source\"),\n\t\t\t\tRegex:  pulumi.String(\".*\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationGlobal(ctx, \"global\", \u0026pagerduty.EventOrchestrationGlobalArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tSets: pagerduty.EventOrchestrationGlobalSetArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationGlobalSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationGlobalSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Always annotate the incident with the event source for all events\"),\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tAnnotate: pulumi.String(\"Last time, we saw this incident occur on host: {{cache_var.recent_host}}\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationGlobalCatchAllArgs{\n\t\t\t\tActions: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariable;\nimport com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariableArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableConditionArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableConfigurationArgs;\nimport com.pulumi.pagerduty.EventOrchestrationGlobal;\nimport com.pulumi.pagerduty.EventOrchestrationGlobalArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseTeam = new Team(\"databaseTeam\", TeamArgs.builder()\n            .name(\"Database Team\")\n            .build());\n\n        var eventOrchestration = new EventOrchestration(\"eventOrchestration\", EventOrchestrationArgs.builder()\n            .name(\"Example Orchestration\")\n            .team(databaseTeam.id())\n            .build());\n\n        var cacheVar = new EventOrchestrationGlobalCacheVariable(\"cacheVar\", EventOrchestrationGlobalCacheVariableArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .name(\"recent_host\")\n            .conditions(EventOrchestrationGlobalCacheVariableConditionArgs.builder()\n                .expression(\"event.source exists\")\n                .build())\n            .configuration(EventOrchestrationGlobalCacheVariableConfigurationArgs.builder()\n                .type(\"recent_value\")\n                .source(\"event.source\")\n                .regex(\".*\")\n                .build())\n            .build());\n\n        var global = new EventOrchestrationGlobal(\"global\", EventOrchestrationGlobalArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .sets(EventOrchestrationGlobalSetArgs.builder()\n                .id(\"start\")\n                .rules(EventOrchestrationGlobalSetRuleArgs.builder()\n                    .label(\"Always annotate the incident with the event source for all events\")\n                    .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()\n                        .annotate(\"Last time, we saw this incident occur on host: {{cache_var.recent_host}}\")\n                        .build())\n                    .build())\n                .build())\n            .catchAll(EventOrchestrationGlobalCatchAllArgs.builder()\n                .actions()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  databaseTeam:\n    type: pagerduty:Team\n    name: database_team\n    properties:\n      name: Database Team\n  eventOrchestration:\n    type: pagerduty:EventOrchestration\n    name: event_orchestration\n    properties:\n      name: Example Orchestration\n      team: ${databaseTeam.id}\n  cacheVar:\n    type: pagerduty:EventOrchestrationGlobalCacheVariable\n    name: cache_var\n    properties:\n      eventOrchestration: ${eventOrchestration.id}\n      name: recent_host\n      conditions:\n        - expression: event.source exists\n      configuration:\n        type: recent_value\n        source: event.source\n        regex: .*\n  global:\n    type: pagerduty:EventOrchestrationGlobal\n    properties:\n      eventOrchestration: ${eventOrchestration.id}\n      sets:\n        - id: start\n          rules:\n            - label: Always annotate the incident with the event source for all events\n              actions:\n                annotate: 'Last time, we saw this incident occur on host: {{cache_var.recent_host}}'\n      catchAll:\n        actions: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439\n```\n",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableCondition:EventOrchestrationGlobalCacheVariableCondition"
                    },
                    "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                },
                "configuration": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableConfiguration:EventOrchestrationGlobalCacheVariableConfiguration",
                    "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Global Event Orchestration to which this Cache Variable belongs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cache Variable associated with the Global Event Orchestration.\n"
                }
            },
            "required": [
                "configuration",
                "eventOrchestration",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableCondition:EventOrchestrationGlobalCacheVariableCondition"
                    },
                    "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                },
                "configuration": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableConfiguration:EventOrchestrationGlobalCacheVariableConfiguration",
                    "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Global Event Orchestration to which this Cache Variable belongs.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cache Variable associated with the Global Event Orchestration.\n"
                }
            },
            "requiredInputs": [
                "configuration",
                "eventOrchestration"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationGlobalCacheVariable resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableCondition:EventOrchestrationGlobalCacheVariableCondition"
                        },
                        "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationGlobalCacheVariableConfiguration:EventOrchestrationGlobalCacheVariableConfiguration",
                        "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Global Event Orchestration to which this Cache Variable belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cache Variable associated with the Global Event Orchestration.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration": {
            "description": "An Event Orchestration Integration allows you to create and manage multiple Integrations (and Routing Keys) per Event Orchestration *and* will allow you to move (migrate) Integrations *between* two Event Orchestrations.\n\n## Example of configuring an Integration for an Event Orchestration\n\nThis example shows creating `Event Orchestration` and `Team` resources followed by creating an Event Orchestration Integration to handle Events sent to that Event Orchestration.\n\n\u003e When a new Event Orchestration is created there will be one Integration (and Routing Key) included by default. Example below shows how to create an extra Integration associated with this Event Orchestration.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst databaseTeam = new pagerduty.Team(\"database_team\", {name: \"Database Team\"});\nconst eventOrchestration = new pagerduty.EventOrchestration(\"event_orchestration\", {\n    name: \"Example Orchestration\",\n    team: databaseTeam.id,\n});\nconst integration = new pagerduty.EventOrchestrationIntegration(\"integration\", {\n    eventOrchestration: eventOrchestration.id,\n    label: \"Example integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatabase_team = pagerduty.Team(\"database_team\", name=\"Database Team\")\nevent_orchestration = pagerduty.EventOrchestration(\"event_orchestration\",\n    name=\"Example Orchestration\",\n    team=database_team.id)\nintegration = pagerduty.EventOrchestrationIntegration(\"integration\",\n    event_orchestration=event_orchestration.id,\n    label=\"Example integration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var databaseTeam = new Pagerduty.Team(\"database_team\", new()\n    {\n        Name = \"Database Team\",\n    });\n\n    var eventOrchestration = new Pagerduty.EventOrchestration(\"event_orchestration\", new()\n    {\n        Name = \"Example Orchestration\",\n        Team = databaseTeam.Id,\n    });\n\n    var integration = new Pagerduty.EventOrchestrationIntegration(\"integration\", new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Label = \"Example integration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabaseTeam, err := pagerduty.NewTeam(ctx, \"database_team\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Database Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\teventOrchestration, err := pagerduty.NewEventOrchestration(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Example Orchestration\"),\n\t\t\tTeam: databaseTeam.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationIntegration(ctx, \"integration\", \u0026pagerduty.EventOrchestrationIntegrationArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tLabel:              pulumi.String(\"Example integration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.EventOrchestrationIntegration;\nimport com.pulumi.pagerduty.EventOrchestrationIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseTeam = new Team(\"databaseTeam\", TeamArgs.builder()\n            .name(\"Database Team\")\n            .build());\n\n        var eventOrchestration = new EventOrchestration(\"eventOrchestration\", EventOrchestrationArgs.builder()\n            .name(\"Example Orchestration\")\n            .team(databaseTeam.id())\n            .build());\n\n        var integration = new EventOrchestrationIntegration(\"integration\", EventOrchestrationIntegrationArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .label(\"Example integration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  databaseTeam:\n    type: pagerduty:Team\n    name: database_team\n    properties:\n      name: Database Team\n  eventOrchestration:\n    type: pagerduty:EventOrchestration\n    name: event_orchestration\n    properties:\n      name: Example Orchestration\n      team: ${databaseTeam.id}\n  integration:\n    type: pagerduty:EventOrchestrationIntegration\n    properties:\n      eventOrchestration: ${eventOrchestration.id}\n      label: Example integration\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEvent Orchestration Integration can be imported using colon-separated IDs, which is the combination of the Event Orchestration ID followed by the Event Orchestration Integration ID, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration integration 19acac92-027a-4ea0-b06c-bbf516519601:1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n",
            "properties": {
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name/description of the Integration.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter"
                    }
                }
            },
            "required": [
                "eventOrchestration",
                "label",
                "parameters"
            ],
            "inputProperties": {
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name/description of the Integration.\n"
                }
            },
            "requiredInputs": [
                "eventOrchestration",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationIntegration resources.\n",
                "properties": {
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name/description of the Integration.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationIntegrationParameter:EventOrchestrationIntegrationParameter"
                        }
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter": {
            "description": "An Orchestration Router allows users to create a set of Event Rules. The Router evaluates events sent to this Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn't match any rules, it'll be sent to service specified in the `catch_all` or to the \"Unrouted\" Orchestration if no service is specified.\n\n## Example of configuring Router rules for an Orchestration\n\nIn this example the user has defined the Router with three rules. The first rule configures a dynamic route: any event containing a value in its `pd_service_id` custom detail will be routed to the Service with the ID specified by that value. The other rules route events matching a condition to specific services.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst database = pagerduty.getService({\n    name: \"Primary Data Store\",\n});\nconst www = pagerduty.getService({\n    name: \"Web Server App\",\n});\nconst router = new pagerduty.EventOrchestrationRouter(\"router\", {\n    eventOrchestration: myMonitor.id,\n    set: {\n        id: \"start\",\n        rules: [\n            {\n                label: \"Dynamically route events related to specific PagerDuty services\",\n                actions: {\n                    dynamicRouteTos: [{\n                        lookupBy: \"service_id\",\n                        source: \"event.custom_details.pd_service_id\",\n                        regex: \"(.*)\",\n                    }],\n                },\n            },\n            {\n                label: \"Events relating to our relational database\",\n                conditions: [\n                    {\n                        expression: \"event.summary matches part 'database'\",\n                    },\n                    {\n                        expression: \"event.source matches regex 'db[0-9]+-server'\",\n                    },\n                ],\n                actions: {\n                    routeTo: database.then(database =\u003e database.id),\n                },\n            },\n            {\n                conditions: [{\n                    expression: \"event.summary matches part 'www'\",\n                }],\n                actions: {\n                    routeTo: www.then(www =\u003e www.id),\n                },\n            },\n        ],\n    },\n    catchAll: {\n        actions: {\n            routeTo: \"unrouted\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatabase = pagerduty.get_service(name=\"Primary Data Store\")\nwww = pagerduty.get_service(name=\"Web Server App\")\nrouter = pagerduty.EventOrchestrationRouter(\"router\",\n    event_orchestration=my_monitor[\"id\"],\n    set={\n        \"id\": \"start\",\n        \"rules\": [\n            {\n                \"label\": \"Dynamically route events related to specific PagerDuty services\",\n                \"actions\": {\n                    \"dynamic_route_tos\": [{\n                        \"lookup_by\": \"service_id\",\n                        \"source\": \"event.custom_details.pd_service_id\",\n                        \"regex\": \"(.*)\",\n                    }],\n                },\n            },\n            {\n                \"label\": \"Events relating to our relational database\",\n                \"conditions\": [\n                    {\n                        \"expression\": \"event.summary matches part 'database'\",\n                    },\n                    {\n                        \"expression\": \"event.source matches regex 'db[0-9]+-server'\",\n                    },\n                ],\n                \"actions\": {\n                    \"route_to\": database.id,\n                },\n            },\n            {\n                \"conditions\": [{\n                    \"expression\": \"event.summary matches part 'www'\",\n                }],\n                \"actions\": {\n                    \"route_to\": www.id,\n                },\n            },\n        ],\n    },\n    catch_all={\n        \"actions\": {\n            \"route_to\": \"unrouted\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var database = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"Primary Data Store\",\n    });\n\n    var www = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"Web Server App\",\n    });\n\n    var router = new Pagerduty.EventOrchestrationRouter(\"router\", new()\n    {\n        EventOrchestration = myMonitor.Id,\n        Set = new Pagerduty.Inputs.EventOrchestrationRouterSetArgs\n        {\n            Id = \"start\",\n            Rules = new[]\n            {\n                new Pagerduty.Inputs.EventOrchestrationRouterSetRuleArgs\n                {\n                    Label = \"Dynamically route events related to specific PagerDuty services\",\n                    Actions = new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsArgs\n                    {\n                        DynamicRouteTos = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsDynamicRouteToArgs\n                            {\n                                LookupBy = \"service_id\",\n                                Source = \"event.custom_details.pd_service_id\",\n                                Regex = \"(.*)\",\n                            },\n                        },\n                    },\n                },\n                new Pagerduty.Inputs.EventOrchestrationRouterSetRuleArgs\n                {\n                    Label = \"Events relating to our relational database\",\n                    Conditions = new[]\n                    {\n                        new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                        {\n                            Expression = \"event.summary matches part 'database'\",\n                        },\n                        new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                        {\n                            Expression = \"event.source matches regex 'db[0-9]+-server'\",\n                        },\n                    },\n                    Actions = new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsArgs\n                    {\n                        RouteTo = database.Apply(getServiceResult =\u003e getServiceResult.Id),\n                    },\n                },\n                new Pagerduty.Inputs.EventOrchestrationRouterSetRuleArgs\n                {\n                    Conditions = new[]\n                    {\n                        new Pagerduty.Inputs.EventOrchestrationRouterSetRuleConditionArgs\n                        {\n                            Expression = \"event.summary matches part 'www'\",\n                        },\n                    },\n                    Actions = new Pagerduty.Inputs.EventOrchestrationRouterSetRuleActionsArgs\n                    {\n                        RouteTo = www.Apply(getServiceResult =\u003e getServiceResult.Id),\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationRouterCatchAllArgs\n        {\n            Actions = new Pagerduty.Inputs.EventOrchestrationRouterCatchAllActionsArgs\n            {\n                RouteTo = \"unrouted\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabase, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"Primary Data Store\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twww, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"Web Server App\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationRouter(ctx, \"router\", \u0026pagerduty.EventOrchestrationRouterArgs{\n\t\t\tEventOrchestration: pulumi.Any(myMonitor.Id),\n\t\t\tSet: \u0026pagerduty.EventOrchestrationRouterSetArgs{\n\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\tRules: pagerduty.EventOrchestrationRouterSetRuleArray{\n\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleArgs{\n\t\t\t\t\t\tLabel: pulumi.String(\"Dynamically route events related to specific PagerDuty services\"),\n\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationRouterSetRuleActionsArgs{\n\t\t\t\t\t\t\tDynamicRouteTos: pagerduty.EventOrchestrationRouterSetRuleActionsDynamicRouteToArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleActionsDynamicRouteToArgs{\n\t\t\t\t\t\t\t\t\tLookupBy: pulumi.String(\"service_id\"),\n\t\t\t\t\t\t\t\t\tSource:   pulumi.String(\"event.custom_details.pd_service_id\"),\n\t\t\t\t\t\t\t\t\tRegex:    pulumi.String(\"(.*)\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleArgs{\n\t\t\t\t\t\tLabel: pulumi.String(\"Events relating to our relational database\"),\n\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationRouterSetRuleConditionArray{\n\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'database'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.source matches regex 'db[0-9]+-server'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationRouterSetRuleActionsArgs{\n\t\t\t\t\t\t\tRouteTo: pulumi.String(database.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleArgs{\n\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationRouterSetRuleConditionArray{\n\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationRouterSetRuleConditionArgs{\n\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'www'\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationRouterSetRuleActionsArgs{\n\t\t\t\t\t\t\tRouteTo: pulumi.String(www.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationRouterCatchAllArgs{\n\t\t\t\tActions: \u0026pagerduty.EventOrchestrationRouterCatchAllActionsArgs{\n\t\t\t\t\tRouteTo: pulumi.String(\"unrouted\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.EventOrchestrationRouter;\nimport com.pulumi.pagerduty.EventOrchestrationRouterArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationRouterSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var database = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"Primary Data Store\")\n            .build());\n\n        final var www = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"Web Server App\")\n            .build());\n\n        var router = new EventOrchestrationRouter(\"router\", EventOrchestrationRouterArgs.builder()\n            .eventOrchestration(myMonitor.id())\n            .set(EventOrchestrationRouterSetArgs.builder()\n                .id(\"start\")\n                .rules(                \n                    EventOrchestrationRouterSetRuleArgs.builder()\n                        .label(\"Dynamically route events related to specific PagerDuty services\")\n                        .actions(EventOrchestrationRouterSetRuleActionsArgs.builder()\n                            .dynamicRouteTos(EventOrchestrationRouterSetRuleActionsDynamicRouteToArgs.builder()\n                                .lookupBy(\"service_id\")\n                                .source(\"event.custom_details.pd_service_id\")\n                                .regex(\"(.*)\")\n                                .build())\n                            .build())\n                        .build(),\n                    EventOrchestrationRouterSetRuleArgs.builder()\n                        .label(\"Events relating to our relational database\")\n                        .conditions(                        \n                            EventOrchestrationRouterSetRuleConditionArgs.builder()\n                                .expression(\"event.summary matches part 'database'\")\n                                .build(),\n                            EventOrchestrationRouterSetRuleConditionArgs.builder()\n                                .expression(\"event.source matches regex 'db[0-9]+-server'\")\n                                .build())\n                        .actions(EventOrchestrationRouterSetRuleActionsArgs.builder()\n                            .routeTo(database.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                            .build())\n                        .build(),\n                    EventOrchestrationRouterSetRuleArgs.builder()\n                        .conditions(EventOrchestrationRouterSetRuleConditionArgs.builder()\n                            .expression(\"event.summary matches part 'www'\")\n                            .build())\n                        .actions(EventOrchestrationRouterSetRuleActionsArgs.builder()\n                            .routeTo(www.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                            .build())\n                        .build())\n                .build())\n            .catchAll(EventOrchestrationRouterCatchAllArgs.builder()\n                .actions(EventOrchestrationRouterCatchAllActionsArgs.builder()\n                    .routeTo(\"unrouted\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  router:\n    type: pagerduty:EventOrchestrationRouter\n    properties:\n      eventOrchestration: ${myMonitor.id}\n      set:\n        id: start\n        rules:\n          - label: Dynamically route events related to specific PagerDuty services\n            actions:\n              dynamicRouteTos:\n                - lookupBy: service_id\n                  source: event.custom_details.pd_service_id\n                  regex: (.*)\n          - label: Events relating to our relational database\n            conditions:\n              - expression: event.summary matches part 'database'\n              - expression: event.source matches regex 'db[0-9]+-server'\n            actions:\n              routeTo: ${database.id}\n          - conditions:\n              - expression: event.summary matches part 'www'\n            actions:\n              routeTo: ${www.id}\n      catchAll:\n        actions:\n          routeTo: unrouted\nvariables:\n  database:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: Primary Data Store\n  www:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: Web Server App\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRouter can be imported using the `id` of the Event Orchestration, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter router 1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                    "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which the Router belongs.\n"
                },
                "set": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                    "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                }
            },
            "required": [
                "catchAll",
                "eventOrchestration",
                "set"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                    "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "ID of the Event Orchestration to which the Router belongs.\n"
                },
                "set": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                    "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "eventOrchestration",
                "set"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationRouter resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterCatchAll:EventOrchestrationRouterCatchAll",
                        "description": "When none of the rules match an event, the event will be routed according to the catch_all settings.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Event Orchestration to which the Router belongs.\n"
                    },
                    "set": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationRouterSet:EventOrchestrationRouterSet",
                        "description": "The Router contains a single set of rules  (the \"start\" set).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationService:EventOrchestrationService": {
            "description": "A [Service Orchestration](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations) allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.\n\n\u003e If you have a Service that uses [Service Event Rules](https://support.pagerduty.com/docs/rulesets#service-event-rules), you can switch to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations) at any time setting the attribute `enable_event_orchestration_for_service` to `true`. Please read the [Switch to Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#switch-to-service-orchestrations) instructions for more information.\n\n## Example of configuring a Service Orchestration\n\nThis example shows creating `Team`, `User`, `Escalation Policy`, and `Service` resources followed by creating a Service Orchestration to handle Events sent to that Service.\n\nThis example also shows using the pagerduty.getPriority and pagerduty.EscalationPolicy data sources to configure `priority` and `escalation_policy` actions for a rule.\n\nThis example shows a Service Orchestration that has nested sets: a rule in the \"start\" set has a `route_to` action pointing at the \"step-two\" set.\n\nThe `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set. In this example the `catch_all` doesn't have any `actions` so it'll leave events as-is.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst engineering = new pagerduty.Team(\"engineering\", {name: \"Engineering\"});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst foo = new pagerduty.TeamMembership(\"foo\", {\n    userId: example.id,\n    teamId: engineering.id,\n    role: \"manager\",\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user_reference\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\nconst csImpact = new pagerduty.IncidentCustomField(\"cs_impact\", {\n    name: \"impact\",\n    dataType: \"string\",\n    fieldType: \"single_value\",\n});\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst sreEscPolicy = pagerduty.getEscalationPolicy({\n    name: \"SRE Escalation Policy\",\n});\nconst www = new pagerduty.EventOrchestrationService(\"www\", {\n    service: exampleService.id,\n    enableEventOrchestrationForService: true,\n    sets: [\n        {\n            id: \"start\",\n            rules: [{\n                label: \"Always apply some consistent event transformations to all events\",\n                actions: {\n                    variables: [{\n                        name: \"hostname\",\n                        path: \"event.component\",\n                        value: \"hostname: (.*)\",\n                        type: \"regex\",\n                    }],\n                    extractions: [\n                        {\n                            template: \"{{variables.hostname}}\",\n                            target: \"event.custom_details.hostname\",\n                        },\n                        {\n                            source: \"event.source\",\n                            regex: \"www (.*) service\",\n                            target: \"event.source\",\n                        },\n                    ],\n                    routeTo: \"step-two\",\n                },\n            }],\n        },\n        {\n            id: \"step-two\",\n            rules: [\n                {\n                    label: \"All critical alerts should be treated as P1 incident\",\n                    conditions: [{\n                        expression: \"event.severity matches 'critical'\",\n                    }],\n                    actions: {\n                        annotate: \"Please use our P1 runbook: https://docs.test/p1-runbook\",\n                        priority: p1.then(p1 =\u003e p1.id),\n                        incidentCustomFieldUpdates: [{\n                            id: csImpact.id,\n                            value: \"High Impact\",\n                        }],\n                    },\n                },\n                {\n                    label: \"If any of the API apps are unavailable, page the SRE team\",\n                    conditions: [{\n                        expression: \"event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\",\n                    }],\n                    actions: {\n                        escalationPolicy: sreEscPolicy.then(sreEscPolicy =\u003e sreEscPolicy.id),\n                    },\n                },\n                {\n                    label: \"If there's something wrong on the canary let the team know about it in our deployments Slack channel\",\n                    conditions: [{\n                        expression: \"event.custom_details.hostname matches part 'canary'\",\n                    }],\n                    actions: {\n                        automationAction: {\n                            name: \"Canary Slack Notification\",\n                            url: \"https://our-slack-listerner.test/canary-notification\",\n                            autoSend: true,\n                            parameters: [\n                                {\n                                    key: \"channel\",\n                                    value: \"#my-team-channel\",\n                                },\n                                {\n                                    key: \"message\",\n                                    value: \"something is wrong with the canary deployment\",\n                                },\n                            ],\n                            headers: [{\n                                key: \"X-Notification-Source\",\n                                value: \"PagerDuty Incident Webhook\",\n                            }],\n                        },\n                    },\n                },\n                {\n                    label: \"Never bother the on-call for info-level events outside of work hours\",\n                    conditions: [{\n                        expression: \"event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\",\n                    }],\n                    actions: {\n                        suppress: true,\n                    },\n                },\n            ],\n        },\n    ],\n    catchAll: {\n        actions: {},\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nengineering = pagerduty.Team(\"engineering\", name=\"Engineering\")\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nfoo = pagerduty.TeamMembership(\"foo\",\n    user_id=example.id,\n    team_id=engineering.id,\n    role=\"manager\")\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user_reference\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id,\n    alert_creation=\"create_alerts_and_incidents\")\ncs_impact = pagerduty.IncidentCustomField(\"cs_impact\",\n    name=\"impact\",\n    data_type=\"string\",\n    field_type=\"single_value\")\np1 = pagerduty.get_priority(name=\"P1\")\nsre_esc_policy = pagerduty.get_escalation_policy(name=\"SRE Escalation Policy\")\nwww = pagerduty.EventOrchestrationService(\"www\",\n    service=example_service.id,\n    enable_event_orchestration_for_service=True,\n    sets=[\n        {\n            \"id\": \"start\",\n            \"rules\": [{\n                \"label\": \"Always apply some consistent event transformations to all events\",\n                \"actions\": {\n                    \"variables\": [{\n                        \"name\": \"hostname\",\n                        \"path\": \"event.component\",\n                        \"value\": \"hostname: (.*)\",\n                        \"type\": \"regex\",\n                    }],\n                    \"extractions\": [\n                        {\n                            \"template\": \"{{variables.hostname}}\",\n                            \"target\": \"event.custom_details.hostname\",\n                        },\n                        {\n                            \"source\": \"event.source\",\n                            \"regex\": \"www (.*) service\",\n                            \"target\": \"event.source\",\n                        },\n                    ],\n                    \"route_to\": \"step-two\",\n                },\n            }],\n        },\n        {\n            \"id\": \"step-two\",\n            \"rules\": [\n                {\n                    \"label\": \"All critical alerts should be treated as P1 incident\",\n                    \"conditions\": [{\n                        \"expression\": \"event.severity matches 'critical'\",\n                    }],\n                    \"actions\": {\n                        \"annotate\": \"Please use our P1 runbook: https://docs.test/p1-runbook\",\n                        \"priority\": p1.id,\n                        \"incident_custom_field_updates\": [{\n                            \"id\": cs_impact.id,\n                            \"value\": \"High Impact\",\n                        }],\n                    },\n                },\n                {\n                    \"label\": \"If any of the API apps are unavailable, page the SRE team\",\n                    \"conditions\": [{\n                        \"expression\": \"event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\",\n                    }],\n                    \"actions\": {\n                        \"escalation_policy\": sre_esc_policy.id,\n                    },\n                },\n                {\n                    \"label\": \"If there's something wrong on the canary let the team know about it in our deployments Slack channel\",\n                    \"conditions\": [{\n                        \"expression\": \"event.custom_details.hostname matches part 'canary'\",\n                    }],\n                    \"actions\": {\n                        \"automation_action\": {\n                            \"name\": \"Canary Slack Notification\",\n                            \"url\": \"https://our-slack-listerner.test/canary-notification\",\n                            \"auto_send\": True,\n                            \"parameters\": [\n                                {\n                                    \"key\": \"channel\",\n                                    \"value\": \"#my-team-channel\",\n                                },\n                                {\n                                    \"key\": \"message\",\n                                    \"value\": \"something is wrong with the canary deployment\",\n                                },\n                            ],\n                            \"headers\": [{\n                                \"key\": \"X-Notification-Source\",\n                                \"value\": \"PagerDuty Incident Webhook\",\n                            }],\n                        },\n                    },\n                },\n                {\n                    \"label\": \"Never bother the on-call for info-level events outside of work hours\",\n                    \"conditions\": [{\n                        \"expression\": \"event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\",\n                    }],\n                    \"actions\": {\n                        \"suppress\": True,\n                    },\n                },\n            ],\n        },\n    ],\n    catch_all={\n        \"actions\": {},\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineering = new Pagerduty.Team(\"engineering\", new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var foo = new Pagerduty.TeamMembership(\"foo\", new()\n    {\n        UserId = example.Id,\n        TeamId = engineering.Id,\n        Role = \"manager\",\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = exampleEscalationPolicy.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n    });\n\n    var csImpact = new Pagerduty.IncidentCustomField(\"cs_impact\", new()\n    {\n        Name = \"impact\",\n        DataType = \"string\",\n        FieldType = \"single_value\",\n    });\n\n    var p1 = Pagerduty.GetPriority.Invoke(new()\n    {\n        Name = \"P1\",\n    });\n\n    var sreEscPolicy = Pagerduty.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"SRE Escalation Policy\",\n    });\n\n    var www = new Pagerduty.EventOrchestrationService(\"www\", new()\n    {\n        Service = exampleService.Id,\n        EnableEventOrchestrationForService = true,\n        Sets = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationServiceSetArgs\n            {\n                Id = \"start\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"Always apply some consistent event transformations to all events\",\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            Variables = new[]\n                            {\n                                new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsVariableArgs\n                                {\n                                    Name = \"hostname\",\n                                    Path = \"event.component\",\n                                    Value = \"hostname: (.*)\",\n                                    Type = \"regex\",\n                                },\n                            },\n                            Extractions = new[]\n                            {\n                                new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsExtractionArgs\n                                {\n                                    Template = \"{{variables.hostname}}\",\n                                    Target = \"event.custom_details.hostname\",\n                                },\n                                new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsExtractionArgs\n                                {\n                                    Source = \"event.source\",\n                                    Regex = \"www (.*) service\",\n                                    Target = \"event.source\",\n                                },\n                            },\n                            RouteTo = \"step-two\",\n                        },\n                    },\n                },\n            },\n            new Pagerduty.Inputs.EventOrchestrationServiceSetArgs\n            {\n                Id = \"step-two\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"All critical alerts should be treated as P1 incident\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationServiceSetRuleConditionArgs\n                            {\n                                Expression = \"event.severity matches 'critical'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            Annotate = \"Please use our P1 runbook: https://docs.test/p1-runbook\",\n                            Priority = p1.Apply(getPriorityResult =\u003e getPriorityResult.Id),\n                            IncidentCustomFieldUpdates = new[]\n                            {\n                                new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdateArgs\n                                {\n                                    Id = csImpact.Id,\n                                    Value = \"High Impact\",\n                                },\n                            },\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"If any of the API apps are unavailable, page the SRE team\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationServiceSetRuleConditionArgs\n                            {\n                                Expression = \"event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            EscalationPolicy = sreEscPolicy.Apply(getEscalationPolicyResult =\u003e getEscalationPolicyResult.Id),\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"If there's something wrong on the canary let the team know about it in our deployments Slack channel\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationServiceSetRuleConditionArgs\n                            {\n                                Expression = \"event.custom_details.hostname matches part 'canary'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            AutomationAction = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsAutomationActionArgs\n                            {\n                                Name = \"Canary Slack Notification\",\n                                Url = \"https://our-slack-listerner.test/canary-notification\",\n                                AutoSend = true,\n                                Parameters = new[]\n                                {\n                                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs\n                                    {\n                                        Key = \"channel\",\n                                        Value = \"#my-team-channel\",\n                                    },\n                                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs\n                                    {\n                                        Key = \"message\",\n                                        Value = \"something is wrong with the canary deployment\",\n                                    },\n                                },\n                                Headers = new[]\n                                {\n                                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs\n                                    {\n                                        Key = \"X-Notification-Source\",\n                                        Value = \"PagerDuty Incident Webhook\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"Never bother the on-call for info-level events outside of work hours\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationServiceSetRuleConditionArgs\n                            {\n                                Expression = \"event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            Suppress = true,\n                        },\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationServiceCatchAllArgs\n        {\n            Actions = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tengineering, err := pagerduty.NewTeam(ctx, \"engineering\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTeamMembership(ctx, \"foo\", \u0026pagerduty.TeamMembershipArgs{\n\t\t\tUserId: example.ID(),\n\t\t\tTeamId: engineering.ID(),\n\t\t\tRole:   pulumi.String(\"manager\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcsImpact, err := pagerduty.NewIncidentCustomField(ctx, \"cs_impact\", \u0026pagerduty.IncidentCustomFieldArgs{\n\t\t\tName:      pulumi.String(\"impact\"),\n\t\t\tDataType:  pulumi.String(\"string\"),\n\t\t\tFieldType: pulumi.String(\"single_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026pagerduty.GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsreEscPolicy, err := pagerduty.LookupEscalationPolicy(ctx, \u0026pagerduty.LookupEscalationPolicyArgs{\n\t\t\tName: \"SRE Escalation Policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationService(ctx, \"www\", \u0026pagerduty.EventOrchestrationServiceArgs{\n\t\t\tService:                            exampleService.ID(),\n\t\t\tEnableEventOrchestrationForService: pulumi.Bool(true),\n\t\t\tSets: pagerduty.EventOrchestrationServiceSetArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationServiceSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Always apply some consistent event transformations to all events\"),\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tVariables: pagerduty.EventOrchestrationServiceSetRuleActionsVariableArray{\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsVariableArgs{\n\t\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"hostname\"),\n\t\t\t\t\t\t\t\t\t\tPath:  pulumi.String(\"event.component\"),\n\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"hostname: (.*)\"),\n\t\t\t\t\t\t\t\t\t\tType:  pulumi.String(\"regex\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tExtractions: pagerduty.EventOrchestrationServiceSetRuleActionsExtractionArray{\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsExtractionArgs{\n\t\t\t\t\t\t\t\t\t\tTemplate: pulumi.String(\"{{variables.hostname}}\"),\n\t\t\t\t\t\t\t\t\t\tTarget:   pulumi.String(\"event.custom_details.hostname\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsExtractionArgs{\n\t\t\t\t\t\t\t\t\t\tSource: pulumi.String(\"event.source\"),\n\t\t\t\t\t\t\t\t\t\tRegex:  pulumi.String(\"www (.*) service\"),\n\t\t\t\t\t\t\t\t\t\tTarget: pulumi.String(\"event.source\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tRouteTo: pulumi.String(\"step-two\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetArgs{\n\t\t\t\t\tId: pulumi.String(\"step-two\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationServiceSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"All critical alerts should be treated as P1 incident\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationServiceSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.severity matches 'critical'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tAnnotate: pulumi.String(\"Please use our P1 runbook: https://docs.test/p1-runbook\"),\n\t\t\t\t\t\t\t\tPriority: pulumi.String(p1.Id),\n\t\t\t\t\t\t\t\tIncidentCustomFieldUpdates: pagerduty.EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdateArray{\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdateArgs{\n\t\t\t\t\t\t\t\t\t\tId:    csImpact.ID(),\n\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"High Impact\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"If any of the API apps are unavailable, page the SRE team\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationServiceSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tEscalationPolicy: pulumi.String(sreEscPolicy.Id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"If there's something wrong on the canary let the team know about it in our deployments Slack channel\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationServiceSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.custom_details.hostname matches part 'canary'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tAutomationAction: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionArgs{\n\t\t\t\t\t\t\t\t\tName:     pulumi.String(\"Canary Slack Notification\"),\n\t\t\t\t\t\t\t\t\tUrl:      pulumi.String(\"https://our-slack-listerner.test/canary-notification\"),\n\t\t\t\t\t\t\t\t\tAutoSend: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t\tParameters: pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray{\n\t\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:   pulumi.String(\"channel\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"#my-team-channel\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:   pulumi.String(\"message\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"something is wrong with the canary deployment\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tHeaders: pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray{\n\t\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:   pulumi.String(\"X-Notification-Source\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"PagerDuty Incident Webhook\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Never bother the on-call for info-level events outside of work hours\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationServiceSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tSuppress: pulumi.Bool(true),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationServiceCatchAllArgs{\n\t\t\t\tActions: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.TeamMembership;\nimport com.pulumi.pagerduty.TeamMembershipArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.IncidentCustomField;\nimport com.pulumi.pagerduty.IncidentCustomFieldArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetPriorityArgs;\nimport com.pulumi.pagerduty.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.pagerduty.EventOrchestrationService;\nimport com.pulumi.pagerduty.EventOrchestrationServiceArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var engineering = new Team(\"engineering\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var foo = new TeamMembership(\"foo\", TeamMembershipArgs.builder()\n            .userId(example.id())\n            .teamId(engineering.id())\n            .role(\"manager\")\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user_reference\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(exampleEscalationPolicy.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .build());\n\n        var csImpact = new IncidentCustomField(\"csImpact\", IncidentCustomFieldArgs.builder()\n            .name(\"impact\")\n            .dataType(\"string\")\n            .fieldType(\"single_value\")\n            .build());\n\n        final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()\n            .name(\"P1\")\n            .build());\n\n        final var sreEscPolicy = PagerdutyFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"SRE Escalation Policy\")\n            .build());\n\n        var www = new EventOrchestrationService(\"www\", EventOrchestrationServiceArgs.builder()\n            .service(exampleService.id())\n            .enableEventOrchestrationForService(true)\n            .sets(            \n                EventOrchestrationServiceSetArgs.builder()\n                    .id(\"start\")\n                    .rules(EventOrchestrationServiceSetRuleArgs.builder()\n                        .label(\"Always apply some consistent event transformations to all events\")\n                        .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                            .variables(EventOrchestrationServiceSetRuleActionsVariableArgs.builder()\n                                .name(\"hostname\")\n                                .path(\"event.component\")\n                                .value(\"hostname: (.*)\")\n                                .type(\"regex\")\n                                .build())\n                            .extractions(                            \n                                EventOrchestrationServiceSetRuleActionsExtractionArgs.builder()\n                                    .template(\"{{variables.hostname}}\")\n                                    .target(\"event.custom_details.hostname\")\n                                    .build(),\n                                EventOrchestrationServiceSetRuleActionsExtractionArgs.builder()\n                                    .source(\"event.source\")\n                                    .regex(\"www (.*) service\")\n                                    .target(\"event.source\")\n                                    .build())\n                            .routeTo(\"step-two\")\n                            .build())\n                        .build())\n                    .build(),\n                EventOrchestrationServiceSetArgs.builder()\n                    .id(\"step-two\")\n                    .rules(                    \n                        EventOrchestrationServiceSetRuleArgs.builder()\n                            .label(\"All critical alerts should be treated as P1 incident\")\n                            .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()\n                                .expression(\"event.severity matches 'critical'\")\n                                .build())\n                            .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                                .annotate(\"Please use our P1 runbook: https://docs.test/p1-runbook\")\n                                .priority(p1.applyValue(getPriorityResult -\u003e getPriorityResult.id()))\n                                .incidentCustomFieldUpdates(EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdateArgs.builder()\n                                    .id(csImpact.id())\n                                    .value(\"High Impact\")\n                                    .build())\n                                .build())\n                            .build(),\n                        EventOrchestrationServiceSetRuleArgs.builder()\n                            .label(\"If any of the API apps are unavailable, page the SRE team\")\n                            .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()\n                                .expression(\"event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\")\n                                .build())\n                            .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                                .escalationPolicy(sreEscPolicy.applyValue(getEscalationPolicyResult -\u003e getEscalationPolicyResult.id()))\n                                .build())\n                            .build(),\n                        EventOrchestrationServiceSetRuleArgs.builder()\n                            .label(\"If there's something wrong on the canary let the team know about it in our deployments Slack channel\")\n                            .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()\n                                .expression(\"event.custom_details.hostname matches part 'canary'\")\n                                .build())\n                            .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                                .automationAction(EventOrchestrationServiceSetRuleActionsAutomationActionArgs.builder()\n                                    .name(\"Canary Slack Notification\")\n                                    .url(\"https://our-slack-listerner.test/canary-notification\")\n                                    .autoSend(true)\n                                    .parameters(                                    \n                                        EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs.builder()\n                                            .key(\"channel\")\n                                            .value(\"#my-team-channel\")\n                                            .build(),\n                                        EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs.builder()\n                                            .key(\"message\")\n                                            .value(\"something is wrong with the canary deployment\")\n                                            .build())\n                                    .headers(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs.builder()\n                                        .key(\"X-Notification-Source\")\n                                        .value(\"PagerDuty Incident Webhook\")\n                                        .build())\n                                    .build())\n                                .build())\n                            .build(),\n                        EventOrchestrationServiceSetRuleArgs.builder()\n                            .label(\"Never bother the on-call for info-level events outside of work hours\")\n                            .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()\n                                .expression(\"event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\")\n                                .build())\n                            .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                                .suppress(true)\n                                .build())\n                            .build())\n                    .build())\n            .catchAll(EventOrchestrationServiceCatchAllArgs.builder()\n                .actions()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  engineering:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  foo:\n    type: pagerduty:TeamMembership\n    properties:\n      userId: ${example.id}\n      teamId: ${engineering.id}\n      role: manager\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user_reference\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${exampleEscalationPolicy.id}\n      alertCreation: create_alerts_and_incidents\n  csImpact:\n    type: pagerduty:IncidentCustomField\n    name: cs_impact\n    properties:\n      name: impact\n      dataType: string\n      fieldType: single_value\n  www:\n    type: pagerduty:EventOrchestrationService\n    properties:\n      service: ${exampleService.id}\n      enableEventOrchestrationForService: true\n      sets:\n        - id: start\n          rules:\n            - label: Always apply some consistent event transformations to all events\n              actions:\n                variables:\n                  - name: hostname\n                    path: event.component\n                    value: 'hostname: (.*)'\n                    type: regex\n                extractions:\n                  - template: '{{variables.hostname}}'\n                    target: event.custom_details.hostname\n                  - source: event.source\n                    regex: www (.*) service\n                    target: event.source\n                routeTo: step-two\n        - id: step-two\n          rules:\n            - label: All critical alerts should be treated as P1 incident\n              conditions:\n                - expression: event.severity matches 'critical'\n              actions:\n                annotate: 'Please use our P1 runbook: https://docs.test/p1-runbook'\n                priority: ${p1.id}\n                incidentCustomFieldUpdates:\n                  - id: ${csImpact.id}\n                    value: High Impact\n            - label: If any of the API apps are unavailable, page the SRE team\n              conditions:\n                - expression: event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'\n              actions:\n                escalationPolicy: ${sreEscPolicy.id}\n            - label: If there's something wrong on the canary let the team know about it in our deployments Slack channel\n              conditions:\n                - expression: event.custom_details.hostname matches part 'canary'\n              actions:\n                automationAction:\n                  name: Canary Slack Notification\n                  url: https://our-slack-listerner.test/canary-notification\n                  autoSend: true\n                  parameters:\n                    - key: channel\n                      value: '#my-team-channel'\n                    - key: message\n                      value: something is wrong with the canary deployment\n                  headers:\n                    - key: X-Notification-Source\n                      value: PagerDuty Incident Webhook\n            - label: Never bother the on-call for info-level events outside of work hours\n              conditions:\n                - expression: event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)\n              actions:\n                suppress: true\n      catchAll:\n        actions: {}\nvariables:\n  p1:\n    fn::invoke:\n      Function: pagerduty:getPriority\n      Arguments:\n        name: P1\n  sreEscPolicy:\n    fn::invoke:\n      Function: pagerduty:getEscalationPolicy\n      Arguments:\n        name: SRE Escalation Policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nService Orchestration can be imported using the `id` of the Service, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationService:EventOrchestrationService service PFEODA7\n```\n",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "enableEventOrchestrationForService": {
                    "type": "boolean",
                    "description": "Opt-in/out for switching the Service to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations).\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                    },
                    "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "required": [
                "catchAll",
                "enableEventOrchestrationForService",
                "service",
                "sets"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "enableEventOrchestrationForService": {
                    "type": "boolean",
                    "description": "Opt-in/out for switching the Service to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations).\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                    },
                    "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "service",
                "sets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationService resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCatchAll:EventOrchestrationServiceCatchAll",
                        "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                    },
                    "enableEventOrchestrationForService": {
                        "type": "boolean",
                        "description": "Opt-in/out for switching the Service to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations).\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "ID of the Service to which this Service Orchestration belongs to.\n"
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationServiceSet:EventOrchestrationServiceSet"
                        },
                        "description": "A Service Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable": {
            "description": "A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Service Event Orchestration, in order to temporarily store event data to be referenced later within the Service Event Orchestration\n\n## Example of configuring a Cache Variable for a Service Event Orchestration\n\nThis example shows creating a service `Event Orchestration` and a `Cache Variable`. This Cache Variable will count and store the number of trigger events with 'database' in its title. Then all alerts sent to this Event Orchestration will have its severity upped to 'critical' if the count has reached at least 5 triggers within the last 1 minute.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst databaseTeam = new pagerduty.Team(\"database_team\", {name: \"Database Team\"});\nconst user1 = new pagerduty.User(\"user_1\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [databaseTeam.id],\n});\nconst dbEp = new pagerduty.EscalationPolicy(\"db_ep\", {\n    name: \"Database Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: user1.id,\n        }],\n    }],\n});\nconst svc = new pagerduty.Service(\"svc\", {\n    name: \"My Database Service\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: dbEp.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\nconst numDbTriggers = new pagerduty.EventOrchestrationServiceCacheVariable(\"num_db_triggers\", {\n    service: svc.id,\n    name: \"num_db_triggers\",\n    conditions: [{\n        expression: \"event.summary matches part 'database'\",\n    }],\n    configuration: {\n        type: \"trigger_event_count\",\n        ttlSeconds: 60,\n    },\n});\nconst eventOrchestration = new pagerduty.EventOrchestrationService(\"event_orchestration\", {\n    service: svc.id,\n    enableEventOrchestrationForService: true,\n    sets: [{\n        id: \"start\",\n        rules: [{\n            label: \"Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\",\n            conditions: [{\n                expression: \"cache_var.num_db_triggers \u003e= 5\",\n            }],\n            actions: {\n                severity: \"critical\",\n            },\n        }],\n    }],\n    catchAll: {\n        actions: {},\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatabase_team = pagerduty.Team(\"database_team\", name=\"Database Team\")\nuser1 = pagerduty.User(\"user_1\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[database_team.id])\ndb_ep = pagerduty.EscalationPolicy(\"db_ep\",\n    name=\"Database Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": user1.id,\n        }],\n    }])\nsvc = pagerduty.Service(\"svc\",\n    name=\"My Database Service\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=db_ep.id,\n    alert_creation=\"create_alerts_and_incidents\")\nnum_db_triggers = pagerduty.EventOrchestrationServiceCacheVariable(\"num_db_triggers\",\n    service=svc.id,\n    name=\"num_db_triggers\",\n    conditions=[{\n        \"expression\": \"event.summary matches part 'database'\",\n    }],\n    configuration={\n        \"type\": \"trigger_event_count\",\n        \"ttl_seconds\": 60,\n    })\nevent_orchestration = pagerduty.EventOrchestrationService(\"event_orchestration\",\n    service=svc.id,\n    enable_event_orchestration_for_service=True,\n    sets=[{\n        \"id\": \"start\",\n        \"rules\": [{\n            \"label\": \"Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\",\n            \"conditions\": [{\n                \"expression\": \"cache_var.num_db_triggers \u003e= 5\",\n            }],\n            \"actions\": {\n                \"severity\": \"critical\",\n            },\n        }],\n    }],\n    catch_all={\n        \"actions\": {},\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var databaseTeam = new Pagerduty.Team(\"database_team\", new()\n    {\n        Name = \"Database Team\",\n    });\n\n    var user1 = new Pagerduty.User(\"user_1\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            databaseTeam.Id,\n        },\n    });\n\n    var dbEp = new Pagerduty.EscalationPolicy(\"db_ep\", new()\n    {\n        Name = \"Database Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = user1.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var svc = new Pagerduty.Service(\"svc\", new()\n    {\n        Name = \"My Database Service\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = dbEp.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n    });\n\n    var numDbTriggers = new Pagerduty.EventOrchestrationServiceCacheVariable(\"num_db_triggers\", new()\n    {\n        Service = svc.Id,\n        Name = \"num_db_triggers\",\n        Conditions = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationServiceCacheVariableConditionArgs\n            {\n                Expression = \"event.summary matches part 'database'\",\n            },\n        },\n        Configuration = new Pagerduty.Inputs.EventOrchestrationServiceCacheVariableConfigurationArgs\n        {\n            Type = \"trigger_event_count\",\n            TtlSeconds = 60,\n        },\n    });\n\n    var eventOrchestration = new Pagerduty.EventOrchestrationService(\"event_orchestration\", new()\n    {\n        Service = svc.Id,\n        EnableEventOrchestrationForService = true,\n        Sets = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationServiceSetArgs\n            {\n                Id = \"start\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationServiceSetRuleArgs\n                    {\n                        Label = \"Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationServiceSetRuleConditionArgs\n                            {\n                                Expression = \"cache_var.num_db_triggers \u003e= 5\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationServiceSetRuleActionsArgs\n                        {\n                            Severity = \"critical\",\n                        },\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationServiceCatchAllArgs\n        {\n            Actions = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabaseTeam, err := pagerduty.NewTeam(ctx, \"database_team\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Database Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser1, err := pagerduty.NewUser(ctx, \"user_1\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tdatabaseTeam.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdbEp, err := pagerduty.NewEscalationPolicy(ctx, \"db_ep\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Database Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   user1.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsvc, err := pagerduty.NewService(ctx, \"svc\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Database Service\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       dbEp.ID(),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationServiceCacheVariable(ctx, \"num_db_triggers\", \u0026pagerduty.EventOrchestrationServiceCacheVariableArgs{\n\t\t\tService: svc.ID(),\n\t\t\tName:    pulumi.String(\"num_db_triggers\"),\n\t\t\tConditions: pagerduty.EventOrchestrationServiceCacheVariableConditionArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationServiceCacheVariableConditionArgs{\n\t\t\t\t\tExpression: pulumi.String(\"event.summary matches part 'database'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConfiguration: \u0026pagerduty.EventOrchestrationServiceCacheVariableConfigurationArgs{\n\t\t\t\tType:       pulumi.String(\"trigger_event_count\"),\n\t\t\t\tTtlSeconds: pulumi.Int(60),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestrationService(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationServiceArgs{\n\t\t\tService:                            svc.ID(),\n\t\t\tEnableEventOrchestrationForService: pulumi.Bool(true),\n\t\t\tSets: pagerduty.EventOrchestrationServiceSetArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationServiceSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationServiceSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationServiceSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"cache_var.num_db_triggers \u003e= 5\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationServiceSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tSeverity: pulumi.String(\"critical\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationServiceCatchAllArgs{\n\t\t\t\tActions: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.EventOrchestrationServiceCacheVariable;\nimport com.pulumi.pagerduty.EventOrchestrationServiceCacheVariableArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConditionArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConfigurationArgs;\nimport com.pulumi.pagerduty.EventOrchestrationService;\nimport com.pulumi.pagerduty.EventOrchestrationServiceArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databaseTeam = new Team(\"databaseTeam\", TeamArgs.builder()\n            .name(\"Database Team\")\n            .build());\n\n        var user1 = new User(\"user1\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(databaseTeam.id())\n            .build());\n\n        var dbEp = new EscalationPolicy(\"dbEp\", EscalationPolicyArgs.builder()\n            .name(\"Database Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(user1.id())\n                    .build())\n                .build())\n            .build());\n\n        var svc = new Service(\"svc\", ServiceArgs.builder()\n            .name(\"My Database Service\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(dbEp.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .build());\n\n        var numDbTriggers = new EventOrchestrationServiceCacheVariable(\"numDbTriggers\", EventOrchestrationServiceCacheVariableArgs.builder()\n            .service(svc.id())\n            .name(\"num_db_triggers\")\n            .conditions(EventOrchestrationServiceCacheVariableConditionArgs.builder()\n                .expression(\"event.summary matches part 'database'\")\n                .build())\n            .configuration(EventOrchestrationServiceCacheVariableConfigurationArgs.builder()\n                .type(\"trigger_event_count\")\n                .ttlSeconds(60)\n                .build())\n            .build());\n\n        var eventOrchestration = new EventOrchestrationService(\"eventOrchestration\", EventOrchestrationServiceArgs.builder()\n            .service(svc.id())\n            .enableEventOrchestrationForService(true)\n            .sets(EventOrchestrationServiceSetArgs.builder()\n                .id(\"start\")\n                .rules(EventOrchestrationServiceSetRuleArgs.builder()\n                    .label(\"Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\")\n                    .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()\n                        .expression(\"cache_var.num_db_triggers \u003e= 5\")\n                        .build())\n                    .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()\n                        .severity(\"critical\")\n                        .build())\n                    .build())\n                .build())\n            .catchAll(EventOrchestrationServiceCatchAllArgs.builder()\n                .actions()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  databaseTeam:\n    type: pagerduty:Team\n    name: database_team\n    properties:\n      name: Database Team\n  user1:\n    type: pagerduty:User\n    name: user_1\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${databaseTeam.id}\n  dbEp:\n    type: pagerduty:EscalationPolicy\n    name: db_ep\n    properties:\n      name: Database Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${user1.id}\n  svc:\n    type: pagerduty:Service\n    properties:\n      name: My Database Service\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${dbEp.id}\n      alertCreation: create_alerts_and_incidents\n  numDbTriggers:\n    type: pagerduty:EventOrchestrationServiceCacheVariable\n    name: num_db_triggers\n    properties:\n      service: ${svc.id}\n      name: num_db_triggers\n      conditions:\n        - expression: event.summary matches part 'database'\n      configuration:\n        type: trigger_event_count\n        ttlSeconds: 60\n  eventOrchestration:\n    type: pagerduty:EventOrchestrationService\n    name: event_orchestration\n    properties:\n      service: ${svc.id}\n      enableEventOrchestrationForService: true\n      sets:\n        - id: start\n          rules:\n            - label: Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute\n              conditions:\n                - expression: cache_var.num_db_triggers \u003e= 5\n              actions:\n                severity: critical\n      catchAll:\n        actions: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCache Variables can be imported using colon-separated IDs, which is the combination of the Service Event Orchestration ID followed by the Cache Variable ID, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable cache_variable PLBP09X:138ed254-3444-44ad-8cc7-701d69def439\n```\n",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableCondition:EventOrchestrationServiceCacheVariableCondition"
                    },
                    "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                },
                "configuration": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableConfiguration:EventOrchestrationServiceCacheVariableConfiguration",
                    "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cache Variable associated with the Service Event Orchestration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service Event Orchestration to which this Cache Variable belongs.\n"
                }
            },
            "required": [
                "configuration",
                "name",
                "service"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableCondition:EventOrchestrationServiceCacheVariableCondition"
                    },
                    "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                },
                "configuration": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableConfiguration:EventOrchestrationServiceCacheVariableConfiguration",
                    "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cache Variable associated with the Service Event Orchestration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of the Service Event Orchestration to which this Cache Variable belongs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "configuration",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationServiceCacheVariable resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableCondition:EventOrchestrationServiceCacheVariableCondition"
                        },
                        "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationServiceCacheVariableConfiguration:EventOrchestrationServiceCacheVariableConfiguration",
                        "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cache Variable associated with the Service Event Orchestration.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "ID of the Service Event Orchestration to which this Cache Variable belongs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted": {
            "description": "An Unrouted Orchestration allows users to create a set of Event Rules that will be evaluated against all events that don't match any rules in the Orchestration's Router.\n\nThe Unrouted Orchestration evaluates events sent to it against each of its rules, beginning with the rules in the \"start\" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.\n\n## Example of configuring Unrouted Rules for an Orchestration\n\nIn this example of an Unrouted Orchestration, the rule matches only if the condition is matched.\nAlerts created for events that do not match the rule will have severity level set to `info` as defined in `catch_all` block.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst unrouted = new pagerduty.EventOrchestrationUnrouted(\"unrouted\", {\n    eventOrchestration: myMonitor.id,\n    sets: [{\n        id: \"start\",\n        rules: [{\n            label: \"Update the summary of un-matched Critical alerts so they're easier to spot\",\n            conditions: [{\n                expression: \"event.severity matches 'critical'\",\n            }],\n            actions: {\n                severity: \"critical\",\n                extractions: [{\n                    target: \"event.summary\",\n                    template: \"[Critical Unrouted] {{event.summary}}\",\n                }],\n            },\n        }],\n    }],\n    catchAll: {\n        actions: {\n            severity: \"info\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nunrouted = pagerduty.EventOrchestrationUnrouted(\"unrouted\",\n    event_orchestration=my_monitor[\"id\"],\n    sets=[{\n        \"id\": \"start\",\n        \"rules\": [{\n            \"label\": \"Update the summary of un-matched Critical alerts so they're easier to spot\",\n            \"conditions\": [{\n                \"expression\": \"event.severity matches 'critical'\",\n            }],\n            \"actions\": {\n                \"severity\": \"critical\",\n                \"extractions\": [{\n                    \"target\": \"event.summary\",\n                    \"template\": \"[Critical Unrouted] {{event.summary}}\",\n                }],\n            },\n        }],\n    }],\n    catch_all={\n        \"actions\": {\n            \"severity\": \"info\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var unrouted = new Pagerduty.EventOrchestrationUnrouted(\"unrouted\", new()\n    {\n        EventOrchestration = myMonitor.Id,\n        Sets = new[]\n        {\n            new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs\n            {\n                Id = \"start\",\n                Rules = new[]\n                {\n                    new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs\n                    {\n                        Label = \"Update the summary of un-matched Critical alerts so they're easier to spot\",\n                        Conditions = new[]\n                        {\n                            new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleConditionArgs\n                            {\n                                Expression = \"event.severity matches 'critical'\",\n                            },\n                        },\n                        Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs\n                        {\n                            Severity = \"critical\",\n                            Extractions = new[]\n                            {\n                                new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs\n                                {\n                                    Target = \"event.summary\",\n                                    Template = \"[Critical Unrouted] {{event.summary}}\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs\n        {\n            Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs\n            {\n                Severity = \"info\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewEventOrchestrationUnrouted(ctx, \"unrouted\", \u0026pagerduty.EventOrchestrationUnroutedArgs{\n\t\t\tEventOrchestration: pulumi.Any(myMonitor.Id),\n\t\t\tSets: pagerduty.EventOrchestrationUnroutedSetArray{\n\t\t\t\t\u0026pagerduty.EventOrchestrationUnroutedSetArgs{\n\t\t\t\t\tId: pulumi.String(\"start\"),\n\t\t\t\t\tRules: pagerduty.EventOrchestrationUnroutedSetRuleArray{\n\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationUnroutedSetRuleArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"Update the summary of un-matched Critical alerts so they're easier to spot\"),\n\t\t\t\t\t\t\tConditions: pagerduty.EventOrchestrationUnroutedSetRuleConditionArray{\n\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationUnroutedSetRuleConditionArgs{\n\t\t\t\t\t\t\t\t\tExpression: pulumi.String(\"event.severity matches 'critical'\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tActions: \u0026pagerduty.EventOrchestrationUnroutedSetRuleActionsArgs{\n\t\t\t\t\t\t\t\tSeverity: pulumi.String(\"critical\"),\n\t\t\t\t\t\t\t\tExtractions: pagerduty.EventOrchestrationUnroutedSetRuleActionsExtractionArray{\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.EventOrchestrationUnroutedSetRuleActionsExtractionArgs{\n\t\t\t\t\t\t\t\t\t\tTarget:   pulumi.String(\"event.summary\"),\n\t\t\t\t\t\t\t\t\t\tTemplate: pulumi.String(\"[Critical Unrouted] {{event.summary}}\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCatchAll: \u0026pagerduty.EventOrchestrationUnroutedCatchAllArgs{\n\t\t\t\tActions: \u0026pagerduty.EventOrchestrationUnroutedCatchAllActionsArgs{\n\t\t\t\t\tSeverity: pulumi.String(\"info\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.EventOrchestrationUnrouted;\nimport com.pulumi.pagerduty.EventOrchestrationUnroutedArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedSetArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedCatchAllArgs;\nimport com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedCatchAllActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var unrouted = new EventOrchestrationUnrouted(\"unrouted\", EventOrchestrationUnroutedArgs.builder()\n            .eventOrchestration(myMonitor.id())\n            .sets(EventOrchestrationUnroutedSetArgs.builder()\n                .id(\"start\")\n                .rules(EventOrchestrationUnroutedSetRuleArgs.builder()\n                    .label(\"Update the summary of un-matched Critical alerts so they're easier to spot\")\n                    .conditions(EventOrchestrationUnroutedSetRuleConditionArgs.builder()\n                        .expression(\"event.severity matches 'critical'\")\n                        .build())\n                    .actions(EventOrchestrationUnroutedSetRuleActionsArgs.builder()\n                        .severity(\"critical\")\n                        .extractions(EventOrchestrationUnroutedSetRuleActionsExtractionArgs.builder()\n                            .target(\"event.summary\")\n                            .template(\"[Critical Unrouted] {{event.summary}}\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .catchAll(EventOrchestrationUnroutedCatchAllArgs.builder()\n                .actions(EventOrchestrationUnroutedCatchAllActionsArgs.builder()\n                    .severity(\"info\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  unrouted:\n    type: pagerduty:EventOrchestrationUnrouted\n    properties:\n      eventOrchestration: ${myMonitor.id}\n      sets:\n        - id: start\n          rules:\n            - label: Update the summary of un-matched Critical alerts so they're easier to spot\n              conditions:\n                - expression: event.severity matches 'critical'\n              actions:\n                severity: critical\n                extractions:\n                  - target: event.summary\n                    template: '[Critical Unrouted] {{event.summary}}'\n      catchAll:\n        actions:\n          severity: info\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUnrouted Orchestration can be imported using the `id` of the Event Orchestration, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted unrouted 1b49abe7-26db-4439-a715-c6d883acfb3e\n```\n",
            "properties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                    },
                    "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "required": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "inputProperties": {
                "catchAll": {
                    "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                    "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                },
                "eventOrchestration": {
                    "type": "string",
                    "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                },
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                    },
                    "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                }
            },
            "requiredInputs": [
                "catchAll",
                "eventOrchestration",
                "sets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventOrchestrationUnrouted resources.\n",
                "properties": {
                    "catchAll": {
                        "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedCatchAll:EventOrchestrationUnroutedCatchAll",
                        "description": "the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.\n"
                    },
                    "eventOrchestration": {
                        "type": "string",
                        "description": "The Event Orchestration to which this Unrouted Orchestration belongs to.\n"
                    },
                    "sets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/EventOrchestrationUnroutedSet:EventOrchestrationUnroutedSet"
                        },
                        "description": "An Unrouted Orchestration must contain at least a \"start\" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/eventRule:EventRule": {
            "description": "*NOTE: The `pagerduty.EventRule` resource has been deprecated in favor of the pagerduty.Ruleset and pagerduty.RulesetRule resources. Please use the `ruleset` based resources for working with Event Rules.*\n\nAn [event rule](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/) determines what happens to an event that is sent to PagerDuty by monitoring tools and other integrations.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst second = new pagerduty.EventRule(\"second\", {\n    actionJson: JSON.stringify([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"2 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    conditionJson: JSON.stringify([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    advancedConditionJson: JSON.stringify([[\n        \"scheduled-weekly\",\n        1565392127032,\n        3600000,\n        \"America/Los_Angeles\",\n        [\n            1,\n            2,\n            3,\n            5,\n            7,\n        ],\n    ]]),\n});\nconst third = new pagerduty.EventRule(\"third\", {\n    actionJson: JSON.stringify([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"3 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    conditionJson: JSON.stringify([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n}, {\n    dependsOn: [two],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_pagerduty as pagerduty\n\nsecond = pagerduty.EventRule(\"second\",\n    action_json=json.dumps([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"2 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    condition_json=json.dumps([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    advanced_condition_json=json.dumps([[\n        \"scheduled-weekly\",\n        1565392127032,\n        3600000,\n        \"America/Los_Angeles\",\n        [\n            1,\n            2,\n            3,\n            5,\n            7,\n        ],\n    ]]))\nthird = pagerduty.EventRule(\"third\",\n    action_json=json.dumps([\n        [\n            \"route\",\n            \"P5DTL0K\",\n        ],\n        [\n            \"severity\",\n            \"warning\",\n        ],\n        [\n            \"annotate\",\n            \"3 Managed by terraform\",\n        ],\n        [\n            \"priority\",\n            \"PL451DT\",\n        ],\n    ]),\n    condition_json=json.dumps([\n        \"and\",\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"payload\",\n                \"source\",\n            ],\n            \"website\",\n        ],\n        [\n            \"contains\",\n            [\n                \"path\",\n                \"headers\",\n                \"from\",\n                \"0\",\n                \"address\",\n            ],\n            \"homer\",\n        ],\n    ]),\n    opts = pulumi.ResourceOptions(depends_on=[two]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var second = new Pagerduty.EventRule(\"second\", new()\n    {\n        ActionJson = JsonSerializer.Serialize(new[]\n        {\n            new[]\n            {\n                \"route\",\n                \"P5DTL0K\",\n            },\n            new[]\n            {\n                \"severity\",\n                \"warning\",\n            },\n            new[]\n            {\n                \"annotate\",\n                \"2 Managed by terraform\",\n            },\n            new[]\n            {\n                \"priority\",\n                \"PL451DT\",\n            },\n        }),\n        ConditionJson = JsonSerializer.Serialize(new object?[]\n        {\n            \"and\",\n            new object?[]\n            {\n                \"contains\",\n                new[]\n                {\n                    \"path\",\n                    \"payload\",\n                    \"source\",\n                },\n                \"website\",\n            },\n            new object?[]\n            {\n                \"contains\",\n                new[]\n                {\n                    \"path\",\n                    \"headers\",\n                    \"from\",\n                    \"0\",\n                    \"address\",\n                },\n                \"homer\",\n            },\n        }),\n        AdvancedConditionJson = JsonSerializer.Serialize(new[]\n        {\n            new object?[]\n            {\n                \"scheduled-weekly\",\n                1565392127032,\n                3600000,\n                \"America/Los_Angeles\",\n                new object?[]\n                {\n                    1,\n                    2,\n                    3,\n                    5,\n                    7,\n                },\n            },\n        }),\n    });\n\n    var third = new Pagerduty.EventRule(\"third\", new()\n    {\n        ActionJson = JsonSerializer.Serialize(new[]\n        {\n            new[]\n            {\n                \"route\",\n                \"P5DTL0K\",\n            },\n            new[]\n            {\n                \"severity\",\n                \"warning\",\n            },\n            new[]\n            {\n                \"annotate\",\n                \"3 Managed by terraform\",\n            },\n            new[]\n            {\n                \"priority\",\n                \"PL451DT\",\n            },\n        }),\n        ConditionJson = JsonSerializer.Serialize(new object?[]\n        {\n            \"and\",\n            new object?[]\n            {\n                \"contains\",\n                new[]\n                {\n                    \"path\",\n                    \"payload\",\n                    \"source\",\n                },\n                \"website\",\n            },\n            new object?[]\n            {\n                \"contains\",\n                new[]\n                {\n                    \"path\",\n                    \"headers\",\n                    \"from\",\n                    \"0\",\n                    \"address\",\n                },\n                \"homer\",\n            },\n        }),\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            two,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal([][]string{\n\t\t\t[]string{\n\t\t\t\t\"route\",\n\t\t\t\t\"P5DTL0K\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"severity\",\n\t\t\t\t\"warning\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"annotate\",\n\t\t\t\t\"2 Managed by terraform\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"priority\",\n\t\t\t\t\"PL451DT\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal([]interface{}{\n\t\t\t\"and\",\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"payload\",\n\t\t\t\t\t\"source\",\n\t\t\t\t},\n\t\t\t\t\"website\",\n\t\t\t},\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"headers\",\n\t\t\t\t\t\"from\",\n\t\t\t\t\t\"0\",\n\t\t\t\t\t\"address\",\n\t\t\t\t},\n\t\t\t\t\"homer\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\ttmpJSON2, err := json.Marshal([][]interface{}{\n\t\t\t[]interface{}{\n\t\t\t\t\"scheduled-weekly\",\n\t\t\t\t1565392127032,\n\t\t\t\t3600000,\n\t\t\t\t\"America/Los_Angeles\",\n\t\t\t\t[]float64{\n\t\t\t\t\t1,\n\t\t\t\t\t2,\n\t\t\t\t\t3,\n\t\t\t\t\t5,\n\t\t\t\t\t7,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\t_, err = pagerduty.NewEventRule(ctx, \"second\", \u0026pagerduty.EventRuleArgs{\n\t\t\tActionJson:            pulumi.String(json0),\n\t\t\tConditionJson:         pulumi.String(json1),\n\t\t\tAdvancedConditionJson: pulumi.String(json2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON3, err := json.Marshal([][]string{\n\t\t\t[]string{\n\t\t\t\t\"route\",\n\t\t\t\t\"P5DTL0K\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"severity\",\n\t\t\t\t\"warning\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"annotate\",\n\t\t\t\t\"3 Managed by terraform\",\n\t\t\t},\n\t\t\t[]string{\n\t\t\t\t\"priority\",\n\t\t\t\t\"PL451DT\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\ttmpJSON4, err := json.Marshal([]interface{}{\n\t\t\t\"and\",\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"payload\",\n\t\t\t\t\t\"source\",\n\t\t\t\t},\n\t\t\t\t\"website\",\n\t\t\t},\n\t\t\t[]interface{}{\n\t\t\t\t\"contains\",\n\t\t\t\t[]string{\n\t\t\t\t\t\"path\",\n\t\t\t\t\t\"headers\",\n\t\t\t\t\t\"from\",\n\t\t\t\t\t\"0\",\n\t\t\t\t\t\"address\",\n\t\t\t\t},\n\t\t\t\t\"homer\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson4 := string(tmpJSON4)\n\t\t_, err = pagerduty.NewEventRule(ctx, \"third\", \u0026pagerduty.EventRuleArgs{\n\t\t\tActionJson:    pulumi.String(json3),\n\t\t\tConditionJson: pulumi.String(json4),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\ttwo,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.EventRule;\nimport com.pulumi.pagerduty.EventRuleArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var second = new EventRule(\"second\", EventRuleArgs.builder()\n            .actionJson(serializeJson(\n                jsonArray(\n                    jsonArray(\n                        \"route\", \n                        \"P5DTL0K\"\n                    ), \n                    jsonArray(\n                        \"severity\", \n                        \"warning\"\n                    ), \n                    jsonArray(\n                        \"annotate\", \n                        \"2 Managed by terraform\"\n                    ), \n                    jsonArray(\n                        \"priority\", \n                        \"PL451DT\"\n                    )\n                )))\n            .conditionJson(serializeJson(\n                jsonArray(\n                    \"and\", \n                    jsonArray(\n                        \"contains\", \n                        jsonArray(\n                            \"path\", \n                            \"payload\", \n                            \"source\"\n                        ), \n                        \"website\"\n                    ), \n                    jsonArray(\n                        \"contains\", \n                        jsonArray(\n                            \"path\", \n                            \"headers\", \n                            \"from\", \n                            \"0\", \n                            \"address\"\n                        ), \n                        \"homer\"\n                    )\n                )))\n            .advancedConditionJson(serializeJson(\n                jsonArray(jsonArray(\n                    \"scheduled-weekly\", \n                    1565392127032, \n                    3600000, \n                    \"America/Los_Angeles\", \n                    jsonArray(\n                        1, \n                        2, \n                        3, \n                        5, \n                        7\n                    )\n                ))))\n            .build());\n\n        var third = new EventRule(\"third\", EventRuleArgs.builder()\n            .actionJson(serializeJson(\n                jsonArray(\n                    jsonArray(\n                        \"route\", \n                        \"P5DTL0K\"\n                    ), \n                    jsonArray(\n                        \"severity\", \n                        \"warning\"\n                    ), \n                    jsonArray(\n                        \"annotate\", \n                        \"3 Managed by terraform\"\n                    ), \n                    jsonArray(\n                        \"priority\", \n                        \"PL451DT\"\n                    )\n                )))\n            .conditionJson(serializeJson(\n                jsonArray(\n                    \"and\", \n                    jsonArray(\n                        \"contains\", \n                        jsonArray(\n                            \"path\", \n                            \"payload\", \n                            \"source\"\n                        ), \n                        \"website\"\n                    ), \n                    jsonArray(\n                        \"contains\", \n                        jsonArray(\n                            \"path\", \n                            \"headers\", \n                            \"from\", \n                            \"0\", \n                            \"address\"\n                        ), \n                        \"homer\"\n                    )\n                )))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(two)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  second:\n    type: pagerduty:EventRule\n    properties:\n      actionJson:\n        fn::toJSON:\n          - - route\n            - P5DTL0K\n          - - severity\n            - warning\n          - - annotate\n            - 2 Managed by terraform\n          - - priority\n            - PL451DT\n      conditionJson:\n        fn::toJSON:\n          - and\n          - - contains\n            - - path\n              - payload\n              - source\n            - website\n          - - contains\n            - - path\n              - headers\n              - from\n              - '0'\n              - address\n            - homer\n      advancedConditionJson:\n        fn::toJSON:\n          - - scheduled-weekly\n            - 1.565392127032e+12\n            - 3.6e+06\n            - America/Los_Angeles\n            - - 1\n              - 2\n              - 3\n              - 5\n              - 7\n  third:\n    type: pagerduty:EventRule\n    properties:\n      actionJson:\n        fn::toJSON:\n          - - route\n            - P5DTL0K\n          - - severity\n            - warning\n          - - annotate\n            - 3 Managed by terraform\n          - - priority\n            - PL451DT\n      conditionJson:\n        fn::toJSON:\n          - and\n          - - contains\n            - - path\n              - payload\n              - source\n            - website\n          - - contains\n            - - path\n              - headers\n              - from\n              - '0'\n              - address\n            - homer\n    options:\n      dependson:\n        - ${two}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEvent rules can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/eventRule:EventRule main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n",
            "properties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "required": [
                "actionJson",
                "catchAll",
                "conditionJson"
            ],
            "inputProperties": {
                "actionJson": {
                    "type": "string",
                    "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                },
                "advancedConditionJson": {
                    "type": "string",
                    "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                },
                "conditionJson": {
                    "type": "string",
                    "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                }
            },
            "requiredInputs": [
                "actionJson",
                "conditionJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventRule resources.\n",
                "properties": {
                    "actionJson": {
                        "type": "string",
                        "description": "A list of one or more actions for each rule. Each action within the list is itself a list.\n"
                    },
                    "advancedConditionJson": {
                        "type": "string",
                        "description": "Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.\n"
                    },
                    "catchAll": {
                        "type": "boolean",
                        "description": "A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.\n"
                    },
                    "conditionJson": {
                        "type": "string",
                        "description": "Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/extension:Extension": {
            "description": "An [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) can be associated with a service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Howard James\",\n    email: \"howard.james@example.domain\",\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    name: \"My Web App Extension\",\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionSchema: webhook.then(webhook =\u003e webhook.id),\n    extensionObjects: [exampleService.id],\n    config: `{\n\\x09\"restrict\": \"any\",\n\\x09\"notify_types\": {\n\\x09\\x09\\x09\"resolve\": false,\n\\x09\\x09\\x09\"acknowledge\": false,\n\\x09\\x09\\x09\"assignments\": false\n\\x09},\n\\x09\"access_token\": \"XXX\"\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample = pagerduty.User(\"example\",\n    name=\"Howard James\",\n    email=\"howard.james@example.domain\")\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id)\nslack = pagerduty.Extension(\"slack\",\n    name=\"My Web App Extension\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_schema=webhook.id,\n    extension_objects=[example_service.id],\n    config=\"\"\"{\n\\x09\"restrict\": \"any\",\n\\x09\"notify_types\": {\n\\x09\\x09\\x09\"resolve\": false,\n\\x09\\x09\\x09\"acknowledge\": false,\n\\x09\\x09\\x09\"assignments\": false\n\\x09},\n\\x09\"access_token\": \"XXX\"\n}\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook = Pagerduty.GetExtensionSchema.Invoke(new()\n    {\n        Name = \"Generic V2 Webhook\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Howard James\",\n        Email = \"howard.james@example.domain\",\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = exampleEscalationPolicy.Id,\n    });\n\n    var slack = new Pagerduty.Extension(\"slack\", new()\n    {\n        Name = \"My Web App Extension\",\n        EndpointUrl = \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n        ExtensionSchema = webhook.Apply(getExtensionSchemaResult =\u003e getExtensionSchemaResult.Id),\n        ExtensionObjects = new[]\n        {\n            exampleService.Id,\n        },\n        Config = @\"{\n\t\"\"restrict\"\": \"\"any\"\",\n\t\"\"notify_types\"\": {\n\t\t\t\"\"resolve\"\": false,\n\t\t\t\"\"acknowledge\"\": false,\n\t\t\t\"\"assignments\"\": false\n\t},\n\t\"\"access_token\"\": \"\"XXX\"\"\n}\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebhook, err := pagerduty.GetExtensionSchema(ctx, \u0026pagerduty.GetExtensionSchemaArgs{\n\t\t\tName: \"Generic V2 Webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Howard James\"),\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtension(ctx, \"slack\", \u0026pagerduty.ExtensionArgs{\n\t\t\tName:            pulumi.String(\"My Web App Extension\"),\n\t\t\tEndpointUrl:     pulumi.String(\"https://generic_webhook_url/XXXXXX/BBBBBB\"),\n\t\t\tExtensionSchema: pulumi.String(webhook.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t\tConfig: pulumi.String(`{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetExtensionSchemaArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.Extension;\nimport com.pulumi.pagerduty.ExtensionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webhook = PagerdutyFunctions.getExtensionSchema(GetExtensionSchemaArgs.builder()\n            .name(\"Generic V2 Webhook\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Howard James\")\n            .email(\"howard.james@example.domain\")\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(exampleEscalationPolicy.id())\n            .build());\n\n        var slack = new Extension(\"slack\", ExtensionArgs.builder()\n            .name(\"My Web App Extension\")\n            .endpointUrl(\"https://generic_webhook_url/XXXXXX/BBBBBB\")\n            .extensionSchema(webhook.applyValue(getExtensionSchemaResult -\u003e getExtensionSchemaResult.id()))\n            .extensionObjects(exampleService.id())\n            .config(\"\"\"\n{\n\t\"restrict\": \"any\",\n\t\"notify_types\": {\n\t\t\t\"resolve\": false,\n\t\t\t\"acknowledge\": false,\n\t\t\t\"assignments\": false\n\t},\n\t\"access_token\": \"XXX\"\n}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Howard James\n      email: howard.james@example.domain\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${exampleEscalationPolicy.id}\n  slack:\n    type: pagerduty:Extension\n    properties:\n      name: My Web App Extension\n      endpointUrl: https://generic_webhook_url/XXXXXX/BBBBBB\n      extensionSchema: ${webhook.id}\n      extensionObjects:\n        - ${exampleService.id}\n      config: |\n        {\n        \t\"restrict\": \"any\",\n        \t\"notify_types\": {\n        \t\t\t\"resolve\": false,\n        \t\t\t\"acknowledge\": false,\n        \t\t\t\"assignments\": false\n        \t},\n        \t\"access_token\": \"XXX\"\n        }\nvariables:\n  webhook:\n    fn::invoke:\n      Function: pagerduty:getExtensionSchema\n      Arguments:\n        name: Generic V2 Webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExtensions can be imported using the id.e.g.\n\n```sh\n$ pulumi import pagerduty:index/extension:Extension main PLBP09X\n```\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a *Required* parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n",
                    "secret": true
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n\n**Note:** You can use the `pagerduty.getExtensionSchema` data source to locate the appropriate extension vendor ID.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "config",
                "endpointUrl",
                "extensionObjects",
                "extensionSchema",
                "htmlUrl",
                "name",
                "summary",
                "type"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a *Required* parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n",
                    "secret": true
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "extensionObjects",
                "extensionSchema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Extension resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The configuration of the service extension as string containing plain JSON-encoded data.\n"
                    },
                    "endpointUrl": {
                        "type": "string",
                        "description": "The url of the extension.\n**Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a *Required* parameter. For example, `pagerduty.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `pagerduty.Extension` with no `endpoint_url`, but one with named `Slack` accepts.\n",
                        "secret": true
                    },
                    "extensionObjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is the objects for which the extension applies (An array of service ids).\n"
                    },
                    "extensionSchema": {
                        "type": "string",
                        "description": "This is the schema for this extension.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service extension.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n\n**Note:** You can use the `pagerduty.getExtensionSchema` data source to locate the appropriate extension vendor ID.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/extensionServiceNow:ExtensionServiceNow": {
            "description": "A special case for [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) for ServiceNow.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst servicenow = pagerduty.getExtensionSchema({\n    name: \"ServiceNow (v7)\",\n});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Howard James\",\n    email: \"howard.james@example.domain\",\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n});\nconst snow = new pagerduty.ExtensionServiceNow(\"snow\", {\n    name: \"My Web App Extension\",\n    extensionSchema: servicenow.then(servicenow =\u003e servicenow.id),\n    extensionObjects: [exampleService.id],\n    snowUser: \"meeps\",\n    snowPassword: \"zorz\",\n    syncOptions: \"manual_sync\",\n    target: \"https://foo.servicenow.com/webhook_foo\",\n    taskType: \"incident\",\n    referer: \"None\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nservicenow = pagerduty.get_extension_schema(name=\"ServiceNow (v7)\")\nexample = pagerduty.User(\"example\",\n    name=\"Howard James\",\n    email=\"howard.james@example.domain\")\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id)\nsnow = pagerduty.ExtensionServiceNow(\"snow\",\n    name=\"My Web App Extension\",\n    extension_schema=servicenow.id,\n    extension_objects=[example_service.id],\n    snow_user=\"meeps\",\n    snow_password=\"zorz\",\n    sync_options=\"manual_sync\",\n    target=\"https://foo.servicenow.com/webhook_foo\",\n    task_type=\"incident\",\n    referer=\"None\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var servicenow = Pagerduty.GetExtensionSchema.Invoke(new()\n    {\n        Name = \"ServiceNow (v7)\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Howard James\",\n        Email = \"howard.james@example.domain\",\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = exampleEscalationPolicy.Id,\n    });\n\n    var snow = new Pagerduty.ExtensionServiceNow(\"snow\", new()\n    {\n        Name = \"My Web App Extension\",\n        ExtensionSchema = servicenow.Apply(getExtensionSchemaResult =\u003e getExtensionSchemaResult.Id),\n        ExtensionObjects = new[]\n        {\n            exampleService.Id,\n        },\n        SnowUser = \"meeps\",\n        SnowPassword = \"zorz\",\n        SyncOptions = \"manual_sync\",\n        Target = \"https://foo.servicenow.com/webhook_foo\",\n        TaskType = \"incident\",\n        Referer = \"None\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tservicenow, err := pagerduty.GetExtensionSchema(ctx, \u0026pagerduty.GetExtensionSchemaArgs{\n\t\t\tName: \"ServiceNow (v7)\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Howard James\"),\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtensionServiceNow(ctx, \"snow\", \u0026pagerduty.ExtensionServiceNowArgs{\n\t\t\tName:            pulumi.String(\"My Web App Extension\"),\n\t\t\tExtensionSchema: pulumi.String(servicenow.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t\tSnowUser:     pulumi.String(\"meeps\"),\n\t\t\tSnowPassword: pulumi.String(\"zorz\"),\n\t\t\tSyncOptions:  pulumi.String(\"manual_sync\"),\n\t\t\tTarget:       pulumi.String(\"https://foo.servicenow.com/webhook_foo\"),\n\t\t\tTaskType:     pulumi.String(\"incident\"),\n\t\t\tReferer:      pulumi.String(\"None\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetExtensionSchemaArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.ExtensionServiceNow;\nimport com.pulumi.pagerduty.ExtensionServiceNowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var servicenow = PagerdutyFunctions.getExtensionSchema(GetExtensionSchemaArgs.builder()\n            .name(\"ServiceNow (v7)\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Howard James\")\n            .email(\"howard.james@example.domain\")\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(exampleEscalationPolicy.id())\n            .build());\n\n        var snow = new ExtensionServiceNow(\"snow\", ExtensionServiceNowArgs.builder()\n            .name(\"My Web App Extension\")\n            .extensionSchema(servicenow.applyValue(getExtensionSchemaResult -\u003e getExtensionSchemaResult.id()))\n            .extensionObjects(exampleService.id())\n            .snowUser(\"meeps\")\n            .snowPassword(\"zorz\")\n            .syncOptions(\"manual_sync\")\n            .target(\"https://foo.servicenow.com/webhook_foo\")\n            .taskType(\"incident\")\n            .referer(\"None\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Howard James\n      email: howard.james@example.domain\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${exampleEscalationPolicy.id}\n  snow:\n    type: pagerduty:ExtensionServiceNow\n    properties:\n      name: My Web App Extension\n      extensionSchema: ${servicenow.id}\n      extensionObjects:\n        - ${exampleService.id}\n      snowUser: meeps\n      snowPassword: zorz\n      syncOptions: manual_sync\n      target: https://foo.servicenow.com/webhook_foo\n      taskType: incident\n      referer: None\nvariables:\n  servicenow:\n    fn::invoke:\n      Function: pagerduty:getExtensionSchema\n      Arguments:\n        name: ServiceNow (v7)\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nExtensions can be imported using the id.e.g.\n\n```sh\n$ pulumi import pagerduty:index/extensionServiceNow:ExtensionServiceNow main PLBP09X\n```\n",
            "properties": {
                "endpointUrl": {
                    "type": "string",
                    "secret": true
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "referer": {
                    "type": "string",
                    "description": "The ServiceNow referer.\n"
                },
                "snowPassword": {
                    "type": "string",
                    "description": "The ServiceNow password.\n",
                    "secret": true
                },
                "snowUser": {
                    "type": "string",
                    "description": "The ServiceNow username.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "syncOptions": {
                    "type": "string",
                    "description": "The ServiceNow sync option.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target Webhook URL.\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "The ServiceNow task type, typically `incident`.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "extensionObjects",
                "extensionSchema",
                "htmlUrl",
                "name",
                "referer",
                "snowPassword",
                "snowUser",
                "summary",
                "syncOptions",
                "target",
                "taskType",
                "type"
            ],
            "inputProperties": {
                "endpointUrl": {
                    "type": "string",
                    "secret": true
                },
                "extensionObjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is the objects for which the extension applies (An array of service ids).\n"
                },
                "extensionSchema": {
                    "type": "string",
                    "description": "This is the schema for this extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service extension.\n"
                },
                "referer": {
                    "type": "string",
                    "description": "The ServiceNow referer.\n"
                },
                "snowPassword": {
                    "type": "string",
                    "description": "The ServiceNow password.\n",
                    "secret": true
                },
                "snowUser": {
                    "type": "string",
                    "description": "The ServiceNow username.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                },
                "syncOptions": {
                    "type": "string",
                    "description": "The ServiceNow sync option.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target Webhook URL.\n"
                },
                "taskType": {
                    "type": "string",
                    "description": "The ServiceNow task type, typically `incident`.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "extensionObjects",
                "extensionSchema",
                "referer",
                "snowPassword",
                "snowUser",
                "syncOptions",
                "target",
                "taskType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtensionServiceNow resources.\n",
                "properties": {
                    "endpointUrl": {
                        "type": "string",
                        "secret": true
                    },
                    "extensionObjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is the objects for which the extension applies (An array of service ids).\n"
                    },
                    "extensionSchema": {
                        "type": "string",
                        "description": "This is the schema for this extension.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service extension.\n"
                    },
                    "referer": {
                        "type": "string",
                        "description": "The ServiceNow referer.\n"
                    },
                    "snowPassword": {
                        "type": "string",
                        "description": "The ServiceNow password.\n",
                        "secret": true
                    },
                    "snowUser": {
                        "type": "string",
                        "description": "The ServiceNow username.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.\n"
                    },
                    "syncOptions": {
                        "type": "string",
                        "description": "The ServiceNow sync option.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Target Webhook URL.\n"
                    },
                    "taskType": {
                        "type": "string",
                        "description": "The ServiceNow task type, typically `incident`.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/incidentCustomField:IncidentCustomField": {
            "description": "An [Incident Custom Field](https://support.pagerduty.com/docs/custom-fields-on-incidents) defines a field which can be set on incidents in the target account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst csImpact = new pagerduty.IncidentCustomField(\"cs_impact\", {\n    name: \"impact\",\n    displayName: \"Customer Impact\",\n    dataType: \"string\",\n    fieldType: \"single_value\",\n});\nconst sreEnvironment = new pagerduty.IncidentCustomField(\"sre_environment\", {\n    name: \"environment\",\n    displayName: \"Environment\",\n    dataType: \"string\",\n    fieldType: \"single_value_fixed\",\n});\nconst falseAlarm = new pagerduty.IncidentCustomField(\"false_alarm\", {\n    name: \"false_alarm\",\n    displayName: \"False Alarm\",\n    dataType: \"boolean\",\n    fieldType: \"single_value\",\n    defaultValue: \"false\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ncs_impact = pagerduty.IncidentCustomField(\"cs_impact\",\n    name=\"impact\",\n    display_name=\"Customer Impact\",\n    data_type=\"string\",\n    field_type=\"single_value\")\nsre_environment = pagerduty.IncidentCustomField(\"sre_environment\",\n    name=\"environment\",\n    display_name=\"Environment\",\n    data_type=\"string\",\n    field_type=\"single_value_fixed\")\nfalse_alarm = pagerduty.IncidentCustomField(\"false_alarm\",\n    name=\"false_alarm\",\n    display_name=\"False Alarm\",\n    data_type=\"boolean\",\n    field_type=\"single_value\",\n    default_value=\"false\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csImpact = new Pagerduty.IncidentCustomField(\"cs_impact\", new()\n    {\n        Name = \"impact\",\n        DisplayName = \"Customer Impact\",\n        DataType = \"string\",\n        FieldType = \"single_value\",\n    });\n\n    var sreEnvironment = new Pagerduty.IncidentCustomField(\"sre_environment\", new()\n    {\n        Name = \"environment\",\n        DisplayName = \"Environment\",\n        DataType = \"string\",\n        FieldType = \"single_value_fixed\",\n    });\n\n    var falseAlarm = new Pagerduty.IncidentCustomField(\"false_alarm\", new()\n    {\n        Name = \"false_alarm\",\n        DisplayName = \"False Alarm\",\n        DataType = \"boolean\",\n        FieldType = \"single_value\",\n        DefaultValue = \"false\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewIncidentCustomField(ctx, \"cs_impact\", \u0026pagerduty.IncidentCustomFieldArgs{\n\t\t\tName:        pulumi.String(\"impact\"),\n\t\t\tDisplayName: pulumi.String(\"Customer Impact\"),\n\t\t\tDataType:    pulumi.String(\"string\"),\n\t\t\tFieldType:   pulumi.String(\"single_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomField(ctx, \"sre_environment\", \u0026pagerduty.IncidentCustomFieldArgs{\n\t\t\tName:        pulumi.String(\"environment\"),\n\t\t\tDisplayName: pulumi.String(\"Environment\"),\n\t\t\tDataType:    pulumi.String(\"string\"),\n\t\t\tFieldType:   pulumi.String(\"single_value_fixed\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomField(ctx, \"false_alarm\", \u0026pagerduty.IncidentCustomFieldArgs{\n\t\t\tName:         pulumi.String(\"false_alarm\"),\n\t\t\tDisplayName:  pulumi.String(\"False Alarm\"),\n\t\t\tDataType:     pulumi.String(\"boolean\"),\n\t\t\tFieldType:    pulumi.String(\"single_value\"),\n\t\t\tDefaultValue: pulumi.String(\"false\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.IncidentCustomField;\nimport com.pulumi.pagerduty.IncidentCustomFieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var csImpact = new IncidentCustomField(\"csImpact\", IncidentCustomFieldArgs.builder()\n            .name(\"impact\")\n            .displayName(\"Customer Impact\")\n            .dataType(\"string\")\n            .fieldType(\"single_value\")\n            .build());\n\n        var sreEnvironment = new IncidentCustomField(\"sreEnvironment\", IncidentCustomFieldArgs.builder()\n            .name(\"environment\")\n            .displayName(\"Environment\")\n            .dataType(\"string\")\n            .fieldType(\"single_value_fixed\")\n            .build());\n\n        var falseAlarm = new IncidentCustomField(\"falseAlarm\", IncidentCustomFieldArgs.builder()\n            .name(\"false_alarm\")\n            .displayName(\"False Alarm\")\n            .dataType(\"boolean\")\n            .fieldType(\"single_value\")\n            .defaultValue(\"false\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  csImpact:\n    type: pagerduty:IncidentCustomField\n    name: cs_impact\n    properties:\n      name: impact\n      displayName: Customer Impact\n      dataType: string\n      fieldType: single_value\n  sreEnvironment:\n    type: pagerduty:IncidentCustomField\n    name: sre_environment\n    properties:\n      name: environment\n      displayName: Environment\n      dataType: string\n      fieldType: single_value_fixed\n  falseAlarm:\n    type: pagerduty:IncidentCustomField\n    name: false_alarm\n    properties:\n      name: false_alarm\n      displayName: False Alarm\n      dataType: boolean\n      fieldType: single_value\n      defaultValue: 'false'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFields can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/incidentCustomField:IncidentCustomField sre_environment PLBP09X\n```\n",
            "properties": {
                "dataType": {
                    "type": "string",
                    "description": "The data type of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.\n"
                },
                "defaultValue": {
                    "type": "string",
                    "description": "The default value to set when new incidents are created. Always specified as a string.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the field.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the field.\n"
                },
                "fieldType": {
                    "type": "string",
                    "description": "The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                }
            },
            "required": [
                "dataType",
                "displayName",
                "fieldType",
                "name"
            ],
            "inputProperties": {
                "dataType": {
                    "type": "string",
                    "description": "The data type of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.\n"
                },
                "defaultValue": {
                    "type": "string",
                    "description": "The default value to set when new incidents are created. Always specified as a string.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the field.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the field.\n"
                },
                "fieldType": {
                    "type": "string",
                    "description": "The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                }
            },
            "requiredInputs": [
                "dataType",
                "displayName",
                "fieldType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentCustomField resources.\n",
                "properties": {
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.\n"
                    },
                    "defaultValue": {
                        "type": "string",
                        "description": "The default value to set when new incidents are created. Always specified as a string.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the field.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the field.\n"
                    },
                    "fieldType": {
                        "type": "string",
                        "description": "The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the field.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/incidentCustomFieldOption:IncidentCustomFieldOption": {
            "description": "A Incident Custom Field Option is a specific value that can be used for an [Incident Custom Field](https://support.pagerduty.com/docs/custom-fields-on-incidents) that only allow values from a set of fixed options,\ni.e. has the `field_type` of `single_value_fixed` or `multi_value_fixed`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst sreEnvironment = new pagerduty.IncidentCustomField(\"sre_environment\", {\n    name: \"environment\",\n    displayName: \"Environment\",\n    dataType: \"string\",\n    fieldType: \"single_value_fixed\",\n});\nconst devEnvironment = new pagerduty.IncidentCustomFieldOption(\"dev_environment\", {\n    field: sreEnvironment.id,\n    dataType: \"string\",\n    value: \"dev\",\n});\nconst stageEnvironment = new pagerduty.IncidentCustomFieldOption(\"stage_environment\", {\n    field: sreEnvironment.id,\n    dataType: \"string\",\n    value: \"stage\",\n});\nconst prodEnvironment = new pagerduty.IncidentCustomFieldOption(\"prod_environment\", {\n    field: sreEnvironment.id,\n    dataType: \"string\",\n    value: \"prod\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nsre_environment = pagerduty.IncidentCustomField(\"sre_environment\",\n    name=\"environment\",\n    display_name=\"Environment\",\n    data_type=\"string\",\n    field_type=\"single_value_fixed\")\ndev_environment = pagerduty.IncidentCustomFieldOption(\"dev_environment\",\n    field=sre_environment.id,\n    data_type=\"string\",\n    value=\"dev\")\nstage_environment = pagerduty.IncidentCustomFieldOption(\"stage_environment\",\n    field=sre_environment.id,\n    data_type=\"string\",\n    value=\"stage\")\nprod_environment = pagerduty.IncidentCustomFieldOption(\"prod_environment\",\n    field=sre_environment.id,\n    data_type=\"string\",\n    value=\"prod\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sreEnvironment = new Pagerduty.IncidentCustomField(\"sre_environment\", new()\n    {\n        Name = \"environment\",\n        DisplayName = \"Environment\",\n        DataType = \"string\",\n        FieldType = \"single_value_fixed\",\n    });\n\n    var devEnvironment = new Pagerduty.IncidentCustomFieldOption(\"dev_environment\", new()\n    {\n        Field = sreEnvironment.Id,\n        DataType = \"string\",\n        Value = \"dev\",\n    });\n\n    var stageEnvironment = new Pagerduty.IncidentCustomFieldOption(\"stage_environment\", new()\n    {\n        Field = sreEnvironment.Id,\n        DataType = \"string\",\n        Value = \"stage\",\n    });\n\n    var prodEnvironment = new Pagerduty.IncidentCustomFieldOption(\"prod_environment\", new()\n    {\n        Field = sreEnvironment.Id,\n        DataType = \"string\",\n        Value = \"prod\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsreEnvironment, err := pagerduty.NewIncidentCustomField(ctx, \"sre_environment\", \u0026pagerduty.IncidentCustomFieldArgs{\n\t\t\tName:        pulumi.String(\"environment\"),\n\t\t\tDisplayName: pulumi.String(\"Environment\"),\n\t\t\tDataType:    pulumi.String(\"string\"),\n\t\t\tFieldType:   pulumi.String(\"single_value_fixed\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomFieldOption(ctx, \"dev_environment\", \u0026pagerduty.IncidentCustomFieldOptionArgs{\n\t\t\tField:    sreEnvironment.ID(),\n\t\t\tDataType: pulumi.String(\"string\"),\n\t\t\tValue:    pulumi.String(\"dev\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomFieldOption(ctx, \"stage_environment\", \u0026pagerduty.IncidentCustomFieldOptionArgs{\n\t\t\tField:    sreEnvironment.ID(),\n\t\t\tDataType: pulumi.String(\"string\"),\n\t\t\tValue:    pulumi.String(\"stage\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomFieldOption(ctx, \"prod_environment\", \u0026pagerduty.IncidentCustomFieldOptionArgs{\n\t\t\tField:    sreEnvironment.ID(),\n\t\t\tDataType: pulumi.String(\"string\"),\n\t\t\tValue:    pulumi.String(\"prod\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.IncidentCustomField;\nimport com.pulumi.pagerduty.IncidentCustomFieldArgs;\nimport com.pulumi.pagerduty.IncidentCustomFieldOption;\nimport com.pulumi.pagerduty.IncidentCustomFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sreEnvironment = new IncidentCustomField(\"sreEnvironment\", IncidentCustomFieldArgs.builder()\n            .name(\"environment\")\n            .displayName(\"Environment\")\n            .dataType(\"string\")\n            .fieldType(\"single_value_fixed\")\n            .build());\n\n        var devEnvironment = new IncidentCustomFieldOption(\"devEnvironment\", IncidentCustomFieldOptionArgs.builder()\n            .field(sreEnvironment.id())\n            .dataType(\"string\")\n            .value(\"dev\")\n            .build());\n\n        var stageEnvironment = new IncidentCustomFieldOption(\"stageEnvironment\", IncidentCustomFieldOptionArgs.builder()\n            .field(sreEnvironment.id())\n            .dataType(\"string\")\n            .value(\"stage\")\n            .build());\n\n        var prodEnvironment = new IncidentCustomFieldOption(\"prodEnvironment\", IncidentCustomFieldOptionArgs.builder()\n            .field(sreEnvironment.id())\n            .dataType(\"string\")\n            .value(\"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sreEnvironment:\n    type: pagerduty:IncidentCustomField\n    name: sre_environment\n    properties:\n      name: environment\n      displayName: Environment\n      dataType: string\n      fieldType: single_value_fixed\n  devEnvironment:\n    type: pagerduty:IncidentCustomFieldOption\n    name: dev_environment\n    properties:\n      field: ${sreEnvironment.id}\n      dataType: string\n      value: dev\n  stageEnvironment:\n    type: pagerduty:IncidentCustomFieldOption\n    name: stage_environment\n    properties:\n      field: ${sreEnvironment.id}\n      dataType: string\n      value: stage\n  prodEnvironment:\n    type: pagerduty:IncidentCustomFieldOption\n    name: prod_environment\n    properties:\n      field: ${sreEnvironment.id}\n      dataType: string\n      value: prod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dataType": {
                    "type": "string",
                    "description": "The datatype of the field option. Only `string` is allowed here at present.\n"
                },
                "field": {
                    "type": "string",
                    "description": "The ID of the field.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The allowed value.\n"
                }
            },
            "required": [
                "dataType",
                "field",
                "value"
            ],
            "inputProperties": {
                "dataType": {
                    "type": "string",
                    "description": "The datatype of the field option. Only `string` is allowed here at present.\n"
                },
                "field": {
                    "type": "string",
                    "description": "The ID of the field.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The allowed value.\n"
                }
            },
            "requiredInputs": [
                "dataType",
                "field",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentCustomFieldOption resources.\n",
                "properties": {
                    "dataType": {
                        "type": "string",
                        "description": "The datatype of the field option. Only `string` is allowed here at present.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The ID of the field.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The allowed value.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/incidentWorkflow:IncidentWorkflow": {
            "description": "An [Incident Workflow](https://support.pagerduty.com/docs/incident-workflows) is a series of steps which can be executed on an incident.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst myFirstWorkflow = new pagerduty.IncidentWorkflow(\"my_first_workflow\", {\n    name: \"Example Incident Workflow\",\n    description: \"This Incident Workflow is an example\",\n    steps: [{\n        name: \"Send Status Update\",\n        action: \"pagerduty.com:incident-workflows:send-status-update:1\",\n        inputs: [{\n            name: \"Message\",\n            value: \"Example status message sent on {{current_date}}\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nmy_first_workflow = pagerduty.IncidentWorkflow(\"my_first_workflow\",\n    name=\"Example Incident Workflow\",\n    description=\"This Incident Workflow is an example\",\n    steps=[{\n        \"name\": \"Send Status Update\",\n        \"action\": \"pagerduty.com:incident-workflows:send-status-update:1\",\n        \"inputs\": [{\n            \"name\": \"Message\",\n            \"value\": \"Example status message sent on {{current_date}}\",\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstWorkflow = new Pagerduty.IncidentWorkflow(\"my_first_workflow\", new()\n    {\n        Name = \"Example Incident Workflow\",\n        Description = \"This Incident Workflow is an example\",\n        Steps = new[]\n        {\n            new Pagerduty.Inputs.IncidentWorkflowStepArgs\n            {\n                Name = \"Send Status Update\",\n                Action = \"pagerduty.com:incident-workflows:send-status-update:1\",\n                Inputs = new[]\n                {\n                    new Pagerduty.Inputs.IncidentWorkflowStepInputArgs\n                    {\n                        Name = \"Message\",\n                        Value = \"Example status message sent on {{current_date}}\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewIncidentWorkflow(ctx, \"my_first_workflow\", \u0026pagerduty.IncidentWorkflowArgs{\n\t\t\tName:        pulumi.String(\"Example Incident Workflow\"),\n\t\t\tDescription: pulumi.String(\"This Incident Workflow is an example\"),\n\t\t\tSteps: pagerduty.IncidentWorkflowStepArray{\n\t\t\t\t\u0026pagerduty.IncidentWorkflowStepArgs{\n\t\t\t\t\tName:   pulumi.String(\"Send Status Update\"),\n\t\t\t\t\tAction: pulumi.String(\"pagerduty.com:incident-workflows:send-status-update:1\"),\n\t\t\t\t\tInputs: pagerduty.IncidentWorkflowStepInputTypeArray{\n\t\t\t\t\t\t\u0026pagerduty.IncidentWorkflowStepInputTypeArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"Message\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"Example status message sent on {{current_date}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.IncidentWorkflow;\nimport com.pulumi.pagerduty.IncidentWorkflowArgs;\nimport com.pulumi.pagerduty.inputs.IncidentWorkflowStepArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstWorkflow = new IncidentWorkflow(\"myFirstWorkflow\", IncidentWorkflowArgs.builder()\n            .name(\"Example Incident Workflow\")\n            .description(\"This Incident Workflow is an example\")\n            .steps(IncidentWorkflowStepArgs.builder()\n                .name(\"Send Status Update\")\n                .action(\"pagerduty.com:incident-workflows:send-status-update:1\")\n                .inputs(IncidentWorkflowStepInputArgs.builder()\n                    .name(\"Message\")\n                    .value(\"Example status message sent on {{current_date}}\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstWorkflow:\n    type: pagerduty:IncidentWorkflow\n    name: my_first_workflow\n    properties:\n      name: Example Incident Workflow\n      description: This Incident Workflow is an example\n      steps:\n        - name: Send Status Update\n          action: pagerduty.com:incident-workflows:send-status-update:1\n          inputs:\n            - name: Message\n              value: Example status message sent on {{current_date}}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIncident workflows can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/incidentWorkflow:IncidentWorkflow major_incident_workflow PLBP09X\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the workflow.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStep:IncidentWorkflowStep"
                    },
                    "description": "The steps in the workflow.\n"
                },
                "team": {
                    "type": "string",
                    "description": "A team ID. If specified then workflow edit permissions will be scoped to members of this team.\n"
                }
            },
            "required": [
                "name",
                "steps"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the workflow.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowStep:IncidentWorkflowStep"
                    },
                    "description": "The steps in the workflow.\n"
                },
                "team": {
                    "type": "string",
                    "description": "A team ID. If specified then workflow edit permissions will be scoped to members of this team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentWorkflow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workflow.\n"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/IncidentWorkflowStep:IncidentWorkflowStep"
                        },
                        "description": "The steps in the workflow.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "A team ID. If specified then workflow edit permissions will be scoped to members of this team.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/incidentWorkflowTrigger:IncidentWorkflowTrigger": {
            "description": "An [Incident Workflow Trigger](https://support.pagerduty.com/docs/incident-workflows#triggers) defines when and if an [Incident Workflow](https://support.pagerduty.com/docs/incident-workflows) will be triggered.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst myFirstWorkflow = new pagerduty.IncidentWorkflow(\"my_first_workflow\", {\n    name: \"Example Incident Workflow\",\n    description: \"This Incident Workflow is an example\",\n    steps: [{\n        name: \"Send Status Update\",\n        action: \"pagerduty.com:incident-workflows:send-status-update:1\",\n        inputs: [{\n            name: \"Message\",\n            value: \"Example status message sent on {{current_date}}\",\n        }],\n    }],\n});\nconst firstService = pagerduty.getService({\n    name: \"My First Service\",\n});\nconst automaticTrigger = new pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\", {\n    type: \"conditional\",\n    workflow: myFirstWorkflow.id,\n    services: [firstServicePagerdutyService.id],\n    condition: \"incident.priority matches 'P1'\",\n    subscribedToAllServices: false,\n});\nconst devops = pagerduty.getTeam({\n    name: \"devops\",\n});\nconst manualTrigger = new pagerduty.IncidentWorkflowTrigger(\"manual_trigger\", {\n    type: \"manual\",\n    workflow: myFirstWorkflow.id,\n    services: [firstServicePagerdutyService.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nmy_first_workflow = pagerduty.IncidentWorkflow(\"my_first_workflow\",\n    name=\"Example Incident Workflow\",\n    description=\"This Incident Workflow is an example\",\n    steps=[{\n        \"name\": \"Send Status Update\",\n        \"action\": \"pagerduty.com:incident-workflows:send-status-update:1\",\n        \"inputs\": [{\n            \"name\": \"Message\",\n            \"value\": \"Example status message sent on {{current_date}}\",\n        }],\n    }])\nfirst_service = pagerduty.get_service(name=\"My First Service\")\nautomatic_trigger = pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\",\n    type=\"conditional\",\n    workflow=my_first_workflow.id,\n    services=[first_service_pagerduty_service[\"id\"]],\n    condition=\"incident.priority matches 'P1'\",\n    subscribed_to_all_services=False)\ndevops = pagerduty.get_team(name=\"devops\")\nmanual_trigger = pagerduty.IncidentWorkflowTrigger(\"manual_trigger\",\n    type=\"manual\",\n    workflow=my_first_workflow.id,\n    services=[first_service_pagerduty_service[\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstWorkflow = new Pagerduty.IncidentWorkflow(\"my_first_workflow\", new()\n    {\n        Name = \"Example Incident Workflow\",\n        Description = \"This Incident Workflow is an example\",\n        Steps = new[]\n        {\n            new Pagerduty.Inputs.IncidentWorkflowStepArgs\n            {\n                Name = \"Send Status Update\",\n                Action = \"pagerduty.com:incident-workflows:send-status-update:1\",\n                Inputs = new[]\n                {\n                    new Pagerduty.Inputs.IncidentWorkflowStepInputArgs\n                    {\n                        Name = \"Message\",\n                        Value = \"Example status message sent on {{current_date}}\",\n                    },\n                },\n            },\n        },\n    });\n\n    var firstService = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"My First Service\",\n    });\n\n    var automaticTrigger = new Pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\", new()\n    {\n        Type = \"conditional\",\n        Workflow = myFirstWorkflow.Id,\n        Services = new[]\n        {\n            firstServicePagerdutyService.Id,\n        },\n        Condition = \"incident.priority matches 'P1'\",\n        SubscribedToAllServices = false,\n    });\n\n    var devops = Pagerduty.GetTeam.Invoke(new()\n    {\n        Name = \"devops\",\n    });\n\n    var manualTrigger = new Pagerduty.IncidentWorkflowTrigger(\"manual_trigger\", new()\n    {\n        Type = \"manual\",\n        Workflow = myFirstWorkflow.Id,\n        Services = new[]\n        {\n            firstServicePagerdutyService.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirstWorkflow, err := pagerduty.NewIncidentWorkflow(ctx, \"my_first_workflow\", \u0026pagerduty.IncidentWorkflowArgs{\n\t\t\tName:        pulumi.String(\"Example Incident Workflow\"),\n\t\t\tDescription: pulumi.String(\"This Incident Workflow is an example\"),\n\t\t\tSteps: pagerduty.IncidentWorkflowStepArray{\n\t\t\t\t\u0026pagerduty.IncidentWorkflowStepArgs{\n\t\t\t\t\tName:   pulumi.String(\"Send Status Update\"),\n\t\t\t\t\tAction: pulumi.String(\"pagerduty.com:incident-workflows:send-status-update:1\"),\n\t\t\t\t\tInputs: pagerduty.IncidentWorkflowStepInputTypeArray{\n\t\t\t\t\t\t\u0026pagerduty.IncidentWorkflowStepInputTypeArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"Message\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"Example status message sent on {{current_date}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"My First Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentWorkflowTrigger(ctx, \"automatic_trigger\", \u0026pagerduty.IncidentWorkflowTriggerArgs{\n\t\t\tType:     pulumi.String(\"conditional\"),\n\t\t\tWorkflow: myFirstWorkflow.ID(),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tfirstServicePagerdutyService.Id,\n\t\t\t},\n\t\t\tCondition:               pulumi.String(\"incident.priority matches 'P1'\"),\n\t\t\tSubscribedToAllServices: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.LookupTeam(ctx, \u0026pagerduty.LookupTeamArgs{\n\t\t\tName: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentWorkflowTrigger(ctx, \"manual_trigger\", \u0026pagerduty.IncidentWorkflowTriggerArgs{\n\t\t\tType:     pulumi.String(\"manual\"),\n\t\t\tWorkflow: myFirstWorkflow.ID(),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tfirstServicePagerdutyService.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.IncidentWorkflow;\nimport com.pulumi.pagerduty.IncidentWorkflowArgs;\nimport com.pulumi.pagerduty.inputs.IncidentWorkflowStepArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.IncidentWorkflowTrigger;\nimport com.pulumi.pagerduty.IncidentWorkflowTriggerArgs;\nimport com.pulumi.pagerduty.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstWorkflow = new IncidentWorkflow(\"myFirstWorkflow\", IncidentWorkflowArgs.builder()\n            .name(\"Example Incident Workflow\")\n            .description(\"This Incident Workflow is an example\")\n            .steps(IncidentWorkflowStepArgs.builder()\n                .name(\"Send Status Update\")\n                .action(\"pagerduty.com:incident-workflows:send-status-update:1\")\n                .inputs(IncidentWorkflowStepInputArgs.builder()\n                    .name(\"Message\")\n                    .value(\"Example status message sent on {{current_date}}\")\n                    .build())\n                .build())\n            .build());\n\n        final var firstService = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"My First Service\")\n            .build());\n\n        var automaticTrigger = new IncidentWorkflowTrigger(\"automaticTrigger\", IncidentWorkflowTriggerArgs.builder()\n            .type(\"conditional\")\n            .workflow(myFirstWorkflow.id())\n            .services(firstServicePagerdutyService.id())\n            .condition(\"incident.priority matches 'P1'\")\n            .subscribedToAllServices(false)\n            .build());\n\n        final var devops = PagerdutyFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"devops\")\n            .build());\n\n        var manualTrigger = new IncidentWorkflowTrigger(\"manualTrigger\", IncidentWorkflowTriggerArgs.builder()\n            .type(\"manual\")\n            .workflow(myFirstWorkflow.id())\n            .services(firstServicePagerdutyService.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstWorkflow:\n    type: pagerduty:IncidentWorkflow\n    name: my_first_workflow\n    properties:\n      name: Example Incident Workflow\n      description: This Incident Workflow is an example\n      steps:\n        - name: Send Status Update\n          action: pagerduty.com:incident-workflows:send-status-update:1\n          inputs:\n            - name: Message\n              value: Example status message sent on {{current_date}}\n  automaticTrigger:\n    type: pagerduty:IncidentWorkflowTrigger\n    name: automatic_trigger\n    properties:\n      type: conditional\n      workflow: ${myFirstWorkflow.id}\n      services:\n        - ${firstServicePagerdutyService.id}\n      condition: incident.priority matches 'P1'\n      subscribedToAllServices: false\n  manualTrigger:\n    type: pagerduty:IncidentWorkflowTrigger\n    name: manual_trigger\n    properties:\n      type: manual\n      workflow: ${myFirstWorkflow.id}\n      services:\n        - ${firstServicePagerdutyService.id}\nvariables:\n  firstService:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: My First Service\n  devops:\n    fn::invoke:\n      Function: pagerduty:getTeam\n      Arguments:\n        name: devops\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIncident workflows can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/incidentWorkflowTrigger:IncidentWorkflowTrigger pagerduty_incident_workflow_trigger PLBP09X\n```\n",
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "A [PCL](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) condition string which must be satisfied for the trigger to fire.\n"
                },
                "permissions": {
                    "$ref": "#/types/pagerduty:index/IncidentWorkflowTriggerPermissions:IncidentWorkflowTriggerPermissions",
                    "description": "Indicates who can start this Trigger. Applicable only to `manual`-type triggers.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.\n"
                },
                "subscribedToAllServices": {
                    "type": "boolean",
                    "description": "Set to `true` if the trigger should be eligible for firing on all services. Only allowed to be `true` if the services list is not defined or empty.\n"
                },
                "type": {
                    "type": "string",
                    "description": "[Updating causes resource replacement] May be either `manual` or `conditional`.\n"
                },
                "workflow": {
                    "type": "string",
                    "description": "The workflow ID for the workflow to trigger.\n"
                }
            },
            "required": [
                "permissions",
                "subscribedToAllServices",
                "type",
                "workflow"
            ],
            "inputProperties": {
                "condition": {
                    "type": "string",
                    "description": "A [PCL](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) condition string which must be satisfied for the trigger to fire.\n"
                },
                "permissions": {
                    "$ref": "#/types/pagerduty:index/IncidentWorkflowTriggerPermissions:IncidentWorkflowTriggerPermissions",
                    "description": "Indicates who can start this Trigger. Applicable only to `manual`-type triggers.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.\n"
                },
                "subscribedToAllServices": {
                    "type": "boolean",
                    "description": "Set to `true` if the trigger should be eligible for firing on all services. Only allowed to be `true` if the services list is not defined or empty.\n"
                },
                "type": {
                    "type": "string",
                    "description": "[Updating causes resource replacement] May be either `manual` or `conditional`.\n",
                    "willReplaceOnChanges": true
                },
                "workflow": {
                    "type": "string",
                    "description": "The workflow ID for the workflow to trigger.\n"
                }
            },
            "requiredInputs": [
                "subscribedToAllServices",
                "type",
                "workflow"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentWorkflowTrigger resources.\n",
                "properties": {
                    "condition": {
                        "type": "string",
                        "description": "A [PCL](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) condition string which must be satisfied for the trigger to fire.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/pagerduty:index/IncidentWorkflowTriggerPermissions:IncidentWorkflowTriggerPermissions",
                        "description": "Indicates who can start this Trigger. Applicable only to `manual`-type triggers.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.\n"
                    },
                    "subscribedToAllServices": {
                        "type": "boolean",
                        "description": "Set to `true` if the trigger should be eligible for firing on all services. Only allowed to be `true` if the services list is not defined or empty.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[Updating causes resource replacement] May be either `manual` or `conditional`.\n",
                        "willReplaceOnChanges": true
                    },
                    "workflow": {
                        "type": "string",
                        "description": "The workflow ID for the workflow to trigger.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/maintenanceWindow:MaintenanceWindow": {
            "description": "A [maintenance window](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE1OA-create-a-maintenance-window) is used to temporarily disable one or more services for a set period of time. No incidents will be triggered and no notifications will be received while a service is disabled by a maintenance window.\n\nMaintenance windows are specified to start at a certain time and end after they have begun. Once started, a maintenance window cannot be deleted; it can only be ended immediately to re-enable the service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.MaintenanceWindow(\"example\", {\n    startTime: \"2015-11-09T20:00:00-05:00\",\n    endTime: \"2015-11-09T22:00:00-05:00\",\n    services: [examplePagerdutyService.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.MaintenanceWindow(\"example\",\n    start_time=\"2015-11-09T20:00:00-05:00\",\n    end_time=\"2015-11-09T22:00:00-05:00\",\n    services=[example_pagerduty_service[\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.MaintenanceWindow(\"example\", new()\n    {\n        StartTime = \"2015-11-09T20:00:00-05:00\",\n        EndTime = \"2015-11-09T22:00:00-05:00\",\n        Services = new[]\n        {\n            examplePagerdutyService.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewMaintenanceWindow(ctx, \"example\", \u0026pagerduty.MaintenanceWindowArgs{\n\t\t\tStartTime: pulumi.String(\"2015-11-09T20:00:00-05:00\"),\n\t\t\tEndTime:   pulumi.String(\"2015-11-09T22:00:00-05:00\"),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\texamplePagerdutyService.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.MaintenanceWindow;\nimport com.pulumi.pagerduty.MaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MaintenanceWindow(\"example\", MaintenanceWindowArgs.builder()\n            .startTime(\"2015-11-09T20:00:00-05:00\")\n            .endTime(\"2015-11-09T22:00:00-05:00\")\n            .services(examplePagerdutyService.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:MaintenanceWindow\n    properties:\n      startTime: 2015-11-09T20:00:00-05:00\n      endTime: 2015-11-09T22:00:00-05:00\n      services:\n        - ${examplePagerdutyService.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nMaintenance windows can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/maintenanceWindow:MaintenanceWindow main PLBP09X\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n",
                    "default": "Managed by Pulumi"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "required": [
                "description",
                "endTime",
                "services",
                "startTime"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the maintenance window.\n",
                    "default": "Managed by Pulumi"
                },
                "endTime": {
                    "type": "string",
                    "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service IDs to include in the maintenance window.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                }
            },
            "requiredInputs": [
                "endTime",
                "services",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the maintenance window.\n",
                        "default": "Managed by Pulumi"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of service IDs to include in the maintenance window.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/responsePlay:ResponsePlay": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [examplePagerdutyTeam.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleResponsePlay = new pagerduty.ResponsePlay(\"example\", {\n    name: \"My Response Play\",\n    from: example.email,\n    responders: [{\n        type: \"escalation_policy_reference\",\n        id: exampleEscalationPolicy.id,\n    }],\n    subscribers: [{\n        type: \"user_reference\",\n        id: example.id,\n    }],\n    runnability: \"services\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_pagerduty_team[\"id\"]])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_response_play = pagerduty.ResponsePlay(\"example\",\n    name=\"My Response Play\",\n    from_=example.email,\n    responders=[{\n        \"type\": \"escalation_policy_reference\",\n        \"id\": example_escalation_policy.id,\n    }],\n    subscribers=[{\n        \"type\": \"user_reference\",\n        \"id\": example.id,\n    }],\n    runnability=\"services\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            examplePagerdutyTeam.Id,\n        },\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleResponsePlay = new Pagerduty.ResponsePlay(\"example\", new()\n    {\n        Name = \"My Response Play\",\n        From = example.Email,\n        Responders = new[]\n        {\n            new Pagerduty.Inputs.ResponsePlayResponderArgs\n            {\n                Type = \"escalation_policy_reference\",\n                Id = exampleEscalationPolicy.Id,\n            },\n        },\n        Subscribers = new[]\n        {\n            new Pagerduty.Inputs.ResponsePlaySubscriberArgs\n            {\n                Type = \"user_reference\",\n                Id = example.Id,\n            },\n        },\n        Runnability = \"services\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texamplePagerdutyTeam.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewResponsePlay(ctx, \"example\", \u0026pagerduty.ResponsePlayArgs{\n\t\t\tName: pulumi.String(\"My Response Play\"),\n\t\t\tFrom: example.Email,\n\t\t\tResponders: pagerduty.ResponsePlayResponderArray{\n\t\t\t\t\u0026pagerduty.ResponsePlayResponderArgs{\n\t\t\t\t\tType: pulumi.String(\"escalation_policy_reference\"),\n\t\t\t\t\tId:   exampleEscalationPolicy.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSubscribers: pagerduty.ResponsePlaySubscriberArray{\n\t\t\t\t\u0026pagerduty.ResponsePlaySubscriberArgs{\n\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\tId:   example.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRunnability: pulumi.String(\"services\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.ResponsePlay;\nimport com.pulumi.pagerduty.ResponsePlayArgs;\nimport com.pulumi.pagerduty.inputs.ResponsePlayResponderArgs;\nimport com.pulumi.pagerduty.inputs.ResponsePlaySubscriberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(examplePagerdutyTeam.id())\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleResponsePlay = new ResponsePlay(\"exampleResponsePlay\", ResponsePlayArgs.builder()\n            .name(\"My Response Play\")\n            .from(example.email())\n            .responders(ResponsePlayResponderArgs.builder()\n                .type(\"escalation_policy_reference\")\n                .id(exampleEscalationPolicy.id())\n                .build())\n            .subscribers(ResponsePlaySubscriberArgs.builder()\n                .type(\"user_reference\")\n                .id(example.id())\n                .build())\n            .runnability(\"services\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${examplePagerdutyTeam.id}\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleResponsePlay:\n    type: pagerduty:ResponsePlay\n    name: example\n    properties:\n      name: My Response Play\n      from: ${example.email}\n      responders:\n        - type: escalation_policy_reference\n          id: ${exampleEscalationPolicy.id}\n      subscribers:\n        - type: user_reference\n          id: ${example.id}\n      runnability: services\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nResponse Plays can be imported using the `id.from(email)`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/responsePlay:ResponsePlay main 16208303-022b-f745-f2f5-560e537a2a74.user@email.com\n```\n",
            "properties": {
                "conferenceNumber": {
                    "type": "string",
                    "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                },
                "conferenceUrl": {
                    "type": "string",
                    "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "from": {
                    "type": "string",
                    "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the response play.\n"
                },
                "responders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                    },
                    "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                },
                "respondersMessage": {
                    "type": "string",
                    "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                },
                "runnability": {
                    "type": "string",
                    "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                },
                "subscribers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                    },
                    "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                },
                "subscribersMessage": {
                    "type": "string",
                    "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The ID of the team associated with the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "required": [
                "description",
                "from",
                "name"
            ],
            "inputProperties": {
                "conferenceNumber": {
                    "type": "string",
                    "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                },
                "conferenceUrl": {
                    "type": "string",
                    "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "from": {
                    "type": "string",
                    "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the response play.\n"
                },
                "responders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                    },
                    "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                },
                "respondersMessage": {
                    "type": "string",
                    "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                },
                "runnability": {
                    "type": "string",
                    "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                },
                "subscribers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                    },
                    "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                },
                "subscribersMessage": {
                    "type": "string",
                    "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The ID of the team associated with the response play.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                }
            },
            "requiredInputs": [
                "from"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResponsePlay resources.\n",
                "properties": {
                    "conferenceNumber": {
                        "type": "string",
                        "description": "The telephone number that will be set as the conference number for any incident on which this response play is run.\n"
                    },
                    "conferenceUrl": {
                        "type": "string",
                        "description": "The URL that will be set as the conference URL for any incident on which this response play is run.\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "from": {
                        "type": "string",
                        "description": "The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the response play.\n"
                    },
                    "responders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ResponsePlayResponder:ResponsePlayResponder"
                        },
                        "description": "A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.\n"
                    },
                    "respondersMessage": {
                        "type": "string",
                        "description": "The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.\n"
                    },
                    "runnability": {
                        "type": "string",
                        "description": "String representing how this response play is allowed to be run. Valid options are:\n"
                    },
                    "subscribers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ResponsePlaySubscriber:ResponsePlaySubscriber"
                        },
                        "description": "A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.\n"
                    },
                    "subscribersMessage": {
                        "type": "string",
                        "description": "The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "The ID of the team associated with the response play.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A string that determines the schema of the object. If not set, the default value is \"response_play\".\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/ruleset:Ruleset": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.Team(\"foo\", {name: \"Engineering (Seattle)\"});\nconst fooRuleset = new pagerduty.Ruleset(\"foo\", {\n    name: \"Primary Ruleset\",\n    team: {\n        id: foo.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.Team(\"foo\", name=\"Engineering (Seattle)\")\nfoo_ruleset = pagerduty.Ruleset(\"foo\",\n    name=\"Primary Ruleset\",\n    team={\n        \"id\": foo.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.Team(\"foo\", new()\n    {\n        Name = \"Engineering (Seattle)\",\n    });\n\n    var fooRuleset = new Pagerduty.Ruleset(\"foo\", new()\n    {\n        Name = \"Primary Ruleset\",\n        Team = new Pagerduty.Inputs.RulesetTeamArgs\n        {\n            Id = foo.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := pagerduty.NewTeam(ctx, \"foo\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering (Seattle)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRuleset(ctx, \"foo\", \u0026pagerduty.RulesetArgs{\n\t\t\tName: pulumi.String(\"Primary Ruleset\"),\n\t\t\tTeam: \u0026pagerduty.RulesetTeamArgs{\n\t\t\t\tId: foo.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.Ruleset;\nimport com.pulumi.pagerduty.RulesetArgs;\nimport com.pulumi.pagerduty.inputs.RulesetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Team(\"foo\", TeamArgs.builder()\n            .name(\"Engineering (Seattle)\")\n            .build());\n\n        var fooRuleset = new Ruleset(\"fooRuleset\", RulesetArgs.builder()\n            .name(\"Primary Ruleset\")\n            .team(RulesetTeamArgs.builder()\n                .id(foo.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:Team\n    properties:\n      name: Engineering (Seattle)\n  fooRuleset:\n    type: pagerduty:Ruleset\n    name: foo\n    properties:\n      name: Primary Ruleset\n      team:\n        id: ${foo.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRulesets can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/ruleset:Ruleset main 19acac92-027a-4ea0-b06c-bbf516519601\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Routing keys routed to this ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ruleset. Currently, only sets to `global`.\n"
                }
            },
            "required": [
                "name",
                "routingKeys",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the ruleset.\n"
                },
                "team": {
                    "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                    "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ruleset resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the ruleset.\n"
                    },
                    "routingKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Routing keys routed to this ruleset.\n"
                    },
                    "team": {
                        "$ref": "#/types/pagerduty:index/RulesetTeam:RulesetTeam",
                        "description": "Reference to the team that owns the ruleset. If none is specified, only admins have access.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of ruleset. Currently, only sets to `global`.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/rulesetRule:RulesetRule": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\nimport * as time from \"@pulumiverse/time\";\n\nconst foo = new pagerduty.Team(\"foo\", {name: \"Engineering (Seattle)\"});\nconst fooRuleset = new pagerduty.Ruleset(\"foo\", {\n    name: \"Primary Ruleset\",\n    team: {\n        id: foo.id,\n    },\n});\n// The pagerduty_ruleset_rule.foo rule defined below\n// repeats daily from 9:30am - 11:30am using the America/New_York timezone.\n// Thus it requires a time_static instance to represent 9:30am on an arbitrary date in that timezone.\n// April 11th, 2019 was EDT (UTC-4) https://www.timeanddate.com/worldclock/converter.html?iso=20190411T133000\u0026p1=179\nconst easternTimeAt0930 = new time.Static(\"eastern_time_at_0930\", {rfc3339: \"2019-04-11T09:30:00-04:00\"});\nconst fooRulesetRule = new pagerduty.RulesetRule(\"foo\", {\n    ruleset: fooRuleset.id,\n    position: 0,\n    disabled: false,\n    timeFrame: {\n        scheduledWeeklies: [{\n            weekdays: [\n                2,\n                4,\n                6,\n            ],\n            startTime: easternTimeAt0930.unix.apply(unix =\u003e unix * 1000),\n            duration: 2 * 60 * 60 * 1000,\n            timezone: \"America/New_York\",\n        }],\n    },\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    variables: [{\n        type: \"regex\",\n        name: \"Src\",\n        parameters: [{\n            value: \"(.*)\",\n            path: \"payload.source\",\n        }],\n    }],\n    actions: {\n        routes: [{\n            value: fooPagerdutyService.id,\n        }],\n        severities: [{\n            value: \"warning\",\n        }],\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n        extractions: [\n            {\n                target: \"dedup_key\",\n                source: \"details.host\",\n                regex: \"(.*)\",\n            },\n            {\n                target: \"summary\",\n                template: \"Warning: Disk Space Low on {{Src}}\",\n            },\n        ],\n    },\n});\nconst catchAll = new pagerduty.RulesetRule(\"catch_all\", {\n    ruleset: fooRuleset.id,\n    position: 1,\n    catchAll: true,\n    actions: {\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n        suppresses: [{\n            value: true,\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\nimport pulumiverse_time as time\n\nfoo = pagerduty.Team(\"foo\", name=\"Engineering (Seattle)\")\nfoo_ruleset = pagerduty.Ruleset(\"foo\",\n    name=\"Primary Ruleset\",\n    team={\n        \"id\": foo.id,\n    })\n# The pagerduty_ruleset_rule.foo rule defined below\n# repeats daily from 9:30am - 11:30am using the America/New_York timezone.\n# Thus it requires a time_static instance to represent 9:30am on an arbitrary date in that timezone.\n# April 11th, 2019 was EDT (UTC-4) https://www.timeanddate.com/worldclock/converter.html?iso=20190411T133000\u0026p1=179\neastern_time_at0930 = time.Static(\"eastern_time_at_0930\", rfc3339=\"2019-04-11T09:30:00-04:00\")\nfoo_ruleset_rule = pagerduty.RulesetRule(\"foo\",\n    ruleset=foo_ruleset.id,\n    position=0,\n    disabled=False,\n    time_frame={\n        \"scheduled_weeklies\": [{\n            \"weekdays\": [\n                2,\n                4,\n                6,\n            ],\n            \"start_time\": eastern_time_at0930.unix.apply(lambda unix: unix * 1000),\n            \"duration\": 2 * 60 * 60 * 1000,\n            \"timezone\": \"America/New_York\",\n        }],\n    },\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"disk space\",\n                    \"path\": \"payload.summary\",\n                }],\n            },\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"db\",\n                    \"path\": \"payload.source\",\n                }],\n            },\n        ],\n    },\n    variables=[{\n        \"type\": \"regex\",\n        \"name\": \"Src\",\n        \"parameters\": [{\n            \"value\": \"(.*)\",\n            \"path\": \"payload.source\",\n        }],\n    }],\n    actions={\n        \"routes\": [{\n            \"value\": foo_pagerduty_service[\"id\"],\n        }],\n        \"severities\": [{\n            \"value\": \"warning\",\n        }],\n        \"annotates\": [{\n            \"value\": \"From Terraform\",\n        }],\n        \"extractions\": [\n            {\n                \"target\": \"dedup_key\",\n                \"source\": \"details.host\",\n                \"regex\": \"(.*)\",\n            },\n            {\n                \"target\": \"summary\",\n                \"template\": \"Warning: Disk Space Low on {{Src}}\",\n            },\n        ],\n    })\ncatch_all = pagerduty.RulesetRule(\"catch_all\",\n    ruleset=foo_ruleset.id,\n    position=1,\n    catch_all=True,\n    actions={\n        \"annotates\": [{\n            \"value\": \"From Terraform\",\n        }],\n        \"suppresses\": [{\n            \"value\": True,\n        }],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\nusing Time = Pulumiverse.Time;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.Team(\"foo\", new()\n    {\n        Name = \"Engineering (Seattle)\",\n    });\n\n    var fooRuleset = new Pagerduty.Ruleset(\"foo\", new()\n    {\n        Name = \"Primary Ruleset\",\n        Team = new Pagerduty.Inputs.RulesetTeamArgs\n        {\n            Id = foo.Id,\n        },\n    });\n\n    // The pagerduty_ruleset_rule.foo rule defined below\n    // repeats daily from 9:30am - 11:30am using the America/New_York timezone.\n    // Thus it requires a time_static instance to represent 9:30am on an arbitrary date in that timezone.\n    // April 11th, 2019 was EDT (UTC-4) https://www.timeanddate.com/worldclock/converter.html?iso=20190411T133000\u0026p1=179\n    var easternTimeAt0930 = new Time.Static(\"eastern_time_at_0930\", new()\n    {\n        Rfc3339 = \"2019-04-11T09:30:00-04:00\",\n    });\n\n    var fooRulesetRule = new Pagerduty.RulesetRule(\"foo\", new()\n    {\n        Ruleset = fooRuleset.Id,\n        Position = 0,\n        Disabled = false,\n        TimeFrame = new Pagerduty.Inputs.RulesetRuleTimeFrameArgs\n        {\n            ScheduledWeeklies = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleTimeFrameScheduledWeeklyArgs\n                {\n                    Weekdays = new[]\n                    {\n                        2,\n                        4,\n                        6,\n                    },\n                    StartTime = easternTimeAt0930.Unix.Apply(unix =\u003e unix * 1000),\n                    Duration = 2 * 60 * 60 * 1000,\n                    Timezone = \"America/New_York\",\n                },\n            },\n        },\n        Conditions = new Pagerduty.Inputs.RulesetRuleConditionsArgs\n        {\n            Operator = \"and\",\n            Subconditions = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"disk space\",\n                            Path = \"payload.summary\",\n                        },\n                    },\n                },\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"db\",\n                            Path = \"payload.source\",\n                        },\n                    },\n                },\n            },\n        },\n        Variables = new[]\n        {\n            new Pagerduty.Inputs.RulesetRuleVariableArgs\n            {\n                Type = \"regex\",\n                Name = \"Src\",\n                Parameters = new[]\n                {\n                    new Pagerduty.Inputs.RulesetRuleVariableParameterArgs\n                    {\n                        Value = \"(.*)\",\n                        Path = \"payload.source\",\n                    },\n                },\n            },\n        },\n        Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n        {\n            Routes = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsRouteArgs\n                {\n                    Value = fooPagerdutyService.Id,\n                },\n            },\n            Severities = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsSeverityArgs\n                {\n                    Value = \"warning\",\n                },\n            },\n            Annotates = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsAnnotateArgs\n                {\n                    Value = \"From Terraform\",\n                },\n            },\n            Extractions = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsExtractionArgs\n                {\n                    Target = \"dedup_key\",\n                    Source = \"details.host\",\n                    Regex = \"(.*)\",\n                },\n                new Pagerduty.Inputs.RulesetRuleActionsExtractionArgs\n                {\n                    Target = \"summary\",\n                    Template = \"Warning: Disk Space Low on {{Src}}\",\n                },\n            },\n        },\n    });\n\n    var catchAll = new Pagerduty.RulesetRule(\"catch_all\", new()\n    {\n        Ruleset = fooRuleset.Id,\n        Position = 1,\n        CatchAll = true,\n        Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n        {\n            Annotates = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsAnnotateArgs\n                {\n                    Value = \"From Terraform\",\n                },\n            },\n            Suppresses = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsSuppressArgs\n                {\n                    Value = true,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi-time/sdk/go/time\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := pagerduty.NewTeam(ctx, \"foo\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering (Seattle)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooRuleset, err := pagerduty.NewRuleset(ctx, \"foo\", \u0026pagerduty.RulesetArgs{\n\t\t\tName: pulumi.String(\"Primary Ruleset\"),\n\t\t\tTeam: \u0026pagerduty.RulesetTeamArgs{\n\t\t\t\tId: foo.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// The pagerduty_ruleset_rule.foo rule defined below\n\t\t// repeats daily from 9:30am - 11:30am using the America/New_York timezone.\n\t\t// Thus it requires a time_static instance to represent 9:30am on an arbitrary date in that timezone.\n\t\t// April 11th, 2019 was EDT (UTC-4) https://www.timeanddate.com/worldclock/converter.html?iso=20190411T133000\u0026p1=179\n\t\teasternTimeAt0930, err := time.NewStatic(ctx, \"eastern_time_at_0930\", \u0026time.StaticArgs{\n\t\t\tRfc3339: pulumi.String(\"2019-04-11T09:30:00-04:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"foo\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  fooRuleset.ID(),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tTimeFrame: \u0026pagerduty.RulesetRuleTimeFrameArgs{\n\t\t\t\tScheduledWeeklies: pagerduty.RulesetRuleTimeFrameScheduledWeeklyArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleTimeFrameScheduledWeeklyArgs{\n\t\t\t\t\t\tWeekdays: pulumi.IntArray{\n\t\t\t\t\t\t\tpulumi.Int(2),\n\t\t\t\t\t\t\tpulumi.Int(4),\n\t\t\t\t\t\t\tpulumi.Int(6),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tStartTime: pulumi.Int(easternTimeAt0930.Unix.ApplyT(func(unix int) (float64, error) {\n\t\t\t\t\t\t\treturn unix * 1000, nil\n\t\t\t\t\t\t}).(pulumi.Float64Output)),\n\t\t\t\t\t\tDuration: int(2 * 60 * 60 * 1000),\n\t\t\t\t\t\tTimezone: pulumi.String(\"America/New_York\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: \u0026pagerduty.RulesetRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: pagerduty.RulesetRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"db\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tVariables: pagerduty.RulesetRuleVariableArray{\n\t\t\t\t\u0026pagerduty.RulesetRuleVariableArgs{\n\t\t\t\t\tType: pulumi.String(\"regex\"),\n\t\t\t\t\tName: pulumi.String(\"Src\"),\n\t\t\t\t\tParameters: pagerduty.RulesetRuleVariableParameterArray{\n\t\t\t\t\t\t\u0026pagerduty.RulesetRuleVariableParameterArgs{\n\t\t\t\t\t\t\tValue: pulumi.String(\"(.*)\"),\n\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026pagerduty.RulesetRuleActionsArgs{\n\t\t\t\tRoutes: pagerduty.RulesetRuleActionsRouteArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsRouteArgs{\n\t\t\t\t\t\tValue: pulumi.Any(fooPagerdutyService.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSeverities: pagerduty.RulesetRuleActionsSeverityArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsSeverityArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"warning\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tAnnotates: pagerduty.RulesetRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tExtractions: pagerduty.RulesetRuleActionsExtractionArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget: pulumi.String(\"dedup_key\"),\n\t\t\t\t\t\tSource: pulumi.String(\"details.host\"),\n\t\t\t\t\t\tRegex:  pulumi.String(\"(.*)\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget:   pulumi.String(\"summary\"),\n\t\t\t\t\t\tTemplate: pulumi.String(\"Warning: Disk Space Low on {{Src}}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"catch_all\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  fooRuleset.ID(),\n\t\t\tPosition: pulumi.Int(1),\n\t\t\tCatchAll: pulumi.Bool(true),\n\t\t\tActions: \u0026pagerduty.RulesetRuleActionsArgs{\n\t\t\t\tAnnotates: pagerduty.RulesetRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSuppresses: pagerduty.RulesetRuleActionsSuppressArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsSuppressArgs{\n\t\t\t\t\t\tValue: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.Ruleset;\nimport com.pulumi.pagerduty.RulesetArgs;\nimport com.pulumi.pagerduty.inputs.RulesetTeamArgs;\nimport com.pulumi.time.Static;\nimport com.pulumi.time.StaticArgs;\nimport com.pulumi.pagerduty.RulesetRule;\nimport com.pulumi.pagerduty.RulesetRuleArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleTimeFrameArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleConditionsArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleVariableArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Team(\"foo\", TeamArgs.builder()\n            .name(\"Engineering (Seattle)\")\n            .build());\n\n        var fooRuleset = new Ruleset(\"fooRuleset\", RulesetArgs.builder()\n            .name(\"Primary Ruleset\")\n            .team(RulesetTeamArgs.builder()\n                .id(foo.id())\n                .build())\n            .build());\n\n        // The pagerduty_ruleset_rule.foo rule defined below\n        // repeats daily from 9:30am - 11:30am using the America/New_York timezone.\n        // Thus it requires a time_static instance to represent 9:30am on an arbitrary date in that timezone.\n        // April 11th, 2019 was EDT (UTC-4) https://www.timeanddate.com/worldclock/converter.html?iso=20190411T133000\u0026p1=179\n        var easternTimeAt0930 = new Static(\"easternTimeAt0930\", StaticArgs.builder()\n            .rfc3339(\"2019-04-11T09:30:00-04:00\")\n            .build());\n\n        var fooRulesetRule = new RulesetRule(\"fooRulesetRule\", RulesetRuleArgs.builder()\n            .ruleset(fooRuleset.id())\n            .position(0)\n            .disabled(\"false\")\n            .timeFrame(RulesetRuleTimeFrameArgs.builder()\n                .scheduledWeeklies(RulesetRuleTimeFrameScheduledWeeklyArgs.builder()\n                    .weekdays(                    \n                        2,\n                        4,\n                        6)\n                    .startTime(easternTimeAt0930.unix().applyValue(unix -\u003e unix * 1000))\n                    .duration(2 * 60 * 60 * 1000)\n                    .timezone(\"America/New_York\")\n                    .build())\n                .build())\n            .conditions(RulesetRuleConditionsArgs.builder()\n                .operator(\"and\")\n                .subconditions(                \n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"disk space\")\n                            .path(\"payload.summary\")\n                            .build())\n                        .build(),\n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"db\")\n                            .path(\"payload.source\")\n                            .build())\n                        .build())\n                .build())\n            .variables(RulesetRuleVariableArgs.builder()\n                .type(\"regex\")\n                .name(\"Src\")\n                .parameters(RulesetRuleVariableParameterArgs.builder()\n                    .value(\"(.*)\")\n                    .path(\"payload.source\")\n                    .build())\n                .build())\n            .actions(RulesetRuleActionsArgs.builder()\n                .routes(RulesetRuleActionsRouteArgs.builder()\n                    .value(fooPagerdutyService.id())\n                    .build())\n                .severities(RulesetRuleActionsSeverityArgs.builder()\n                    .value(\"warning\")\n                    .build())\n                .annotates(RulesetRuleActionsAnnotateArgs.builder()\n                    .value(\"From Terraform\")\n                    .build())\n                .extractions(                \n                    RulesetRuleActionsExtractionArgs.builder()\n                        .target(\"dedup_key\")\n                        .source(\"details.host\")\n                        .regex(\"(.*)\")\n                        .build(),\n                    RulesetRuleActionsExtractionArgs.builder()\n                        .target(\"summary\")\n                        .template(\"Warning: Disk Space Low on {{Src}}\")\n                        .build())\n                .build())\n            .build());\n\n        var catchAll = new RulesetRule(\"catchAll\", RulesetRuleArgs.builder()\n            .ruleset(fooRuleset.id())\n            .position(1)\n            .catchAll(true)\n            .actions(RulesetRuleActionsArgs.builder()\n                .annotates(RulesetRuleActionsAnnotateArgs.builder()\n                    .value(\"From Terraform\")\n                    .build())\n                .suppresses(RulesetRuleActionsSuppressArgs.builder()\n                    .value(true)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRuleset rules can be imported using the related `ruleset` ID and the `ruleset_rule` ID separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/rulesetRule:RulesetRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601\n```\n",
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "required": [
                "ruleset"
            ],
            "inputProperties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "catchAll": {
                    "type": "boolean",
                    "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the ruleset.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ID of the ruleset that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "requiredInputs": [
                "ruleset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RulesetRule resources.\n",
                "properties": {
                    "actions": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleActions:RulesetRuleActions",
                        "description": "Actions to apply to an event if the conditions match.\n"
                    },
                    "catchAll": {
                        "type": "boolean",
                        "description": "Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.\n"
                    },
                    "conditions": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleConditions:RulesetRuleConditions",
                        "description": "Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position/index of the rule within the ruleset.\n"
                    },
                    "ruleset": {
                        "type": "string",
                        "description": "The ID of the ruleset that the rule belongs to.\n"
                    },
                    "timeFrame": {
                        "$ref": "#/types/pagerduty:index/RulesetRuleTimeFrame:RulesetRuleTimeFrame",
                        "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/RulesetRuleVariable:RulesetRuleVariable"
                        },
                        "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/schedule:Schedule": {
            "description": "A [schedule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE4Mg-create-a-schedule) determines the time periods that users are on call. Only on-call users are eligible to receive notifications from incidents.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst exampleTeam = new pagerduty.Team(\"example\", {name: \"A Team\"});\nconst foo = new pagerduty.Schedule(\"foo\", {\n    name: \"Daily Engineering Rotation\",\n    timeZone: \"America/New_York\",\n    layers: [{\n        name: \"Night Shift\",\n        start: \"2015-11-06T20:00:00-05:00\",\n        rotationVirtualStart: \"2015-11-06T20:00:00-05:00\",\n        rotationTurnLengthSeconds: 86400,\n        users: [example.id],\n        restrictions: [{\n            type: \"daily_restriction\",\n            startTimeOfDay: \"08:00:00\",\n            durationSeconds: 32400,\n        }],\n    }],\n    teams: [exampleTeam.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nexample_team = pagerduty.Team(\"example\", name=\"A Team\")\nfoo = pagerduty.Schedule(\"foo\",\n    name=\"Daily Engineering Rotation\",\n    time_zone=\"America/New_York\",\n    layers=[{\n        \"name\": \"Night Shift\",\n        \"start\": \"2015-11-06T20:00:00-05:00\",\n        \"rotation_virtual_start\": \"2015-11-06T20:00:00-05:00\",\n        \"rotation_turn_length_seconds\": 86400,\n        \"users\": [example.id],\n        \"restrictions\": [{\n            \"type\": \"daily_restriction\",\n            \"start_time_of_day\": \"08:00:00\",\n            \"duration_seconds\": 32400,\n        }],\n    }],\n    teams=[example_team.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var exampleTeam = new Pagerduty.Team(\"example\", new()\n    {\n        Name = \"A Team\",\n    });\n\n    var foo = new Pagerduty.Schedule(\"foo\", new()\n    {\n        Name = \"Daily Engineering Rotation\",\n        TimeZone = \"America/New_York\",\n        Layers = new[]\n        {\n            new Pagerduty.Inputs.ScheduleLayerArgs\n            {\n                Name = \"Night Shift\",\n                Start = \"2015-11-06T20:00:00-05:00\",\n                RotationVirtualStart = \"2015-11-06T20:00:00-05:00\",\n                RotationTurnLengthSeconds = 86400,\n                Users = new[]\n                {\n                    example.Id,\n                },\n                Restrictions = new[]\n                {\n                    new Pagerduty.Inputs.ScheduleLayerRestrictionArgs\n                    {\n                        Type = \"daily_restriction\",\n                        StartTimeOfDay = \"08:00:00\",\n                        DurationSeconds = 32400,\n                    },\n                },\n            },\n        },\n        Teams = new[]\n        {\n            exampleTeam.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := pagerduty.NewTeam(ctx, \"example\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"A Team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewSchedule(ctx, \"foo\", \u0026pagerduty.ScheduleArgs{\n\t\t\tName:     pulumi.String(\"Daily Engineering Rotation\"),\n\t\t\tTimeZone: pulumi.String(\"America/New_York\"),\n\t\t\tLayers: pagerduty.ScheduleLayerArray{\n\t\t\t\t\u0026pagerduty.ScheduleLayerArgs{\n\t\t\t\t\tName:                      pulumi.String(\"Night Shift\"),\n\t\t\t\t\tStart:                     pulumi.String(\"2015-11-06T20:00:00-05:00\"),\n\t\t\t\t\tRotationVirtualStart:      pulumi.String(\"2015-11-06T20:00:00-05:00\"),\n\t\t\t\t\tRotationTurnLengthSeconds: pulumi.Int(86400),\n\t\t\t\t\tUsers: pulumi.StringArray{\n\t\t\t\t\t\texample.ID(),\n\t\t\t\t\t},\n\t\t\t\t\tRestrictions: pagerduty.ScheduleLayerRestrictionArray{\n\t\t\t\t\t\t\u0026pagerduty.ScheduleLayerRestrictionArgs{\n\t\t\t\t\t\t\tType:            pulumi.String(\"daily_restriction\"),\n\t\t\t\t\t\t\tStartTimeOfDay:  pulumi.String(\"08:00:00\"),\n\t\t\t\t\t\t\tDurationSeconds: pulumi.Int(32400),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.Schedule;\nimport com.pulumi.pagerduty.ScheduleArgs;\nimport com.pulumi.pagerduty.inputs.ScheduleLayerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var exampleTeam = new Team(\"exampleTeam\", TeamArgs.builder()\n            .name(\"A Team\")\n            .build());\n\n        var foo = new Schedule(\"foo\", ScheduleArgs.builder()\n            .name(\"Daily Engineering Rotation\")\n            .timeZone(\"America/New_York\")\n            .layers(ScheduleLayerArgs.builder()\n                .name(\"Night Shift\")\n                .start(\"2015-11-06T20:00:00-05:00\")\n                .rotationVirtualStart(\"2015-11-06T20:00:00-05:00\")\n                .rotationTurnLengthSeconds(86400)\n                .users(example.id())\n                .restrictions(ScheduleLayerRestrictionArgs.builder()\n                    .type(\"daily_restriction\")\n                    .startTimeOfDay(\"08:00:00\")\n                    .durationSeconds(32400)\n                    .build())\n                .build())\n            .teams(exampleTeam.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  exampleTeam:\n    type: pagerduty:Team\n    name: example\n    properties:\n      name: A Team\n  foo:\n    type: pagerduty:Schedule\n    properties:\n      name: Daily Engineering Rotation\n      timeZone: America/New_York\n      layers:\n        - name: Night Shift\n          start: 2015-11-06T20:00:00-05:00\n          rotationVirtualStart: 2015-11-06T20:00:00-05:00\n          rotationTurnLengthSeconds: 86400\n          users:\n            - ${example.id}\n          restrictions:\n            - type: daily_restriction\n              startTimeOfDay: 08:00:00\n              durationSeconds: 32400\n      teams:\n        - ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSchedules can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/schedule:Schedule main PLBP09X\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule.\n",
                    "default": "Managed by Pulumi"
                },
                "finalSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleFinalSchedule:ScheduleFinalSchedule"
                    }
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the schedule.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                }
            },
            "required": [
                "description",
                "finalSchedules",
                "layers",
                "name",
                "timeZone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the schedule.\n",
                    "default": "Managed by Pulumi"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                    },
                    "description": "A schedule layer block. Schedule layers documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schedule.\n"
                },
                "overflow": {
                    "type": "boolean",
                    "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the schedule.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                }
            },
            "requiredInputs": [
                "layers",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schedule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the schedule.\n",
                        "default": "Managed by Pulumi"
                    },
                    "finalSchedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ScheduleFinalSchedule:ScheduleFinalSchedule"
                        }
                    },
                    "layers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ScheduleLayer:ScheduleLayer"
                        },
                        "description": "A schedule layer block. Schedule layers documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schedule.\n"
                    },
                    "overflow": {
                        "type": "boolean",
                        "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\nIf you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\nIf you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Teams associated with the schedule.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone of the schedule (e.g. `Europe/Berlin`).\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/service:Service": {
            "description": "A [service](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-create-a-service) represents something you monitor (like a web service, email service, or database service). It is a container for related incidents that associates them with escalation policies.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user_reference\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: foo.id,\n    alertCreation: \"create_alerts_and_incidents\",\n    autoPauseNotificationsParameters: {\n        enabled: true,\n        timeout: 300,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user_reference\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=foo.id,\n    alert_creation=\"create_alerts_and_incidents\",\n    auto_pause_notifications_parameters={\n        \"enabled\": True,\n        \"timeout\": 300,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = foo.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n        AutoPauseNotificationsParameters = new Pagerduty.Inputs.ServiceAutoPauseNotificationsParametersArgs\n        {\n            Enabled = true,\n            Timeout = 300,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo, err := pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       foo.ID(),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t\tAutoPauseNotificationsParameters: \u0026pagerduty.ServiceAutoPauseNotificationsParametersArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tTimeout: pulumi.Int(300),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.inputs.ServiceAutoPauseNotificationsParametersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user_reference\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(foo.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .autoPauseNotificationsParameters(ServiceAutoPauseNotificationsParametersArgs.builder()\n                .enabled(true)\n                .timeout(300)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user_reference\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${foo.id}\n      alertCreation: create_alerts_and_incidents\n      autoPauseNotificationsParameters:\n        enabled: true\n        timeout: 300\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServices can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/service:Service main PLBP09X\n```\n",
            "properties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "(Deprecated) This attribute has been deprecated as all services will be migrated to use alerts and incidents. The incident only service setting will be no longer available and this attribute will be removed in an upcoming version. See knowledge base for details \u003chttps://support.pagerduty.com/docs/alerts#enable-and-disable-alerts-on-a-service\u003e.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.type`"
                },
                "alertGroupingParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                },
                "alertGroupingTimeout": {
                    "type": "string",
                    "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                },
                "autoPauseNotificationsParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAutoPauseNotificationsParameters:ServiceAutoPauseNotificationsParameters",
                    "description": "Defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient. Note that automatically pausing notifications is only available on certain plans as mentioned [here](https://support.pagerduty.com/docs/auto-pause-incident-notifications).\n"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the service.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "lastIncidentTimestamp": {
                    "type": "string",
                    "description": "Last incident timestamp of the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "responsePlay": {
                    "type": "string",
                    "description": "The response play used by this service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the service.\n"
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                },
                "type": {
                    "type": "string",
                    "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n"
                }
            },
            "required": [
                "alertGrouping",
                "alertGroupingParameters",
                "alertGroupingTimeout",
                "autoPauseNotificationsParameters",
                "createdAt",
                "description",
                "escalationPolicy",
                "htmlUrl",
                "incidentUrgencyRule",
                "lastIncidentTimestamp",
                "name",
                "responsePlay",
                "status",
                "type"
            ],
            "inputProperties": {
                "acknowledgementTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                },
                "alertCreation": {
                    "type": "string",
                    "description": "(Deprecated) This attribute has been deprecated as all services will be migrated to use alerts and incidents. The incident only service setting will be no longer available and this attribute will be removed in an upcoming version. See knowledge base for details \u003chttps://support.pagerduty.com/docs/alerts#enable-and-disable-alerts-on-a-service\u003e.\n"
                },
                "alertGrouping": {
                    "type": "string",
                    "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.type`"
                },
                "alertGroupingParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                    "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                },
                "alertGroupingTimeout": {
                    "type": "string",
                    "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                    "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                },
                "autoPauseNotificationsParameters": {
                    "$ref": "#/types/pagerduty:index/ServiceAutoPauseNotificationsParameters:ServiceAutoPauseNotificationsParameters",
                    "description": "Defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient. Note that automatically pausing notifications is only available on certain plans as mentioned [here](https://support.pagerduty.com/docs/auto-pause-incident-notifications).\n"
                },
                "autoResolveTimeout": {
                    "type": "string",
                    "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "escalationPolicy": {
                    "type": "string",
                    "description": "The escalation policy used by this service.\n"
                },
                "incidentUrgencyRule": {
                    "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "responsePlay": {
                    "type": "string",
                    "description": "The response play used by this service.\n"
                },
                "scheduledActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                    }
                },
                "supportHours": {
                    "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                }
            },
            "requiredInputs": [
                "escalationPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "acknowledgementTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `\"null\"` string.  If not passed in, will default to '\"1800\"'.\n"
                    },
                    "alertCreation": {
                        "type": "string",
                        "description": "(Deprecated) This attribute has been deprecated as all services will be migrated to use alerts and incidents. The incident only service setting will be no longer available and this attribute will be removed in an upcoming version. See knowledge base for details \u003chttps://support.pagerduty.com/docs/alerts#enable-and-disable-alerts-on-a-service\u003e.\n"
                    },
                    "alertGrouping": {
                        "type": "string",
                        "description": "(Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,\n",
                        "deprecationMessage": "Use `alert_grouping_parameters.type`"
                    },
                    "alertGroupingParameters": {
                        "$ref": "#/types/pagerduty:index/ServiceAlertGroupingParameters:ServiceAlertGroupingParameters",
                        "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.\n"
                    },
                    "alertGroupingTimeout": {
                        "type": "string",
                        "description": "(Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,\n",
                        "deprecationMessage": "Use `alert_grouping_parameters.config.timeout`"
                    },
                    "autoPauseNotificationsParameters": {
                        "$ref": "#/types/pagerduty:index/ServiceAutoPauseNotificationsParameters:ServiceAutoPauseNotificationsParameters",
                        "description": "Defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient. Note that automatically pausing notifications is only available on certain plans as mentioned [here](https://support.pagerduty.com/docs/auto-pause-incident-notifications).\n"
                    },
                    "autoResolveTimeout": {
                        "type": "string",
                        "description": "Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `\"null\"` string.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the service.\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "escalationPolicy": {
                        "type": "string",
                        "description": "The escalation policy used by this service.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "incidentUrgencyRule": {
                        "$ref": "#/types/pagerduty:index/ServiceIncidentUrgencyRule:ServiceIncidentUrgencyRule"
                    },
                    "lastIncidentTimestamp": {
                        "type": "string",
                        "description": "Last incident timestamp of the service.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service.\n"
                    },
                    "responsePlay": {
                        "type": "string",
                        "description": "The response play used by this service.\n"
                    },
                    "scheduledActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceScheduledAction:ServiceScheduledAction"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the service.\n"
                    },
                    "supportHours": {
                        "$ref": "#/types/pagerduty:index/ServiceSupportHours:ServiceSupportHours"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceDependency:ServiceDependency": {
            "description": "A [service dependency](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Mg-associate-service-dependencies) is a relationship between two services that this service uses, or that are used by this service, and are critical for successful operation.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.ServiceDependency(\"foo\", {dependency: {\n    dependentServices: [{\n        id: fooPagerdutyBusinessService.id,\n        type: fooPagerdutyBusinessService.type,\n    }],\n    supportingServices: [{\n        id: fooPagerdutyService.id,\n        type: fooPagerdutyService.type,\n    }],\n}});\nconst bar = new pagerduty.ServiceDependency(\"bar\", {dependency: {\n    dependentServices: [{\n        id: fooPagerdutyBusinessService.id,\n        type: fooPagerdutyBusinessService.type,\n    }],\n    supportingServices: [{\n        id: two.id,\n        type: two.type,\n    }],\n}});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.ServiceDependency(\"foo\", dependency={\n    \"dependent_services\": [{\n        \"id\": foo_pagerduty_business_service[\"id\"],\n        \"type\": foo_pagerduty_business_service[\"type\"],\n    }],\n    \"supporting_services\": [{\n        \"id\": foo_pagerduty_service[\"id\"],\n        \"type\": foo_pagerduty_service[\"type\"],\n    }],\n})\nbar = pagerduty.ServiceDependency(\"bar\", dependency={\n    \"dependent_services\": [{\n        \"id\": foo_pagerduty_business_service[\"id\"],\n        \"type\": foo_pagerduty_business_service[\"type\"],\n    }],\n    \"supporting_services\": [{\n        \"id\": two[\"id\"],\n        \"type\": two[\"type\"],\n    }],\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.ServiceDependency(\"foo\", new()\n    {\n        Dependency = new Pagerduty.Inputs.ServiceDependencyDependencyArgs\n        {\n            DependentServices = new[]\n            {\n                new Pagerduty.Inputs.ServiceDependencyDependencyDependentServiceArgs\n                {\n                    Id = fooPagerdutyBusinessService.Id,\n                    Type = fooPagerdutyBusinessService.Type,\n                },\n            },\n            SupportingServices = new[]\n            {\n                new Pagerduty.Inputs.ServiceDependencyDependencySupportingServiceArgs\n                {\n                    Id = fooPagerdutyService.Id,\n                    Type = fooPagerdutyService.Type,\n                },\n            },\n        },\n    });\n\n    var bar = new Pagerduty.ServiceDependency(\"bar\", new()\n    {\n        Dependency = new Pagerduty.Inputs.ServiceDependencyDependencyArgs\n        {\n            DependentServices = new[]\n            {\n                new Pagerduty.Inputs.ServiceDependencyDependencyDependentServiceArgs\n                {\n                    Id = fooPagerdutyBusinessService.Id,\n                    Type = fooPagerdutyBusinessService.Type,\n                },\n            },\n            SupportingServices = new[]\n            {\n                new Pagerduty.Inputs.ServiceDependencyDependencySupportingServiceArgs\n                {\n                    Id = two.Id,\n                    Type = two.Type,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewServiceDependency(ctx, \"foo\", \u0026pagerduty.ServiceDependencyArgs{\n\t\t\tDependency: \u0026pagerduty.ServiceDependencyDependencyArgs{\n\t\t\t\tDependentServices: pagerduty.ServiceDependencyDependencyDependentServiceArray{\n\t\t\t\t\t\u0026pagerduty.ServiceDependencyDependencyDependentServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(fooPagerdutyBusinessService.Id),\n\t\t\t\t\t\tType: pulumi.Any(fooPagerdutyBusinessService.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSupportingServices: pagerduty.ServiceDependencyDependencySupportingServiceArray{\n\t\t\t\t\t\u0026pagerduty.ServiceDependencyDependencySupportingServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(fooPagerdutyService.Id),\n\t\t\t\t\t\tType: pulumi.Any(fooPagerdutyService.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceDependency(ctx, \"bar\", \u0026pagerduty.ServiceDependencyArgs{\n\t\t\tDependency: \u0026pagerduty.ServiceDependencyDependencyArgs{\n\t\t\t\tDependentServices: pagerduty.ServiceDependencyDependencyDependentServiceArray{\n\t\t\t\t\t\u0026pagerduty.ServiceDependencyDependencyDependentServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(fooPagerdutyBusinessService.Id),\n\t\t\t\t\t\tType: pulumi.Any(fooPagerdutyBusinessService.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSupportingServices: pagerduty.ServiceDependencyDependencySupportingServiceArray{\n\t\t\t\t\t\u0026pagerduty.ServiceDependencyDependencySupportingServiceArgs{\n\t\t\t\t\t\tId:   pulumi.Any(two.Id),\n\t\t\t\t\t\tType: pulumi.Any(two.Type),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.ServiceDependency;\nimport com.pulumi.pagerduty.ServiceDependencyArgs;\nimport com.pulumi.pagerduty.inputs.ServiceDependencyDependencyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServiceDependency(\"foo\", ServiceDependencyArgs.builder()\n            .dependency(ServiceDependencyDependencyArgs.builder()\n                .dependentServices(ServiceDependencyDependencyDependentServiceArgs.builder()\n                    .id(fooPagerdutyBusinessService.id())\n                    .type(fooPagerdutyBusinessService.type())\n                    .build())\n                .supportingServices(ServiceDependencyDependencySupportingServiceArgs.builder()\n                    .id(fooPagerdutyService.id())\n                    .type(fooPagerdutyService.type())\n                    .build())\n                .build())\n            .build());\n\n        var bar = new ServiceDependency(\"bar\", ServiceDependencyArgs.builder()\n            .dependency(ServiceDependencyDependencyArgs.builder()\n                .dependentServices(ServiceDependencyDependencyDependentServiceArgs.builder()\n                    .id(fooPagerdutyBusinessService.id())\n                    .type(fooPagerdutyBusinessService.type())\n                    .build())\n                .supportingServices(ServiceDependencyDependencySupportingServiceArgs.builder()\n                    .id(two.id())\n                    .type(two.type())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:ServiceDependency\n    properties:\n      dependency:\n        dependentServices:\n          - id: ${fooPagerdutyBusinessService.id}\n            type: ${fooPagerdutyBusinessService.type}\n        supportingServices:\n          - id: ${fooPagerdutyService.id}\n            type: ${fooPagerdutyService.type}\n  bar:\n    type: pagerduty:ServiceDependency\n    properties:\n      dependency:\n        dependentServices:\n          - id: ${fooPagerdutyBusinessService.id}\n            type: ${fooPagerdutyBusinessService.type}\n        supportingServices:\n          - id: ${two.id}\n            type: ${two.type}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nService dependencies can be imported using the related supporting service id, supporting service type (`business_service` or `service`) and the dependency id separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/serviceDependency:ServiceDependency main P4B2Z7G.business_service.D5RTHKRNGU4PYE90PJ\n```\n",
            "properties": {
                "dependency": {
                    "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                    "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                }
            },
            "required": [
                "dependency"
            ],
            "inputProperties": {
                "dependency": {
                    "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                    "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                }
            },
            "requiredInputs": [
                "dependency"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceDependency resources.\n",
                "properties": {
                    "dependency": {
                        "$ref": "#/types/pagerduty:index/ServiceDependencyDependency:ServiceDependencyDependency",
                        "description": "The relationship between the `supporting_service` and `dependent_service`. One and only one dependency block must be defined.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceEventRule:ServiceEventRule": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Service(\"example\", {\n    name: \"Checkout API Service\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: examplePagerdutyEscalationPolicy.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\nconst foo = new pagerduty.ServiceEventRule(\"foo\", {\n    service: example.id,\n    position: 0,\n    disabled: true,\n    conditions: {\n        operator: \"and\",\n        subconditions: [{\n            operator: \"contains\",\n            parameters: [{\n                value: \"disk space\",\n                path: \"summary\",\n            }],\n        }],\n    },\n    variables: [{\n        type: \"regex\",\n        name: \"Src\",\n        parameters: [{\n            value: \"(.*)\",\n            path: \"source\",\n        }],\n    }],\n    actions: {\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n        extractions: [\n            {\n                target: \"dedup_key\",\n                source: \"source\",\n                regex: \"(.*)\",\n            },\n            {\n                target: \"summary\",\n                template: \"Warning: Disk Space Low on {{Src}}\",\n            },\n        ],\n    },\n});\nconst bar = new pagerduty.ServiceEventRule(\"bar\", {\n    service: fooPagerdutyService.id,\n    position: 1,\n    disabled: true,\n    conditions: {\n        operator: \"and\",\n        subconditions: [{\n            operator: \"contains\",\n            parameters: [{\n                value: \"cpu spike\",\n                path: \"summary\",\n            }],\n        }],\n    },\n    actions: {\n        annotates: [{\n            value: \"From Terraform\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Service(\"example\",\n    name=\"Checkout API Service\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_pagerduty_escalation_policy[\"id\"],\n    alert_creation=\"create_alerts_and_incidents\")\nfoo = pagerduty.ServiceEventRule(\"foo\",\n    service=example.id,\n    position=0,\n    disabled=True,\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [{\n            \"operator\": \"contains\",\n            \"parameters\": [{\n                \"value\": \"disk space\",\n                \"path\": \"summary\",\n            }],\n        }],\n    },\n    variables=[{\n        \"type\": \"regex\",\n        \"name\": \"Src\",\n        \"parameters\": [{\n            \"value\": \"(.*)\",\n            \"path\": \"source\",\n        }],\n    }],\n    actions={\n        \"annotates\": [{\n            \"value\": \"From Terraform\",\n        }],\n        \"extractions\": [\n            {\n                \"target\": \"dedup_key\",\n                \"source\": \"source\",\n                \"regex\": \"(.*)\",\n            },\n            {\n                \"target\": \"summary\",\n                \"template\": \"Warning: Disk Space Low on {{Src}}\",\n            },\n        ],\n    })\nbar = pagerduty.ServiceEventRule(\"bar\",\n    service=foo_pagerduty_service[\"id\"],\n    position=1,\n    disabled=True,\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [{\n            \"operator\": \"contains\",\n            \"parameters\": [{\n                \"value\": \"cpu spike\",\n                \"path\": \"summary\",\n            }],\n        }],\n    },\n    actions={\n        \"annotates\": [{\n            \"value\": \"From Terraform\",\n        }],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"Checkout API Service\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = examplePagerdutyEscalationPolicy.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n    });\n\n    var foo = new Pagerduty.ServiceEventRule(\"foo\", new()\n    {\n        Service = example.Id,\n        Position = 0,\n        Disabled = true,\n        Conditions = new Pagerduty.Inputs.ServiceEventRuleConditionsArgs\n        {\n            Operator = \"and\",\n            Subconditions = new[]\n            {\n                new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"disk space\",\n                            Path = \"summary\",\n                        },\n                    },\n                },\n            },\n        },\n        Variables = new[]\n        {\n            new Pagerduty.Inputs.ServiceEventRuleVariableArgs\n            {\n                Type = \"regex\",\n                Name = \"Src\",\n                Parameters = new[]\n                {\n                    new Pagerduty.Inputs.ServiceEventRuleVariableParameterArgs\n                    {\n                        Value = \"(.*)\",\n                        Path = \"source\",\n                    },\n                },\n            },\n        },\n        Actions = new Pagerduty.Inputs.ServiceEventRuleActionsArgs\n        {\n            Annotates = new[]\n            {\n                new Pagerduty.Inputs.ServiceEventRuleActionsAnnotateArgs\n                {\n                    Value = \"From Terraform\",\n                },\n            },\n            Extractions = new[]\n            {\n                new Pagerduty.Inputs.ServiceEventRuleActionsExtractionArgs\n                {\n                    Target = \"dedup_key\",\n                    Source = \"source\",\n                    Regex = \"(.*)\",\n                },\n                new Pagerduty.Inputs.ServiceEventRuleActionsExtractionArgs\n                {\n                    Target = \"summary\",\n                    Template = \"Warning: Disk Space Low on {{Src}}\",\n                },\n            },\n        },\n    });\n\n    var bar = new Pagerduty.ServiceEventRule(\"bar\", new()\n    {\n        Service = fooPagerdutyService.Id,\n        Position = 1,\n        Disabled = true,\n        Conditions = new Pagerduty.Inputs.ServiceEventRuleConditionsArgs\n        {\n            Operator = \"and\",\n            Subconditions = new[]\n            {\n                new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.ServiceEventRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"cpu spike\",\n                            Path = \"summary\",\n                        },\n                    },\n                },\n            },\n        },\n        Actions = new Pagerduty.Inputs.ServiceEventRuleActionsArgs\n        {\n            Annotates = new[]\n            {\n                new Pagerduty.Inputs.ServiceEventRuleActionsAnnotateArgs\n                {\n                    Value = \"From Terraform\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"Checkout API Service\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(examplePagerdutyEscalationPolicy.Id),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceEventRule(ctx, \"foo\", \u0026pagerduty.ServiceEventRuleArgs{\n\t\t\tService:  example.ID(),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(true),\n\t\t\tConditions: \u0026pagerduty.ServiceEventRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: pagerduty.ServiceEventRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.ServiceEventRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tVariables: pagerduty.ServiceEventRuleVariableArray{\n\t\t\t\t\u0026pagerduty.ServiceEventRuleVariableArgs{\n\t\t\t\t\tType: pulumi.String(\"regex\"),\n\t\t\t\t\tName: pulumi.String(\"Src\"),\n\t\t\t\t\tParameters: pagerduty.ServiceEventRuleVariableParameterArray{\n\t\t\t\t\t\t\u0026pagerduty.ServiceEventRuleVariableParameterArgs{\n\t\t\t\t\t\t\tValue: pulumi.String(\"(.*)\"),\n\t\t\t\t\t\t\tPath:  pulumi.String(\"source\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026pagerduty.ServiceEventRuleActionsArgs{\n\t\t\t\tAnnotates: pagerduty.ServiceEventRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tExtractions: pagerduty.ServiceEventRuleActionsExtractionArray{\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget: pulumi.String(\"dedup_key\"),\n\t\t\t\t\t\tSource: pulumi.String(\"source\"),\n\t\t\t\t\t\tRegex:  pulumi.String(\"(.*)\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleActionsExtractionArgs{\n\t\t\t\t\t\tTarget:   pulumi.String(\"summary\"),\n\t\t\t\t\t\tTemplate: pulumi.String(\"Warning: Disk Space Low on {{Src}}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceEventRule(ctx, \"bar\", \u0026pagerduty.ServiceEventRuleArgs{\n\t\t\tService:  pulumi.Any(fooPagerdutyService.Id),\n\t\t\tPosition: pulumi.Int(1),\n\t\t\tDisabled: pulumi.Bool(true),\n\t\t\tConditions: \u0026pagerduty.ServiceEventRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: pagerduty.ServiceEventRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.ServiceEventRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"cpu spike\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026pagerduty.ServiceEventRuleActionsArgs{\n\t\t\t\tAnnotates: pagerduty.ServiceEventRuleActionsAnnotateArray{\n\t\t\t\t\t\u0026pagerduty.ServiceEventRuleActionsAnnotateArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"From Terraform\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.ServiceEventRule;\nimport com.pulumi.pagerduty.ServiceEventRuleArgs;\nimport com.pulumi.pagerduty.inputs.ServiceEventRuleConditionsArgs;\nimport com.pulumi.pagerduty.inputs.ServiceEventRuleVariableArgs;\nimport com.pulumi.pagerduty.inputs.ServiceEventRuleActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Service(\"example\", ServiceArgs.builder()\n            .name(\"Checkout API Service\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(examplePagerdutyEscalationPolicy.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .build());\n\n        var foo = new ServiceEventRule(\"foo\", ServiceEventRuleArgs.builder()\n            .service(example.id())\n            .position(0)\n            .disabled(true)\n            .conditions(ServiceEventRuleConditionsArgs.builder()\n                .operator(\"and\")\n                .subconditions(ServiceEventRuleConditionsSubconditionArgs.builder()\n                    .operator(\"contains\")\n                    .parameters(ServiceEventRuleConditionsSubconditionParameterArgs.builder()\n                        .value(\"disk space\")\n                        .path(\"summary\")\n                        .build())\n                    .build())\n                .build())\n            .variables(ServiceEventRuleVariableArgs.builder()\n                .type(\"regex\")\n                .name(\"Src\")\n                .parameters(ServiceEventRuleVariableParameterArgs.builder()\n                    .value(\"(.*)\")\n                    .path(\"source\")\n                    .build())\n                .build())\n            .actions(ServiceEventRuleActionsArgs.builder()\n                .annotates(ServiceEventRuleActionsAnnotateArgs.builder()\n                    .value(\"From Terraform\")\n                    .build())\n                .extractions(                \n                    ServiceEventRuleActionsExtractionArgs.builder()\n                        .target(\"dedup_key\")\n                        .source(\"source\")\n                        .regex(\"(.*)\")\n                        .build(),\n                    ServiceEventRuleActionsExtractionArgs.builder()\n                        .target(\"summary\")\n                        .template(\"Warning: Disk Space Low on {{Src}}\")\n                        .build())\n                .build())\n            .build());\n\n        var bar = new ServiceEventRule(\"bar\", ServiceEventRuleArgs.builder()\n            .service(fooPagerdutyService.id())\n            .position(1)\n            .disabled(true)\n            .conditions(ServiceEventRuleConditionsArgs.builder()\n                .operator(\"and\")\n                .subconditions(ServiceEventRuleConditionsSubconditionArgs.builder()\n                    .operator(\"contains\")\n                    .parameters(ServiceEventRuleConditionsSubconditionParameterArgs.builder()\n                        .value(\"cpu spike\")\n                        .path(\"summary\")\n                        .build())\n                    .build())\n                .build())\n            .actions(ServiceEventRuleActionsArgs.builder()\n                .annotates(ServiceEventRuleActionsAnnotateArgs.builder()\n                    .value(\"From Terraform\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Service\n    properties:\n      name: Checkout API Service\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${examplePagerdutyEscalationPolicy.id}\n      alertCreation: create_alerts_and_incidents\n  foo:\n    type: pagerduty:ServiceEventRule\n    properties:\n      service: ${example.id}\n      position: 0\n      disabled: true\n      conditions:\n        operator: and\n        subconditions:\n          - operator: contains\n            parameters:\n              - value: disk space\n                path: summary\n      variables:\n        - type: regex\n          name: Src\n          parameters:\n            - value: (.*)\n              path: source\n      actions:\n        annotates:\n          - value: From Terraform\n        extractions:\n          - target: dedup_key\n            source: source\n            regex: (.*)\n          - target: summary\n            template: 'Warning: Disk Space Low on {{Src}}'\n  bar:\n    type: pagerduty:ServiceEventRule\n    properties:\n      service: ${fooPagerdutyService.id}\n      position: 1\n      disabled: true\n      conditions:\n        operator: and\n        subconditions:\n          - operator: contains\n            parameters:\n              - value: cpu spike\n                path: summary\n      actions:\n        annotates:\n          - value: From Terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nService event rules can be imported using using the related `service` id and the `service_event_rule` id separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/serviceEventRule:ServiceEventRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601\n```\n",
            "properties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "required": [
                "service"
            ],
            "inputProperties": {
                "actions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                    "description": "Actions to apply to an event if the conditions match.\n"
                },
                "conditions": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                    "description": "Conditions evaluated to check if an event matches this event rule.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position/index of the rule within the service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service that the rule belongs to.\n"
                },
                "timeFrame": {
                    "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                    "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                    },
                    "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEventRule resources.\n",
                "properties": {
                    "actions": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleActions:ServiceEventRuleActions",
                        "description": "Actions to apply to an event if the conditions match.\n"
                    },
                    "conditions": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleConditions:ServiceEventRuleConditions",
                        "description": "Conditions evaluated to check if an event matches this event rule.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is disabled and would therefore not be evaluated.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position/index of the rule within the service.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The ID of the service that the rule belongs to.\n"
                    },
                    "timeFrame": {
                        "$ref": "#/types/pagerduty:index/ServiceEventRuleTimeFrame:ServiceEventRuleTimeFrame",
                        "description": "Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceEventRuleVariable:ServiceEventRuleVariable"
                        },
                        "description": "Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/serviceIntegration:ServiceIntegration": {
            "description": "A [service integration](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1services~1%7Bid%7D~1integrations/post) is an integration that belongs to a service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [examplePagerdutyTeam.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: examplePagerdutyEscalationPolicy.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"example\", {\n    name: \"Generic API Service Integration\",\n    type: \"generic_events_api_inbound_integration\",\n    service: exampleService.id,\n});\nconst apiv2 = new pagerduty.ServiceIntegration(\"apiv2\", {\n    name: \"API V2\",\n    type: \"events_api_v2_inbound_integration\",\n    service: exampleService.id,\n});\nconst emailX = new pagerduty.ServiceIntegration(\"email_x\", {\n    name: \"Email X\",\n    type: \"generic_email_inbound_integration\",\n    integrationEmail: \"ecommerce@subdomain.pagerduty.com\",\n    service: exampleService.id,\n});\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst datadogServiceIntegration = new pagerduty.ServiceIntegration(\"datadog\", {\n    name: datadog.then(datadog =\u003e datadog.name),\n    service: exampleService.id,\n    vendor: datadog.then(datadog =\u003e datadog.id),\n});\nconst cloudwatch = pagerduty.getVendor({\n    name: \"Cloudwatch\",\n});\nconst cloudwatchServiceIntegration = new pagerduty.ServiceIntegration(\"cloudwatch\", {\n    name: cloudwatch.then(cloudwatch =\u003e cloudwatch.name),\n    service: exampleService.id,\n    vendor: cloudwatch.then(cloudwatch =\u003e cloudwatch.id),\n});\nconst email = pagerduty.getVendor({\n    name: \"Email\",\n});\nconst emailServiceIntegration = new pagerduty.ServiceIntegration(\"email\", {\n    name: email.then(email =\u003e email.name),\n    service: exampleService.id,\n    vendor: email.then(email =\u003e email.id),\n    integrationEmail: \"s1@your_account.pagerduty.com\",\n    emailIncidentCreation: \"use_rules\",\n    emailFilterMode: \"and-rules-email\",\n    emailFilters: [\n        {\n            bodyMode: \"always\",\n            bodyRegex: undefined,\n            fromEmailMode: \"match\",\n            fromEmailRegex: \"(@foo.test*)\",\n            subjectMode: \"match\",\n            subjectRegex: \"(CRITICAL*)\",\n        },\n        {\n            bodyMode: \"always\",\n            bodyRegex: undefined,\n            fromEmailMode: \"match\",\n            fromEmailRegex: \"(@bar.com*)\",\n            subjectMode: \"match\",\n            subjectRegex: \"(CRITICAL*)\",\n        },\n    ],\n    emailParsers: [{\n        action: \"resolve\",\n        matchPredicate: {\n            type: \"any\",\n            predicates: [\n                {\n                    matcher: \"foo\",\n                    part: \"subject\",\n                    type: \"contains\",\n                },\n                {\n                    type: \"not\",\n                    predicates: [{\n                        matcher: \"(bar*)\",\n                        part: \"body\",\n                        type: \"regex\",\n                    }],\n                },\n            ],\n        },\n        valueExtractors: [\n            {\n                endsBefore: \"end\",\n                part: \"subject\",\n                startsAfter: \"start\",\n                type: \"between\",\n                valueName: \"incident_key\",\n            },\n            {\n                endsBefore: \"end\",\n                part: \"subject\",\n                startsAfter: \"start\",\n                type: \"between\",\n                valueName: \"FieldName1\",\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_pagerduty_team[\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_pagerduty_escalation_policy[\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"example\",\n    name=\"Generic API Service Integration\",\n    type=\"generic_events_api_inbound_integration\",\n    service=example_service.id)\napiv2 = pagerduty.ServiceIntegration(\"apiv2\",\n    name=\"API V2\",\n    type=\"events_api_v2_inbound_integration\",\n    service=example_service.id)\nemail_x = pagerduty.ServiceIntegration(\"email_x\",\n    name=\"Email X\",\n    type=\"generic_email_inbound_integration\",\n    integration_email=\"ecommerce@subdomain.pagerduty.com\",\n    service=example_service.id)\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\ndatadog_service_integration = pagerduty.ServiceIntegration(\"datadog\",\n    name=datadog.name,\n    service=example_service.id,\n    vendor=datadog.id)\ncloudwatch = pagerduty.get_vendor(name=\"Cloudwatch\")\ncloudwatch_service_integration = pagerduty.ServiceIntegration(\"cloudwatch\",\n    name=cloudwatch.name,\n    service=example_service.id,\n    vendor=cloudwatch.id)\nemail = pagerduty.get_vendor(name=\"Email\")\nemail_service_integration = pagerduty.ServiceIntegration(\"email\",\n    name=email.name,\n    service=example_service.id,\n    vendor=email.id,\n    integration_email=\"s1@your_account.pagerduty.com\",\n    email_incident_creation=\"use_rules\",\n    email_filter_mode=\"and-rules-email\",\n    email_filters=[\n        {\n            \"body_mode\": \"always\",\n            \"body_regex\": None,\n            \"from_email_mode\": \"match\",\n            \"from_email_regex\": \"(@foo.test*)\",\n            \"subject_mode\": \"match\",\n            \"subject_regex\": \"(CRITICAL*)\",\n        },\n        {\n            \"body_mode\": \"always\",\n            \"body_regex\": None,\n            \"from_email_mode\": \"match\",\n            \"from_email_regex\": \"(@bar.com*)\",\n            \"subject_mode\": \"match\",\n            \"subject_regex\": \"(CRITICAL*)\",\n        },\n    ],\n    email_parsers=[{\n        \"action\": \"resolve\",\n        \"match_predicate\": {\n            \"type\": \"any\",\n            \"predicates\": [\n                {\n                    \"matcher\": \"foo\",\n                    \"part\": \"subject\",\n                    \"type\": \"contains\",\n                },\n                {\n                    \"type\": \"not\",\n                    \"predicates\": [{\n                        \"matcher\": \"(bar*)\",\n                        \"part\": \"body\",\n                        \"type\": \"regex\",\n                    }],\n                },\n            ],\n        },\n        \"value_extractors\": [\n            {\n                \"ends_before\": \"end\",\n                \"part\": \"subject\",\n                \"starts_after\": \"start\",\n                \"type\": \"between\",\n                \"value_name\": \"incident_key\",\n            },\n            {\n                \"ends_before\": \"end\",\n                \"part\": \"subject\",\n                \"starts_after\": \"start\",\n                \"type\": \"between\",\n                \"value_name\": \"FieldName1\",\n            },\n        ],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            examplePagerdutyTeam.Id,\n        },\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = examplePagerdutyEscalationPolicy.Id,\n    });\n\n    var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"example\", new()\n    {\n        Name = \"Generic API Service Integration\",\n        Type = \"generic_events_api_inbound_integration\",\n        Service = exampleService.Id,\n    });\n\n    var apiv2 = new Pagerduty.ServiceIntegration(\"apiv2\", new()\n    {\n        Name = \"API V2\",\n        Type = \"events_api_v2_inbound_integration\",\n        Service = exampleService.Id,\n    });\n\n    var emailX = new Pagerduty.ServiceIntegration(\"email_x\", new()\n    {\n        Name = \"Email X\",\n        Type = \"generic_email_inbound_integration\",\n        IntegrationEmail = \"ecommerce@subdomain.pagerduty.com\",\n        Service = exampleService.Id,\n    });\n\n    var datadog = Pagerduty.GetVendor.Invoke(new()\n    {\n        Name = \"Datadog\",\n    });\n\n    var datadogServiceIntegration = new Pagerduty.ServiceIntegration(\"datadog\", new()\n    {\n        Name = datadog.Apply(getVendorResult =\u003e getVendorResult.Name),\n        Service = exampleService.Id,\n        Vendor = datadog.Apply(getVendorResult =\u003e getVendorResult.Id),\n    });\n\n    var cloudwatch = Pagerduty.GetVendor.Invoke(new()\n    {\n        Name = \"Cloudwatch\",\n    });\n\n    var cloudwatchServiceIntegration = new Pagerduty.ServiceIntegration(\"cloudwatch\", new()\n    {\n        Name = cloudwatch.Apply(getVendorResult =\u003e getVendorResult.Name),\n        Service = exampleService.Id,\n        Vendor = cloudwatch.Apply(getVendorResult =\u003e getVendorResult.Id),\n    });\n\n    var email = Pagerduty.GetVendor.Invoke(new()\n    {\n        Name = \"Email\",\n    });\n\n    var emailServiceIntegration = new Pagerduty.ServiceIntegration(\"email\", new()\n    {\n        Name = email.Apply(getVendorResult =\u003e getVendorResult.Name),\n        Service = exampleService.Id,\n        Vendor = email.Apply(getVendorResult =\u003e getVendorResult.Id),\n        IntegrationEmail = \"s1@your_account.pagerduty.com\",\n        EmailIncidentCreation = \"use_rules\",\n        EmailFilterMode = \"and-rules-email\",\n        EmailFilters = new[]\n        {\n            new Pagerduty.Inputs.ServiceIntegrationEmailFilterArgs\n            {\n                BodyMode = \"always\",\n                BodyRegex = null,\n                FromEmailMode = \"match\",\n                FromEmailRegex = \"(@foo.test*)\",\n                SubjectMode = \"match\",\n                SubjectRegex = \"(CRITICAL*)\",\n            },\n            new Pagerduty.Inputs.ServiceIntegrationEmailFilterArgs\n            {\n                BodyMode = \"always\",\n                BodyRegex = null,\n                FromEmailMode = \"match\",\n                FromEmailRegex = \"(@bar.com*)\",\n                SubjectMode = \"match\",\n                SubjectRegex = \"(CRITICAL*)\",\n            },\n        },\n        EmailParsers = new[]\n        {\n            new Pagerduty.Inputs.ServiceIntegrationEmailParserArgs\n            {\n                Action = \"resolve\",\n                MatchPredicate = new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicateArgs\n                {\n                    Type = \"any\",\n                    Predicates = new[]\n                    {\n                        new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicateArgs\n                        {\n                            Matcher = \"foo\",\n                            Part = \"subject\",\n                            Type = \"contains\",\n                        },\n                        new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicateArgs\n                        {\n                            Type = \"not\",\n                            Predicates = new[]\n                            {\n                                new Pagerduty.Inputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs\n                                {\n                                    Matcher = \"(bar*)\",\n                                    Part = \"body\",\n                                    Type = \"regex\",\n                                },\n                            },\n                        },\n                    },\n                },\n                ValueExtractors = new[]\n                {\n                    new Pagerduty.Inputs.ServiceIntegrationEmailParserValueExtractorArgs\n                    {\n                        EndsBefore = \"end\",\n                        Part = \"subject\",\n                        StartsAfter = \"start\",\n                        Type = \"between\",\n                        ValueName = \"incident_key\",\n                    },\n                    new Pagerduty.Inputs.ServiceIntegrationEmailParserValueExtractorArgs\n                    {\n                        EndsBefore = \"end\",\n                        Part = \"subject\",\n                        StartsAfter = \"start\",\n                        Type = \"between\",\n                        ValueName = \"FieldName1\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texamplePagerdutyTeam.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(examplePagerdutyEscalationPolicy.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"example\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(\"Generic API Service Integration\"),\n\t\t\tType:    pulumi.String(\"generic_events_api_inbound_integration\"),\n\t\t\tService: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"apiv2\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(\"API V2\"),\n\t\t\tType:    pulumi.String(\"events_api_v2_inbound_integration\"),\n\t\t\tService: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"email_x\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:             pulumi.String(\"Email X\"),\n\t\t\tType:             pulumi.String(\"generic_email_inbound_integration\"),\n\t\t\tIntegrationEmail: pulumi.String(\"ecommerce@subdomain.pagerduty.com\"),\n\t\t\tService:          exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatadog, err := pagerduty.GetVendor(ctx, \u0026pagerduty.GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"datadog\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(datadog.Name),\n\t\t\tService: exampleService.ID(),\n\t\t\tVendor:  pulumi.String(datadog.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcloudwatch, err := pagerduty.GetVendor(ctx, \u0026pagerduty.GetVendorArgs{\n\t\t\tName: \"Cloudwatch\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"cloudwatch\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(cloudwatch.Name),\n\t\t\tService: exampleService.ID(),\n\t\t\tVendor:  pulumi.String(cloudwatch.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temail, err := pagerduty.GetVendor(ctx, \u0026pagerduty.GetVendorArgs{\n\t\t\tName: \"Email\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"email\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:                  pulumi.String(email.Name),\n\t\t\tService:               exampleService.ID(),\n\t\t\tVendor:                pulumi.String(email.Id),\n\t\t\tIntegrationEmail:      pulumi.String(\"s1@your_account.pagerduty.com\"),\n\t\t\tEmailIncidentCreation: pulumi.String(\"use_rules\"),\n\t\t\tEmailFilterMode:       pulumi.String(\"and-rules-email\"),\n\t\t\tEmailFilters: pagerduty.ServiceIntegrationEmailFilterArray{\n\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailFilterArgs{\n\t\t\t\t\tBodyMode:       pulumi.String(\"always\"),\n\t\t\t\t\tBodyRegex:      nil,\n\t\t\t\t\tFromEmailMode:  pulumi.String(\"match\"),\n\t\t\t\t\tFromEmailRegex: pulumi.String(\"(@foo.test*)\"),\n\t\t\t\t\tSubjectMode:    pulumi.String(\"match\"),\n\t\t\t\t\tSubjectRegex:   pulumi.String(\"(CRITICAL*)\"),\n\t\t\t\t},\n\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailFilterArgs{\n\t\t\t\t\tBodyMode:       pulumi.String(\"always\"),\n\t\t\t\t\tBodyRegex:      nil,\n\t\t\t\t\tFromEmailMode:  pulumi.String(\"match\"),\n\t\t\t\t\tFromEmailRegex: pulumi.String(\"(@bar.com*)\"),\n\t\t\t\t\tSubjectMode:    pulumi.String(\"match\"),\n\t\t\t\t\tSubjectRegex:   pulumi.String(\"(CRITICAL*)\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEmailParsers: pagerduty.ServiceIntegrationEmailParserArray{\n\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserArgs{\n\t\t\t\t\tAction: pulumi.String(\"resolve\"),\n\t\t\t\t\tMatchPredicate: \u0026pagerduty.ServiceIntegrationEmailParserMatchPredicateArgs{\n\t\t\t\t\t\tType: pulumi.String(\"any\"),\n\t\t\t\t\t\tPredicates: pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicateArray{\n\t\t\t\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicateArgs{\n\t\t\t\t\t\t\t\tMatcher: pulumi.String(\"foo\"),\n\t\t\t\t\t\t\t\tPart:    pulumi.String(\"subject\"),\n\t\t\t\t\t\t\t\tType:    pulumi.String(\"contains\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicateArgs{\n\t\t\t\t\t\t\t\tType: pulumi.String(\"not\"),\n\t\t\t\t\t\t\t\tPredicates: pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray{\n\t\t\t\t\t\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs{\n\t\t\t\t\t\t\t\t\t\tMatcher: pulumi.String(\"(bar*)\"),\n\t\t\t\t\t\t\t\t\t\tPart:    pulumi.String(\"body\"),\n\t\t\t\t\t\t\t\t\t\tType:    pulumi.String(\"regex\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tValueExtractors: pagerduty.ServiceIntegrationEmailParserValueExtractorArray{\n\t\t\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserValueExtractorArgs{\n\t\t\t\t\t\t\tEndsBefore:  pulumi.String(\"end\"),\n\t\t\t\t\t\t\tPart:        pulumi.String(\"subject\"),\n\t\t\t\t\t\t\tStartsAfter: pulumi.String(\"start\"),\n\t\t\t\t\t\t\tType:        pulumi.String(\"between\"),\n\t\t\t\t\t\t\tValueName:   pulumi.String(\"incident_key\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.ServiceIntegrationEmailParserValueExtractorArgs{\n\t\t\t\t\t\t\tEndsBefore:  pulumi.String(\"end\"),\n\t\t\t\t\t\t\tPart:        pulumi.String(\"subject\"),\n\t\t\t\t\t\t\tStartsAfter: pulumi.String(\"start\"),\n\t\t\t\t\t\t\tType:        pulumi.String(\"between\"),\n\t\t\t\t\t\t\tValueName:   pulumi.String(\"FieldName1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.ServiceIntegration;\nimport com.pulumi.pagerduty.ServiceIntegrationArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetVendorArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIntegrationEmailFilterArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIntegrationEmailParserArgs;\nimport com.pulumi.pagerduty.inputs.ServiceIntegrationEmailParserMatchPredicateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(examplePagerdutyTeam.id())\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(examplePagerdutyEscalationPolicy.id())\n            .build());\n\n        var exampleServiceIntegration = new ServiceIntegration(\"exampleServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(\"Generic API Service Integration\")\n            .type(\"generic_events_api_inbound_integration\")\n            .service(exampleService.id())\n            .build());\n\n        var apiv2 = new ServiceIntegration(\"apiv2\", ServiceIntegrationArgs.builder()\n            .name(\"API V2\")\n            .type(\"events_api_v2_inbound_integration\")\n            .service(exampleService.id())\n            .build());\n\n        var emailX = new ServiceIntegration(\"emailX\", ServiceIntegrationArgs.builder()\n            .name(\"Email X\")\n            .type(\"generic_email_inbound_integration\")\n            .integrationEmail(\"ecommerce@subdomain.pagerduty.com\")\n            .service(exampleService.id())\n            .build());\n\n        final var datadog = PagerdutyFunctions.getVendor(GetVendorArgs.builder()\n            .name(\"Datadog\")\n            .build());\n\n        var datadogServiceIntegration = new ServiceIntegration(\"datadogServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(datadog.applyValue(getVendorResult -\u003e getVendorResult.name()))\n            .service(exampleService.id())\n            .vendor(datadog.applyValue(getVendorResult -\u003e getVendorResult.id()))\n            .build());\n\n        final var cloudwatch = PagerdutyFunctions.getVendor(GetVendorArgs.builder()\n            .name(\"Cloudwatch\")\n            .build());\n\n        var cloudwatchServiceIntegration = new ServiceIntegration(\"cloudwatchServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(cloudwatch.applyValue(getVendorResult -\u003e getVendorResult.name()))\n            .service(exampleService.id())\n            .vendor(cloudwatch.applyValue(getVendorResult -\u003e getVendorResult.id()))\n            .build());\n\n        final var email = PagerdutyFunctions.getVendor(GetVendorArgs.builder()\n            .name(\"Email\")\n            .build());\n\n        var emailServiceIntegration = new ServiceIntegration(\"emailServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(email.applyValue(getVendorResult -\u003e getVendorResult.name()))\n            .service(exampleService.id())\n            .vendor(email.applyValue(getVendorResult -\u003e getVendorResult.id()))\n            .integrationEmail(\"s1@your_account.pagerduty.com\")\n            .emailIncidentCreation(\"use_rules\")\n            .emailFilterMode(\"and-rules-email\")\n            .emailFilters(            \n                ServiceIntegrationEmailFilterArgs.builder()\n                    .bodyMode(\"always\")\n                    .bodyRegex(null)\n                    .fromEmailMode(\"match\")\n                    .fromEmailRegex(\"(@foo.test*)\")\n                    .subjectMode(\"match\")\n                    .subjectRegex(\"(CRITICAL*)\")\n                    .build(),\n                ServiceIntegrationEmailFilterArgs.builder()\n                    .bodyMode(\"always\")\n                    .bodyRegex(null)\n                    .fromEmailMode(\"match\")\n                    .fromEmailRegex(\"(@bar.com*)\")\n                    .subjectMode(\"match\")\n                    .subjectRegex(\"(CRITICAL*)\")\n                    .build())\n            .emailParsers(ServiceIntegrationEmailParserArgs.builder()\n                .action(\"resolve\")\n                .matchPredicate(ServiceIntegrationEmailParserMatchPredicateArgs.builder()\n                    .type(\"any\")\n                    .predicates(                    \n                        ServiceIntegrationEmailParserMatchPredicatePredicateArgs.builder()\n                            .matcher(\"foo\")\n                            .part(\"subject\")\n                            .type(\"contains\")\n                            .build(),\n                        ServiceIntegrationEmailParserMatchPredicatePredicateArgs.builder()\n                            .type(\"not\")\n                            .predicates(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs.builder()\n                                .matcher(\"(bar*)\")\n                                .part(\"body\")\n                                .type(\"regex\")\n                                .build())\n                            .build())\n                    .build())\n                .valueExtractors(                \n                    ServiceIntegrationEmailParserValueExtractorArgs.builder()\n                        .endsBefore(\"end\")\n                        .part(\"subject\")\n                        .startsAfter(\"start\")\n                        .type(\"between\")\n                        .valueName(\"incident_key\")\n                        .build(),\n                    ServiceIntegrationEmailParserValueExtractorArgs.builder()\n                        .endsBefore(\"end\")\n                        .part(\"subject\")\n                        .startsAfter(\"start\")\n                        .type(\"between\")\n                        .valueName(\"FieldName1\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${examplePagerdutyTeam.id}\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${examplePagerdutyEscalationPolicy.id}\n  exampleServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: example\n    properties:\n      name: Generic API Service Integration\n      type: generic_events_api_inbound_integration\n      service: ${exampleService.id}\n  apiv2:\n    type: pagerduty:ServiceIntegration\n    properties:\n      name: API V2\n      type: events_api_v2_inbound_integration\n      service: ${exampleService.id}\n  emailX:\n    type: pagerduty:ServiceIntegration\n    name: email_x\n    properties:\n      name: Email X\n      type: generic_email_inbound_integration\n      integrationEmail: ecommerce@subdomain.pagerduty.com\n      service: ${exampleService.id}\n  datadogServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: datadog\n    properties:\n      name: ${datadog.name}\n      service: ${exampleService.id}\n      vendor: ${datadog.id}\n  cloudwatchServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: cloudwatch\n    properties:\n      name: ${cloudwatch.name}\n      service: ${exampleService.id}\n      vendor: ${cloudwatch.id}\n  emailServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: email\n    properties:\n      name: ${email.name}\n      service: ${exampleService.id}\n      vendor: ${email.id}\n      integrationEmail: s1@your_account.pagerduty.com\n      emailIncidentCreation: use_rules\n      emailFilterMode: and-rules-email\n      emailFilters:\n        - bodyMode: always\n          bodyRegex: null\n          fromEmailMode: match\n          fromEmailRegex: (@foo.test*)\n          subjectMode: match\n          subjectRegex: (CRITICAL*)\n        - bodyMode: always\n          bodyRegex: null\n          fromEmailMode: match\n          fromEmailRegex: (@bar.com*)\n          subjectMode: match\n          subjectRegex: (CRITICAL*)\n      emailParsers:\n        - action: resolve\n          matchPredicate:\n            type: any\n            predicates:\n              - matcher: foo\n                part: subject\n                type: contains\n              - type: not\n                predicates:\n                  - matcher: (bar*)\n                    part: body\n                    type: regex\n          valueExtractors:\n            - endsBefore: end\n              part: subject\n              startsAfter: start\n              type: between\n              valueName: incident_key\n            - endsBefore: end\n              part: subject\n              startsAfter: start\n              type: between\n              valueName: FieldName1\nvariables:\n  datadog:\n    fn::invoke:\n      Function: pagerduty:getVendor\n      Arguments:\n        name: Datadog\n  cloudwatch:\n    fn::invoke:\n      Function: pagerduty:getVendor\n      Arguments:\n        name: Cloudwatch\n  email:\n    fn::invoke:\n      Function: pagerduty:getVendor\n      Arguments:\n        name: Email\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServices can be imported using their related `service` id and service integration `id` separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/serviceIntegration:ServiceIntegration main PLSSSSS.PLIIIII\n```\n",
            "properties": {
                "emailFilterMode": {
                    "type": "string",
                    "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                },
                "emailFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                    }
                },
                "emailIncidentCreation": {
                    "type": "string",
                    "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                },
                "emailParsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                    }
                },
                "emailParsingFallback": {
                    "type": "string",
                    "description": "Can be `open_new_incident` or `discard`.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "(Deprecated) This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n\n**Note:** This is meant for **generic** service integrations.\nTo integrate with a **vendor** (e.g. Datadog or Amazon Cloudwatch) use the `vendor` field instead.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n"
                }
            },
            "required": [
                "emailFilters",
                "emailFilterMode",
                "emailIncidentCreation",
                "emailParsingFallback",
                "htmlUrl",
                "integrationEmail",
                "integrationKey",
                "name",
                "service",
                "type",
                "vendor"
            ],
            "inputProperties": {
                "emailFilterMode": {
                    "type": "string",
                    "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                },
                "emailFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                    },
                    "willReplaceOnChanges": true
                },
                "emailIncidentCreation": {
                    "type": "string",
                    "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                },
                "emailParsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                    }
                },
                "emailParsingFallback": {
                    "type": "string",
                    "description": "Can be `open_new_incident` or `discard`.\n"
                },
                "integrationEmail": {
                    "type": "string",
                    "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "(Deprecated) This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The ID of the service the integration should belong to.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n\n**Note:** This is meant for **generic** service integrations.\nTo integrate with a **vendor** (e.g. Datadog or Amazon Cloudwatch) use the `vendor` field instead.\n",
                    "willReplaceOnChanges": true
                },
                "vendor": {
                    "type": "string",
                    "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceIntegration resources.\n",
                "properties": {
                    "emailFilterMode": {
                        "type": "string",
                        "description": "Mode of Emails Filters feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#configure-a-regex-filter)). Can be `all-email`, `or-rules-email` or `and-rules-email`.\n"
                    },
                    "emailFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailFilter:ServiceIntegrationEmailFilter"
                        },
                        "willReplaceOnChanges": true
                    },
                    "emailIncidentCreation": {
                        "type": "string",
                        "description": "Behaviour of Email Management feature ([explained in PD docs](https://support.pagerduty.com/docs/email-management-filters-and-rules#control-when-a-new-incident-or-alert-is-triggered)). Can be `on_new_email`, `on_new_email_subject`, `only_if_no_open_incidents` or `use_rules`.\n"
                    },
                    "emailParsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/ServiceIntegrationEmailParser:ServiceIntegrationEmailParser"
                        }
                    },
                    "emailParsingFallback": {
                        "type": "string",
                        "description": "Can be `open_new_incident` or `discard`.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "integrationEmail": {
                        "type": "string",
                        "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "(Deprecated) This is the unique key used to route events to this integration when received via the PagerDuty Events API.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service integration.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The ID of the service the integration should belong to.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The service type. Can be:\n`aws_cloudwatch_inbound_integration`,\n`cloudkick_inbound_integration`,\n`event_transformer_api_inbound_integration`,\n`events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),\n`generic_email_inbound_integration`,\n`generic_events_api_inbound_integration`,\n`keynote_inbound_integration`,\n`nagios_inbound_integration`,\n`pingdom_inbound_integration`or `sql_monitor_inbound_integration`.\n\n**Note:** This is meant for **generic** service integrations.\nTo integrate with a **vendor** (e.g. Datadog or Amazon Cloudwatch) use the `vendor` field instead.\n",
                        "willReplaceOnChanges": true
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/slackConnection:SlackConnection": {
            "description": "A [slack connection](https://developer.pagerduty.com/api-reference/YXBpOjExMjA5NTQ0-pager-duty-slack-integration-api) allows you to connect a workspace in Slack to a PagerDuty service or team which allows you to acknowledge and resolve PagerDuty incidents from the Slack user interface.\n\n**NOTES for using this resource:**\n* To first use this resource you will need to [map your PagerDuty account to a valid Slack Workspace](https://support.pagerduty.com/docs/slack-integration-guide#integration-walkthrough). *This can only be done through the PagerDuty UI.*\n* This resource requires a PagerDuty [user-level API key](https://support.pagerduty.com/docs/generating-api-keys#section-generating-a-personal-rest-api-key). This can be set as the `user_token` on the provider tag or as the `PAGERDUTY_USER_TOKEN` environment variable.\n* This resource is for configuring Slack V2 Next Generation connections. If you configured your Slack integration (V1 or V2) prior to August 10, 2021, you may migrate to the Slack V2 Next Generation update using this [migration instructions](https://support.pagerduty.com/docs/slack-integration-guide#migrate-to-slack-v2-next-generation), but if you configured your Slack integration after that date, you will have access to the update out of the box.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.Team(\"foo\", {name: \"Team Foo\"});\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst fooSlackConnection = new pagerduty.SlackConnection(\"foo\", {\n    sourceId: foo.id,\n    sourceType: \"team_reference\",\n    workspaceId: \"T02A123LV1A\",\n    channelId: \"C02CABCDAC9\",\n    notificationType: \"responder\",\n    configs: [{\n        events: [\n            \"incident.triggered\",\n            \"incident.acknowledged\",\n            \"incident.escalated\",\n            \"incident.resolved\",\n            \"incident.reassigned\",\n            \"incident.annotated\",\n            \"incident.unacknowledged\",\n            \"incident.delegated\",\n            \"incident.priority_updated\",\n            \"incident.responder.added\",\n            \"incident.responder.replied\",\n            \"incident.status_update_published\",\n            \"incident.reopened\",\n        ],\n        priorities: [p1.then(p1 =\u003e p1.id)],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.Team(\"foo\", name=\"Team Foo\")\np1 = pagerduty.get_priority(name=\"P1\")\nfoo_slack_connection = pagerduty.SlackConnection(\"foo\",\n    source_id=foo.id,\n    source_type=\"team_reference\",\n    workspace_id=\"T02A123LV1A\",\n    channel_id=\"C02CABCDAC9\",\n    notification_type=\"responder\",\n    configs=[{\n        \"events\": [\n            \"incident.triggered\",\n            \"incident.acknowledged\",\n            \"incident.escalated\",\n            \"incident.resolved\",\n            \"incident.reassigned\",\n            \"incident.annotated\",\n            \"incident.unacknowledged\",\n            \"incident.delegated\",\n            \"incident.priority_updated\",\n            \"incident.responder.added\",\n            \"incident.responder.replied\",\n            \"incident.status_update_published\",\n            \"incident.reopened\",\n        ],\n        \"priorities\": [p1.id],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.Team(\"foo\", new()\n    {\n        Name = \"Team Foo\",\n    });\n\n    var p1 = Pagerduty.GetPriority.Invoke(new()\n    {\n        Name = \"P1\",\n    });\n\n    var fooSlackConnection = new Pagerduty.SlackConnection(\"foo\", new()\n    {\n        SourceId = foo.Id,\n        SourceType = \"team_reference\",\n        WorkspaceId = \"T02A123LV1A\",\n        ChannelId = \"C02CABCDAC9\",\n        NotificationType = \"responder\",\n        Configs = new[]\n        {\n            new Pagerduty.Inputs.SlackConnectionConfigArgs\n            {\n                Events = new[]\n                {\n                    \"incident.triggered\",\n                    \"incident.acknowledged\",\n                    \"incident.escalated\",\n                    \"incident.resolved\",\n                    \"incident.reassigned\",\n                    \"incident.annotated\",\n                    \"incident.unacknowledged\",\n                    \"incident.delegated\",\n                    \"incident.priority_updated\",\n                    \"incident.responder.added\",\n                    \"incident.responder.replied\",\n                    \"incident.status_update_published\",\n                    \"incident.reopened\",\n                },\n                Priorities = new[]\n                {\n                    p1.Apply(getPriorityResult =\u003e getPriorityResult.Id),\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := pagerduty.NewTeam(ctx, \"foo\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Team Foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026pagerduty.GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewSlackConnection(ctx, \"foo\", \u0026pagerduty.SlackConnectionArgs{\n\t\t\tSourceId:         foo.ID(),\n\t\t\tSourceType:       pulumi.String(\"team_reference\"),\n\t\t\tWorkspaceId:      pulumi.String(\"T02A123LV1A\"),\n\t\t\tChannelId:        pulumi.String(\"C02CABCDAC9\"),\n\t\t\tNotificationType: pulumi.String(\"responder\"),\n\t\t\tConfigs: pagerduty.SlackConnectionConfigArray{\n\t\t\t\t\u0026pagerduty.SlackConnectionConfigArgs{\n\t\t\t\t\tEvents: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"incident.triggered\"),\n\t\t\t\t\t\tpulumi.String(\"incident.acknowledged\"),\n\t\t\t\t\t\tpulumi.String(\"incident.escalated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.resolved\"),\n\t\t\t\t\t\tpulumi.String(\"incident.reassigned\"),\n\t\t\t\t\t\tpulumi.String(\"incident.annotated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.unacknowledged\"),\n\t\t\t\t\t\tpulumi.String(\"incident.delegated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.priority_updated\"),\n\t\t\t\t\t\tpulumi.String(\"incident.responder.added\"),\n\t\t\t\t\t\tpulumi.String(\"incident.responder.replied\"),\n\t\t\t\t\t\tpulumi.String(\"incident.status_update_published\"),\n\t\t\t\t\t\tpulumi.String(\"incident.reopened\"),\n\t\t\t\t\t},\n\t\t\t\t\tPriorities: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(p1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetPriorityArgs;\nimport com.pulumi.pagerduty.SlackConnection;\nimport com.pulumi.pagerduty.SlackConnectionArgs;\nimport com.pulumi.pagerduty.inputs.SlackConnectionConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Team(\"foo\", TeamArgs.builder()\n            .name(\"Team Foo\")\n            .build());\n\n        final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()\n            .name(\"P1\")\n            .build());\n\n        var fooSlackConnection = new SlackConnection(\"fooSlackConnection\", SlackConnectionArgs.builder()\n            .sourceId(foo.id())\n            .sourceType(\"team_reference\")\n            .workspaceId(\"T02A123LV1A\")\n            .channelId(\"C02CABCDAC9\")\n            .notificationType(\"responder\")\n            .configs(SlackConnectionConfigArgs.builder()\n                .events(                \n                    \"incident.triggered\",\n                    \"incident.acknowledged\",\n                    \"incident.escalated\",\n                    \"incident.resolved\",\n                    \"incident.reassigned\",\n                    \"incident.annotated\",\n                    \"incident.unacknowledged\",\n                    \"incident.delegated\",\n                    \"incident.priority_updated\",\n                    \"incident.responder.added\",\n                    \"incident.responder.replied\",\n                    \"incident.status_update_published\",\n                    \"incident.reopened\")\n                .priorities(p1.applyValue(getPriorityResult -\u003e getPriorityResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:Team\n    properties:\n      name: Team Foo\n  fooSlackConnection:\n    type: pagerduty:SlackConnection\n    name: foo\n    properties:\n      sourceId: ${foo.id}\n      sourceType: team_reference\n      workspaceId: T02A123LV1A\n      channelId: C02CABCDAC9\n      notificationType: responder\n      configs:\n        - events:\n            - incident.triggered\n            - incident.acknowledged\n            - incident.escalated\n            - incident.resolved\n            - incident.reassigned\n            - incident.annotated\n            - incident.unacknowledged\n            - incident.delegated\n            - incident.priority_updated\n            - incident.responder.added\n            - incident.responder.replied\n            - incident.status_update_published\n            - incident.reopened\n          priorities:\n            - ${p1.id}\nvariables:\n  p1:\n    fn::invoke:\n      Function: pagerduty:getPriority\n      Arguments:\n        name: P1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSlack connections can be imported using the related `workspace` ID and the `slack_connection` ID separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/slackConnection:SlackConnection main T02A123LV1A.PUABCDL\n```\n",
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "The ID of a Slack channel in the workspace.\n"
                },
                "channelName": {
                    "type": "string",
                    "description": "Name of the Slack channel in Slack connection.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                    },
                    "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                },
                "sourceName": {
                    "type": "string",
                    "description": "Name of the source (team or service) in Slack connection.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The slack team (workspace) ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                }
            },
            "required": [
                "channelId",
                "channelName",
                "configs",
                "notificationType",
                "sourceId",
                "sourceName",
                "sourceType",
                "workspaceId"
            ],
            "inputProperties": {
                "channelId": {
                    "type": "string",
                    "description": "The ID of a Slack channel in the workspace.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                    },
                    "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The slack team (workspace) ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                }
            },
            "requiredInputs": [
                "channelId",
                "configs",
                "notificationType",
                "sourceId",
                "sourceType",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SlackConnection resources.\n",
                "properties": {
                    "channelId": {
                        "type": "string",
                        "description": "The ID of a Slack channel in the workspace.\n"
                    },
                    "channelName": {
                        "type": "string",
                        "description": "Name of the Slack channel in Slack connection.\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/SlackConnectionConfig:SlackConnectionConfig"
                        },
                        "description": "Configuration options for the Slack connection that provide options to filter events.\n"
                    },
                    "notificationType": {
                        "type": "string",
                        "description": "Type of notification. Either `responder` or `stakeholder`.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The ID of the source in PagerDuty. Valid sources are services or teams.\n"
                    },
                    "sourceName": {
                        "type": "string",
                        "description": "Name of the source (team or service) in Slack connection.\n"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The type of the source. Either `team_reference` or `service_reference`.\n"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The slack team (workspace) ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/tag:Tag": {
            "description": "A [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIxOA-create-a-tag) is applied to Escalation Policies, Teams or Users and can be used to filter them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Tag(\"example\", {label: \"Product\"});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Tag(\"example\", label=\"Product\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Tag(\"example\", new()\n    {\n        Label = \"Product\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewTag(ctx, \"example\", \u0026pagerduty.TagArgs{\n\t\t\tLabel: pulumi.String(\"Product\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Tag;\nimport com.pulumi.pagerduty.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tag(\"example\", TagArgs.builder()\n            .label(\"Product\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Tag\n    properties:\n      label: Product\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTags can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/tag:Tag main PLBP09X\n```\n",
            "properties": {
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the tag.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.\n"
                }
            },
            "required": [
                "htmlUrl",
                "label",
                "summary"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "The label of the tag.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the tag.\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/tagAssignment:TagAssignment": {
            "description": "A [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEwMA-assign-tags) is applied to Escalation Policies, Teams or Users and can be used to filter them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.Tag(\"example\", {label: \"API\"});\nconst engteam = new pagerduty.Team(\"engteam\", {name: \"Engineering\"});\nconst exampleTagAssignment = new pagerduty.TagAssignment(\"example\", {\n    tagId: example.id,\n    entityType: \"teams\",\n    entityId: engteam.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.Tag(\"example\", label=\"API\")\nengteam = pagerduty.Team(\"engteam\", name=\"Engineering\")\nexample_tag_assignment = pagerduty.TagAssignment(\"example\",\n    tag_id=example.id,\n    entity_type=\"teams\",\n    entity_id=engteam.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.Tag(\"example\", new()\n    {\n        Label = \"API\",\n    });\n\n    var engteam = new Pagerduty.Team(\"engteam\", new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var exampleTagAssignment = new Pagerduty.TagAssignment(\"example\", new()\n    {\n        TagId = example.Id,\n        EntityType = \"teams\",\n        EntityId = engteam.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewTag(ctx, \"example\", \u0026pagerduty.TagArgs{\n\t\t\tLabel: pulumi.String(\"API\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengteam, err := pagerduty.NewTeam(ctx, \"engteam\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTagAssignment(ctx, \"example\", \u0026pagerduty.TagAssignmentArgs{\n\t\t\tTagId:      example.ID(),\n\t\t\tEntityType: pulumi.String(\"teams\"),\n\t\t\tEntityId:   engteam.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Tag;\nimport com.pulumi.pagerduty.TagArgs;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.TagAssignment;\nimport com.pulumi.pagerduty.TagAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tag(\"example\", TagArgs.builder()\n            .label(\"API\")\n            .build());\n\n        var engteam = new Team(\"engteam\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var exampleTagAssignment = new TagAssignment(\"exampleTagAssignment\", TagAssignmentArgs.builder()\n            .tagId(example.id())\n            .entityType(\"teams\")\n            .entityId(engteam.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:Tag\n    properties:\n      label: API\n  engteam:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n  exampleTagAssignment:\n    type: pagerduty:TagAssignment\n    name: example\n    properties:\n      tagId: ${example.id}\n      entityType: teams\n      entityId: ${engteam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTag assignments can be imported using the `id` which is constructed by taking the `entity` Type, `entity` ID and the `tag` ID separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/tagAssignment:TagAssignment main users.P7HHMVK.PYC7IQQ\n```\n",
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the tag.\n"
                }
            },
            "required": [
                "entityId",
                "entityType",
                "tagId"
            ],
            "inputProperties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the tag.\n"
                }
            },
            "requiredInputs": [
                "entityId",
                "entityType",
                "tagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagAssignment resources.\n",
                "properties": {
                    "entityId": {
                        "type": "string",
                        "description": "The ID of the entity.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "Type of entity in the tag assignment. Possible values can be `users`, `teams`, and `escalation_policies`.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "The ID of the tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/team:Team": {
            "description": "A [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMg-create-a-team) is a collection of users and escalation policies that represent a group of people within an organization.\n\nThe account must have the `teams` ability to use the following resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst parent = new pagerduty.Team(\"parent\", {\n    name: \"Product Development\",\n    description: \"Product and Engineering\",\n});\nconst example = new pagerduty.Team(\"example\", {\n    name: \"Engineering\",\n    description: \"All engineering\",\n    parent: parent.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nparent = pagerduty.Team(\"parent\",\n    name=\"Product Development\",\n    description=\"Product and Engineering\")\nexample = pagerduty.Team(\"example\",\n    name=\"Engineering\",\n    description=\"All engineering\",\n    parent=parent.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var parent = new Pagerduty.Team(\"parent\", new()\n    {\n        Name = \"Product Development\",\n        Description = \"Product and Engineering\",\n    });\n\n    var example = new Pagerduty.Team(\"example\", new()\n    {\n        Name = \"Engineering\",\n        Description = \"All engineering\",\n        Parent = parent.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparent, err := pagerduty.NewTeam(ctx, \"parent\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"Product Development\"),\n\t\t\tDescription: pulumi.String(\"Product and Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTeam(ctx, \"example\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"Engineering\"),\n\t\t\tDescription: pulumi.String(\"All engineering\"),\n\t\t\tParent:      parent.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var parent = new Team(\"parent\", TeamArgs.builder()\n            .name(\"Product Development\")\n            .description(\"Product and Engineering\")\n            .build());\n\n        var example = new Team(\"example\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .description(\"All engineering\")\n            .parent(parent.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  parent:\n    type: pagerduty:Team\n    properties:\n      name: Product Development\n      description: Product and Engineering\n  example:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n      description: All engineering\n      parent: ${parent.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTeams can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/team:Team main PLBP09X\n```\n",
            "properties": {
                "defaultRole": {
                    "type": "string",
                    "description": "The team is private if the value is \"none\", or public if it is \"manager\" (the default permissions for a non-member of the team are either \"none\", or their base role up until \"manager\").\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                }
            },
            "required": [
                "defaultRole",
                "description",
                "htmlUrl",
                "name"
            ],
            "inputProperties": {
                "defaultRole": {
                    "type": "string",
                    "description": "The team is private if the value is \"none\", or public if it is \"manager\" (the default permissions for a non-member of the team are either \"none\", or their base role up until \"manager\").\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "defaultRole": {
                        "type": "string",
                        "description": "The team is private if the value is \"none\", or public if it is \"manager\" (the default permissions for a non-member of the team are either \"none\", or their base role up until \"manager\").\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/teamMembership:TeamMembership": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = new pagerduty.User(\"foo\", {\n    name: \"foo\",\n    email: \"foo@bar.com\",\n});\nconst fooTeam = new pagerduty.Team(\"foo\", {\n    name: \"foo\",\n    description: \"foo\",\n});\nconst fooTeamMembership = new pagerduty.TeamMembership(\"foo\", {\n    userId: foo.id,\n    teamId: fooTeam.id,\n    role: \"manager\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.User(\"foo\",\n    name=\"foo\",\n    email=\"foo@bar.com\")\nfoo_team = pagerduty.Team(\"foo\",\n    name=\"foo\",\n    description=\"foo\")\nfoo_team_membership = pagerduty.TeamMembership(\"foo\",\n    user_id=foo.id,\n    team_id=foo_team.id,\n    role=\"manager\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Pagerduty.User(\"foo\", new()\n    {\n        Name = \"foo\",\n        Email = \"foo@bar.com\",\n    });\n\n    var fooTeam = new Pagerduty.Team(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo\",\n    });\n\n    var fooTeamMembership = new Pagerduty.TeamMembership(\"foo\", new()\n    {\n        UserId = foo.Id,\n        TeamId = fooTeam.Id,\n        Role = \"manager\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := pagerduty.NewUser(ctx, \"foo\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"foo\"),\n\t\t\tEmail: pulumi.String(\"foo@bar.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooTeam, err := pagerduty.NewTeam(ctx, \"foo\", \u0026pagerduty.TeamArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTeamMembership(ctx, \"foo\", \u0026pagerduty.TeamMembershipArgs{\n\t\t\tUserId: foo.ID(),\n\t\t\tTeamId: fooTeam.ID(),\n\t\t\tRole:   pulumi.String(\"manager\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.TeamMembership;\nimport com.pulumi.pagerduty.TeamMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new User(\"foo\", UserArgs.builder()\n            .name(\"foo\")\n            .email(\"foo@bar.com\")\n            .build());\n\n        var fooTeam = new Team(\"fooTeam\", TeamArgs.builder()\n            .name(\"foo\")\n            .description(\"foo\")\n            .build());\n\n        var fooTeamMembership = new TeamMembership(\"fooTeamMembership\", TeamMembershipArgs.builder()\n            .userId(foo.id())\n            .teamId(fooTeam.id())\n            .role(\"manager\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:User\n    properties:\n      name: foo\n      email: foo@bar.com\n  fooTeam:\n    type: pagerduty:Team\n    name: foo\n    properties:\n      name: foo\n      description: foo\n  fooTeamMembership:\n    type: pagerduty:TeamMembership\n    name: foo\n    properties:\n      userId: ${foo.id}\n      teamId: ${fooTeam.id}\n      role: manager\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTeam memberships can be imported using the `user_id` and `team_id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/teamMembership:TeamMembership main PLBP09X:PLB09Z\n```\n",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.These roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n"
                }
            },
            "required": [
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.These roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team in which the user will belong.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to add to the team.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembership resources.\n",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "The role of the user in the team. One of `observer`, `responder`, or `manager`. Defaults to `manager`.These roles match up to user roles in the following ways:\n* User role of `user` is a Team role of `manager`\n* User role of `limited_user` is a Team role of `responder`\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team in which the user will belong.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user to add to the team.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/user:User": {
            "description": "A [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzNA-create-a-user) is a member of a PagerDuty account that have the ability to interact with incidents and other data on the account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsers can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/user:User main PLBP09X\n```\n",
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the user's avatar.\n"
                },
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL at which the entity is uniquely displayed in the Web app\n"
                },
                "invitationSent": {
                    "type": "boolean",
                    "description": "If true, the user has an outstanding invitation.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "license": {
                    "type": "string",
                    "description": "The license id assigned to the user. If provided the user's role must exist in the assigned license's `valid_roles` list. To reference purchased licenses' ids see data source `pagerduty.getLicenses` [data source](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzNA-create-a-user).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the user. Default is account default timezone.\n"
                }
            },
            "required": [
                "avatarUrl",
                "color",
                "description",
                "email",
                "htmlUrl",
                "invitationSent",
                "license",
                "name",
                "teams",
                "timeZone"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                },
                "description": {
                    "type": "string",
                    "default": "Managed by Pulumi"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user's title.\n"
                },
                "license": {
                    "type": "string",
                    "description": "The license id assigned to the user. If provided the user's role must exist in the assigned license's `valid_roles` list. To reference purchased licenses' ids see data source `pagerduty.getLicenses` [data source](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzNA-create-a-user).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                    "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone of the user. Default is account default timezone.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The URL of the user's avatar.\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "The schedule color for the user. Valid options are purple, red, green, blue, teal, orange, brown, turquoise, dark-slate-blue, cayenne, orange-red, dark-orchid, dark-slate-grey, lime, dark-magenta, lime-green, midnight-blue, deep-pink, dark-green, dark-orange, dark-cyan, darkolive-green, dark-slate-gray, grey20, firebrick, maroon, crimson, dark-red, dark-goldenrod, chocolate, medium-violet-red, sea-green, olivedrab, forest-green, dark-olive-green, blue-violet, royal-blue, indigo, slate-blue, saddle-brown, or steel-blue.\n"
                    },
                    "description": {
                        "type": "string",
                        "default": "Managed by Pulumi"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL at which the entity is uniquely displayed in the Web app\n"
                    },
                    "invitationSent": {
                        "type": "boolean",
                        "description": "If true, the user has an outstanding invitation.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user's title.\n"
                    },
                    "license": {
                        "type": "string",
                        "description": "The license id assigned to the user. If provided the user's role must exist in the assigned license's `valid_roles` list. To reference purchased licenses' ids see data source `pagerduty.getLicenses` [data source](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzNA-create-a-user).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The user role. Can be `admin`, `limited_user`, `observer`, `owner`, `read_only_user`, `read_only_limited_user`, `restricted_access`, or `user`.\nNotes:\n* Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.\n* With advanced permissions, users can have both a user role (base role) and a team role. The team role can be configured in the `pagerduty.TeamMembership` resource.\n* Mapping of `role` values to Web UI user role names available in the [user roles support page](https://support.pagerduty.com/docs/advanced-permissions#roles-in-the-rest-api-and-saml).\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of teams the user should belong to. Please use `pagerduty.TeamMembership` instead.\n",
                        "deprecationMessage": "Use the 'pagerduty_team_membership' resource instead."
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone of the user. Default is account default timezone.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userContactMethod:UserContactMethod": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [examplePagerdutyTeam.id],\n});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    userId: example.id,\n    type: \"email_contact_method\",\n    address: \"foo@bar.com\",\n    label: \"Work\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    userId: example.id,\n    type: \"sms_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_pagerduty_team[\"id\"]])\nemail = pagerduty.UserContactMethod(\"email\",\n    user_id=example.id,\n    type=\"email_contact_method\",\n    address=\"foo@bar.com\",\n    label=\"Work\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nsms = pagerduty.UserContactMethod(\"sms\",\n    user_id=example.id,\n    type=\"sms_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            examplePagerdutyTeam.Id,\n        },\n    });\n\n    var email = new Pagerduty.UserContactMethod(\"email\", new()\n    {\n        UserId = example.Id,\n        Type = \"email_contact_method\",\n        Address = \"foo@bar.com\",\n        Label = \"Work\",\n    });\n\n    var phone = new Pagerduty.UserContactMethod(\"phone\", new()\n    {\n        UserId = example.Id,\n        Type = \"phone_contact_method\",\n        CountryCode = 1,\n        Address = \"2025550199\",\n        Label = \"Work\",\n    });\n\n    var sms = new Pagerduty.UserContactMethod(\"sms\", new()\n    {\n        UserId = example.Id,\n        Type = \"sms_contact_method\",\n        CountryCode = 1,\n        Address = \"2025550199\",\n        Label = \"Work\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texamplePagerdutyTeam.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"email\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:  example.ID(),\n\t\t\tType:    pulumi.String(\"email_contact_method\"),\n\t\t\tAddress: pulumi.String(\"foo@bar.com\"),\n\t\t\tLabel:   pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"phone\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"phone_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserContactMethod(ctx, \"sms\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"sms_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.UserContactMethod;\nimport com.pulumi.pagerduty.UserContactMethodArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(examplePagerdutyTeam.id())\n            .build());\n\n        var email = new UserContactMethod(\"email\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"email_contact_method\")\n            .address(\"foo@bar.com\")\n            .label(\"Work\")\n            .build());\n\n        var phone = new UserContactMethod(\"phone\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"phone_contact_method\")\n            .countryCode(\"+1\")\n            .address(\"2025550199\")\n            .label(\"Work\")\n            .build());\n\n        var sms = new UserContactMethod(\"sms\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"sms_contact_method\")\n            .countryCode(\"+1\")\n            .address(\"2025550199\")\n            .label(\"Work\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${examplePagerdutyTeam.id}\n  email:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: email_contact_method\n      address: foo@bar.com\n      label: Work\n  phone:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: phone_contact_method\n      countryCode: '+1'\n      address: '2025550199'\n      label: Work\n  sms:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: sms_contact_method\n      countryCode: '+1'\n      address: '2025550199'\n      label: Work\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nContact methods can be imported using the `user_id` and the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/userContactMethod:UserContactMethod main PLBP09X:PLBP09X\n```\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "blacklisted": {
                    "type": "boolean",
                    "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If true, this phone is capable of receiving SMS messages.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "address",
                "blacklisted",
                "countryCode",
                "enabled",
                "label",
                "type",
                "userId"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                },
                "countryCode": {
                    "type": "integer",
                    "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                },
                "sendShortEmail": {
                    "type": "boolean",
                    "description": "Send an abbreviated email message instead of the standard email output.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "address",
                "label",
                "type",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserContactMethod resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.\n"
                    },
                    "countryCode": {
                        "type": "integer",
                        "description": "The 1-to-3 digit country calling code. Required when using `phone_contact_method` or `sms_contact_method`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If true, this phone is capable of receiving SMS messages.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", etc.).\n"
                    },
                    "sendShortEmail": {
                        "type": "boolean",
                        "description": "Send an abbreviated email message instead of the standard email output.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule": {
            "description": "An [user handoff notification rule](https://developer.pagerduty.com/api-reference/f2ab7a3c1418a-create-a-user-handoff-notification-rule) is a rule that specifies how a user should be notified when they are handed off an incident.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@foo.test\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst example_oncall_offcall = new pagerduty.UserHandoffNotificationRule(\"example-oncall-offcall\", {\n    userId: example.id,\n    handoffType: \"both\",\n    notifyAdvanceInMinutes: 180,\n    contactMethod: {\n        id: phone.id,\n        type: phone.type,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@foo.test\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nexample_oncall_offcall = pagerduty.UserHandoffNotificationRule(\"example-oncall-offcall\",\n    user_id=example.id,\n    handoff_type=\"both\",\n    notify_advance_in_minutes=180,\n    contact_method={\n        \"id\": phone.id,\n        \"type\": phone.type,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@foo.test\",\n    });\n\n    var phone = new Pagerduty.UserContactMethod(\"phone\", new()\n    {\n        UserId = example.Id,\n        Type = \"phone_contact_method\",\n        CountryCode = 1,\n        Address = \"2025550199\",\n        Label = \"Work\",\n    });\n\n    var example_oncall_offcall = new Pagerduty.UserHandoffNotificationRule(\"example-oncall-offcall\", new()\n    {\n        UserId = example.Id,\n        HandoffType = \"both\",\n        NotifyAdvanceInMinutes = 180,\n        ContactMethod = new Pagerduty.Inputs.UserHandoffNotificationRuleContactMethodArgs\n        {\n            Id = phone.Id,\n            Type = phone.Type,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@foo.test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tphone, err := pagerduty.NewUserContactMethod(ctx, \"phone\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"phone_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserHandoffNotificationRule(ctx, \"example-oncall-offcall\", \u0026pagerduty.UserHandoffNotificationRuleArgs{\n\t\t\tUserId:                 example.ID(),\n\t\t\tHandoffType:            pulumi.String(\"both\"),\n\t\t\tNotifyAdvanceInMinutes: pulumi.Int(180),\n\t\t\tContactMethod: \u0026pagerduty.UserHandoffNotificationRuleContactMethodArgs{\n\t\t\t\tId:   phone.ID(),\n\t\t\t\tType: phone.Type,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.UserContactMethod;\nimport com.pulumi.pagerduty.UserContactMethodArgs;\nimport com.pulumi.pagerduty.UserHandoffNotificationRule;\nimport com.pulumi.pagerduty.UserHandoffNotificationRuleArgs;\nimport com.pulumi.pagerduty.inputs.UserHandoffNotificationRuleContactMethodArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@foo.test\")\n            .build());\n\n        var phone = new UserContactMethod(\"phone\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"phone_contact_method\")\n            .countryCode(\"+1\")\n            .address(\"2025550199\")\n            .label(\"Work\")\n            .build());\n\n        var example_oncall_offcall = new UserHandoffNotificationRule(\"example-oncall-offcall\", UserHandoffNotificationRuleArgs.builder()\n            .userId(example.id())\n            .handoffType(\"both\")\n            .notifyAdvanceInMinutes(180)\n            .contactMethod(UserHandoffNotificationRuleContactMethodArgs.builder()\n                .id(phone.id())\n                .type(phone.type())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@foo.test\n  phone:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: phone_contact_method\n      countryCode: '+1'\n      address: '2025550199'\n      label: Work\n  example-oncall-offcall:\n    type: pagerduty:UserHandoffNotificationRule\n    properties:\n      userId: ${example.id}\n      handoffType: both\n      notifyAdvanceInMinutes: 180\n      contactMethod:\n        id: ${phone.id}\n        type: ${phone.type}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUser handoff notification rules can be imported using the `user_id` and `id` separated by a dot, e.g.\n\n```sh\n$ pulumi import pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule main PX4IAP4.PULREBP\n```\n",
            "properties": {
                "contactMethod": {
                    "$ref": "#/types/pagerduty:index/UserHandoffNotificationRuleContactMethod:UserHandoffNotificationRuleContactMethod",
                    "description": "The contact method to notify the user. Contact method documented below.\n"
                },
                "handoffType": {
                    "type": "string",
                    "description": "The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.\n"
                },
                "notifyAdvanceInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "contactMethod",
                "handoffType",
                "notifyAdvanceInMinutes",
                "userId"
            ],
            "inputProperties": {
                "contactMethod": {
                    "$ref": "#/types/pagerduty:index/UserHandoffNotificationRuleContactMethod:UserHandoffNotificationRuleContactMethod",
                    "description": "The contact method to notify the user. Contact method documented below.\n"
                },
                "handoffType": {
                    "type": "string",
                    "description": "The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.\n"
                },
                "notifyAdvanceInMinutes": {
                    "type": "integer",
                    "description": "The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "contactMethod",
                "notifyAdvanceInMinutes",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserHandoffNotificationRule resources.\n",
                "properties": {
                    "contactMethod": {
                        "$ref": "#/types/pagerduty:index/UserHandoffNotificationRuleContactMethod:UserHandoffNotificationRuleContactMethod",
                        "description": "The contact method to notify the user. Contact method documented below.\n"
                    },
                    "handoffType": {
                        "type": "string",
                        "description": "The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.\n"
                    },
                    "notifyAdvanceInMinutes": {
                        "type": "integer",
                        "description": "The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/userNotificationRule:UserNotificationRule": {
            "description": "A [notification rule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI0NQ-create-a-user-notification-rule) configures where and when a PagerDuty user is notified when a triggered incident is assigned to them. Unique notification rules can be created for both high and low-urgency incidents.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n});\nconst email = new pagerduty.UserContactMethod(\"email\", {\n    userId: example.id,\n    type: \"email_contact_method\",\n    address: \"foo@bar.com\",\n    label: \"Work\",\n});\nconst phone = new pagerduty.UserContactMethod(\"phone\", {\n    userId: example.id,\n    type: \"phone_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst sms = new pagerduty.UserContactMethod(\"sms\", {\n    userId: example.id,\n    type: \"sms_contact_method\",\n    countryCode: 1,\n    address: \"2025550199\",\n    label: \"Work\",\n});\nconst highUrgencyPhone = new pagerduty.UserNotificationRule(\"high_urgency_phone\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"high\",\n    contactMethod: {\n        type: \"phone_contact_method\",\n        id: phone.id,\n    },\n});\nconst lowUrgencyEmail = new pagerduty.UserNotificationRule(\"low_urgency_email\", {\n    userId: example.id,\n    startDelayInMinutes: 1,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"email_contact_method\",\n        id: email.id,\n    },\n});\nconst lowUrgencySms = new pagerduty.UserNotificationRule(\"low_urgency_sms\", {\n    userId: example.id,\n    startDelayInMinutes: 10,\n    urgency: \"low\",\n    contactMethod: {\n        type: \"sms_contact_method\",\n        id: sms.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\")\nemail = pagerduty.UserContactMethod(\"email\",\n    user_id=example.id,\n    type=\"email_contact_method\",\n    address=\"foo@bar.com\",\n    label=\"Work\")\nphone = pagerduty.UserContactMethod(\"phone\",\n    user_id=example.id,\n    type=\"phone_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nsms = pagerduty.UserContactMethod(\"sms\",\n    user_id=example.id,\n    type=\"sms_contact_method\",\n    country_code=1,\n    address=\"2025550199\",\n    label=\"Work\")\nhigh_urgency_phone = pagerduty.UserNotificationRule(\"high_urgency_phone\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"high\",\n    contact_method={\n        \"type\": \"phone_contact_method\",\n        \"id\": phone.id,\n    })\nlow_urgency_email = pagerduty.UserNotificationRule(\"low_urgency_email\",\n    user_id=example.id,\n    start_delay_in_minutes=1,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"email_contact_method\",\n        \"id\": email.id,\n    })\nlow_urgency_sms = pagerduty.UserNotificationRule(\"low_urgency_sms\",\n    user_id=example.id,\n    start_delay_in_minutes=10,\n    urgency=\"low\",\n    contact_method={\n        \"type\": \"sms_contact_method\",\n        \"id\": sms.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n    });\n\n    var email = new Pagerduty.UserContactMethod(\"email\", new()\n    {\n        UserId = example.Id,\n        Type = \"email_contact_method\",\n        Address = \"foo@bar.com\",\n        Label = \"Work\",\n    });\n\n    var phone = new Pagerduty.UserContactMethod(\"phone\", new()\n    {\n        UserId = example.Id,\n        Type = \"phone_contact_method\",\n        CountryCode = 1,\n        Address = \"2025550199\",\n        Label = \"Work\",\n    });\n\n    var sms = new Pagerduty.UserContactMethod(\"sms\", new()\n    {\n        UserId = example.Id,\n        Type = \"sms_contact_method\",\n        CountryCode = 1,\n        Address = \"2025550199\",\n        Label = \"Work\",\n    });\n\n    var highUrgencyPhone = new Pagerduty.UserNotificationRule(\"high_urgency_phone\", new()\n    {\n        UserId = example.Id,\n        StartDelayInMinutes = 1,\n        Urgency = \"high\",\n        ContactMethod = \n        {\n            { \"type\", \"phone_contact_method\" },\n            { \"id\", phone.Id },\n        },\n    });\n\n    var lowUrgencyEmail = new Pagerduty.UserNotificationRule(\"low_urgency_email\", new()\n    {\n        UserId = example.Id,\n        StartDelayInMinutes = 1,\n        Urgency = \"low\",\n        ContactMethod = \n        {\n            { \"type\", \"email_contact_method\" },\n            { \"id\", email.Id },\n        },\n    });\n\n    var lowUrgencySms = new Pagerduty.UserNotificationRule(\"low_urgency_sms\", new()\n    {\n        UserId = example.Id,\n        StartDelayInMinutes = 10,\n        Urgency = \"low\",\n        ContactMethod = \n        {\n            { \"type\", \"sms_contact_method\" },\n            { \"id\", sms.Id },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temail, err := pagerduty.NewUserContactMethod(ctx, \"email\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:  example.ID(),\n\t\t\tType:    pulumi.String(\"email_contact_method\"),\n\t\t\tAddress: pulumi.String(\"foo@bar.com\"),\n\t\t\tLabel:   pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tphone, err := pagerduty.NewUserContactMethod(ctx, \"phone\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"phone_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsms, err := pagerduty.NewUserContactMethod(ctx, \"sms\", \u0026pagerduty.UserContactMethodArgs{\n\t\t\tUserId:      example.ID(),\n\t\t\tType:        pulumi.String(\"sms_contact_method\"),\n\t\t\tCountryCode: pulumi.Int(1),\n\t\t\tAddress:     pulumi.String(\"2025550199\"),\n\t\t\tLabel:       pulumi.String(\"Work\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"high_urgency_phone\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(1),\n\t\t\tUrgency:             pulumi.String(\"high\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"phone_contact_method\"),\n\t\t\t\t\"id\":   phone.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"low_urgency_email\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(1),\n\t\t\tUrgency:             pulumi.String(\"low\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"email_contact_method\"),\n\t\t\t\t\"id\":   email.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"low_urgency_sms\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              example.ID(),\n\t\t\tStartDelayInMinutes: pulumi.Int(10),\n\t\t\tUrgency:             pulumi.String(\"low\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"sms_contact_method\"),\n\t\t\t\t\"id\":   sms.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.UserContactMethod;\nimport com.pulumi.pagerduty.UserContactMethodArgs;\nimport com.pulumi.pagerduty.UserNotificationRule;\nimport com.pulumi.pagerduty.UserNotificationRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .build());\n\n        var email = new UserContactMethod(\"email\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"email_contact_method\")\n            .address(\"foo@bar.com\")\n            .label(\"Work\")\n            .build());\n\n        var phone = new UserContactMethod(\"phone\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"phone_contact_method\")\n            .countryCode(\"+1\")\n            .address(\"2025550199\")\n            .label(\"Work\")\n            .build());\n\n        var sms = new UserContactMethod(\"sms\", UserContactMethodArgs.builder()\n            .userId(example.id())\n            .type(\"sms_contact_method\")\n            .countryCode(\"+1\")\n            .address(\"2025550199\")\n            .label(\"Work\")\n            .build());\n\n        var highUrgencyPhone = new UserNotificationRule(\"highUrgencyPhone\", UserNotificationRuleArgs.builder()\n            .userId(example.id())\n            .startDelayInMinutes(1)\n            .urgency(\"high\")\n            .contactMethod(Map.ofEntries(\n                Map.entry(\"type\", \"phone_contact_method\"),\n                Map.entry(\"id\", phone.id())\n            ))\n            .build());\n\n        var lowUrgencyEmail = new UserNotificationRule(\"lowUrgencyEmail\", UserNotificationRuleArgs.builder()\n            .userId(example.id())\n            .startDelayInMinutes(1)\n            .urgency(\"low\")\n            .contactMethod(Map.ofEntries(\n                Map.entry(\"type\", \"email_contact_method\"),\n                Map.entry(\"id\", email.id())\n            ))\n            .build());\n\n        var lowUrgencySms = new UserNotificationRule(\"lowUrgencySms\", UserNotificationRuleArgs.builder()\n            .userId(example.id())\n            .startDelayInMinutes(10)\n            .urgency(\"low\")\n            .contactMethod(Map.ofEntries(\n                Map.entry(\"type\", \"sms_contact_method\"),\n                Map.entry(\"id\", sms.id())\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n  email:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: email_contact_method\n      address: foo@bar.com\n      label: Work\n  phone:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: phone_contact_method\n      countryCode: '+1'\n      address: '2025550199'\n      label: Work\n  sms:\n    type: pagerduty:UserContactMethod\n    properties:\n      userId: ${example.id}\n      type: sms_contact_method\n      countryCode: '+1'\n      address: '2025550199'\n      label: Work\n  highUrgencyPhone:\n    type: pagerduty:UserNotificationRule\n    name: high_urgency_phone\n    properties:\n      userId: ${example.id}\n      startDelayInMinutes: 1\n      urgency: high\n      contactMethod:\n        type: phone_contact_method\n        id: ${phone.id}\n  lowUrgencyEmail:\n    type: pagerduty:UserNotificationRule\n    name: low_urgency_email\n    properties:\n      userId: ${example.id}\n      startDelayInMinutes: 1\n      urgency: low\n      contactMethod:\n        type: email_contact_method\n        id: ${email.id}\n  lowUrgencySms:\n    type: pagerduty:UserNotificationRule\n    name: low_urgency_sms\n    properties:\n      userId: ${example.id}\n      startDelayInMinutes: 10\n      urgency: low\n      contactMethod:\n        type: sms_contact_method\n        id: ${sms.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUser notification rules can be imported using the `user_id` and the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/userNotificationRule:UserNotificationRule main PXPGF42:PPSCXAN\n```\n",
            "properties": {
                "contactMethod": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "required": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "inputProperties": {
                "contactMethod": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A contact method block, configured as a block described below.\n"
                },
                "startDelayInMinutes": {
                    "type": "integer",
                    "description": "The delay before firing the rule, in minutes.\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user.\n"
                }
            },
            "requiredInputs": [
                "contactMethod",
                "startDelayInMinutes",
                "urgency",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserNotificationRule resources.\n",
                "properties": {
                    "contactMethod": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A contact method block, configured as a block described below.\n"
                    },
                    "startDelayInMinutes": {
                        "type": "integer",
                        "description": "The delay before firing the rule, in minutes.\n"
                    },
                    "urgency": {
                        "type": "string",
                        "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "pagerduty:index/webhookSubscription:WebhookSubscription": {
            "description": "A [webhook subscription](https://developer.pagerduty.com/docs/ZG9jOjExMDI5NTkw-v3-overview) allow you to receive HTTP callbacks when incidents are created, updated and deleted. These are also known as V3 Webhooks.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getService({\n    name: \"My Service\",\n});\nconst foo = new pagerduty.WebhookSubscription(\"foo\", {\n    deliveryMethods: [{\n        type: \"http_delivery_method\",\n        url: \"https://example.com/receive_a_pagerduty_webhook\",\n        customHeaders: [\n            {\n                name: \"X-Foo\",\n                value: \"foo\",\n            },\n            {\n                name: \"X-Bar\",\n                value: \"bar\",\n            },\n        ],\n    }],\n    description: \"%s\",\n    events: [\n        \"incident.acknowledged\",\n        \"incident.annotated\",\n        \"incident.delegated\",\n        \"incident.escalated\",\n        \"incident.priority_updated\",\n        \"incident.reassigned\",\n        \"incident.reopened\",\n        \"incident.resolved\",\n        \"incident.responder.added\",\n        \"incident.responder.replied\",\n        \"incident.status_update_published\",\n        \"incident.triggered\",\n        \"incident.unacknowledged\",\n    ],\n    active: true,\n    filters: [{\n        id: example.then(example =\u003e example.id),\n        type: \"service_reference\",\n    }],\n    type: \"webhook_subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service(name=\"My Service\")\nfoo = pagerduty.WebhookSubscription(\"foo\",\n    delivery_methods=[{\n        \"type\": \"http_delivery_method\",\n        \"url\": \"https://example.com/receive_a_pagerduty_webhook\",\n        \"custom_headers\": [\n            {\n                \"name\": \"X-Foo\",\n                \"value\": \"foo\",\n            },\n            {\n                \"name\": \"X-Bar\",\n                \"value\": \"bar\",\n            },\n        ],\n    }],\n    description=\"%s\",\n    events=[\n        \"incident.acknowledged\",\n        \"incident.annotated\",\n        \"incident.delegated\",\n        \"incident.escalated\",\n        \"incident.priority_updated\",\n        \"incident.reassigned\",\n        \"incident.reopened\",\n        \"incident.resolved\",\n        \"incident.responder.added\",\n        \"incident.responder.replied\",\n        \"incident.status_update_published\",\n        \"incident.triggered\",\n        \"incident.unacknowledged\",\n    ],\n    active=True,\n    filters=[{\n        \"id\": example.id,\n        \"type\": \"service_reference\",\n    }],\n    type=\"webhook_subscription\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"My Service\",\n    });\n\n    var foo = new Pagerduty.WebhookSubscription(\"foo\", new()\n    {\n        DeliveryMethods = new[]\n        {\n            new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodArgs\n            {\n                Type = \"http_delivery_method\",\n                Url = \"https://example.com/receive_a_pagerduty_webhook\",\n                CustomHeaders = new[]\n                {\n                    new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodCustomHeaderArgs\n                    {\n                        Name = \"X-Foo\",\n                        Value = \"foo\",\n                    },\n                    new Pagerduty.Inputs.WebhookSubscriptionDeliveryMethodCustomHeaderArgs\n                    {\n                        Name = \"X-Bar\",\n                        Value = \"bar\",\n                    },\n                },\n            },\n        },\n        Description = \"%s\",\n        Events = new[]\n        {\n            \"incident.acknowledged\",\n            \"incident.annotated\",\n            \"incident.delegated\",\n            \"incident.escalated\",\n            \"incident.priority_updated\",\n            \"incident.reassigned\",\n            \"incident.reopened\",\n            \"incident.resolved\",\n            \"incident.responder.added\",\n            \"incident.responder.replied\",\n            \"incident.status_update_published\",\n            \"incident.triggered\",\n            \"incident.unacknowledged\",\n        },\n        Active = true,\n        Filters = new[]\n        {\n            new Pagerduty.Inputs.WebhookSubscriptionFilterArgs\n            {\n                Id = example.Apply(getServiceResult =\u003e getServiceResult.Id),\n                Type = \"service_reference\",\n            },\n        },\n        Type = \"webhook_subscription\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewWebhookSubscription(ctx, \"foo\", \u0026pagerduty.WebhookSubscriptionArgs{\n\t\t\tDeliveryMethods: pagerduty.WebhookSubscriptionDeliveryMethodArray{\n\t\t\t\t\u0026pagerduty.WebhookSubscriptionDeliveryMethodArgs{\n\t\t\t\t\tType: pulumi.String(\"http_delivery_method\"),\n\t\t\t\t\tUrl:  pulumi.String(\"https://example.com/receive_a_pagerduty_webhook\"),\n\t\t\t\t\tCustomHeaders: pagerduty.WebhookSubscriptionDeliveryMethodCustomHeaderArray{\n\t\t\t\t\t\t\u0026pagerduty.WebhookSubscriptionDeliveryMethodCustomHeaderArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"X-Foo\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pagerduty.WebhookSubscriptionDeliveryMethodCustomHeaderArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"X-Bar\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"%s\"),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"incident.acknowledged\"),\n\t\t\t\tpulumi.String(\"incident.annotated\"),\n\t\t\t\tpulumi.String(\"incident.delegated\"),\n\t\t\t\tpulumi.String(\"incident.escalated\"),\n\t\t\t\tpulumi.String(\"incident.priority_updated\"),\n\t\t\t\tpulumi.String(\"incident.reassigned\"),\n\t\t\t\tpulumi.String(\"incident.reopened\"),\n\t\t\t\tpulumi.String(\"incident.resolved\"),\n\t\t\t\tpulumi.String(\"incident.responder.added\"),\n\t\t\t\tpulumi.String(\"incident.responder.replied\"),\n\t\t\t\tpulumi.String(\"incident.status_update_published\"),\n\t\t\t\tpulumi.String(\"incident.triggered\"),\n\t\t\t\tpulumi.String(\"incident.unacknowledged\"),\n\t\t\t},\n\t\t\tActive: pulumi.Bool(true),\n\t\t\tFilters: pagerduty.WebhookSubscriptionFilterArray{\n\t\t\t\t\u0026pagerduty.WebhookSubscriptionFilterArgs{\n\t\t\t\t\tId:   pulumi.String(example.Id),\n\t\t\t\t\tType: pulumi.String(\"service_reference\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"webhook_subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.WebhookSubscription;\nimport com.pulumi.pagerduty.WebhookSubscriptionArgs;\nimport com.pulumi.pagerduty.inputs.WebhookSubscriptionDeliveryMethodArgs;\nimport com.pulumi.pagerduty.inputs.WebhookSubscriptionFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"My Service\")\n            .build());\n\n        var foo = new WebhookSubscription(\"foo\", WebhookSubscriptionArgs.builder()\n            .deliveryMethods(WebhookSubscriptionDeliveryMethodArgs.builder()\n                .type(\"http_delivery_method\")\n                .url(\"https://example.com/receive_a_pagerduty_webhook\")\n                .customHeaders(                \n                    WebhookSubscriptionDeliveryMethodCustomHeaderArgs.builder()\n                        .name(\"X-Foo\")\n                        .value(\"foo\")\n                        .build(),\n                    WebhookSubscriptionDeliveryMethodCustomHeaderArgs.builder()\n                        .name(\"X-Bar\")\n                        .value(\"bar\")\n                        .build())\n                .build())\n            .description(\"%s\")\n            .events(            \n                \"incident.acknowledged\",\n                \"incident.annotated\",\n                \"incident.delegated\",\n                \"incident.escalated\",\n                \"incident.priority_updated\",\n                \"incident.reassigned\",\n                \"incident.reopened\",\n                \"incident.resolved\",\n                \"incident.responder.added\",\n                \"incident.responder.replied\",\n                \"incident.status_update_published\",\n                \"incident.triggered\",\n                \"incident.unacknowledged\")\n            .active(true)\n            .filters(WebhookSubscriptionFilterArgs.builder()\n                .id(example.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                .type(\"service_reference\")\n                .build())\n            .type(\"webhook_subscription\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:WebhookSubscription\n    properties:\n      deliveryMethods:\n        - type: http_delivery_method\n          url: https://example.com/receive_a_pagerduty_webhook\n          customHeaders:\n            - name: X-Foo\n              value: foo\n            - name: X-Bar\n              value: bar\n      description: '%s'\n      events:\n        - incident.acknowledged\n        - incident.annotated\n        - incident.delegated\n        - incident.escalated\n        - incident.priority_updated\n        - incident.reassigned\n        - incident.reopened\n        - incident.resolved\n        - incident.responder.added\n        - incident.responder.replied\n        - incident.status_update_published\n        - incident.triggered\n        - incident.unacknowledged\n      active: true\n      filters:\n        - id: ${example.id}\n          type: service_reference\n      type: webhook_subscription\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: My Service\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhook Subscriptions can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import pagerduty:index/webhookSubscription:WebhookSubscription main PUABCDL\n```\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Determines whether the subscription will produce webhook events.\n"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                    },
                    "description": "The object describing where to send the webhooks.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the webhook subscription\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of outbound event types the webhook will receive. The follow event types are possible:\n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                    },
                    "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                }
            },
            "required": [
                "active",
                "deliveryMethods",
                "events",
                "filters"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Determines whether the subscription will produce webhook events.\n"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                    },
                    "description": "The object describing where to send the webhooks.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the webhook subscription\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of outbound event types the webhook will receive. The follow event types are possible:\n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                    },
                    "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                }
            },
            "requiredInputs": [
                "deliveryMethods",
                "events",
                "filters"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookSubscription resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Determines whether the subscription will produce webhook events.\n"
                    },
                    "deliveryMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/WebhookSubscriptionDeliveryMethod:WebhookSubscriptionDeliveryMethod"
                        },
                        "description": "The object describing where to send the webhooks.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the webhook subscription\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of outbound event types the webhook will receive. The follow event types are possible:\n* `incident.acknowledged`\n* `incident.annotated`\n* `incident.delegated`\n* `incident.escalated`\n* `incident.priority_updated`\n* `incident.reassigned`\n* `incident.reopened`\n* `incident.resolved`\n* `incident.responder.added`\n* `incident.responder.replied`\n* `incident.status_update_published`\n* `incident.triggered`\n* `incident.unacknowledged`\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/WebhookSubscriptionFilter:WebhookSubscriptionFilter"
                        },
                        "description": "determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `service_reference`, `team_reference` and `account_reference`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type indicating the schema of the object. The provider sets this as `webhook_subscription`, which is currently the only acceptable value.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pagerduty:index/getAutomationActionsAction:getAutomationActionsAction": {
            "description": "Use this data source to get information about a specific [automation actions action](https://developer.pagerduty.com/api-reference/357ed15419f64-get-an-automation-action).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getAutomationActionsAction({\n    id: \"01CS1685B2UDM4I3XUUOXPPORM\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_automation_actions_action(id=\"01CS1685B2UDM4I3XUUOXPPORM\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetAutomationActionsAction.Invoke(new()\n    {\n        Id = \"01CS1685B2UDM4I3XUUOXPPORM\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupAutomationActionsAction(ctx, \u0026pagerduty.LookupAutomationActionsActionArgs{\n\t\t\tId: \"01CS1685B2UDM4I3XUUOXPPORM\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetAutomationActionsActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getAutomationActionsAction(GetAutomationActionsActionArgs.builder()\n            .id(\"01CS1685B2UDM4I3XUUOXPPORM\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getAutomationActionsAction\n      Arguments:\n        id: 01CS1685B2UDM4I3XUUOXPPORM\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAutomationActionsAction.\n",
                "properties": {
                    "actionClassification": {
                        "type": "string",
                        "description": "(Optional) The category of the action. The only allowed values are `diagnostic` and `remediation`.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time action was created. Represented as an ISO 8601 timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) The description of the action.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the automation actions action in the PagerDuty API.\n"
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "(Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.\n"
                    },
                    "runnerId": {
                        "type": "string",
                        "description": "(Optional) The Process Automation Actions runner to associate the action with.\n"
                    },
                    "runnerType": {
                        "type": "string",
                        "description": "(Optional) The type of the runner associated with the action.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object. The value returned will be `action`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAutomationActionsAction.\n",
                "properties": {
                    "actionClassification": {
                        "description": "(Optional) The category of the action. The only allowed values are `diagnostic` and `remediation`.\n",
                        "type": "string"
                    },
                    "actionDataReferences": {
                        "description": "Action Data block. Action Data is documented below.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getAutomationActionsActionActionDataReference:getAutomationActionsActionActionDataReference"
                        },
                        "type": "array"
                    },
                    "actionType": {
                        "description": "The type of the action. The only allowed values are `process_automation` and `script`.\n",
                        "type": "string"
                    },
                    "creationTime": {
                        "description": "The time action was created. Represented as an ISO 8601 timestamp.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Optional) The description of the action.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the action.\n",
                        "type": "string"
                    },
                    "modifyTime": {
                        "description": "(Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the action.\n",
                        "type": "string"
                    },
                    "runnerId": {
                        "description": "(Optional) The Process Automation Actions runner to associate the action with.\n",
                        "type": "string"
                    },
                    "runnerType": {
                        "description": "(Optional) The type of the runner associated with the action.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of object. The value returned will be `action`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "actionClassification",
                    "actionDataReferences",
                    "actionType",
                    "creationTime",
                    "description",
                    "id",
                    "modifyTime",
                    "name",
                    "runnerId",
                    "runnerType",
                    "type"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getAutomationActionsRunner:getAutomationActionsRunner": {
            "description": "Use this data source to get information about a specific [automation actions runner](https://developer.pagerduty.com/api-reference/aace61f84cbd0-get-an-automation-action-runner).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getAutomationActionsRunner({\n    id: \"01DBJLIGED17S1DQKQC2AV8XYZ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_automation_actions_runner(id=\"01DBJLIGED17S1DQKQC2AV8XYZ\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetAutomationActionsRunner.Invoke(new()\n    {\n        Id = \"01DBJLIGED17S1DQKQC2AV8XYZ\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupAutomationActionsRunner(ctx, \u0026pagerduty.LookupAutomationActionsRunnerArgs{\n\t\t\tId: \"01DBJLIGED17S1DQKQC2AV8XYZ\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetAutomationActionsRunnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getAutomationActionsRunner(GetAutomationActionsRunnerArgs.builder()\n            .id(\"01DBJLIGED17S1DQKQC2AV8XYZ\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getAutomationActionsRunner\n      Arguments:\n        id: 01DBJLIGED17S1DQKQC2AV8XYZ\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAutomationActionsRunner.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(Optional) The description of the runner.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the automation actions runner in the PagerDuty API.\n"
                    },
                    "lastSeen": {
                        "type": "string",
                        "description": "(Optional) The last time runner has been seen. Represented as an ISO 8601 timestamp.\n"
                    },
                    "runbookBaseUri": {
                        "type": "string",
                        "description": "(Optional) The base URI of the Runbook server to connect to. Applicable to `runbook` type runners only.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAutomationActionsRunner.\n",
                "properties": {
                    "creationTime": {
                        "description": "The time runner was created. Represented as an ISO 8601 timestamp.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Optional) The description of the runner.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the found runner.\n",
                        "type": "string"
                    },
                    "lastSeen": {
                        "description": "(Optional) The last time runner has been seen. Represented as an ISO 8601 timestamp.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the found runner.\n",
                        "type": "string"
                    },
                    "runbookBaseUri": {
                        "description": "(Optional) The base URI of the Runbook server to connect to. Applicable to `runbook` type runners only.\n",
                        "type": "string"
                    },
                    "runnerType": {
                        "description": "The type of runner. Allowed values are `sidecar` and `runbook`.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of object. The value returned will be `runner`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "creationTime",
                    "description",
                    "id",
                    "lastSeen",
                    "name",
                    "runbookBaseUri",
                    "runnerType",
                    "type"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getBusinessService:getBusinessService": {
            "description": "Use this data source to get information about a specific [business service](https://api-reference.pagerduty.com/#!/Business_Services/get_business_services).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getBusinessService({\n    name: \"My Service\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_business_service(name=\"My Service\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetBusinessService.Invoke(new()\n    {\n        Name = \"My Service\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupBusinessService(ctx, \u0026pagerduty.LookupBusinessServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetBusinessServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getBusinessService(GetBusinessServiceArgs.builder()\n            .name(\"My Service\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getBusinessService\n      Arguments:\n        name: My Service\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBusinessService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The business service name to use to find a business service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBusinessService.\n",
                "properties": {
                    "id": {
                        "description": "The ID of the found business service.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found business service.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of object. The value returned will be `business_service`. Can be used for passing to a service dependency.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEscalationPolicy:getEscalationPolicy": {
            "description": "Use this data source to get information about a specific [escalation policy](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEyNA-list-escalation-policies) that you can use for other PagerDuty resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst test = pagerduty.getEscalationPolicy({\n    name: \"Engineering Escalation Policy\",\n});\nconst testService = new pagerduty.Service(\"test\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: test.then(test =\u003e test.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest = pagerduty.get_escalation_policy(name=\"Engineering Escalation Policy\")\ntest_service = pagerduty.Service(\"test\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=test.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pagerduty.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"Engineering Escalation Policy\",\n    });\n\n    var testService = new Pagerduty.Service(\"test\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = test.Apply(getEscalationPolicyResult =\u003e getEscalationPolicyResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pagerduty.LookupEscalationPolicy(ctx, \u0026pagerduty.LookupEscalationPolicyArgs{\n\t\t\tName: \"Engineering Escalation Policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewService(ctx, \"test\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.String(test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PagerdutyFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .build());\n\n        var testService = new Service(\"testService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(test.applyValue(getEscalationPolicyResult -\u003e getEscalationPolicyResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testService:\n    type: pagerduty:Service\n    name: test\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${test.id}\nvariables:\n  test:\n    fn::invoke:\n      Function: pagerduty:getEscalationPolicy\n      Arguments:\n        name: Engineering Escalation Policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEscalationPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find an escalation policy in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEscalationPolicy.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found escalation policy.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEventOrchestration:getEventOrchestration": {
            "description": "Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  tfOrchA:\n    type: pagerduty:EventOrchestration\n    name: tf_orch_a\n    properties:\n      name: Test Event Orchestration\n  router:\n    type: pagerduty:EventOrchestrationRouter\n    properties:\n      parent:\n        - id: ${tfMyMonitor.id}\n      catchAll:\n        actions:\n          routeTo: unrouted\n      set:\n        id: start\n        rules:\n          - actions:\n              routeTo: ${db.id}\nvariables:\n  tfMyMonitor:\n    fn::invoke:\n      Function: pagerduty:getEventOrchestration\n      Arguments:\n        name: ${tfOrchA.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestration.\n",
                "properties": {
                    "integrationDetail": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegrationDetail:getEventOrchestrationIntegrationDetail"
                        },
                        "description": "An integration for the Event Orchestration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Global Event orchestration to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestration.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "integrationDetail": {
                        "description": "An integration for the Event Orchestration.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegrationDetail:getEventOrchestrationIntegrationDetail"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "The name of the found Event Orchestration.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "integrationDetail",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEventOrchestrationGlobalCacheVariable:getEventOrchestrationGlobalCacheVariable": {
            "description": "Use this data source to get information about a specific [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) for a Global Event Orchestration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst eventOrchestration = new pagerduty.EventOrchestration(\"event_orchestration\", {name: \"Test Event Orchestration\"});\nconst cacheVariable = pagerduty.getEventOrchestrationGlobalCacheVariableOutput({\n    eventOrchestration: eventOrchestration.id,\n    name: \"example_cache_variable\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nevent_orchestration = pagerduty.EventOrchestration(\"event_orchestration\", name=\"Test Event Orchestration\")\ncache_variable = pagerduty.get_event_orchestration_global_cache_variable_output(event_orchestration=event_orchestration.id,\n    name=\"example_cache_variable\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var eventOrchestration = new Pagerduty.EventOrchestration(\"event_orchestration\", new()\n    {\n        Name = \"Test Event Orchestration\",\n    });\n\n    var cacheVariable = Pagerduty.GetEventOrchestrationGlobalCacheVariable.Invoke(new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Name = \"example_cache_variable\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\teventOrchestration, err := pagerduty.NewEventOrchestration(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Test Event Orchestration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = pagerduty.LookupEventOrchestrationGlobalCacheVariableOutput(ctx, pagerduty.GetEventOrchestrationGlobalCacheVariableOutputArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tName:               pulumi.String(\"example_cache_variable\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetEventOrchestrationGlobalCacheVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var eventOrchestration = new EventOrchestration(\"eventOrchestration\", EventOrchestrationArgs.builder()\n            .name(\"Test Event Orchestration\")\n            .build());\n\n        final var cacheVariable = PagerdutyFunctions.getEventOrchestrationGlobalCacheVariable(GetEventOrchestrationGlobalCacheVariableArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .name(\"example_cache_variable\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  eventOrchestration:\n    type: pagerduty:EventOrchestration\n    name: event_orchestration\n    properties:\n      name: Test Event Orchestration\nvariables:\n  cacheVariable:\n    fn::invoke:\n      Function: pagerduty:getEventOrchestrationGlobalCacheVariable\n      Arguments:\n        eventOrchestration: ${eventOrchestration.id}\n        name: example_cache_variable\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.\n",
                "properties": {
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Global Event Orchestration to which this Cache Variable belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.\n"
                    }
                },
                "type": "object",
                "required": [
                    "eventOrchestration"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestrationGlobalCacheVariable.\n",
                "properties": {
                    "conditions": {
                        "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationGlobalCacheVariableCondition:getEventOrchestrationGlobalCacheVariableCondition"
                        },
                        "type": "array"
                    },
                    "configurations": {
                        "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationGlobalCacheVariableConfiguration:getEventOrchestrationGlobalCacheVariableConfiguration"
                        },
                        "type": "array"
                    },
                    "disabled": {
                        "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n",
                        "type": "boolean"
                    },
                    "eventOrchestration": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "conditions",
                    "configurations",
                    "disabled",
                    "eventOrchestration"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEventOrchestrationIntegration:getEventOrchestrationIntegration": {
            "description": "Use this data source to get information about a specific [Integration](https://developer.pagerduty.com/api-reference/1c6607db389a8-get-an-integration-for-an-event-orchestration) for an Event Orchestration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst eventOrchestration = new pagerduty.EventOrchestration(\"event_orchestration\", {name: \"Test Event Orchestration\"});\nconst integration = pagerduty.getEventOrchestrationIntegrationOutput({\n    eventOrchestration: eventOrchestration.id,\n    label: \"Test Event Orchestration Default Integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nevent_orchestration = pagerduty.EventOrchestration(\"event_orchestration\", name=\"Test Event Orchestration\")\nintegration = pagerduty.get_event_orchestration_integration_output(event_orchestration=event_orchestration.id,\n    label=\"Test Event Orchestration Default Integration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var eventOrchestration = new Pagerduty.EventOrchestration(\"event_orchestration\", new()\n    {\n        Name = \"Test Event Orchestration\",\n    });\n\n    var integration = Pagerduty.GetEventOrchestrationIntegration.Invoke(new()\n    {\n        EventOrchestration = eventOrchestration.Id,\n        Label = \"Test Event Orchestration Default Integration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\teventOrchestration, err := pagerduty.NewEventOrchestration(ctx, \"event_orchestration\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Test Event Orchestration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = pagerduty.LookupEventOrchestrationIntegrationOutput(ctx, pagerduty.GetEventOrchestrationIntegrationOutputArgs{\n\t\t\tEventOrchestration: eventOrchestration.ID(),\n\t\t\tLabel:              pulumi.String(\"Test Event Orchestration Default Integration\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetEventOrchestrationIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var eventOrchestration = new EventOrchestration(\"eventOrchestration\", EventOrchestrationArgs.builder()\n            .name(\"Test Event Orchestration\")\n            .build());\n\n        final var integration = PagerdutyFunctions.getEventOrchestrationIntegration(GetEventOrchestrationIntegrationArgs.builder()\n            .eventOrchestration(eventOrchestration.id())\n            .label(\"Test Event Orchestration Default Integration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  eventOrchestration:\n    type: pagerduty:EventOrchestration\n    name: event_orchestration\n    properties:\n      name: Test Event Orchestration\nvariables:\n  integration:\n    fn::invoke:\n      Function: pagerduty:getEventOrchestrationIntegration\n      Arguments:\n        eventOrchestration: ${eventOrchestration.id}\n        label: Test Event Orchestration Default Integration\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestrationIntegration.\n",
                "properties": {
                    "eventOrchestration": {
                        "type": "string",
                        "description": "ID of the Event Orchestration to which this Integration belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the Integration associated with the Event Orchestration. Specify either `id` or `label`. If both are specified `id` takes precedence.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name/description of the Integration associated with the Event Orchestration. Specify either `id` or `label`. If both are specified `id` takes precedence. The value of `label` is not unique. Potentially there might be multiple Integrations with the same `label` value associated with the Event Orchestration and retrieving data by `label` attribute will result in an error during the planning step.\n"
                    }
                },
                "type": "object",
                "required": [
                    "eventOrchestration"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestrationIntegration.\n",
                "properties": {
                    "eventOrchestration": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "parameters": {
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationIntegrationParameter:getEventOrchestrationIntegrationParameter"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "eventOrchestration",
                    "parameters"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEventOrchestrationServiceCacheVariable:getEventOrchestrationServiceCacheVariable": {
            "description": "Use this data source to get information about a specific [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) for a Service Event Orchestration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst engineering = new pagerduty.Team(\"engineering\", {name: \"Engineering\"});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [engineering.id],\n});\nconst exampleEscalationPolicy = new pagerduty.EscalationPolicy(\"example\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst service = new pagerduty.Service(\"service\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: exampleEscalationPolicy.id,\n    alertCreation: \"create_alerts_and_incidents\",\n});\nconst cacheVariable = pagerduty.getEventOrchestrationServiceCacheVariableOutput({\n    service: service.id,\n    name: \"example_cache_variable\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nengineering = pagerduty.Team(\"engineering\", name=\"Engineering\")\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[engineering.id])\nexample_escalation_policy = pagerduty.EscalationPolicy(\"example\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nservice = pagerduty.Service(\"service\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_escalation_policy.id,\n    alert_creation=\"create_alerts_and_incidents\")\ncache_variable = pagerduty.get_event_orchestration_service_cache_variable_output(service=service.id,\n    name=\"example_cache_variable\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineering = new Pagerduty.Team(\"engineering\", new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            engineering.Id,\n        },\n    });\n\n    var exampleEscalationPolicy = new Pagerduty.EscalationPolicy(\"example\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var service = new Pagerduty.Service(\"service\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = exampleEscalationPolicy.Id,\n        AlertCreation = \"create_alerts_and_incidents\",\n    });\n\n    var cacheVariable = Pagerduty.GetEventOrchestrationServiceCacheVariable.Invoke(new()\n    {\n        Service = service.Id,\n        Name = \"example_cache_variable\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tengineering, err := pagerduty.NewTeam(ctx, \"engineering\", \u0026pagerduty.TeamArgs{\n\t\t\tName: pulumi.String(\"Engineering\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tengineering.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, \"example\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tservice, err := pagerduty.NewService(ctx, \"service\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       exampleEscalationPolicy.ID(),\n\t\t\tAlertCreation:          pulumi.String(\"create_alerts_and_incidents\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = pagerduty.LookupEventOrchestrationServiceCacheVariableOutput(ctx, pagerduty.GetEventOrchestrationServiceCacheVariableOutputArgs{\n\t\t\tService: service.ID(),\n\t\t\tName:    pulumi.String(\"example_cache_variable\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.Team;\nimport com.pulumi.pagerduty.TeamArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetEventOrchestrationServiceCacheVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var engineering = new Team(\"engineering\", TeamArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(engineering.id())\n            .build());\n\n        var exampleEscalationPolicy = new EscalationPolicy(\"exampleEscalationPolicy\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var service = new Service(\"service\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(exampleEscalationPolicy.id())\n            .alertCreation(\"create_alerts_and_incidents\")\n            .build());\n\n        final var cacheVariable = PagerdutyFunctions.getEventOrchestrationServiceCacheVariable(GetEventOrchestrationServiceCacheVariableArgs.builder()\n            .service(service.id())\n            .name(\"example_cache_variable\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  engineering:\n    type: pagerduty:Team\n    properties:\n      name: Engineering\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${engineering.id}\n  exampleEscalationPolicy:\n    type: pagerduty:EscalationPolicy\n    name: example\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  service:\n    type: pagerduty:Service\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${exampleEscalationPolicy.id}\n      alertCreation: create_alerts_and_incidents\nvariables:\n  cacheVariable:\n    fn::invoke:\n      Function: pagerduty:getEventOrchestrationServiceCacheVariable\n      Arguments:\n        service: ${service.id}\n        name: example_cache_variable\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestrationServiceCacheVariable.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "ID of the Service Event Orchestration to which this Cache Variable belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "service"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestrationServiceCacheVariable.\n",
                "properties": {
                    "conditions": {
                        "description": "Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationServiceCacheVariableCondition:getEventOrchestrationServiceCacheVariableCondition"
                        },
                        "type": "array"
                    },
                    "configurations": {
                        "description": "A configuration object to define what and how values will be stored in the Cache Variable.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationServiceCacheVariableConfiguration:getEventOrchestrationServiceCacheVariableConfiguration"
                        },
                        "type": "array"
                    },
                    "disabled": {
                        "description": "Indicates whether the Cache Variable is disabled and would therefore not be evaluated.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "service": {
                        "type": "string"
                    }
                },
                "required": [
                    "conditions",
                    "configurations",
                    "disabled",
                    "service"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getEventOrchestrations:getEventOrchestrations": {
            "description": "Use this data source to get information as a list about specific Global [Event Orchestrations](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations) filtered by a Regular Expression provided.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst tfOrchA = new pagerduty.EventOrchestration(\"tf_orch_a\", {name: \"Test Event A Orchestration\"});\nconst tfOrchB = new pagerduty.EventOrchestration(\"tf_orch_b\", {name: \"Test Event B Orchestration\"});\nconst tfMyMonitor = pagerduty.getEventOrchestrations({\n    nameFilter: \".*Orchestration$\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntf_orch_a = pagerduty.EventOrchestration(\"tf_orch_a\", name=\"Test Event A Orchestration\")\ntf_orch_b = pagerduty.EventOrchestration(\"tf_orch_b\", name=\"Test Event B Orchestration\")\ntf_my_monitor = pagerduty.get_event_orchestrations(name_filter=\".*Orchestration$\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfOrchA = new Pagerduty.EventOrchestration(\"tf_orch_a\", new()\n    {\n        Name = \"Test Event A Orchestration\",\n    });\n\n    var tfOrchB = new Pagerduty.EventOrchestration(\"tf_orch_b\", new()\n    {\n        Name = \"Test Event B Orchestration\",\n    });\n\n    var tfMyMonitor = Pagerduty.GetEventOrchestrations.Invoke(new()\n    {\n        NameFilter = \".*Orchestration$\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.NewEventOrchestration(ctx, \"tf_orch_a\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Test Event A Orchestration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEventOrchestration(ctx, \"tf_orch_b\", \u0026pagerduty.EventOrchestrationArgs{\n\t\t\tName: pulumi.String(\"Test Event B Orchestration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.GetEventOrchestrations(ctx, \u0026pagerduty.GetEventOrchestrationsArgs{\n\t\t\tNameFilter: \".*Orchestration$\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.EventOrchestration;\nimport com.pulumi.pagerduty.EventOrchestrationArgs;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetEventOrchestrationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfOrchA = new EventOrchestration(\"tfOrchA\", EventOrchestrationArgs.builder()\n            .name(\"Test Event A Orchestration\")\n            .build());\n\n        var tfOrchB = new EventOrchestration(\"tfOrchB\", EventOrchestrationArgs.builder()\n            .name(\"Test Event B Orchestration\")\n            .build());\n\n        final var tfMyMonitor = PagerdutyFunctions.getEventOrchestrations(GetEventOrchestrationsArgs.builder()\n            .nameFilter(\".*Orchestration$\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfOrchA:\n    type: pagerduty:EventOrchestration\n    name: tf_orch_a\n    properties:\n      name: Test Event A Orchestration\n  tfOrchB:\n    type: pagerduty:EventOrchestration\n    name: tf_orch_b\n    properties:\n      name: Test Event B Orchestration\nvariables:\n  tfMyMonitor:\n    fn::invoke:\n      Function: pagerduty:getEventOrchestrations\n      Arguments:\n        nameFilter: .*Orchestration$\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEventOrchestrations.\n",
                "properties": {
                    "nameFilter": {
                        "type": "string",
                        "description": "The regex name of Global Event orchestrations to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nameFilter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEventOrchestrations.\n",
                "properties": {
                    "eventOrchestrations": {
                        "items": {
                            "$ref": "#/types/pagerduty:index/getEventOrchestrationsEventOrchestration:getEventOrchestrationsEventOrchestration"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilter": {
                        "description": "The list of the Event Orchestrations which name match `name_filter` argument.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "eventOrchestrations",
                    "nameFilter",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getExtensionSchema:getExtensionSchema": {
            "description": "Use this data source to get information about a specific [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMA-list-extension-schemas) vendor that you can use for a service (e.g: Slack, Generic Webhook, ServiceNow).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst webhook = pagerduty.getExtensionSchema({\n    name: \"Generic V2 Webhook\",\n});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Howard James\",\n    email: \"howard.james@example.domain\",\n    teams: [examplePagerdutyTeam.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: examplePagerdutyEscalationPolicy.id,\n});\nconst slack = new pagerduty.Extension(\"slack\", {\n    name: \"My Web App Extension\",\n    endpointUrl: \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extensionSchema: webhook.then(webhook =\u003e webhook.id),\n    extensionObjects: [exampleService.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nwebhook = pagerduty.get_extension_schema(name=\"Generic V2 Webhook\")\nexample = pagerduty.User(\"example\",\n    name=\"Howard James\",\n    email=\"howard.james@example.domain\",\n    teams=[example_pagerduty_team[\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_pagerduty_escalation_policy[\"id\"])\nslack = pagerduty.Extension(\"slack\",\n    name=\"My Web App Extension\",\n    endpoint_url=\"https://generic_webhook_url/XXXXXX/BBBBBB\",\n    extension_schema=webhook.id,\n    extension_objects=[example_service.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook = Pagerduty.GetExtensionSchema.Invoke(new()\n    {\n        Name = \"Generic V2 Webhook\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Howard James\",\n        Email = \"howard.james@example.domain\",\n        Teams = new[]\n        {\n            examplePagerdutyTeam.Id,\n        },\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = examplePagerdutyEscalationPolicy.Id,\n    });\n\n    var slack = new Pagerduty.Extension(\"slack\", new()\n    {\n        Name = \"My Web App Extension\",\n        EndpointUrl = \"https://generic_webhook_url/XXXXXX/BBBBBB\",\n        ExtensionSchema = webhook.Apply(getExtensionSchemaResult =\u003e getExtensionSchemaResult.Id),\n        ExtensionObjects = new[]\n        {\n            exampleService.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebhook, err := pagerduty.GetExtensionSchema(ctx, \u0026pagerduty.GetExtensionSchemaArgs{\n\t\t\tName: \"Generic V2 Webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Howard James\"),\n\t\t\tEmail: pulumi.String(\"howard.james@example.domain\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texamplePagerdutyTeam.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(examplePagerdutyEscalationPolicy.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewExtension(ctx, \"slack\", \u0026pagerduty.ExtensionArgs{\n\t\t\tName:            pulumi.String(\"My Web App Extension\"),\n\t\t\tEndpointUrl:     pulumi.String(\"https://generic_webhook_url/XXXXXX/BBBBBB\"),\n\t\t\tExtensionSchema: pulumi.String(webhook.Id),\n\t\t\tExtensionObjects: pulumi.StringArray{\n\t\t\t\texampleService.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetExtensionSchemaArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.Extension;\nimport com.pulumi.pagerduty.ExtensionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webhook = PagerdutyFunctions.getExtensionSchema(GetExtensionSchemaArgs.builder()\n            .name(\"Generic V2 Webhook\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Howard James\")\n            .email(\"howard.james@example.domain\")\n            .teams(examplePagerdutyTeam.id())\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(examplePagerdutyEscalationPolicy.id())\n            .build());\n\n        var slack = new Extension(\"slack\", ExtensionArgs.builder()\n            .name(\"My Web App Extension\")\n            .endpointUrl(\"https://generic_webhook_url/XXXXXX/BBBBBB\")\n            .extensionSchema(webhook.applyValue(getExtensionSchemaResult -\u003e getExtensionSchemaResult.id()))\n            .extensionObjects(exampleService.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Howard James\n      email: howard.james@example.domain\n      teams:\n        - ${examplePagerdutyTeam.id}\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${examplePagerdutyEscalationPolicy.id}\n  slack:\n    type: pagerduty:Extension\n    properties:\n      name: My Web App Extension\n      endpointUrl: https://generic_webhook_url/XXXXXX/BBBBBB\n      extensionSchema: ${webhook.id}\n      extensionObjects:\n        - ${exampleService.id}\nvariables:\n  webhook:\n    fn::invoke:\n      Function: pagerduty:getExtensionSchema\n      Arguments:\n        name: Generic V2 Webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExtensionSchema.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The extension name to use to find an extension vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExtensionSchema.\n",
                "properties": {
                    "id": {
                        "description": "The ID of the found extension vendor.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found extension vendor.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The generic service type for this extension vendor.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getIncidentCustomField:getIncidentCustomField": {
            "description": "Use this data source to get information about a specific [Incident Custom Field](https://support.pagerduty.com/docs/custom-fields-on-incidents).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst environment = pagerduty.getIncidentCustomField({\n    name: \"environment\",\n});\nconst devEnvironment = new pagerduty.IncidentCustomFieldOption(\"dev_environment\", {\n    field: environment.then(environment =\u003e environment.id),\n    datatype: \"string\",\n    value: \"dev\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nenvironment = pagerduty.get_incident_custom_field(name=\"environment\")\ndev_environment = pagerduty.IncidentCustomFieldOption(\"dev_environment\",\n    field=environment.id,\n    datatype=\"string\",\n    value=\"dev\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var environment = Pagerduty.GetIncidentCustomField.Invoke(new()\n    {\n        Name = \"environment\",\n    });\n\n    var devEnvironment = new Pagerduty.IncidentCustomFieldOption(\"dev_environment\", new()\n    {\n        Field = environment.Apply(getIncidentCustomFieldResult =\u003e getIncidentCustomFieldResult.Id),\n        Datatype = \"string\",\n        Value = \"dev\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tenvironment, err := pagerduty.LookupIncidentCustomField(ctx, \u0026pagerduty.LookupIncidentCustomFieldArgs{\n\t\t\tName: \"environment\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentCustomFieldOption(ctx, \"dev_environment\", \u0026pagerduty.IncidentCustomFieldOptionArgs{\n\t\t\tField:    pulumi.String(environment.Id),\n\t\t\tDatatype: pulumi.String(\"string\"),\n\t\t\tValue:    pulumi.String(\"dev\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetIncidentCustomFieldArgs;\nimport com.pulumi.pagerduty.IncidentCustomFieldOption;\nimport com.pulumi.pagerduty.IncidentCustomFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var environment = PagerdutyFunctions.getIncidentCustomField(GetIncidentCustomFieldArgs.builder()\n            .name(\"environment\")\n            .build());\n\n        var devEnvironment = new IncidentCustomFieldOption(\"devEnvironment\", IncidentCustomFieldOptionArgs.builder()\n            .field(environment.applyValue(getIncidentCustomFieldResult -\u003e getIncidentCustomFieldResult.id()))\n            .datatype(\"string\")\n            .value(\"dev\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  devEnvironment:\n    type: pagerduty:IncidentCustomFieldOption\n    name: dev_environment\n    properties:\n      field: ${environment.id}\n      datatype: string\n      value: dev\nvariables:\n  environment:\n    fn::invoke:\n      Function: pagerduty:getIncidentCustomField\n      Arguments:\n        name: environment\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentCustomField.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the field.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentCustomField.\n",
                "properties": {
                    "dataType": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "fieldType": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "dataType",
                    "description",
                    "displayName",
                    "fieldType",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getIncidentWorkflow:getIncidentWorkflow": {
            "description": "Use this data source to get information about a specific [Incident Workflow](https://support.pagerduty.com/docs/incident-workflows) so that you can create a trigger for it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst myWorkflow = pagerduty.getIncidentWorkflow({\n    name: \"Some Workflow Name\",\n});\nconst firstService = pagerduty.getService({\n    name: \"My First Service\",\n});\nconst automaticTrigger = new pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\", {\n    type: \"conditional\",\n    workflow: myWorkflow.then(myWorkflow =\u003e myWorkflow.id),\n    services: [firstService.then(firstService =\u003e firstService.id)],\n    condition: \"incident.priority matches 'P1'\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nmy_workflow = pagerduty.get_incident_workflow(name=\"Some Workflow Name\")\nfirst_service = pagerduty.get_service(name=\"My First Service\")\nautomatic_trigger = pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\",\n    type=\"conditional\",\n    workflow=my_workflow.id,\n    services=[first_service.id],\n    condition=\"incident.priority matches 'P1'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myWorkflow = Pagerduty.GetIncidentWorkflow.Invoke(new()\n    {\n        Name = \"Some Workflow Name\",\n    });\n\n    var firstService = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"My First Service\",\n    });\n\n    var automaticTrigger = new Pagerduty.IncidentWorkflowTrigger(\"automatic_trigger\", new()\n    {\n        Type = \"conditional\",\n        Workflow = myWorkflow.Apply(getIncidentWorkflowResult =\u003e getIncidentWorkflowResult.Id),\n        Services = new[]\n        {\n            firstService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        },\n        Condition = \"incident.priority matches 'P1'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyWorkflow, err := pagerduty.LookupIncidentWorkflow(ctx, \u0026pagerduty.LookupIncidentWorkflowArgs{\n\t\t\tName: \"Some Workflow Name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfirstService, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"My First Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewIncidentWorkflowTrigger(ctx, \"automatic_trigger\", \u0026pagerduty.IncidentWorkflowTriggerArgs{\n\t\t\tType:     pulumi.String(\"conditional\"),\n\t\t\tWorkflow: pulumi.String(myWorkflow.Id),\n\t\t\tServices: pulumi.StringArray{\n\t\t\t\tpulumi.String(firstService.Id),\n\t\t\t},\n\t\t\tCondition: pulumi.String(\"incident.priority matches 'P1'\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetIncidentWorkflowArgs;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.IncidentWorkflowTrigger;\nimport com.pulumi.pagerduty.IncidentWorkflowTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myWorkflow = PagerdutyFunctions.getIncidentWorkflow(GetIncidentWorkflowArgs.builder()\n            .name(\"Some Workflow Name\")\n            .build());\n\n        final var firstService = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"My First Service\")\n            .build());\n\n        var automaticTrigger = new IncidentWorkflowTrigger(\"automaticTrigger\", IncidentWorkflowTriggerArgs.builder()\n            .type(\"conditional\")\n            .workflow(myWorkflow.applyValue(getIncidentWorkflowResult -\u003e getIncidentWorkflowResult.id()))\n            .services(firstService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .condition(\"incident.priority matches 'P1'\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  automaticTrigger:\n    type: pagerduty:IncidentWorkflowTrigger\n    name: automatic_trigger\n    properties:\n      type: conditional\n      workflow: ${myWorkflow.id}\n      services:\n        - ${firstService.id}\n      condition: incident.priority matches 'P1'\nvariables:\n  myWorkflow:\n    fn::invoke:\n      Function: pagerduty:getIncidentWorkflow\n      Arguments:\n        name: Some Workflow Name\n  firstService:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: My First Service\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentWorkflow.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the workflow.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentWorkflow.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getLicense:getLicense": {
            "description": "Use this data source to use a single purchased [license](https://developer.pagerduty.com/api-reference/4c10cb38f7381-list-licenses) to manage PagerDuty user resources. After applying changes to users' licenses, the `current_value` and `allocations_available` attributes of licenses will change.\n\n\u003e It is preferred to set the `name` and `description` to their exact values or to set the `id`. However, this will require updating your configuration if the accounts products ever change. To avoid errors when account products change, you may set the `name` of a license to a valid substring such as `\"Full User\"` or `\"Stakeholder\"`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst invalidRoles = [\"owner\"];\nconst fullUser = pagerduty.getLicense({\n    name: \"Full User\",\n    description: \"\",\n});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    license: fullUser.then(fullUser =\u003e fullUser.id),\n    role: \"user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ninvalid_roles = [\"owner\"]\nfull_user = pagerduty.get_license(name=\"Full User\",\n    description=\"\")\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    license=full_user.id,\n    role=\"user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var invalidRoles = new[]\n    {\n        \"owner\",\n    };\n\n    var fullUser = Pagerduty.GetLicense.Invoke(new()\n    {\n        Name = \"Full User\",\n        Description = \"\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        License = fullUser.Apply(getLicenseResult =\u003e getLicenseResult.Id),\n        Role = \"user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_ := []string{\n\t\t\t\"owner\",\n\t\t}\n\t\tfullUser, err := pagerduty.GetLicense(ctx, \u0026pagerduty.GetLicenseArgs{\n\t\t\tName:        pulumi.StringRef(\"Full User\"),\n\t\t\tDescription: pulumi.StringRef(\"\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:    pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail:   pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tLicense: pulumi.String(fullUser.Id),\n\t\t\tRole:    pulumi.String(\"user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetLicenseArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var invalidRoles = \"owner\";\n\n        final var fullUser = PagerdutyFunctions.getLicense(GetLicenseArgs.builder()\n            .name(\"Full User\")\n            .description(\"\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .license(fullUser.applyValue(getLicenseResult -\u003e getLicenseResult.id()))\n            .role(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      license: ${fullUser.id}\n      role: user\nvariables:\n  invalidRoles:\n    - owner\n  fullUser:\n    fn::invoke:\n      Function: pagerduty:getLicense\n      Arguments:\n        name: Full User\n        description:\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLicense.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Used to determine if the data config *description* is a valid substring of a valid license description assigned to the account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Used to match the data config *id* with an exact match of a valid license ID assigned to the account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Used to determine if the data config *name* is a valid substring of a valid license name assigned to the account.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLicense.\n",
                "properties": {
                    "allocationsAvailable": {
                        "description": "Available allocations to assign to users\n",
                        "type": "integer"
                    },
                    "currentValue": {
                        "description": "The number of allocations already assigned to users\n",
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "htmlUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleGroup": {
                        "description": "The role group for the license that determines the available `valid_roles`\n",
                        "type": "string"
                    },
                    "self": {
                        "type": "string"
                    },
                    "summary": {
                        "description": "Summary of the license\n",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "validRoles": {
                        "description": "List of allowed roles that may be assigned to a user with this license\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "allocationsAvailable",
                    "currentValue",
                    "description",
                    "htmlUrl",
                    "id",
                    "name",
                    "roleGroup",
                    "self",
                    "summary",
                    "type",
                    "validRoles"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getLicenses:getLicenses": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst invalidRoles = [\"owner\"];\nconst licenses = pagerduty.getLicenses({});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    license: licenses.then(licenses =\u003e licenses.licenses?.[0]?.id),\n    role: \"user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ninvalid_roles = [\"owner\"]\nlicenses = pagerduty.get_licenses()\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    license=licenses.licenses[0].id,\n    role=\"user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var invalidRoles = new[]\n    {\n        \"owner\",\n    };\n\n    var licenses = Pagerduty.GetLicenses.Invoke();\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        License = licenses.Apply(getLicensesResult =\u003e getLicensesResult.Licenses[0]?.Id),\n        Role = \"user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_ := []string{\n\t\t\t\"owner\",\n\t\t}\n\t\tlicenses, err := pagerduty.GetLicenses(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:    pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail:   pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tLicense: pulumi.String(licenses.Licenses[0].Id),\n\t\t\tRole:    pulumi.String(\"user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetLicensesArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var invalidRoles = \"owner\";\n\n        final var licenses = PagerdutyFunctions.getLicenses();\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .license(licenses.applyValue(getLicensesResult -\u003e getLicensesResult.licenses()[0].id()))\n            .role(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      license: ${licenses.licenses[0].id}\n      role: user\nvariables:\n  invalidRoles:\n    - owner\n  licenses:\n    fn::invoke:\n      Function: pagerduty:getLicenses\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLicenses.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Allows to override the default behavior for setting the `id` attribute that is required for data sources.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLicenses.\n",
                "properties": {
                    "id": {
                        "description": "ID of the license\n",
                        "type": "string"
                    },
                    "licenses": {
                        "description": "The list of purchased licenses.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getLicensesLicense:getLicensesLicense"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "licenses"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getPriority:getPriority": {
            "description": "Use this data source to get information about a specific [priority](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE2NA-list-priorities) that you can use for other PagerDuty resources. A priority is a label representing the importance and impact of an incident. This feature is only available on Standard and Enterprise plans.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst p1 = pagerduty.getPriority({\n    name: \"P1\",\n});\nconst foo = new pagerduty.Ruleset(\"foo\", {name: \"Primary Ruleset\"});\nconst fooRulesetRule = new pagerduty.RulesetRule(\"foo\", {\n    ruleset: foo.id,\n    position: 0,\n    disabled: false,\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions: {\n        routes: [{\n            value: \"P5DTL0K\",\n        }],\n        priorities: [{\n            value: p1.then(p1 =\u003e p1.id),\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\np1 = pagerduty.get_priority(name=\"P1\")\nfoo = pagerduty.Ruleset(\"foo\", name=\"Primary Ruleset\")\nfoo_ruleset_rule = pagerduty.RulesetRule(\"foo\",\n    ruleset=foo.id,\n    position=0,\n    disabled=False,\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"disk space\",\n                    \"path\": \"payload.summary\",\n                }],\n            },\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"db\",\n                    \"path\": \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions={\n        \"routes\": [{\n            \"value\": \"P5DTL0K\",\n        }],\n        \"priorities\": [{\n            \"value\": p1.id,\n        }],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var p1 = Pagerduty.GetPriority.Invoke(new()\n    {\n        Name = \"P1\",\n    });\n\n    var foo = new Pagerduty.Ruleset(\"foo\", new()\n    {\n        Name = \"Primary Ruleset\",\n    });\n\n    var fooRulesetRule = new Pagerduty.RulesetRule(\"foo\", new()\n    {\n        Ruleset = foo.Id,\n        Position = 0,\n        Disabled = false,\n        Conditions = new Pagerduty.Inputs.RulesetRuleConditionsArgs\n        {\n            Operator = \"and\",\n            Subconditions = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"disk space\",\n                            Path = \"payload.summary\",\n                        },\n                    },\n                },\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"db\",\n                            Path = \"payload.source\",\n                        },\n                    },\n                },\n            },\n        },\n        Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n        {\n            Routes = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsRouteArgs\n                {\n                    Value = \"P5DTL0K\",\n                },\n            },\n            Priorities = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsPriorityArgs\n                {\n                    Value = p1.Apply(getPriorityResult =\u003e getPriorityResult.Id),\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tp1, err := pagerduty.GetPriority(ctx, \u0026pagerduty.GetPriorityArgs{\n\t\t\tName: \"P1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo, err := pagerduty.NewRuleset(ctx, \"foo\", \u0026pagerduty.RulesetArgs{\n\t\t\tName: pulumi.String(\"Primary Ruleset\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"foo\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  foo.ID(),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tConditions: \u0026pagerduty.RulesetRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: pagerduty.RulesetRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"db\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026pagerduty.RulesetRuleActionsArgs{\n\t\t\t\tRoutes: pagerduty.RulesetRuleActionsRouteArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsRouteArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"P5DTL0K\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPriorities: pagerduty.RulesetRuleActionsPriorityArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsPriorityArgs{\n\t\t\t\t\t\tValue: pulumi.String(p1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetPriorityArgs;\nimport com.pulumi.pagerduty.Ruleset;\nimport com.pulumi.pagerduty.RulesetArgs;\nimport com.pulumi.pagerduty.RulesetRule;\nimport com.pulumi.pagerduty.RulesetRuleArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleConditionsArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()\n            .name(\"P1\")\n            .build());\n\n        var foo = new Ruleset(\"foo\", RulesetArgs.builder()\n            .name(\"Primary Ruleset\")\n            .build());\n\n        var fooRulesetRule = new RulesetRule(\"fooRulesetRule\", RulesetRuleArgs.builder()\n            .ruleset(foo.id())\n            .position(0)\n            .disabled(\"false\")\n            .conditions(RulesetRuleConditionsArgs.builder()\n                .operator(\"and\")\n                .subconditions(                \n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"disk space\")\n                            .path(\"payload.summary\")\n                            .build())\n                        .build(),\n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"db\")\n                            .path(\"payload.source\")\n                            .build())\n                        .build())\n                .build())\n            .actions(RulesetRuleActionsArgs.builder()\n                .routes(RulesetRuleActionsRouteArgs.builder()\n                    .value(\"P5DTL0K\")\n                    .build())\n                .priorities(RulesetRuleActionsPriorityArgs.builder()\n                    .value(p1.applyValue(getPriorityResult -\u003e getPriorityResult.id()))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:Ruleset\n    properties:\n      name: Primary Ruleset\n  fooRulesetRule:\n    type: pagerduty:RulesetRule\n    name: foo\n    properties:\n      ruleset: ${foo.id}\n      position: 0\n      disabled: 'false'\n      conditions:\n        operator: and\n        subconditions:\n          - operator: contains\n            parameters:\n              - value: disk space\n                path: payload.summary\n          - operator: contains\n            parameters:\n              - value: db\n                path: payload.source\n      actions:\n        routes:\n          - value: P5DTL0K\n        priorities:\n          - value: ${p1.id}\nvariables:\n  p1:\n    fn::invoke:\n      Function: pagerduty:getPriority\n      Arguments:\n        name: P1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPriority.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the priority to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPriority.\n",
                "properties": {
                    "description": {
                        "description": "A description of the found priority.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the found priority.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the found priority.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getRuleset:getRuleset": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getRuleset({\n    name: \"My Ruleset\",\n});\nconst foo = new pagerduty.RulesetRule(\"foo\", {\n    ruleset: example.then(example =\u003e example.id),\n    position: 0,\n    disabled: false,\n    conditions: {\n        operator: \"and\",\n        subconditions: [\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"disk space\",\n                    path: \"payload.summary\",\n                }],\n            },\n            {\n                operator: \"contains\",\n                parameters: [{\n                    value: \"db\",\n                    path: \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions: {\n        routes: [{\n            value: \"P5DTL0K\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_ruleset(name=\"My Ruleset\")\nfoo = pagerduty.RulesetRule(\"foo\",\n    ruleset=example.id,\n    position=0,\n    disabled=False,\n    conditions={\n        \"operator\": \"and\",\n        \"subconditions\": [\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"disk space\",\n                    \"path\": \"payload.summary\",\n                }],\n            },\n            {\n                \"operator\": \"contains\",\n                \"parameters\": [{\n                    \"value\": \"db\",\n                    \"path\": \"payload.source\",\n                }],\n            },\n        ],\n    },\n    actions={\n        \"routes\": [{\n            \"value\": \"P5DTL0K\",\n        }],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetRuleset.Invoke(new()\n    {\n        Name = \"My Ruleset\",\n    });\n\n    var foo = new Pagerduty.RulesetRule(\"foo\", new()\n    {\n        Ruleset = example.Apply(getRulesetResult =\u003e getRulesetResult.Id),\n        Position = 0,\n        Disabled = false,\n        Conditions = new Pagerduty.Inputs.RulesetRuleConditionsArgs\n        {\n            Operator = \"and\",\n            Subconditions = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"disk space\",\n                            Path = \"payload.summary\",\n                        },\n                    },\n                },\n                new Pagerduty.Inputs.RulesetRuleConditionsSubconditionArgs\n                {\n                    Operator = \"contains\",\n                    Parameters = new[]\n                    {\n                        new Pagerduty.Inputs.RulesetRuleConditionsSubconditionParameterArgs\n                        {\n                            Value = \"db\",\n                            Path = \"payload.source\",\n                        },\n                    },\n                },\n            },\n        },\n        Actions = new Pagerduty.Inputs.RulesetRuleActionsArgs\n        {\n            Routes = new[]\n            {\n                new Pagerduty.Inputs.RulesetRuleActionsRouteArgs\n                {\n                    Value = \"P5DTL0K\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupRuleset(ctx, \u0026pagerduty.LookupRulesetArgs{\n\t\t\tName: \"My Ruleset\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewRulesetRule(ctx, \"foo\", \u0026pagerduty.RulesetRuleArgs{\n\t\t\tRuleset:  pulumi.String(example.Id),\n\t\t\tPosition: pulumi.Int(0),\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tConditions: \u0026pagerduty.RulesetRuleConditionsArgs{\n\t\t\t\tOperator: pulumi.String(\"and\"),\n\t\t\t\tSubconditions: pagerduty.RulesetRuleConditionsSubconditionArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"disk space\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.summary\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionArgs{\n\t\t\t\t\t\tOperator: pulumi.String(\"contains\"),\n\t\t\t\t\t\tParameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{\n\t\t\t\t\t\t\t\u0026pagerduty.RulesetRuleConditionsSubconditionParameterArgs{\n\t\t\t\t\t\t\t\tValue: pulumi.String(\"db\"),\n\t\t\t\t\t\t\t\tPath:  pulumi.String(\"payload.source\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tActions: \u0026pagerduty.RulesetRuleActionsArgs{\n\t\t\t\tRoutes: pagerduty.RulesetRuleActionsRouteArray{\n\t\t\t\t\t\u0026pagerduty.RulesetRuleActionsRouteArgs{\n\t\t\t\t\t\tValue: pulumi.String(\"P5DTL0K\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetRulesetArgs;\nimport com.pulumi.pagerduty.RulesetRule;\nimport com.pulumi.pagerduty.RulesetRuleArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleConditionsArgs;\nimport com.pulumi.pagerduty.inputs.RulesetRuleActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getRuleset(GetRulesetArgs.builder()\n            .name(\"My Ruleset\")\n            .build());\n\n        var foo = new RulesetRule(\"foo\", RulesetRuleArgs.builder()\n            .ruleset(example.applyValue(getRulesetResult -\u003e getRulesetResult.id()))\n            .position(0)\n            .disabled(\"false\")\n            .conditions(RulesetRuleConditionsArgs.builder()\n                .operator(\"and\")\n                .subconditions(                \n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"disk space\")\n                            .path(\"payload.summary\")\n                            .build())\n                        .build(),\n                    RulesetRuleConditionsSubconditionArgs.builder()\n                        .operator(\"contains\")\n                        .parameters(RulesetRuleConditionsSubconditionParameterArgs.builder()\n                            .value(\"db\")\n                            .path(\"payload.source\")\n                            .build())\n                        .build())\n                .build())\n            .actions(RulesetRuleActionsArgs.builder()\n                .routes(RulesetRuleActionsRouteArgs.builder()\n                    .value(\"P5DTL0K\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:RulesetRule\n    properties:\n      ruleset: ${example.id}\n      position: 0\n      disabled: 'false'\n      conditions:\n        operator: and\n        subconditions:\n          - operator: contains\n            parameters:\n              - value: disk space\n                path: payload.summary\n          - operator: contains\n            parameters:\n              - value: db\n                path: payload.source\n      actions:\n        routes:\n          - value: P5DTL0K\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getRuleset\n      Arguments:\n        name: My Ruleset\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Default Global Ruleset\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst defaultGlobal = pagerduty.getRuleset({\n    name: \"Default Global\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndefault_global = pagerduty.get_ruleset(name=\"Default Global\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var defaultGlobal = Pagerduty.GetRuleset.Invoke(new()\n    {\n        Name = \"Default Global\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupRuleset(ctx, \u0026pagerduty.LookupRulesetArgs{\n\t\t\tName: \"Default Global\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetRulesetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var defaultGlobal = PagerdutyFunctions.getRuleset(GetRulesetArgs.builder()\n            .name(\"Default Global\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  defaultGlobal:\n    fn::invoke:\n      Function: pagerduty:getRuleset\n      Arguments:\n        name: Default Global\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRuleset.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ruleset to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRuleset.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the found ruleset.\n",
                        "type": "string"
                    },
                    "routingKeys": {
                        "description": "Routing keys routed to this ruleset.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "routingKeys",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getSchedule:getSchedule": {
            "description": "Use this data source to get information about a specific [schedule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE4MQ-list-schedules) that you can use for other PagerDuty resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst test = pagerduty.getSchedule({\n    name: \"Daily Engineering Rotation\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"schedule\",\n            id: test.then(test =\u003e test.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ntest = pagerduty.get_schedule(name=\"Daily Engineering Rotation\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"schedule\",\n            \"id\": test.id,\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pagerduty.GetSchedule.Invoke(new()\n    {\n        Name = \"Daily Engineering Rotation\",\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"schedule\",\n                        Id = test.Apply(getScheduleResult =\u003e getScheduleResult.Id),\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pagerduty.LookupSchedule(ctx, \u0026pagerduty.LookupScheduleArgs{\n\t\t\tName: \"Daily Engineering Rotation\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"schedule\"),\n\t\t\t\t\t\t\tId:   pulumi.String(test.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetScheduleArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PagerdutyFunctions.getSchedule(GetScheduleArgs.builder()\n            .name(\"Daily Engineering Rotation\")\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"schedule\")\n                    .id(test.applyValue(getScheduleResult -\u003e getScheduleResult.id()))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: schedule\n              id: ${test.id}\nvariables:\n  test:\n    fn::invoke:\n      Function: pagerduty:getSchedule\n      Arguments:\n        name: Daily Engineering Rotation\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name to use to find a schedule in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchedule.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found schedule.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getService:getService": {
            "description": "Use this data source to get information about a specific [service](https://api-reference.pagerduty.com/#!/Services/get_services).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getService({\n    name: \"My Service\",\n});\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"example\", {\n    name: \"Datadog Integration\",\n    vendor: datadog.then(datadog =\u003e datadog.id),\n    service: example.then(example =\u003e example.id),\n    type: \"generic_events_api_inbound_integration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service(name=\"My Service\")\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample_service_integration = pagerduty.ServiceIntegration(\"example\",\n    name=\"Datadog Integration\",\n    vendor=datadog.id,\n    service=example.id,\n    type=\"generic_events_api_inbound_integration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"My Service\",\n    });\n\n    var datadog = Pagerduty.GetVendor.Invoke(new()\n    {\n        Name = \"Datadog\",\n    });\n\n    var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"example\", new()\n    {\n        Name = \"Datadog Integration\",\n        Vendor = datadog.Apply(getVendorResult =\u003e getVendorResult.Id),\n        Service = example.Apply(getServiceResult =\u003e getServiceResult.Id),\n        Type = \"generic_events_api_inbound_integration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatadog, err := pagerduty.GetVendor(ctx, \u0026pagerduty.GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"example\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(\"Datadog Integration\"),\n\t\t\tVendor:  pulumi.String(datadog.Id),\n\t\t\tService: pulumi.String(example.Id),\n\t\t\tType:    pulumi.String(\"generic_events_api_inbound_integration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.inputs.GetVendorArgs;\nimport com.pulumi.pagerduty.ServiceIntegration;\nimport com.pulumi.pagerduty.ServiceIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"My Service\")\n            .build());\n\n        final var datadog = PagerdutyFunctions.getVendor(GetVendorArgs.builder()\n            .name(\"Datadog\")\n            .build());\n\n        var exampleServiceIntegration = new ServiceIntegration(\"exampleServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(\"Datadog Integration\")\n            .vendor(datadog.applyValue(getVendorResult -\u003e getVendorResult.id()))\n            .service(example.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .type(\"generic_events_api_inbound_integration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: example\n    properties:\n      name: Datadog Integration\n      vendor: ${datadog.id}\n      service: ${example.id}\n      type: generic_events_api_inbound_integration\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: My Service\n  datadog:\n    fn::invoke:\n      Function: pagerduty:getVendor\n      Arguments:\n        name: Datadog\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The service name to use to find a service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "acknowledgementTimeout": {
                        "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.\n",
                        "type": "integer"
                    },
                    "alertCreation": {
                        "description": "Whether a service creates only incidents, or both alerts and incidents. A service must create alerts in order to enable incident merging.\n",
                        "type": "string"
                    },
                    "autoResolveTimeout": {
                        "description": "Time in seconds that an incident is automatically resolved if left open for that long. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.\n",
                        "type": "integer"
                    },
                    "description": {
                        "description": "The user-provided description of the service.\n",
                        "type": "string"
                    },
                    "escalationPolicy": {
                        "description": "The escalation policy associated with this service.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the found service.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found service.\n",
                        "type": "string"
                    },
                    "teams": {
                        "description": "The set of teams associated with the service.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getServiceTeam:getServiceTeam"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of object. The value returned will be `service`. Can be used for passing to a service dependency.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "acknowledgementTimeout",
                    "alertCreation",
                    "autoResolveTimeout",
                    "description",
                    "escalationPolicy",
                    "id",
                    "name",
                    "teams",
                    "type"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getServiceIntegration:getServiceIntegration": {
            "description": "Use this data source to get information about a specific service_integration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getServiceIntegration({\n    serviceName: \"My Service\",\n    integrationSummary: \"Datadog\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service_integration(service_name=\"My Service\",\n    integration_summary=\"Datadog\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetServiceIntegration.Invoke(new()\n    {\n        ServiceName = \"My Service\",\n        IntegrationSummary = \"Datadog\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.LookupServiceIntegration(ctx, \u0026pagerduty.LookupServiceIntegrationArgs{\n\t\t\tServiceName:        \"My Service\",\n\t\t\tIntegrationSummary: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getServiceIntegration(GetServiceIntegrationArgs.builder()\n            .serviceName(\"My Service\")\n            .integrationSummary(\"Datadog\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getServiceIntegration\n      Arguments:\n        serviceName: My Service\n        integrationSummary: Datadog\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceIntegration.\n",
                "properties": {
                    "integrationSummary": {
                        "type": "string",
                        "description": "The integration summary used to find the desired integration on the service.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name to use to find a service in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationSummary",
                    "serviceName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "integrationKey": {
                        "description": "The integration key for the integration. This can be used to configure alerts.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "integrationSummary": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "integrationKey",
                    "integrationSummary",
                    "serviceName"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getStandards:getStandards": {
            "description": "Use this data source to get information about the [standards](https://developer.pagerduty.com/api-reference/dbed9a0ff9355-list-standards) applicable to\nthe PagerDuty account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst standards = pagerduty.getStandards({});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nstandards = pagerduty.get_standards()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var standards = Pagerduty.GetStandards.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pagerduty.GetStandards(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetStandardsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var standards = PagerdutyFunctions.getStandards();\n\n    }\n}\n```\n```yaml\nvariables:\n  standards:\n    fn::invoke:\n      Function: pagerduty:getStandards\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStandards.\n",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Filter by `resource_type` the received standards. Allowed values are `technical_service`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStandards.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "resourceType": {
                        "description": "Specifies the type of resource to which the standard applies.\n",
                        "type": "string"
                    },
                    "standards": {
                        "description": "The list of standards defined.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getStandardsStandard:getStandardsStandard"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "standards",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getStandardsResourceScores:getStandardsResourceScores": {
            "description": "Use this data source to get information about the [scores for the standards of a\nresource](https://developer.pagerduty.com/api-reference/f339354b607d5-list-a-resource-s-standards-scores).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst example = pagerduty.getService({\n    name: \"My Service\",\n});\nconst scores = example.then(example =\u003e pagerduty.getStandardsResourceScores({\n    resourceType: \"technical_services\",\n    id: example.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nexample = pagerduty.get_service(name=\"My Service\")\nscores = pagerduty.get_standards_resource_scores(resource_type=\"technical_services\",\n    id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"My Service\",\n    });\n\n    var scores = Pagerduty.GetStandardsResourceScores.Invoke(new()\n    {\n        ResourceType = \"technical_services\",\n        Id = example.Apply(getServiceResult =\u003e getServiceResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\n\t\t\tName: \"My Service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.GetStandardsResourceScores(ctx, \u0026pagerduty.GetStandardsResourceScoresArgs{\n\t\t\tResourceType: \"technical_services\",\n\t\t\tId:           example.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.inputs.GetStandardsResourceScoresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"My Service\")\n            .build());\n\n        final var scores = PagerdutyFunctions.getStandardsResourceScores(GetStandardsResourceScoresArgs.builder()\n            .resourceType(\"technical_services\")\n            .id(example.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: My Service\n  scores:\n    fn::invoke:\n      Function: pagerduty:getStandardsResourceScores\n      Arguments:\n        resourceType: technical_services\n        id: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStandardsResourceScores.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier of said resource.\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the object the standards are associated to. Allowed values are `technical_services`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "resourceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStandardsResourceScores.\n",
                "properties": {
                    "id": {
                        "description": "A unique identifier for the standard.\n",
                        "type": "string"
                    },
                    "resourceType": {
                        "description": "Specifies the type of resource to which the standard applies.\n",
                        "type": "string"
                    },
                    "score": {
                        "$ref": "#/types/pagerduty:index/getStandardsResourceScoresScore:getStandardsResourceScoresScore",
                        "description": "Summary of the scores for standards associated with this resource.\n"
                    },
                    "standards": {
                        "description": "The list of standards evaluated against.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getStandardsResourceScoresStandard:getStandardsResourceScoresStandard"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "resourceType",
                    "score",
                    "standards"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getStandardsResourcesScores:getStandardsResourcesScores": {
            "description": "Use this data source to get information about the [scores for the standards for\nmany resources](https://developer.pagerduty.com/api-reference/2e832500ae129-list-resources-standards-scores).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst foo = pagerduty.getService({\n    name: \"foo\",\n});\nconst bar = pagerduty.getService({\n    name: \"bar\",\n});\nconst baz = pagerduty.getService({\n    name: \"baz\",\n});\nconst scores = Promise.all([foo, bar, baz]).then(([foo, bar, baz]) =\u003e pagerduty.getStandardsResourcesScores({\n    resourceType: \"technical_services\",\n    ids: [\n        foo.id,\n        bar.id,\n        baz.id,\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nfoo = pagerduty.get_service(name=\"foo\")\nbar = pagerduty.get_service(name=\"bar\")\nbaz = pagerduty.get_service(name=\"baz\")\nscores = pagerduty.get_standards_resources_scores(resource_type=\"technical_services\",\n    ids=[\n        foo.id,\n        bar.id,\n        baz.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n    var bar = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"bar\",\n    });\n\n    var baz = Pagerduty.GetService.Invoke(new()\n    {\n        Name = \"baz\",\n    });\n\n    var scores = Pagerduty.GetStandardsResourcesScores.Invoke(new()\n    {\n        ResourceType = \"technical_services\",\n        Ids = new[]\n        {\n            foo.Apply(getServiceResult =\u003e getServiceResult.Id),\n            bar.Apply(getServiceResult =\u003e getServiceResult.Id),\n            baz.Apply(getServiceResult =\u003e getServiceResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nfoo, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\nName: \"foo\",\n}, nil);\nif err != nil {\nreturn err\n}\nbar, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\nName: \"bar\",\n}, nil);\nif err != nil {\nreturn err\n}\nbaz, err := pagerduty.LookupService(ctx, \u0026pagerduty.LookupServiceArgs{\nName: \"baz\",\n}, nil);\nif err != nil {\nreturn err\n}\n_, err = pagerduty.GetStandardsResourcesScores(ctx, \u0026pagerduty.GetStandardsResourcesScoresArgs{\nResourceType: \"technical_services\",\nIds: interface{}{\nfoo.Id,\nbar.Id,\nbaz.Id,\n},\n}, nil);\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetServiceArgs;\nimport com.pulumi.pagerduty.inputs.GetStandardsResourcesScoresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"foo\")\n            .build());\n\n        final var bar = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"bar\")\n            .build());\n\n        final var baz = PagerdutyFunctions.getService(GetServiceArgs.builder()\n            .name(\"baz\")\n            .build());\n\n        final var scores = PagerdutyFunctions.getStandardsResourcesScores(GetStandardsResourcesScoresArgs.builder()\n            .resourceType(\"technical_services\")\n            .ids(            \n                foo.applyValue(getServiceResult -\u003e getServiceResult.id()),\n                bar.applyValue(getServiceResult -\u003e getServiceResult.id()),\n                baz.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: foo\n  bar:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: bar\n  baz:\n    fn::invoke:\n      Function: pagerduty:getService\n      Arguments:\n        name: baz\n  scores:\n    fn::invoke:\n      Function: pagerduty:getStandardsResourcesScores\n      Arguments:\n        resourceType: technical_services\n        ids:\n          - ${foo.id}\n          - ${bar.id}\n          - ${baz.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStandardsResourcesScores.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of identifiers of the resources to query.\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Type of the object the standards are associated to. Allowed values are `technical_services`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "resourceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStandardsResourcesScores.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "resourceType": {
                        "description": "Specifies the type of resource to which the standard applies.\n",
                        "type": "string"
                    },
                    "resources": {
                        "description": "List of score results for each queried resource.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getStandardsResourcesScoresResource:getStandardsResourcesScoresResource"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "resourceType",
                    "resources",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getTag:getTag": {
            "description": "Use this data source to get information about a specific [tag](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIxNw-list-tags) that you can use to assign to users, teams, and escalation_policies.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst devops = pagerduty.getTag({\n    label: \"devops\",\n});\nconst foo = new pagerduty.TagAssignment(\"foo\", {\n    tagId: devops.then(devops =\u003e devops.id),\n    entityId: me.then(me =\u003e me.id),\n    entityType: \"users\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\ndevops = pagerduty.get_tag(label=\"devops\")\nfoo = pagerduty.TagAssignment(\"foo\",\n    tag_id=devops.id,\n    entity_id=me.id,\n    entity_type=\"users\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var me = Pagerduty.GetUser.Invoke(new()\n    {\n        Email = \"me@example.com\",\n    });\n\n    var devops = Pagerduty.GetTag.Invoke(new()\n    {\n        Label = \"devops\",\n    });\n\n    var foo = new Pagerduty.TagAssignment(\"foo\", new()\n    {\n        TagId = devops.Apply(getTagResult =\u003e getTagResult.Id),\n        EntityId = me.Apply(getUserResult =\u003e getUserResult.Id),\n        EntityType = \"users\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026pagerduty.LookupUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevops, err := pagerduty.LookupTag(ctx, \u0026pagerduty.LookupTagArgs{\n\t\t\tLabel: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewTagAssignment(ctx, \"foo\", \u0026pagerduty.TagAssignmentArgs{\n\t\t\tTagId:      pulumi.String(devops.Id),\n\t\t\tEntityId:   pulumi.String(me.Id),\n\t\t\tEntityType: pulumi.String(\"users\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetUserArgs;\nimport com.pulumi.pagerduty.inputs.GetTagArgs;\nimport com.pulumi.pagerduty.TagAssignment;\nimport com.pulumi.pagerduty.TagAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var me = PagerdutyFunctions.getUser(GetUserArgs.builder()\n            .email(\"me@example.com\")\n            .build());\n\n        final var devops = PagerdutyFunctions.getTag(GetTagArgs.builder()\n            .label(\"devops\")\n            .build());\n\n        var foo = new TagAssignment(\"foo\", TagAssignmentArgs.builder()\n            .tagId(devops.applyValue(getTagResult -\u003e getTagResult.id()))\n            .entityId(me.applyValue(getUserResult -\u003e getUserResult.id()))\n            .entityType(\"users\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:TagAssignment\n    properties:\n      tagId: ${devops.id}\n      entityId: ${me.id}\n      entityType: users\nvariables:\n  me:\n    fn::invoke:\n      Function: pagerduty:getUser\n      Arguments:\n        email: me@example.com\n  devops:\n    fn::invoke:\n      Function: pagerduty:getTag\n      Arguments:\n        label: devops\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label of the tag to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "id": {
                        "description": "The ID of the found team.\n",
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "label"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getTeam:getTeam": {
            "description": "Use this data source to get information about a specific [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMw-list-teams) that you can use for other PagerDuty resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst devops = pagerduty.getTeam({\n    name: \"devops\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"DevOps Escalation Policy\",\n    numLoops: 2,\n    teams: devops.then(devops =\u003e devops.id),\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: me.then(me =\u003e me.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\ndevops = pagerduty.get_team(name=\"devops\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"DevOps Escalation Policy\",\n    num_loops=2,\n    teams=devops.id,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": me.id,\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var me = Pagerduty.GetUser.Invoke(new()\n    {\n        Email = \"me@example.com\",\n    });\n\n    var devops = Pagerduty.GetTeam.Invoke(new()\n    {\n        Name = \"devops\",\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"DevOps Escalation Policy\",\n        NumLoops = 2,\n        Teams = devops.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = me.Apply(getUserResult =\u003e getUserResult.Id),\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026pagerduty.LookupUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevops, err := pagerduty.LookupTeam(ctx, \u0026pagerduty.LookupTeamArgs{\n\t\t\tName: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"DevOps Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tTeams:    pulumi.String(devops.Id),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   pulumi.String(me.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetUserArgs;\nimport com.pulumi.pagerduty.inputs.GetTeamArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var me = PagerdutyFunctions.getUser(GetUserArgs.builder()\n            .email(\"me@example.com\")\n            .build());\n\n        final var devops = PagerdutyFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"devops\")\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"DevOps Escalation Policy\")\n            .numLoops(2)\n            .teams(devops.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(me.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: DevOps Escalation Policy\n      numLoops: 2\n      teams: ${devops.id}\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${me.id}\nvariables:\n  me:\n    fn::invoke:\n      Function: pagerduty:getUser\n      Arguments:\n        email: me@example.com\n  devops:\n    fn::invoke:\n      Function: pagerduty:getTeam\n      Arguments:\n        name: devops\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "defaultRole": {
                        "type": "string",
                        "description": "(Optional) The team is private if the value is \"none\", or public if it is \"manager\" (the default permissions for a non-member of the team are either \"none\", or their base role up until \"manager\").\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team to find in the PagerDuty API.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "defaultRole": {
                        "description": "(Optional) The team is private if the value is \"none\", or public if it is \"manager\" (the default permissions for a non-member of the team are either \"none\", or their base role up until \"manager\").\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the found team.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the found team.\n",
                        "type": "string"
                    },
                    "parent": {
                        "description": "ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getTeamMembers:getTeamMembers": {
            "description": "Use this data source to get information about a specific [team's members](https://developer.pagerduty.com/api-reference/e35802f3c4ba4-list-members-of-a-team).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst devops = pagerduty.getTeam({\n    name: \"devops\",\n});\nconst devopsMembers = devops.then(devops =\u003e pagerduty.getTeamMembers({\n    teamId: devops.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndevops = pagerduty.get_team(name=\"devops\")\ndevops_members = pagerduty.get_team_members(team_id=devops.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var devops = Pagerduty.GetTeam.Invoke(new()\n    {\n        Name = \"devops\",\n    });\n\n    var devopsMembers = Pagerduty.GetTeamMembers.Invoke(new()\n    {\n        TeamId = devops.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevops, err := pagerduty.LookupTeam(ctx, \u0026pagerduty.LookupTeamArgs{\n\t\t\tName: \"devops\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.GetTeamMembers(ctx, \u0026pagerduty.GetTeamMembersArgs{\n\t\t\tTeamId: devops.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetTeamArgs;\nimport com.pulumi.pagerduty.inputs.GetTeamMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var devops = PagerdutyFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"devops\")\n            .build());\n\n        final var devopsMembers = PagerdutyFunctions.getTeamMembers(GetTeamMembersArgs.builder()\n            .teamId(devops.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  devops:\n    fn::invoke:\n      Function: pagerduty:getTeam\n      Arguments:\n        name: devops\n  devopsMembers:\n    fn::invoke:\n      Function: pagerduty:getTeamMembers\n      Arguments:\n        teamId: ${devops.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeamMembers.\n",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team to find in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeamMembers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "members": {
                        "description": "The users of the found team.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getTeamMembersMember:getTeamMembersMember"
                        },
                        "type": "array"
                    },
                    "teamId": {
                        "type": "string"
                    }
                },
                "required": [
                    "members",
                    "teamId",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getUser:getUser": {
            "description": "Use this data source to get information about a specific [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user_reference\",\n            id: me.then(me =\u003e me.id),\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user_reference\",\n            \"id\": me.id,\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var me = Pagerduty.GetUser.Invoke(new()\n    {\n        Email = \"me@example.com\",\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user_reference\",\n                        Id = me.Apply(getUserResult =\u003e getUserResult.Id),\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026pagerduty.LookupUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user_reference\"),\n\t\t\t\t\t\t\tId:   pulumi.String(me.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetUserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var me = PagerdutyFunctions.getUser(GetUserArgs.builder()\n            .email(\"me@example.com\")\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user_reference\")\n                    .id(me.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user_reference\n              id: ${me.id}\nvariables:\n  me:\n    fn::invoke:\n      Function: pagerduty:getUser\n      Arguments:\n        email: me@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email to use to find a user in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "description": {
                        "description": "The human-friendly description of the found user.\n",
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "jobTitle": {
                        "description": "The job title of the found user.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found user.\n",
                        "type": "string"
                    },
                    "role": {
                        "description": "The role of the found user.\n",
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "The timezone of the found user.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "email",
                    "jobTitle",
                    "name",
                    "role",
                    "timeZone",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getUserContactMethod:getUserContactMethod": {
            "description": "Use this data source to get information about a specific [contact method](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzOQ-list-a-user-s-contact-methods) of a PagerDuty [user](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst phonePush = me.then(me =\u003e pagerduty.getUserContactMethod({\n    userId: me.id,\n    type: \"push_notification_contact_method\",\n    label: \"iPhone (John)\",\n}));\nconst lowUrgencySms = new pagerduty.UserNotificationRule(\"low_urgency_sms\", {\n    userId: me.then(me =\u003e me.id),\n    startDelayInMinutes: 5,\n    urgency: \"high\",\n    contactMethod: {\n        type: \"push_notification_contact_method\",\n        id: phonePush.then(phonePush =\u003e phonePush.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\nme = pagerduty.get_user(email=\"me@example.com\")\nphone_push = pagerduty.get_user_contact_method(user_id=me.id,\n    type=\"push_notification_contact_method\",\n    label=\"iPhone (John)\")\nlow_urgency_sms = pagerduty.UserNotificationRule(\"low_urgency_sms\",\n    user_id=me.id,\n    start_delay_in_minutes=5,\n    urgency=\"high\",\n    contact_method={\n        \"type\": \"push_notification_contact_method\",\n        \"id\": phone_push.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var me = Pagerduty.GetUser.Invoke(new()\n    {\n        Email = \"me@example.com\",\n    });\n\n    var phonePush = Pagerduty.GetUserContactMethod.Invoke(new()\n    {\n        UserId = me.Apply(getUserResult =\u003e getUserResult.Id),\n        Type = \"push_notification_contact_method\",\n        Label = \"iPhone (John)\",\n    });\n\n    var lowUrgencySms = new Pagerduty.UserNotificationRule(\"low_urgency_sms\", new()\n    {\n        UserId = me.Apply(getUserResult =\u003e getUserResult.Id),\n        StartDelayInMinutes = 5,\n        Urgency = \"high\",\n        ContactMethod = \n        {\n            { \"type\", \"push_notification_contact_method\" },\n            { \"id\", phonePush.Apply(getUserContactMethodResult =\u003e getUserContactMethodResult.Id) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tme, err := pagerduty.LookupUser(ctx, \u0026pagerduty.LookupUserArgs{\n\t\t\tEmail: \"me@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tphonePush, err := pagerduty.LookupUserContactMethod(ctx, \u0026pagerduty.LookupUserContactMethodArgs{\n\t\t\tUserId: me.Id,\n\t\t\tType:   \"push_notification_contact_method\",\n\t\t\tLabel:  \"iPhone (John)\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewUserNotificationRule(ctx, \"low_urgency_sms\", \u0026pagerduty.UserNotificationRuleArgs{\n\t\t\tUserId:              pulumi.String(me.Id),\n\t\t\tStartDelayInMinutes: pulumi.Int(5),\n\t\t\tUrgency:             pulumi.String(\"high\"),\n\t\t\tContactMethod: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"push_notification_contact_method\"),\n\t\t\t\t\"id\":   pulumi.String(phonePush.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetUserArgs;\nimport com.pulumi.pagerduty.inputs.GetUserContactMethodArgs;\nimport com.pulumi.pagerduty.UserNotificationRule;\nimport com.pulumi.pagerduty.UserNotificationRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var me = PagerdutyFunctions.getUser(GetUserArgs.builder()\n            .email(\"me@example.com\")\n            .build());\n\n        final var phonePush = PagerdutyFunctions.getUserContactMethod(GetUserContactMethodArgs.builder()\n            .userId(me.applyValue(getUserResult -\u003e getUserResult.id()))\n            .type(\"push_notification_contact_method\")\n            .label(\"iPhone (John)\")\n            .build());\n\n        var lowUrgencySms = new UserNotificationRule(\"lowUrgencySms\", UserNotificationRuleArgs.builder()\n            .userId(me.applyValue(getUserResult -\u003e getUserResult.id()))\n            .startDelayInMinutes(5)\n            .urgency(\"high\")\n            .contactMethod(Map.ofEntries(\n                Map.entry(\"type\", \"push_notification_contact_method\"),\n                Map.entry(\"id\", phonePush.applyValue(getUserContactMethodResult -\u003e getUserContactMethodResult.id()))\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lowUrgencySms:\n    type: pagerduty:UserNotificationRule\n    name: low_urgency_sms\n    properties:\n      userId: ${me.id}\n      startDelayInMinutes: 5\n      urgency: high\n      contactMethod:\n        type: push_notification_contact_method\n        id: ${phonePush.id}\nvariables:\n  me:\n    fn::invoke:\n      Function: pagerduty:getUser\n      Arguments:\n        email: me@example.com\n  phonePush:\n    fn::invoke:\n      Function: pagerduty:getUserContactMethod\n      Arguments:\n        userId: ${me.id}\n        type: push_notification_contact_method\n        label: iPhone (John)\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserContactMethod.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label (e.g., \"Work\", \"Mobile\", \"Ashley's iPhone\", etc.).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The contact method type. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "type",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserContactMethod.\n",
                "properties": {
                    "address": {
                        "description": "The \"address\" to deliver to: `email`, `phone number`, etc., depending on the type.\n",
                        "type": "string"
                    },
                    "blacklisted": {
                        "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)\n",
                        "type": "boolean"
                    },
                    "countryCode": {
                        "description": "The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)\n",
                        "type": "integer"
                    },
                    "deviceType": {
                        "description": "Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)\n",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "label": {
                        "description": "The label (e.g., \"Work\", \"Mobile\", \"Ashley's iPhone\", etc.).\n",
                        "type": "string"
                    },
                    "sendShortEmail": {
                        "description": "Send an abbreviated email message instead of the standard email output. (Email contact method only.)\n",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The type of the found contact method. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).\n",
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "required": [
                    "address",
                    "blacklisted",
                    "countryCode",
                    "deviceType",
                    "enabled",
                    "label",
                    "sendShortEmail",
                    "type",
                    "userId",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getUsers:getUsers": {
            "description": "Use this data source to get information about [list of users](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources, optionally filtering by team ids.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst devops = pagerduty.getTeam({\n    name: \"devops\",\n});\nconst me = pagerduty.getUser({\n    email: \"me@example.com\",\n});\nconst exampleWTeam = new pagerduty.User(\"example_w_team\", {\n    name: \"user-with-team\",\n    email: \"user-with-team@example.com\",\n});\nconst example = new pagerduty.TeamMembership(\"example\", {\n    teamId: devopsPagerdutyTeam.id,\n    userId: exampleWTeam.id,\n});\nconst allUsers = pagerduty.getUsers({});\nconst fromDevopsTeam = pagerduty.getUsers({\n    teamIds: [devopsPagerdutyTeam.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndevops = pagerduty.get_team(name=\"devops\")\nme = pagerduty.get_user(email=\"me@example.com\")\nexample_w_team = pagerduty.User(\"example_w_team\",\n    name=\"user-with-team\",\n    email=\"user-with-team@example.com\")\nexample = pagerduty.TeamMembership(\"example\",\n    team_id=devops_pagerduty_team[\"id\"],\n    user_id=example_w_team.id)\nall_users = pagerduty.get_users()\nfrom_devops_team = pagerduty.get_users(team_ids=[devops_pagerduty_team[\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var devops = Pagerduty.GetTeam.Invoke(new()\n    {\n        Name = \"devops\",\n    });\n\n    var me = Pagerduty.GetUser.Invoke(new()\n    {\n        Email = \"me@example.com\",\n    });\n\n    var exampleWTeam = new Pagerduty.User(\"example_w_team\", new()\n    {\n        Name = \"user-with-team\",\n        Email = \"user-with-team@example.com\",\n    });\n\n    var example = new Pagerduty.TeamMembership(\"example\", new()\n    {\n        TeamId = devopsPagerdutyTeam.Id,\n        UserId = exampleWTeam.Id,\n    });\n\n    var allUsers = Pagerduty.GetUsers.Invoke();\n\n    var fromDevopsTeam = Pagerduty.GetUsers.Invoke(new()\n    {\n        TeamIds = new[]\n        {\n            devopsPagerdutyTeam.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := pagerduty.LookupTeam(ctx, \u0026pagerduty.LookupTeamArgs{\nName: \"devops\",\n}, nil);\nif err != nil {\nreturn err\n}\n_, err = pagerduty.LookupUser(ctx, \u0026pagerduty.LookupUserArgs{\nEmail: \"me@example.com\",\n}, nil);\nif err != nil {\nreturn err\n}\nexampleWTeam, err := pagerduty.NewUser(ctx, \"example_w_team\", \u0026pagerduty.UserArgs{\nName: pulumi.String(\"user-with-team\"),\nEmail: pulumi.String(\"user-with-team@example.com\"),\n})\nif err != nil {\nreturn err\n}\n_, err = pagerduty.NewTeamMembership(ctx, \"example\", \u0026pagerduty.TeamMembershipArgs{\nTeamId: pulumi.Any(devopsPagerdutyTeam.Id),\nUserId: exampleWTeam.ID(),\n})\nif err != nil {\nreturn err\n}\n_, err = pagerduty.GetUsers(ctx, nil, nil);\nif err != nil {\nreturn err\n}\n_, err = pagerduty.GetUsers(ctx, \u0026pagerduty.GetUsersArgs{\nTeamIds: interface{}{\ndevopsPagerdutyTeam.Id,\n},\n}, nil);\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetTeamArgs;\nimport com.pulumi.pagerduty.inputs.GetUserArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.TeamMembership;\nimport com.pulumi.pagerduty.TeamMembershipArgs;\nimport com.pulumi.pagerduty.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var devops = PagerdutyFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"devops\")\n            .build());\n\n        final var me = PagerdutyFunctions.getUser(GetUserArgs.builder()\n            .email(\"me@example.com\")\n            .build());\n\n        var exampleWTeam = new User(\"exampleWTeam\", UserArgs.builder()\n            .name(\"user-with-team\")\n            .email(\"user-with-team@example.com\")\n            .build());\n\n        var example = new TeamMembership(\"example\", TeamMembershipArgs.builder()\n            .teamId(devopsPagerdutyTeam.id())\n            .userId(exampleWTeam.id())\n            .build());\n\n        final var allUsers = PagerdutyFunctions.getUsers();\n\n        final var fromDevopsTeam = PagerdutyFunctions.getUsers(GetUsersArgs.builder()\n            .teamIds(devopsPagerdutyTeam.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWTeam:\n    type: pagerduty:User\n    name: example_w_team\n    properties:\n      name: user-with-team\n      email: user-with-team@example.com\n  example:\n    type: pagerduty:TeamMembership\n    properties:\n      teamId: ${devopsPagerdutyTeam.id}\n      userId: ${exampleWTeam.id}\nvariables:\n  devops:\n    fn::invoke:\n      Function: pagerduty:getTeam\n      Arguments:\n        name: devops\n  me:\n    fn::invoke:\n      Function: pagerduty:getUser\n      Arguments:\n        email: me@example.com\n  allUsers:\n    fn::invoke:\n      Function: pagerduty:getUsers\n      Arguments: {}\n  fromDevopsTeam:\n    fn::invoke:\n      Function: pagerduty:getUsers\n      Arguments:\n        teamIds:\n          - ${devopsPagerdutyTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "teamIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "teamIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "users": {
                        "description": "List of users queried.\n",
                        "items": {
                            "$ref": "#/types/pagerduty:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "pagerduty:index/getVendor:getVendor": {
            "description": "Use this data source to get information about a specific [vendor](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI1OQ-list-vendors) that you can use for a service integration (e.g. Amazon Cloudwatch, Splunk, Datadog).\n\n\u003e For the case of vendors that rely on [Change Events](https://support.pagerduty.com/docs/change-events) (e.g. Jekings CI, Github, Gitlab, ...) is important to know that those vendors are only available with [PagerDuty AIOps](https://support.pagerduty.com/docs/aiops) add-on. Therefore, they won't be accessible as result of `pagerduty.getVendor` data source without the proper entitlements.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pagerduty from \"@pulumi/pagerduty\";\n\nconst datadog = pagerduty.getVendor({\n    name: \"Datadog\",\n});\nconst example = new pagerduty.User(\"example\", {\n    name: \"Earline Greenholt\",\n    email: \"125.greenholt.earline@graham.name\",\n    teams: [examplePagerdutyTeam.id],\n});\nconst foo = new pagerduty.EscalationPolicy(\"foo\", {\n    name: \"Engineering Escalation Policy\",\n    numLoops: 2,\n    rules: [{\n        escalationDelayInMinutes: 10,\n        targets: [{\n            type: \"user\",\n            id: example.id,\n        }],\n    }],\n});\nconst exampleService = new pagerduty.Service(\"example\", {\n    name: \"My Web App\",\n    autoResolveTimeout: \"14400\",\n    acknowledgementTimeout: \"600\",\n    escalationPolicy: examplePagerdutyEscalationPolicy.id,\n});\nconst exampleServiceIntegration = new pagerduty.ServiceIntegration(\"example\", {\n    name: \"Datadog Integration\",\n    vendor: datadog.then(datadog =\u003e datadog.id),\n    service: exampleService.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_pagerduty as pagerduty\n\ndatadog = pagerduty.get_vendor(name=\"Datadog\")\nexample = pagerduty.User(\"example\",\n    name=\"Earline Greenholt\",\n    email=\"125.greenholt.earline@graham.name\",\n    teams=[example_pagerduty_team[\"id\"]])\nfoo = pagerduty.EscalationPolicy(\"foo\",\n    name=\"Engineering Escalation Policy\",\n    num_loops=2,\n    rules=[{\n        \"escalation_delay_in_minutes\": 10,\n        \"targets\": [{\n            \"type\": \"user\",\n            \"id\": example.id,\n        }],\n    }])\nexample_service = pagerduty.Service(\"example\",\n    name=\"My Web App\",\n    auto_resolve_timeout=\"14400\",\n    acknowledgement_timeout=\"600\",\n    escalation_policy=example_pagerduty_escalation_policy[\"id\"])\nexample_service_integration = pagerduty.ServiceIntegration(\"example\",\n    name=\"Datadog Integration\",\n    vendor=datadog.id,\n    service=example_service.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pagerduty = Pulumi.Pagerduty;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var datadog = Pagerduty.GetVendor.Invoke(new()\n    {\n        Name = \"Datadog\",\n    });\n\n    var example = new Pagerduty.User(\"example\", new()\n    {\n        Name = \"Earline Greenholt\",\n        Email = \"125.greenholt.earline@graham.name\",\n        Teams = new[]\n        {\n            examplePagerdutyTeam.Id,\n        },\n    });\n\n    var foo = new Pagerduty.EscalationPolicy(\"foo\", new()\n    {\n        Name = \"Engineering Escalation Policy\",\n        NumLoops = 2,\n        Rules = new[]\n        {\n            new Pagerduty.Inputs.EscalationPolicyRuleArgs\n            {\n                EscalationDelayInMinutes = 10,\n                Targets = new[]\n                {\n                    new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Type = \"user\",\n                        Id = example.Id,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleService = new Pagerduty.Service(\"example\", new()\n    {\n        Name = \"My Web App\",\n        AutoResolveTimeout = \"14400\",\n        AcknowledgementTimeout = \"600\",\n        EscalationPolicy = examplePagerdutyEscalationPolicy.Id,\n    });\n\n    var exampleServiceIntegration = new Pagerduty.ServiceIntegration(\"example\", new()\n    {\n        Name = \"Datadog Integration\",\n        Vendor = datadog.Apply(getVendorResult =\u003e getVendorResult.Id),\n        Service = exampleService.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatadog, err := pagerduty.GetVendor(ctx, \u0026pagerduty.GetVendorArgs{\n\t\t\tName: \"Datadog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := pagerduty.NewUser(ctx, \"example\", \u0026pagerduty.UserArgs{\n\t\t\tName:  pulumi.String(\"Earline Greenholt\"),\n\t\t\tEmail: pulumi.String(\"125.greenholt.earline@graham.name\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texamplePagerdutyTeam.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewEscalationPolicy(ctx, \"foo\", \u0026pagerduty.EscalationPolicyArgs{\n\t\t\tName:     pulumi.String(\"Engineering Escalation Policy\"),\n\t\t\tNumLoops: pulumi.Int(2),\n\t\t\tRules: pagerduty.EscalationPolicyRuleArray{\n\t\t\t\t\u0026pagerduty.EscalationPolicyRuleArgs{\n\t\t\t\t\tEscalationDelayInMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: pagerduty.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026pagerduty.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t\tId:   example.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := pagerduty.NewService(ctx, \"example\", \u0026pagerduty.ServiceArgs{\n\t\t\tName:                   pulumi.String(\"My Web App\"),\n\t\t\tAutoResolveTimeout:     pulumi.String(\"14400\"),\n\t\t\tAcknowledgementTimeout: pulumi.String(\"600\"),\n\t\t\tEscalationPolicy:       pulumi.Any(examplePagerdutyEscalationPolicy.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pagerduty.NewServiceIntegration(ctx, \"example\", \u0026pagerduty.ServiceIntegrationArgs{\n\t\t\tName:    pulumi.String(\"Datadog Integration\"),\n\t\t\tVendor:  pulumi.String(datadog.Id),\n\t\t\tService: exampleService.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pagerduty.PagerdutyFunctions;\nimport com.pulumi.pagerduty.inputs.GetVendorArgs;\nimport com.pulumi.pagerduty.User;\nimport com.pulumi.pagerduty.UserArgs;\nimport com.pulumi.pagerduty.EscalationPolicy;\nimport com.pulumi.pagerduty.EscalationPolicyArgs;\nimport com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.pagerduty.Service;\nimport com.pulumi.pagerduty.ServiceArgs;\nimport com.pulumi.pagerduty.ServiceIntegration;\nimport com.pulumi.pagerduty.ServiceIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var datadog = PagerdutyFunctions.getVendor(GetVendorArgs.builder()\n            .name(\"Datadog\")\n            .build());\n\n        var example = new User(\"example\", UserArgs.builder()\n            .name(\"Earline Greenholt\")\n            .email(\"125.greenholt.earline@graham.name\")\n            .teams(examplePagerdutyTeam.id())\n            .build());\n\n        var foo = new EscalationPolicy(\"foo\", EscalationPolicyArgs.builder()\n            .name(\"Engineering Escalation Policy\")\n            .numLoops(2)\n            .rules(EscalationPolicyRuleArgs.builder()\n                .escalationDelayInMinutes(10)\n                .targets(EscalationPolicyRuleTargetArgs.builder()\n                    .type(\"user\")\n                    .id(example.id())\n                    .build())\n                .build())\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .name(\"My Web App\")\n            .autoResolveTimeout(14400)\n            .acknowledgementTimeout(600)\n            .escalationPolicy(examplePagerdutyEscalationPolicy.id())\n            .build());\n\n        var exampleServiceIntegration = new ServiceIntegration(\"exampleServiceIntegration\", ServiceIntegrationArgs.builder()\n            .name(\"Datadog Integration\")\n            .vendor(datadog.applyValue(getVendorResult -\u003e getVendorResult.id()))\n            .service(exampleService.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: pagerduty:User\n    properties:\n      name: Earline Greenholt\n      email: 125.greenholt.earline@graham.name\n      teams:\n        - ${examplePagerdutyTeam.id}\n  foo:\n    type: pagerduty:EscalationPolicy\n    properties:\n      name: Engineering Escalation Policy\n      numLoops: 2\n      rules:\n        - escalationDelayInMinutes: 10\n          targets:\n            - type: user\n              id: ${example.id}\n  exampleService:\n    type: pagerduty:Service\n    name: example\n    properties:\n      name: My Web App\n      autoResolveTimeout: 14400\n      acknowledgementTimeout: 600\n      escalationPolicy: ${examplePagerdutyEscalationPolicy.id}\n  exampleServiceIntegration:\n    type: pagerduty:ServiceIntegration\n    name: example\n    properties:\n      name: Datadog Integration\n      vendor: ${datadog.id}\n      service: ${exampleService.id}\nvariables:\n  datadog:\n    fn::invoke:\n      Function: pagerduty:getVendor\n      Arguments:\n        name: Datadog\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVendor.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The vendor name to use to find a vendor in the PagerDuty API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVendor.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The short name of the found vendor.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The generic service type for this vendor.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}