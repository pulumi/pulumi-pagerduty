// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An Automation Actions [action association with a service](https://developer.pagerduty.com/api-reference/5d2f051f3fb43-associate-an-automation-action-with-a-service) configures the relation of a specific Action with a Service.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleUser = new Pagerduty.User("exampleUser", new()
    ///     {
    ///         Email = "125.greenholt.earline@graham.name",
    ///     });
    /// 
    ///     var fooEscalationPolicy = new Pagerduty.EscalationPolicy("fooEscalationPolicy", new()
    ///     {
    ///         NumLoops = 2,
    ///         Rules = new[]
    ///         {
    ///             new Pagerduty.Inputs.EscalationPolicyRuleArgs
    ///             {
    ///                 EscalationDelayInMinutes = 10,
    ///                 Targets = new[]
    ///                 {
    ///                     new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
    ///                     {
    ///                         Type = "user_reference",
    ///                         Id = exampleUser.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleService = new Pagerduty.Service("exampleService", new()
    ///     {
    ///         AutoResolveTimeout = "14400",
    ///         AcknowledgementTimeout = "600",
    ///         EscalationPolicy = fooEscalationPolicy.Id,
    ///         AlertCreation = "create_alerts_and_incidents",
    ///         AutoPauseNotificationsParameters = new Pagerduty.Inputs.ServiceAutoPauseNotificationsParametersArgs
    ///         {
    ///             Enabled = true,
    ///             Timeout = 300,
    ///         },
    ///     });
    /// 
    ///     var paActionExample = new Pagerduty.AutomationActionsAction("paActionExample", new()
    ///     {
    ///         Description = "Description of the PA Action created via TF",
    ///         ActionType = "process_automation",
    ///         ActionDataReference = new Pagerduty.Inputs.AutomationActionsActionActionDataReferenceArgs
    ///         {
    ///             ProcessAutomationJobId = "P123456",
    ///         },
    ///     });
    /// 
    ///     var fooAutomationActionsActionServiceAssociation = new Pagerduty.AutomationActionsActionServiceAssociation("fooAutomationActionsActionServiceAssociation", new()
    ///     {
    ///         ActionId = paActionExample.Id,
    ///         ServiceId = exampleService.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Action service association can be imported using the `action_id` and `service_id` separated by a colon, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation")]
    public partial class AutomationActionsActionServiceAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the action.
        /// </summary>
        [Output("actionId")]
        public Output<string> ActionId { get; private set; } = null!;

        /// <summary>
        /// Id of the service associated to the action.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a AutomationActionsActionServiceAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutomationActionsActionServiceAssociation(string name, AutomationActionsActionServiceAssociationArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation", name, args ?? new AutomationActionsActionServiceAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutomationActionsActionServiceAssociation(string name, Input<string> id, AutomationActionsActionServiceAssociationState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutomationActionsActionServiceAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutomationActionsActionServiceAssociation Get(string name, Input<string> id, AutomationActionsActionServiceAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new AutomationActionsActionServiceAssociation(name, id, state, options);
        }
    }

    public sealed class AutomationActionsActionServiceAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the action.
        /// </summary>
        [Input("actionId", required: true)]
        public Input<string> ActionId { get; set; } = null!;

        /// <summary>
        /// Id of the service associated to the action.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public AutomationActionsActionServiceAssociationArgs()
        {
        }
        public static new AutomationActionsActionServiceAssociationArgs Empty => new AutomationActionsActionServiceAssociationArgs();
    }

    public sealed class AutomationActionsActionServiceAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the action.
        /// </summary>
        [Input("actionId")]
        public Input<string>? ActionId { get; set; }

        /// <summary>
        /// Id of the service associated to the action.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public AutomationActionsActionServiceAssociationState()
        {
        }
        public static new AutomationActionsActionServiceAssociationState Empty => new AutomationActionsActionServiceAssociationState();
    }
}
