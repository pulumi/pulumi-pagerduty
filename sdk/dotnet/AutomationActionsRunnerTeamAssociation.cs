// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An Automation Actions [runner association with a team](https://developer.pagerduty.com/api-reference/f662de6271a6e-associate-a-runner-with-a-team) configures the relation of a specific Runner with a Team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var teamEntEng = new Pagerduty.Team("teamEntEng", new()
    ///     {
    ///         Description = "Enterprise engineering",
    ///     });
    /// 
    ///     var paRunbookRunner = new Pagerduty.AutomationActionsRunner("paRunbookRunner", new()
    ///     {
    ///         Description = "Description of the Runner created via TF",
    ///         RunnerType = "runbook",
    ///         RunbookBaseUri = "cat-cat",
    ///         RunbookApiKey = "cat-secret",
    ///     });
    /// 
    ///     var paRunnerEntEngAssoc = new Pagerduty.AutomationActionsRunnerTeamAssociation("paRunnerEntEngAssoc", new()
    ///     {
    ///         RunnerId = paRunbookRunner.Id,
    ///         TeamId = teamEntEng.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Runner team association can be imported using the `runner_id` and `team_id` separated by a colon, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation")]
    public partial class AutomationActionsRunnerTeamAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the runner.
        /// </summary>
        [Output("runnerId")]
        public Output<string> RunnerId { get; private set; } = null!;

        /// <summary>
        /// Id of the team associated with the runner.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a AutomationActionsRunnerTeamAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutomationActionsRunnerTeamAssociation(string name, AutomationActionsRunnerTeamAssociationArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation", name, args ?? new AutomationActionsRunnerTeamAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutomationActionsRunnerTeamAssociation(string name, Input<string> id, AutomationActionsRunnerTeamAssociationState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutomationActionsRunnerTeamAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutomationActionsRunnerTeamAssociation Get(string name, Input<string> id, AutomationActionsRunnerTeamAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new AutomationActionsRunnerTeamAssociation(name, id, state, options);
        }
    }

    public sealed class AutomationActionsRunnerTeamAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the runner.
        /// </summary>
        [Input("runnerId", required: true)]
        public Input<string> RunnerId { get; set; } = null!;

        /// <summary>
        /// Id of the team associated with the runner.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public AutomationActionsRunnerTeamAssociationArgs()
        {
        }
        public static new AutomationActionsRunnerTeamAssociationArgs Empty => new AutomationActionsRunnerTeamAssociationArgs();
    }

    public sealed class AutomationActionsRunnerTeamAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the runner.
        /// </summary>
        [Input("runnerId")]
        public Input<string>? RunnerId { get; set; }

        /// <summary>
        /// Id of the team associated with the runner.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public AutomationActionsRunnerTeamAssociationState()
        {
        }
        public static new AutomationActionsRunnerTeamAssociationState Empty => new AutomationActionsRunnerTeamAssociationState();
    }
}
