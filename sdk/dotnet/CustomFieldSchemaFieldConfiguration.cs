// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// A [Custom Field Configuration](https://support.pagerduty.com/docs/custom-fields#associate-schemas-with-services) is a declaration of a specific Custom Field in a specific Custom Field Schema.
    /// 
    /// &gt; The Custom Fields feature is currently available in Early Access.
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/customFieldSchemaFieldConfiguration:CustomFieldSchemaFieldConfiguration")]
    public partial class CustomFieldSchemaFieldConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default value for the field.
        /// </summary>
        [Output("defaultValue")]
        public Output<string?> DefaultValue { get; private set; } = null!;

        /// <summary>
        /// The datatype of the default value.
        /// </summary>
        [Output("defaultValueDatatype")]
        public Output<string?> DefaultValueDatatype { get; private set; } = null!;

        /// <summary>
        /// Whether or not the default value is multi-valued.
        /// </summary>
        [Output("defaultValueMultiValue")]
        public Output<bool?> DefaultValueMultiValue { get; private set; } = null!;

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Output("field")]
        public Output<string> Field { get; private set; } = null!;

        /// <summary>
        /// True if the field is required
        /// </summary>
        [Output("required")]
        public Output<bool?> Required { get; private set; } = null!;

        /// <summary>
        /// The ID of the schema.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;


        /// <summary>
        /// Create a CustomFieldSchemaFieldConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomFieldSchemaFieldConfiguration(string name, CustomFieldSchemaFieldConfigurationArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/customFieldSchemaFieldConfiguration:CustomFieldSchemaFieldConfiguration", name, args ?? new CustomFieldSchemaFieldConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomFieldSchemaFieldConfiguration(string name, Input<string> id, CustomFieldSchemaFieldConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/customFieldSchemaFieldConfiguration:CustomFieldSchemaFieldConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomFieldSchemaFieldConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomFieldSchemaFieldConfiguration Get(string name, Input<string> id, CustomFieldSchemaFieldConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomFieldSchemaFieldConfiguration(name, id, state, options);
        }
    }

    public sealed class CustomFieldSchemaFieldConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default value for the field.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The datatype of the default value.
        /// </summary>
        [Input("defaultValueDatatype")]
        public Input<string>? DefaultValueDatatype { get; set; }

        /// <summary>
        /// Whether or not the default value is multi-valued.
        /// </summary>
        [Input("defaultValueMultiValue")]
        public Input<bool>? DefaultValueMultiValue { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// True if the field is required
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// The ID of the schema.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        public CustomFieldSchemaFieldConfigurationArgs()
        {
        }
        public static new CustomFieldSchemaFieldConfigurationArgs Empty => new CustomFieldSchemaFieldConfigurationArgs();
    }

    public sealed class CustomFieldSchemaFieldConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default value for the field.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The datatype of the default value.
        /// </summary>
        [Input("defaultValueDatatype")]
        public Input<string>? DefaultValueDatatype { get; set; }

        /// <summary>
        /// Whether or not the default value is multi-valued.
        /// </summary>
        [Input("defaultValueMultiValue")]
        public Input<bool>? DefaultValueMultiValue { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// True if the field is required
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// The ID of the schema.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        public CustomFieldSchemaFieldConfigurationState()
        {
        }
        public static new CustomFieldSchemaFieldConfigurationState Empty => new CustomFieldSchemaFieldConfigurationState();
    }
}
