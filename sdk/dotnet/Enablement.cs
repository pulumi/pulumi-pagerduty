// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// [Enablements](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-list-enablements) allow you to enable or disable specific features for PagerDuty entities such as services and event orchestrations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Pagerduty.GetService.Invoke(new()
    ///     {
    ///         Name = "My Web Service",
    ///     });
    /// 
    ///     var exampleEnablement = new Pagerduty.Enablement("example", new()
    ///     {
    ///         EntityType = "service",
    ///         EntityId = example.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         Feature = "aiops",
    ///         Enabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Enablements can be imported using the `id`, which is constructed by concatenating the `entity_type`, `entity_id`, and `feature` with dots, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/enablement:Enablement example service.P7HHMVK.aiops
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/enablement:Enablement")]
    public partial class Enablement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the entity for which to manage the enablement.
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        /// <summary>
        /// The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
        /// </summary>
        [Output("entityType")]
        public Output<string> EntityType { get; private set; } = null!;

        /// <summary>
        /// The name of the feature to enable or disable. Possible values can be `aiops`.
        /// </summary>
        [Output("feature")]
        public Output<string> Feature { get; private set; } = null!;


        /// <summary>
        /// Create a Enablement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Enablement(string name, EnablementArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/enablement:Enablement", name, args ?? new EnablementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Enablement(string name, Input<string> id, EnablementState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/enablement:Enablement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Enablement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Enablement Get(string name, Input<string> id, EnablementState? state = null, CustomResourceOptions? options = null)
        {
            return new Enablement(name, id, state, options);
        }
    }

    public sealed class EnablementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the entity for which to manage the enablement.
        /// </summary>
        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        /// <summary>
        /// The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
        /// </summary>
        [Input("entityType", required: true)]
        public Input<string> EntityType { get; set; } = null!;

        /// <summary>
        /// The name of the feature to enable or disable. Possible values can be `aiops`.
        /// </summary>
        [Input("feature", required: true)]
        public Input<string> Feature { get; set; } = null!;

        public EnablementArgs()
        {
        }
        public static new EnablementArgs Empty => new EnablementArgs();
    }

    public sealed class EnablementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the entity for which to manage the enablement.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// The name of the feature to enable or disable. Possible values can be `aiops`.
        /// </summary>
        [Input("feature")]
        public Input<string>? Feature { get; set; }

        public EnablementState()
        {
        }
        public static new EnablementState Empty => new EnablementState();
    }
}
