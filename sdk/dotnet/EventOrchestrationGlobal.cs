// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// ## Import
    /// 
    /// Global Orchestration can be imported using the `id` of the Event Orchestration, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal global 1b49abe7-26db-4439-a715-c6d883acfb3e
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal")]
    public partial class EventOrchestrationGlobal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Output("catchAll")]
        public Output<Outputs.EventOrchestrationGlobalCatchAll> CatchAll { get; private set; } = null!;

        /// <summary>
        /// ID of the Event Orchestration to which this Global Orchestration belongs to.
        /// </summary>
        [Output("eventOrchestration")]
        public Output<string> EventOrchestration { get; private set; } = null!;

        /// <summary>
        /// A Global Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        [Output("sets")]
        public Output<ImmutableArray<Outputs.EventOrchestrationGlobalSet>> Sets { get; private set; } = null!;


        /// <summary>
        /// Create a EventOrchestrationGlobal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventOrchestrationGlobal(string name, EventOrchestrationGlobalArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal", name, args ?? new EventOrchestrationGlobalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventOrchestrationGlobal(string name, Input<string> id, EventOrchestrationGlobalState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventOrchestrationGlobal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventOrchestrationGlobal Get(string name, Input<string> id, EventOrchestrationGlobalState? state = null, CustomResourceOptions? options = null)
        {
            return new EventOrchestrationGlobal(name, id, state, options);
        }
    }

    public sealed class EventOrchestrationGlobalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Input("catchAll", required: true)]
        public Input<Inputs.EventOrchestrationGlobalCatchAllArgs> CatchAll { get; set; } = null!;

        /// <summary>
        /// ID of the Event Orchestration to which this Global Orchestration belongs to.
        /// </summary>
        [Input("eventOrchestration", required: true)]
        public Input<string> EventOrchestration { get; set; } = null!;

        [Input("sets", required: true)]
        private InputList<Inputs.EventOrchestrationGlobalSetArgs>? _sets;

        /// <summary>
        /// A Global Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        public InputList<Inputs.EventOrchestrationGlobalSetArgs> Sets
        {
            get => _sets ?? (_sets = new InputList<Inputs.EventOrchestrationGlobalSetArgs>());
            set => _sets = value;
        }

        public EventOrchestrationGlobalArgs()
        {
        }
        public static new EventOrchestrationGlobalArgs Empty => new EventOrchestrationGlobalArgs();
    }

    public sealed class EventOrchestrationGlobalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Input("catchAll")]
        public Input<Inputs.EventOrchestrationGlobalCatchAllGetArgs>? CatchAll { get; set; }

        /// <summary>
        /// ID of the Event Orchestration to which this Global Orchestration belongs to.
        /// </summary>
        [Input("eventOrchestration")]
        public Input<string>? EventOrchestration { get; set; }

        [Input("sets")]
        private InputList<Inputs.EventOrchestrationGlobalSetGetArgs>? _sets;

        /// <summary>
        /// A Global Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        public InputList<Inputs.EventOrchestrationGlobalSetGetArgs> Sets
        {
            get => _sets ?? (_sets = new InputList<Inputs.EventOrchestrationGlobalSetGetArgs>());
            set => _sets = value;
        }

        public EventOrchestrationGlobalState()
        {
        }
        public static new EventOrchestrationGlobalState Empty => new EventOrchestrationGlobalState();
    }
}
