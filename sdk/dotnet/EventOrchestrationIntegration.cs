// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An Event Orchestration Integration allows you to create and manage multiple Integrations (and Routing Keys) per Event Orchestration _and_ will allow you to move (migrate) Integrations _between_ two Event Orchestrations.
    /// 
    /// ## Example of configuring an Integration for an Event Orchestration
    /// 
    /// This example shows creating `Event Orchestration` and `Team` resources followed by creating an Event Orchestration Integration to handle Events sent to that Event Orchestration.
    /// 
    /// &gt; When a new Event Orchestration is created there will be one Integration (and Routing Key) included by default. Example below shows how to create an extra Integration associated with this Event Orchestration.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var databaseTeam = new Pagerduty.Team("database_team", new()
    ///     {
    ///         Name = "Database Team",
    ///     });
    /// 
    ///     var eventOrchestration = new Pagerduty.EventOrchestration("event_orchestration", new()
    ///     {
    ///         Name = "Example Orchestration",
    ///         Team = databaseTeam.Id,
    ///     });
    /// 
    ///     var integration = new Pagerduty.EventOrchestrationIntegration("integration", new()
    ///     {
    ///         EventOrchestration = eventOrchestration.Id,
    ///         Label = "Example integration",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Event Orchestration Integration can be imported using colon-separated IDs, which is the combination of the Event Orchestration ID followed by the Event Orchestration Integration ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration integration 19acac92-027a-4ea0-b06c-bbf516519601:1b49abe7-26db-4439-a715-c6d883acfb3e
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration")]
    public partial class EventOrchestrationIntegration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.
        /// </summary>
        [Output("eventOrchestration")]
        public Output<string> EventOrchestration { get; private set; } = null!;

        /// <summary>
        /// Name/description of the Integration.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableArray<Outputs.EventOrchestrationIntegrationParameter>> Parameters { get; private set; } = null!;


        /// <summary>
        /// Create a EventOrchestrationIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventOrchestrationIntegration(string name, EventOrchestrationIntegrationArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration", name, args ?? new EventOrchestrationIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventOrchestrationIntegration(string name, Input<string> id, EventOrchestrationIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationIntegration:EventOrchestrationIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventOrchestrationIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventOrchestrationIntegration Get(string name, Input<string> id, EventOrchestrationIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new EventOrchestrationIntegration(name, id, state, options);
        }
    }

    public sealed class EventOrchestrationIntegrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.
        /// </summary>
        [Input("eventOrchestration", required: true)]
        public Input<string> EventOrchestration { get; set; } = null!;

        /// <summary>
        /// Name/description of the Integration.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        public EventOrchestrationIntegrationArgs()
        {
        }
        public static new EventOrchestrationIntegrationArgs Empty => new EventOrchestrationIntegrationArgs();
    }

    public sealed class EventOrchestrationIntegrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Event Orchestration to which this Integration belongs to. If value is changed, current Integration is associated with a newly provided ID.
        /// </summary>
        [Input("eventOrchestration")]
        public Input<string>? EventOrchestration { get; set; }

        /// <summary>
        /// Name/description of the Integration.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("parameters")]
        private InputList<Inputs.EventOrchestrationIntegrationParameterGetArgs>? _parameters;
        public InputList<Inputs.EventOrchestrationIntegrationParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.EventOrchestrationIntegrationParameterGetArgs>());
            set => _parameters = value;
        }

        public EventOrchestrationIntegrationState()
        {
        }
        public static new EventOrchestrationIntegrationState Empty => new EventOrchestrationIntegrationState();
    }
}
