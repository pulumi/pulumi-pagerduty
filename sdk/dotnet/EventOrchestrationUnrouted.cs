// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An Unrouted Orchestration allows users to create a set of Event Rules that will be evaluated against all events that don't match any rules in the Orchestration's Router.
    /// 
    /// The Unrouted Orchestration evaluates events sent to it against each of its rules, beginning with the rules in the "start" set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Unrouted Orchestration for further processing.
    /// 
    /// ## Example of configuring Unrouted Rules for an Orchestration
    /// 
    /// In this example of an Unrouted Orchestration, the rule matches only if the condition is matched.
    /// Alerts created for events that do not match the rule will have severity level set to `Info` as defined in `CatchAll` block.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var unrouted = new Pagerduty.EventOrchestrationUnrouted("unrouted", new()
    ///     {
    ///         EventOrchestration = myMonitor.Id,
    ///         Sets = new[]
    ///         {
    ///             new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs
    ///             {
    ///                 Id = "start",
    ///                 Rules = new[]
    ///                 {
    ///                     new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs
    ///                     {
    ///                         Label = "Update the summary of un-matched Critical alerts so they're easier to spot",
    ///                         Conditions = new[]
    ///                         {
    ///                             new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleConditionArgs
    ///                             {
    ///                                 Expression = "event.severity matches 'critical'",
    ///                             },
    ///                         },
    ///                         Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs
    ///                         {
    ///                             Severity = "critical",
    ///                             Extractions = new[]
    ///                             {
    ///                                 new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs
    ///                                 {
    ///                                     Target = "event.summary",
    ///                                     Template = "[Critical Unrouted] {{event.summary}}",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs
    ///         {
    ///             Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs
    ///             {
    ///                 Severity = "info",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Unrouted Orchestration can be imported using the `id` of the Event Orchestration, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted unrouted 1b49abe7-26db-4439-a715-c6d883acfb3e
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted")]
    public partial class EventOrchestrationUnrouted : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the `CatchAll` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Output("catchAll")]
        public Output<Outputs.EventOrchestrationUnroutedCatchAll> CatchAll { get; private set; } = null!;

        /// <summary>
        /// The Event Orchestration to which this Unrouted Orchestration belongs to.
        /// </summary>
        [Output("eventOrchestration")]
        public Output<string> EventOrchestration { get; private set; } = null!;

        /// <summary>
        /// An Unrouted Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        [Output("sets")]
        public Output<ImmutableArray<Outputs.EventOrchestrationUnroutedSet>> Sets { get; private set; } = null!;


        /// <summary>
        /// Create a EventOrchestrationUnrouted resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventOrchestrationUnrouted(string name, EventOrchestrationUnroutedArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted", name, args ?? new EventOrchestrationUnroutedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventOrchestrationUnrouted(string name, Input<string> id, EventOrchestrationUnroutedState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventOrchestrationUnrouted resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventOrchestrationUnrouted Get(string name, Input<string> id, EventOrchestrationUnroutedState? state = null, CustomResourceOptions? options = null)
        {
            return new EventOrchestrationUnrouted(name, id, state, options);
        }
    }

    public sealed class EventOrchestrationUnroutedArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the `CatchAll` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Input("catchAll", required: true)]
        public Input<Inputs.EventOrchestrationUnroutedCatchAllArgs> CatchAll { get; set; } = null!;

        /// <summary>
        /// The Event Orchestration to which this Unrouted Orchestration belongs to.
        /// </summary>
        [Input("eventOrchestration", required: true)]
        public Input<string> EventOrchestration { get; set; } = null!;

        [Input("sets", required: true)]
        private InputList<Inputs.EventOrchestrationUnroutedSetArgs>? _sets;

        /// <summary>
        /// An Unrouted Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        public InputList<Inputs.EventOrchestrationUnroutedSetArgs> Sets
        {
            get => _sets ?? (_sets = new InputList<Inputs.EventOrchestrationUnroutedSetArgs>());
            set => _sets = value;
        }

        public EventOrchestrationUnroutedArgs()
        {
        }
        public static new EventOrchestrationUnroutedArgs Empty => new EventOrchestrationUnroutedArgs();
    }

    public sealed class EventOrchestrationUnroutedState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// the `CatchAll` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
        /// </summary>
        [Input("catchAll")]
        public Input<Inputs.EventOrchestrationUnroutedCatchAllGetArgs>? CatchAll { get; set; }

        /// <summary>
        /// The Event Orchestration to which this Unrouted Orchestration belongs to.
        /// </summary>
        [Input("eventOrchestration")]
        public Input<string>? EventOrchestration { get; set; }

        [Input("sets")]
        private InputList<Inputs.EventOrchestrationUnroutedSetGetArgs>? _sets;

        /// <summary>
        /// An Unrouted Orchestration must contain at least a "start" set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
        /// </summary>
        public InputList<Inputs.EventOrchestrationUnroutedSetGetArgs> Sets
        {
            get => _sets ?? (_sets = new InputList<Inputs.EventOrchestrationUnroutedSetGetArgs>());
            set => _sets = value;
        }

        public EventOrchestrationUnroutedState()
        {
        }
        public static new EventOrchestrationUnroutedState Empty => new EventOrchestrationUnroutedState();
    }
}
