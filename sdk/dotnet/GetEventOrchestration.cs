// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetEventOrchestration
    {
        /// <summary>
        /// Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tfOrchA = new Pagerduty.EventOrchestration("tf_orch_a", new()
        ///     {
        ///         Name = "Test Event Orchestration",
        ///     });
        /// 
        ///     var tfMyMonitor = Pagerduty.GetEventOrchestration.Invoke(new()
        ///     {
        ///         Name = tfOrchA.Name,
        ///     });
        /// 
        ///     var unrouted = new Pagerduty.EventOrchestrationUnrouted("unrouted", new()
        ///     {
        ///         EventOrchestration = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.Id),
        ///         CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs
        ///         {
        ///             Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs
        ///             {
        ///                 Severity = "info",
        ///             },
        ///         },
        ///         Sets = new[]
        ///         {
        ///             new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs
        ///             {
        ///                 Id = "start",
        ///                 Rules = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs
        ///                     {
        ///                         Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs
        ///                         {
        ///                             Extractions = new[]
        ///                             {
        ///                                 new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs
        ///                                 {
        ///                                     Target = "event.custom_details.integration_type",
        ///                                     Template = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.IntegrationDetail[0]?.Parameters[0]?.Type),
        ///                                 },
        ///                             },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEventOrchestrationResult> InvokeAsync(GetEventOrchestrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventOrchestrationResult>("pagerduty:index/getEventOrchestration:getEventOrchestration", args ?? new GetEventOrchestrationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tfOrchA = new Pagerduty.EventOrchestration("tf_orch_a", new()
        ///     {
        ///         Name = "Test Event Orchestration",
        ///     });
        /// 
        ///     var tfMyMonitor = Pagerduty.GetEventOrchestration.Invoke(new()
        ///     {
        ///         Name = tfOrchA.Name,
        ///     });
        /// 
        ///     var unrouted = new Pagerduty.EventOrchestrationUnrouted("unrouted", new()
        ///     {
        ///         EventOrchestration = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.Id),
        ///         CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs
        ///         {
        ///             Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs
        ///             {
        ///                 Severity = "info",
        ///             },
        ///         },
        ///         Sets = new[]
        ///         {
        ///             new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs
        ///             {
        ///                 Id = "start",
        ///                 Rules = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs
        ///                     {
        ///                         Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs
        ///                         {
        ///                             Extractions = new[]
        ///                             {
        ///                                 new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs
        ///                                 {
        ///                                     Target = "event.custom_details.integration_type",
        ///                                     Template = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.IntegrationDetail[0]?.Parameters[0]?.Type),
        ///                                 },
        ///                             },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventOrchestrationResult> Invoke(GetEventOrchestrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventOrchestrationResult>("pagerduty:index/getEventOrchestration:getEventOrchestration", args ?? new GetEventOrchestrationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tfOrchA = new Pagerduty.EventOrchestration("tf_orch_a", new()
        ///     {
        ///         Name = "Test Event Orchestration",
        ///     });
        /// 
        ///     var tfMyMonitor = Pagerduty.GetEventOrchestration.Invoke(new()
        ///     {
        ///         Name = tfOrchA.Name,
        ///     });
        /// 
        ///     var unrouted = new Pagerduty.EventOrchestrationUnrouted("unrouted", new()
        ///     {
        ///         EventOrchestration = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.Id),
        ///         CatchAll = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllArgs
        ///         {
        ///             Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedCatchAllActionsArgs
        ///             {
        ///                 Severity = "info",
        ///             },
        ///         },
        ///         Sets = new[]
        ///         {
        ///             new Pagerduty.Inputs.EventOrchestrationUnroutedSetArgs
        ///             {
        ///                 Id = "start",
        ///                 Rules = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleArgs
        ///                     {
        ///                         Actions = new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsArgs
        ///                         {
        ///                             Extractions = new[]
        ///                             {
        ///                                 new Pagerduty.Inputs.EventOrchestrationUnroutedSetRuleActionsExtractionArgs
        ///                                 {
        ///                                     Target = "event.custom_details.integration_type",
        ///                                     Template = tfMyMonitor.Apply(getEventOrchestrationResult =&gt; getEventOrchestrationResult.IntegrationDetail[0]?.Parameters[0]?.Type),
        ///                                 },
        ///                             },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventOrchestrationResult> Invoke(GetEventOrchestrationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventOrchestrationResult>("pagerduty:index/getEventOrchestration:getEventOrchestration", args ?? new GetEventOrchestrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventOrchestrationArgs : global::Pulumi.InvokeArgs
    {
        [Input("integrationDetail")]
        private List<Inputs.GetEventOrchestrationIntegrationDetailArgs>? _integrationDetail;

        /// <summary>
        /// A list of integrations for the Event Orchestration.
        /// </summary>
        public List<Inputs.GetEventOrchestrationIntegrationDetailArgs> IntegrationDetail
        {
            get => _integrationDetail ?? (_integrationDetail = new List<Inputs.GetEventOrchestrationIntegrationDetailArgs>());
            set => _integrationDetail = value;
        }

        /// <summary>
        /// The name of the Global Event Orchestration to find in the PagerDuty API.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetEventOrchestrationArgs()
        {
        }
        public static new GetEventOrchestrationArgs Empty => new GetEventOrchestrationArgs();
    }

    public sealed class GetEventOrchestrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("integrationDetail")]
        private InputList<Inputs.GetEventOrchestrationIntegrationDetailInputArgs>? _integrationDetail;

        /// <summary>
        /// A list of integrations for the Event Orchestration.
        /// </summary>
        public InputList<Inputs.GetEventOrchestrationIntegrationDetailInputArgs> IntegrationDetail
        {
            get => _integrationDetail ?? (_integrationDetail = new InputList<Inputs.GetEventOrchestrationIntegrationDetailInputArgs>());
            set => _integrationDetail = value;
        }

        /// <summary>
        /// The name of the Global Event Orchestration to find in the PagerDuty API.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetEventOrchestrationInvokeArgs()
        {
        }
        public static new GetEventOrchestrationInvokeArgs Empty => new GetEventOrchestrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventOrchestrationResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of integrations for the Event Orchestration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEventOrchestrationIntegrationDetailResult> IntegrationDetail;
        /// <summary>
        /// The name of the found Event Orchestration.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetEventOrchestrationResult(
            string id,

            ImmutableArray<Outputs.GetEventOrchestrationIntegrationDetailResult> integrationDetail,

            string name)
        {
            Id = id;
            IntegrationDetail = integrationDetail;
            Name = name;
        }
    }
}
