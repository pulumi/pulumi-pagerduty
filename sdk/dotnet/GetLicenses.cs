// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetLicenses
    {
        /// <summary>
        /// Use this data source to get information about the purchased [licenses](https://developer.pagerduty.com/api-reference/4c10cb38f7381-list-licenses) that you can use for other managing PagerDuty user resources. To reference a unique license, see `pagerduty.getLicense` [data source](https://registry.terraform.io/providers/PagerDuty/pagerduty/latest/docs/data-sources/pagerduty_license). After applying changes to users' licenses, the `current_value` and `allocations_available` attributes of licenses will change.
        /// </summary>
        public static Task<GetLicensesResult> InvokeAsync(GetLicensesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicensesResult>("pagerduty:index/getLicenses:getLicenses", args ?? new GetLicensesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the purchased [licenses](https://developer.pagerduty.com/api-reference/4c10cb38f7381-list-licenses) that you can use for other managing PagerDuty user resources. To reference a unique license, see `pagerduty.getLicense` [data source](https://registry.terraform.io/providers/PagerDuty/pagerduty/latest/docs/data-sources/pagerduty_license). After applying changes to users' licenses, the `current_value` and `allocations_available` attributes of licenses will change.
        /// </summary>
        public static Output<GetLicensesResult> Invoke(GetLicensesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicensesResult>("pagerduty:index/getLicenses:getLicenses", args ?? new GetLicensesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicensesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("licenses")]
        private List<Inputs.GetLicensesLicenseArgs>? _licenses;

        /// <summary>
        /// The list of purchased licenses.
        /// </summary>
        public List<Inputs.GetLicensesLicenseArgs> Licenses
        {
            get => _licenses ?? (_licenses = new List<Inputs.GetLicensesLicenseArgs>());
            set => _licenses = value;
        }

        public GetLicensesArgs()
        {
        }
        public static new GetLicensesArgs Empty => new GetLicensesArgs();
    }

    public sealed class GetLicensesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("licenses")]
        private InputList<Inputs.GetLicensesLicenseInputArgs>? _licenses;

        /// <summary>
        /// The list of purchased licenses.
        /// </summary>
        public InputList<Inputs.GetLicensesLicenseInputArgs> Licenses
        {
            get => _licenses ?? (_licenses = new InputList<Inputs.GetLicensesLicenseInputArgs>());
            set => _licenses = value;
        }

        public GetLicensesInvokeArgs()
        {
        }
        public static new GetLicensesInvokeArgs Empty => new GetLicensesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicensesResult
    {
        /// <summary>
        /// ID of the license
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of purchased licenses.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLicensesLicenseResult> Licenses;

        [OutputConstructor]
        private GetLicensesResult(
            string? id,

            ImmutableArray<Outputs.GetLicensesLicenseResult> licenses)
        {
            Id = id;
            Licenses = licenses;
        }
    }
}
