// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetStandards
    {
        /// <summary>
        /// Use this data source to get information about the [standards](https://developer.pagerduty.com/api-reference/dbed9a0ff9355-list-standards) applicable to
        /// the PagerDuty account.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var standards = Pagerduty.GetStandards.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetStandardsResult> InvokeAsync(GetStandardsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStandardsResult>("pagerduty:index/getStandards:getStandards", args ?? new GetStandardsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the [standards](https://developer.pagerduty.com/api-reference/dbed9a0ff9355-list-standards) applicable to
        /// the PagerDuty account.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var standards = Pagerduty.GetStandards.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetStandardsResult> Invoke(GetStandardsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStandardsResult>("pagerduty:index/getStandards:getStandards", args ?? new GetStandardsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter by `resource_type` the received standards. Allowed values are `technical_service`.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        public GetStandardsArgs()
        {
        }
        public static new GetStandardsArgs Empty => new GetStandardsArgs();
    }

    public sealed class GetStandardsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter by `resource_type` the received standards. Allowed values are `technical_service`.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        public GetStandardsInvokeArgs()
        {
        }
        public static new GetStandardsInvokeArgs Empty => new GetStandardsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStandardsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the type of resource to which the standard applies.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The list of standards defined.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardsStandardResult> Standards;

        [OutputConstructor]
        private GetStandardsResult(
            string id,

            string? resourceType,

            ImmutableArray<Outputs.GetStandardsStandardResult> standards)
        {
            Id = id;
            ResourceType = resourceType;
            Standards = standards;
        }
    }
}
