// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetStandardsResourceScores
    {
        /// <summary>
        /// Use this data source to get information about the [scores for the standards of a
        /// resource][1].
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Pagerduty.GetService.Invoke(new()
        ///     {
        ///         Name = "My Service",
        ///     });
        /// 
        ///     var scores = Pagerduty.GetStandardsResourceScores.Invoke(new()
        ///     {
        ///         ResourceType = "technical_services",
        ///         Id = example.Apply(getServiceResult =&gt; getServiceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStandardsResourceScoresResult> InvokeAsync(GetStandardsResourceScoresArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStandardsResourceScoresResult>("pagerduty:index/getStandardsResourceScores:getStandardsResourceScores", args ?? new GetStandardsResourceScoresArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about the [scores for the standards of a
        /// resource][1].
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Pagerduty.GetService.Invoke(new()
        ///     {
        ///         Name = "My Service",
        ///     });
        /// 
        ///     var scores = Pagerduty.GetStandardsResourceScores.Invoke(new()
        ///     {
        ///         ResourceType = "technical_services",
        ///         Id = example.Apply(getServiceResult =&gt; getServiceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStandardsResourceScoresResult> Invoke(GetStandardsResourceScoresInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStandardsResourceScoresResult>("pagerduty:index/getStandardsResourceScores:getStandardsResourceScores", args ?? new GetStandardsResourceScoresInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardsResourceScoresArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of said resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Type of the object the standards are associated to. Allowed values are `technical_services`.
        /// </summary>
        [Input("resourceType", required: true)]
        public string ResourceType { get; set; } = null!;

        public GetStandardsResourceScoresArgs()
        {
        }
        public static new GetStandardsResourceScoresArgs Empty => new GetStandardsResourceScoresArgs();
    }

    public sealed class GetStandardsResourceScoresInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of said resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Type of the object the standards are associated to. Allowed values are `technical_services`.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        public GetStandardsResourceScoresInvokeArgs()
        {
        }
        public static new GetStandardsResourceScoresInvokeArgs Empty => new GetStandardsResourceScoresInvokeArgs();
    }


    [OutputType]
    public sealed class GetStandardsResourceScoresResult
    {
        /// <summary>
        /// A unique identifier for the standard.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the type of resource to which the standard applies.
        /// </summary>
        public readonly string ResourceType;
        /// <summary>
        /// Summary of the scores for standards associated with this resource.
        /// </summary>
        public readonly Outputs.GetStandardsResourceScoresScoreResult Score;
        /// <summary>
        /// The list of standards evaluated against.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardsResourceScoresStandardResult> Standards;

        [OutputConstructor]
        private GetStandardsResourceScoresResult(
            string id,

            string resourceType,

            Outputs.GetStandardsResourceScoresScoreResult score,

            ImmutableArray<Outputs.GetStandardsResourceScoresStandardResult> standards)
        {
            Id = id;
            ResourceType = resourceType;
            Score = score;
            Standards = standards;
        }
    }
}
