// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetTeam
    {
        /// <summary>
        /// Use this data source to get information about a specific [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMw-list-teams) that you can use for other PagerDuty resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var me = Pagerduty.GetUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     var devops = Pagerduty.GetTeam.Invoke(new()
        ///     {
        ///         Name = "devops",
        ///     });
        /// 
        ///     var foo = new Pagerduty.EscalationPolicy("foo", new()
        ///     {
        ///         Name = "DevOps Escalation Policy",
        ///         NumLoops = 2,
        ///         Teams = devops.Apply(getTeamResult =&gt; getTeamResult.Id),
        ///         Rules = new[]
        ///         {
        ///             new Pagerduty.Inputs.EscalationPolicyRuleArgs
        ///             {
        ///                 EscalationDelayInMinutes = 10,
        ///                 Targets = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
        ///                     {
        ///                         Type = "user",
        ///                         Id = me.Apply(getUserResult =&gt; getUserResult.Id),
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTeamResult> InvokeAsync(GetTeamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamResult>("pagerduty:index/getTeam:getTeam", args ?? new GetTeamArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMw-list-teams) that you can use for other PagerDuty resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var me = Pagerduty.GetUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     var devops = Pagerduty.GetTeam.Invoke(new()
        ///     {
        ///         Name = "devops",
        ///     });
        /// 
        ///     var foo = new Pagerduty.EscalationPolicy("foo", new()
        ///     {
        ///         Name = "DevOps Escalation Policy",
        ///         NumLoops = 2,
        ///         Teams = devops.Apply(getTeamResult =&gt; getTeamResult.Id),
        ///         Rules = new[]
        ///         {
        ///             new Pagerduty.Inputs.EscalationPolicyRuleArgs
        ///             {
        ///                 EscalationDelayInMinutes = 10,
        ///                 Targets = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
        ///                     {
        ///                         Type = "user",
        ///                         Id = me.Apply(getUserResult =&gt; getUserResult.Id),
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("pagerduty:index/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific [team](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIyMw-list-teams) that you can use for other PagerDuty resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var me = Pagerduty.GetUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     var devops = Pagerduty.GetTeam.Invoke(new()
        ///     {
        ///         Name = "devops",
        ///     });
        /// 
        ///     var foo = new Pagerduty.EscalationPolicy("foo", new()
        ///     {
        ///         Name = "DevOps Escalation Policy",
        ///         NumLoops = 2,
        ///         Teams = devops.Apply(getTeamResult =&gt; getTeamResult.Id),
        ///         Rules = new[]
        ///         {
        ///             new Pagerduty.Inputs.EscalationPolicyRuleArgs
        ///             {
        ///                 EscalationDelayInMinutes = 10,
        ///                 Targets = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
        ///                     {
        ///                         Type = "user",
        ///                         Id = me.Apply(getUserResult =&gt; getUserResult.Id),
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("pagerduty:index/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Optional) The team is private if the value is "none", or public if it is "manager" (the default permissions for a non-member of the team are either "none", or their base role up until "manager").
        /// </summary>
        [Input("defaultRole")]
        public string? DefaultRole { get; set; }

        /// <summary>
        /// The name of the team to find in the PagerDuty API.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.
        /// </summary>
        [Input("parent")]
        public string? Parent { get; set; }

        public GetTeamArgs()
        {
        }
        public static new GetTeamArgs Empty => new GetTeamArgs();
    }

    public sealed class GetTeamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Optional) The team is private if the value is "none", or public if it is "manager" (the default permissions for a non-member of the team are either "none", or their base role up until "manager").
        /// </summary>
        [Input("defaultRole")]
        public Input<string>? DefaultRole { get; set; }

        /// <summary>
        /// The name of the team to find in the PagerDuty API.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        public GetTeamInvokeArgs()
        {
        }
        public static new GetTeamInvokeArgs Empty => new GetTeamInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamResult
    {
        /// <summary>
        /// (Optional) The team is private if the value is "none", or public if it is "manager" (the default permissions for a non-member of the team are either "none", or their base role up until "manager").
        /// </summary>
        public readonly string? DefaultRole;
        /// <summary>
        /// A description of the found team.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the found team.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the parent team. This is available to accounts with the Team Hierarchy feature enabled. Please contact your account manager for more information.
        /// </summary>
        public readonly string? Parent;

        [OutputConstructor]
        private GetTeamResult(
            string? defaultRole,

            string description,

            string id,

            string name,

            string? parent)
        {
            DefaultRole = defaultRole;
            Description = description;
            Id = id;
            Name = name;
            Parent = parent;
        }
    }
}
