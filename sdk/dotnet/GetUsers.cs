// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    public static class GetUsers
    {
        /// <summary>
        /// Use this data source to get information about [list of users](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources, optionally filtering by team ids.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var devops = Pagerduty.GetTeam.Invoke(new()
        ///     {
        ///         Name = "devops",
        ///     });
        /// 
        ///     var me = Pagerduty.GetUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     var exampleWTeam = new Pagerduty.User("exampleWTeam", new()
        ///     {
        ///         Email = "user-with-team@example.com",
        ///     });
        /// 
        ///     var example = new Pagerduty.TeamMembership("example", new()
        ///     {
        ///         TeamId = pagerduty_team.Devops.Id,
        ///         UserId = exampleWTeam.Id,
        ///     });
        /// 
        ///     var allUsers = Pagerduty.GetUsers.Invoke();
        /// 
        ///     var fromDevopsTeam = Pagerduty.GetUsers.Invoke(new()
        ///     {
        ///         TeamIds = new[]
        ///         {
        ///             pagerduty_team.Devops.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("pagerduty:index/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about [list of users](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources, optionally filtering by team ids.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var devops = Pagerduty.GetTeam.Invoke(new()
        ///     {
        ///         Name = "devops",
        ///     });
        /// 
        ///     var me = Pagerduty.GetUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     var exampleWTeam = new Pagerduty.User("exampleWTeam", new()
        ///     {
        ///         Email = "user-with-team@example.com",
        ///     });
        /// 
        ///     var example = new Pagerduty.TeamMembership("example", new()
        ///     {
        ///         TeamId = pagerduty_team.Devops.Id,
        ///         UserId = exampleWTeam.Id,
        ///     });
        /// 
        ///     var allUsers = Pagerduty.GetUsers.Invoke();
        /// 
        ///     var fromDevopsTeam = Pagerduty.GetUsers.Invoke(new()
        ///     {
        ///         TeamIds = new[]
        ///         {
        ///             pagerduty_team.Devops.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("pagerduty:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        [Input("teamIds")]
        private List<string>? _teamIds;

        /// <summary>
        /// List of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
        /// </summary>
        public List<string> TeamIds
        {
            get => _teamIds ?? (_teamIds = new List<string>());
            set => _teamIds = value;
        }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("teamIds")]
        private InputList<string>? _teamIds;

        /// <summary>
        /// List of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
        /// </summary>
        public InputList<string> TeamIds
        {
            get => _teamIds ?? (_teamIds = new InputList<string>());
            set => _teamIds = value;
        }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> TeamIds;
        /// <summary>
        /// List of users queried.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string id,

            ImmutableArray<string> teamIds,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            Id = id;
            TeamIds = teamIds;
            Users = users;
        }
    }
}
