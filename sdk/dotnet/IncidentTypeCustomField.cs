// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An [incident type custom fields](https://developer.pagerduty.com/api-reference/423b6701f3f1b-create-a-custom-field-for-an-incident-type)
    /// are a feature which will allow customers to extend Incidents with their own
    /// custom data, to provide additional context and support features such as
    /// customized filtering, search and analytics. Custom Fields can be applied to
    /// different incident types. Child types will inherit custom fields from their
    /// parent types.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alarmTime = new Pagerduty.IncidentTypeCustomField("alarm_time", new()
    ///     {
    ///         Name = "alarm_time_minutes",
    ///         DisplayName = "Alarm Time",
    ///         DataType = "integer",
    ///         FieldType = "single_value",
    ///         DefaultValue = JsonSerializer.Serialize(5),
    ///         IncidentType = "incident_default",
    ///     });
    /// 
    ///     var foo = Pagerduty.GetIncidentType.Invoke(new()
    ///     {
    ///         DisplayName = "Foo",
    ///     });
    /// 
    ///     var level = new Pagerduty.IncidentTypeCustomField("level", new()
    ///     {
    ///         Name = "level",
    ///         IncidentType = foo.Apply(getIncidentTypeResult =&gt; getIncidentTypeResult.Id),
    ///         DisplayName = "Level",
    ///         DataType = "string",
    ///         FieldType = "single_value_fixed",
    ///         FieldOptions = new[]
    ///         {
    ///             "Trace",
    ///             "Debug",
    ///             "Info",
    ///             "Warn",
    ///             "Error",
    ///             "Fatal",
    ///         },
    ///     });
    /// 
    ///     var csImpact = new Pagerduty.IncidentTypeCustomField("cs_impact", new()
    ///     {
    ///         Name = "impact",
    ///         IncidentType = foo.Apply(getIncidentTypeResult =&gt; getIncidentTypeResult.Id),
    ///         DisplayName = "Customer Impact",
    ///         DataType = "string",
    ///         FieldType = "multi_value",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fields can be imported using the combination of `incident_type_id` and `field_id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/incidentTypeCustomField:IncidentTypeCustomField cs_impact PT1234:PF1234
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/incidentTypeCustomField:IncidentTypeCustomField")]
    public partial class IncidentTypeCustomField : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
        /// </summary>
        [Output("dataType")]
        public Output<string> DataType { get; private set; } = null!;

        /// <summary>
        /// The default value to set when new incidents are created. Always specified as a string.
        /// </summary>
        [Output("defaultValue")]
        public Output<string?> DefaultValue { get; private set; } = null!;

        /// <summary>
        /// The description of the custom field.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the custom Type.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether the custom field is enabled. Defaults to true if not provided.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
        /// </summary>
        [Output("fieldOptions")]
        public Output<ImmutableArray<string>> FieldOptions { get; private set; } = null!;

        /// <summary>
        /// [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
        /// </summary>
        [Output("fieldType")]
        public Output<string?> FieldType { get; private set; } = null!;

        /// <summary>
        /// [Updating causes resource replacement] The id of the incident type the custom field is associated with.
        /// </summary>
        [Output("incidentType")]
        public Output<string> IncidentType { get; private set; } = null!;

        /// <summary>
        /// [Updating causes resource replacement] The name of the custom field.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The API show URL at which the object is accessible.
        /// </summary>
        [Output("self")]
        public Output<string> Self { get; private set; } = null!;

        /// <summary>
        /// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
        /// </summary>
        [Output("summary")]
        public Output<string> Summary { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a IncidentTypeCustomField resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IncidentTypeCustomField(string name, IncidentTypeCustomFieldArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/incidentTypeCustomField:IncidentTypeCustomField", name, args ?? new IncidentTypeCustomFieldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IncidentTypeCustomField(string name, Input<string> id, IncidentTypeCustomFieldState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/incidentTypeCustomField:IncidentTypeCustomField", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IncidentTypeCustomField resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IncidentTypeCustomField Get(string name, Input<string> id, IncidentTypeCustomFieldState? state = null, CustomResourceOptions? options = null)
        {
            return new IncidentTypeCustomField(name, id, state, options);
        }
    }

    public sealed class IncidentTypeCustomFieldArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
        /// </summary>
        [Input("dataType", required: true)]
        public Input<string> DataType { get; set; } = null!;

        /// <summary>
        /// The default value to set when new incidents are created. Always specified as a string.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The description of the custom field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the custom Type.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Whether the custom field is enabled. Defaults to true if not provided.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("fieldOptions")]
        private InputList<string>? _fieldOptions;

        /// <summary>
        /// The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
        /// </summary>
        public InputList<string> FieldOptions
        {
            get => _fieldOptions ?? (_fieldOptions = new InputList<string>());
            set => _fieldOptions = value;
        }

        /// <summary>
        /// [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
        /// </summary>
        [Input("fieldType")]
        public Input<string>? FieldType { get; set; }

        /// <summary>
        /// [Updating causes resource replacement] The id of the incident type the custom field is associated with.
        /// </summary>
        [Input("incidentType", required: true)]
        public Input<string> IncidentType { get; set; } = null!;

        /// <summary>
        /// [Updating causes resource replacement] The name of the custom field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public IncidentTypeCustomFieldArgs()
        {
        }
        public static new IncidentTypeCustomFieldArgs Empty => new IncidentTypeCustomFieldArgs();
    }

    public sealed class IncidentTypeCustomFieldState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
        /// </summary>
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        /// <summary>
        /// The default value to set when new incidents are created. Always specified as a string.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The description of the custom field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the custom Type.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether the custom field is enabled. Defaults to true if not provided.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("fieldOptions")]
        private InputList<string>? _fieldOptions;

        /// <summary>
        /// The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
        /// </summary>
        public InputList<string> FieldOptions
        {
            get => _fieldOptions ?? (_fieldOptions = new InputList<string>());
            set => _fieldOptions = value;
        }

        /// <summary>
        /// [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
        /// </summary>
        [Input("fieldType")]
        public Input<string>? FieldType { get; set; }

        /// <summary>
        /// [Updating causes resource replacement] The id of the incident type the custom field is associated with.
        /// </summary>
        [Input("incidentType")]
        public Input<string>? IncidentType { get; set; }

        /// <summary>
        /// [Updating causes resource replacement] The name of the custom field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The API show URL at which the object is accessible.
        /// </summary>
        [Input("self")]
        public Input<string>? Self { get; set; }

        /// <summary>
        /// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
        /// </summary>
        [Input("summary")]
        public Input<string>? Summary { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public IncidentTypeCustomFieldState()
        {
        }
        public static new IncidentTypeCustomFieldState Empty => new IncidentTypeCustomFieldState();
    }
}
