// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Inputs
{

    public sealed class EventOrchestrationRouterSetRuleActionsDynamicRouteToGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the extracted value from the source is a service's name or ID. Allowed values are: `service_name`, `service_id`
        /// 
        /// If an event has a value at the specified `source`, and if the `regex` successfully matches the value, and if the matching portion is valid Service ID or Name, then the event will be routed to that service. Otherwise the event will be checked against any subsequent router rules.
        /// </summary>
        [Input("lookupBy", required: true)]
        public Input<string> LookupBy { get; set; } = null!;

        /// <summary>
        /// The regular expression, used to extract a value from the source field. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        /// </summary>
        [Input("regex", required: true)]
        public Input<string> Regex { get; set; } = null!;

        /// <summary>
        /// The path to a field in an event.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        public EventOrchestrationRouterSetRuleActionsDynamicRouteToGetArgs()
        {
        }
        public static new EventOrchestrationRouterSetRuleActionsDynamicRouteToGetArgs Empty => new EventOrchestrationRouterSetRuleActionsDynamicRouteToGetArgs();
    }
}
