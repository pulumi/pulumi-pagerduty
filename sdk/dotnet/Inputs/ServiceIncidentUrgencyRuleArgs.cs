// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Inputs
{

    public sealed class ServiceIncidentUrgencyRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Incidents' urgency during support hours.
        /// </summary>
        [Input("duringSupportHours")]
        public Input<Inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs>? DuringSupportHours { get; set; }

        /// <summary>
        /// Incidents' urgency outside support hours.
        /// </summary>
        [Input("outsideSupportHours")]
        public Input<Inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs>? OutsideSupportHours { get; set; }

        /// <summary>
        /// The type of incident urgency: `Constant` or `UseSupportHours` (when depending on specific support hours; see `SupportHours`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The urgency: `Low` Notify responders (does not escalate), `High` (follows escalation rules) or `SeverityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        /// </summary>
        [Input("urgency")]
        public Input<string>? Urgency { get; set; }

        public ServiceIncidentUrgencyRuleArgs()
        {
        }
        public static new ServiceIncidentUrgencyRuleArgs Empty => new ServiceIncidentUrgencyRuleArgs();
    }
}
