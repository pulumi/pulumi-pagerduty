// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Inputs
{

    public sealed class ServiceScheduledActionAtArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Designates either the start or the end of the scheduled action. Can be `SupportHoursStart` or `SupportHoursEnd`.
        /// 
        /// Note that it is currently only possible to define the scheduled action when urgency is set to `High` for `DuringSupportHours` and to `Low`  for `OutsideSupportHours` in `IncidentUrgencyRule`.
        /// 
        /// Below is an example for a `pagerduty.Service` resource with `IncidentUrgencyRules` with `type = "UseSupportHours"`, `SupportHours` and a default `ScheduledAction` as well.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pagerduty = Pulumi.Pagerduty;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = new Pagerduty.Service("foo", new()
        ///     {
        ///         Name = "bar",
        ///         Description = "bar bar bar",
        ///         AutoResolveTimeout = "3600",
        ///         AcknowledgementTimeout = "3600",
        ///         EscalationPolicy = fooPagerdutyEscalationPolicy.Id,
        ///         IncidentUrgencyRule = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleArgs
        ///         {
        ///             Type = "use_support_hours",
        ///             DuringSupportHours = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs
        ///             {
        ///                 Type = "constant",
        ///                 Urgency = "high",
        ///             },
        ///             OutsideSupportHours = new Pagerduty.Inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs
        ///             {
        ///                 Type = "constant",
        ///                 Urgency = "low",
        ///             },
        ///         },
        ///         SupportHours = new Pagerduty.Inputs.ServiceSupportHoursArgs
        ///         {
        ///             Type = "fixed_time_per_day",
        ///             TimeZone = "America/Lima",
        ///             StartTime = "09:00:00",
        ///             EndTime = "17:00:00",
        ///             DaysOfWeeks = new[]
        ///             {
        ///                 1,
        ///                 2,
        ///                 3,
        ///                 4,
        ///                 5,
        ///             },
        ///         },
        ///         ScheduledActions = new[]
        ///         {
        ///             new Pagerduty.Inputs.ServiceScheduledActionArgs
        ///             {
        ///                 Type = "urgency_change",
        ///                 ToUrgency = "high",
        ///                 Ats = new[]
        ///                 {
        ///                     new Pagerduty.Inputs.ServiceScheduledActionAtArgs
        ///                     {
        ///                         Type = "named_time",
        ///                         Name = "support_hours_start",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of time specification. Currently, this must be set to `NamedTime`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServiceScheduledActionAtArgs()
        {
        }
        public static new ServiceScheduledActionAtArgs Empty => new ServiceScheduledActionAtArgs();
    }
}
