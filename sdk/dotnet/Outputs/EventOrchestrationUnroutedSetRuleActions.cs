// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Outputs
{

    [OutputType]
    public sealed class EventOrchestrationUnroutedSetRuleActions
    {
        /// <summary>
        /// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        /// </summary>
        public readonly string? EventAction;
        /// <summary>
        /// Replace any CEF field or Custom Details object field using custom variables.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventOrchestrationUnroutedSetRuleActionsExtraction> Extractions;
        /// <summary>
        /// The ID of a Set from this Unrouted Orchestration whose rules you also want to use with event that match this rule.
        /// </summary>
        public readonly string? RouteTo;
        /// <summary>
        /// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// Populate variables from event payloads and use those variables in other event actions.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventOrchestrationUnroutedSetRuleActionsVariable> Variables;

        [OutputConstructor]
        private EventOrchestrationUnroutedSetRuleActions(
            string? eventAction,

            ImmutableArray<Outputs.EventOrchestrationUnroutedSetRuleActionsExtraction> extractions,

            string? routeTo,

            string? severity,

            ImmutableArray<Outputs.EventOrchestrationUnroutedSetRuleActionsVariable> variables)
        {
            EventAction = eventAction;
            Extractions = extractions;
            RouteTo = routeTo;
            Severity = severity;
            Variables = variables;
        }
    }
}
