// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Outputs
{

    [OutputType]
    public sealed class GetEventOrchestrationGlobalCacheVariableConfigurationResult
    {
        /// <summary>
        /// The type of data that will eventually be set for the Cache Variable via an API request. This field is only used when type is `ExternalData`
        /// </summary>
        public readonly string? DataType;
        /// <summary>
        /// A [RE2 regular expression][4] that will be matched against the field specified via the `Source` argument. This field is only used when `Type` is `RecentValue`
        /// </summary>
        public readonly string Regex;
        /// <summary>
        /// The path to the event field where the `Regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths). This field is only used when `Type` is `RecentValue`
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// The number of seconds indicating how long to count incoming trigger events for. This field is only used when `Type` is `TriggerEventCount` or `ExternalData`
        /// </summary>
        public readonly int TtlSeconds;
        /// <summary>
        /// The [type of value](https://support.pagerduty.com/docs/event-orchestration-variables) to store into the Cache Variable. Can be one of: `RecentValue`, `TriggerEventCount` or `ExternalData`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEventOrchestrationGlobalCacheVariableConfigurationResult(
            string? dataType,

            string regex,

            string source,

            int ttlSeconds,

            string type)
        {
            DataType = dataType;
            Regex = regex;
            Source = source;
            TtlSeconds = ttlSeconds;
            Type = type;
        }
    }
}
