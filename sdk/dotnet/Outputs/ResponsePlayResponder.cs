// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Outputs
{

    [OutputType]
    public sealed class ResponsePlayResponder
    {
        /// <summary>
        /// Description of escalation policy
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The escalation rules
        /// </summary>
        public readonly ImmutableArray<Outputs.ResponsePlayResponderEscalationRule> EscalationRules;
        /// <summary>
        /// ID of the user defined as the responder
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the escalation policy
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The number of times the escalation policy will repeat after reaching the end of its escalation.
        /// </summary>
        public readonly int? NumLoops;
        /// <summary>
        /// Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "IfHasServices". Could be "IfHasServices", "always
        /// </summary>
        public readonly string? OnCallHandoffNotifications;
        /// <summary>
        /// There can be multiple services associated with a policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResponsePlayResponderService> Services;
        /// <summary>
        /// Teams associated with the policy. Account must have the `Teams` ability to use this parameter. There can be multiple teams associated with a policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResponsePlayResponderTeam> Teams;
        /// <summary>
        /// Should be set as `EscalationPolicy` for escalation policy responders.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ResponsePlayResponder(
            string? description,

            ImmutableArray<Outputs.ResponsePlayResponderEscalationRule> escalationRules,

            string? id,

            string? name,

            int? numLoops,

            string? onCallHandoffNotifications,

            ImmutableArray<Outputs.ResponsePlayResponderService> services,

            ImmutableArray<Outputs.ResponsePlayResponderTeam> teams,

            string? type)
        {
            Description = description;
            EscalationRules = escalationRules;
            Id = id;
            Name = name;
            NumLoops = numLoops;
            OnCallHandoffNotifications = onCallHandoffNotifications;
            Services = services;
            Teams = teams;
            Type = type;
        }
    }
}
