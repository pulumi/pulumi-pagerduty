// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty.Outputs
{

    [OutputType]
    public sealed class RulesetRuleActions
    {
        /// <summary>
        /// Note added to the event.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsAnnotate> Annotates;
        /// <summary>
        /// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsEventAction> EventActions;
        /// <summary>
        /// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsExtraction> Extractions;
        /// <summary>
        /// The ID of the priority applied to the event.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsPriority> Priorities;
        /// <summary>
        /// The ID of the service where the event will be routed.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsRoute> Routes;
        /// <summary>
        /// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsSeverity> Severities;
        /// <summary>
        /// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsSuppress> Suppresses;
        /// <summary>
        /// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionsSuspend> Suspends;

        [OutputConstructor]
        private RulesetRuleActions(
            ImmutableArray<Outputs.RulesetRuleActionsAnnotate> annotates,

            ImmutableArray<Outputs.RulesetRuleActionsEventAction> eventActions,

            ImmutableArray<Outputs.RulesetRuleActionsExtraction> extractions,

            ImmutableArray<Outputs.RulesetRuleActionsPriority> priorities,

            ImmutableArray<Outputs.RulesetRuleActionsRoute> routes,

            ImmutableArray<Outputs.RulesetRuleActionsSeverity> severities,

            ImmutableArray<Outputs.RulesetRuleActionsSuppress> suppresses,

            ImmutableArray<Outputs.RulesetRuleActionsSuspend> suspends)
        {
            Annotates = annotates;
            EventActions = eventActions;
            Extractions = extractions;
            Priorities = priorities;
            Routes = routes;
            Severities = severities;
            Suppresses = suppresses;
            Suspends = suspends;
        }
    }
}
