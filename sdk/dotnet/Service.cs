// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// A [service](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-create-a-service) represents something you monitor (like a web service, email service, or database service). It is a container for related incidents that associates them with escalation policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Pagerduty.User("example", new()
    ///     {
    ///         Name = "Earline Greenholt",
    ///         Email = "125.greenholt.earline@graham.name",
    ///     });
    /// 
    ///     var foo = new Pagerduty.EscalationPolicy("foo", new()
    ///     {
    ///         Name = "Engineering Escalation Policy",
    ///         NumLoops = 2,
    ///         Rules = new[]
    ///         {
    ///             new Pagerduty.Inputs.EscalationPolicyRuleArgs
    ///             {
    ///                 EscalationDelayInMinutes = 10,
    ///                 Targets = new[]
    ///                 {
    ///                     new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
    ///                     {
    ///                         Type = "user_reference",
    ///                         Id = example.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleService = new Pagerduty.Service("example", new()
    ///     {
    ///         Name = "My Web App",
    ///         AutoResolveTimeout = "14400",
    ///         AcknowledgementTimeout = "600",
    ///         EscalationPolicy = foo.Id,
    ///         AlertCreation = "create_alerts_and_incidents",
    ///         AutoPauseNotificationsParameters = new Pagerduty.Inputs.ServiceAutoPauseNotificationsParametersArgs
    ///         {
    ///             Enabled = true,
    ///             Timeout = 300,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Services can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/service:Service main PLBP09X
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        [Output("acknowledgementTimeout")]
        public Output<string?> AcknowledgementTimeout { get; private set; } = null!;

        [Output("alertCreation")]
        public Output<string?> AlertCreation { get; private set; } = null!;

        [Output("alertGrouping")]
        public Output<string> AlertGrouping { get; private set; } = null!;

        [Output("alertGroupingParameters")]
        public Output<Outputs.ServiceAlertGroupingParameters> AlertGroupingParameters { get; private set; } = null!;

        [Output("alertGroupingTimeout")]
        public Output<string> AlertGroupingTimeout { get; private set; } = null!;

        [Output("autoPauseNotificationsParameters")]
        public Output<Outputs.ServiceAutoPauseNotificationsParameters> AutoPauseNotificationsParameters { get; private set; } = null!;

        [Output("autoResolveTimeout")]
        public Output<string?> AutoResolveTimeout { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp of the service.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("escalationPolicy")]
        public Output<string> EscalationPolicy { get; private set; } = null!;

        /// <summary>
        /// URL at which the entity is uniquely displayed in the Web app.
        /// </summary>
        [Output("htmlUrl")]
        public Output<string> HtmlUrl { get; private set; } = null!;

        [Output("incidentUrgencyRule")]
        public Output<Outputs.ServiceIncidentUrgencyRule> IncidentUrgencyRule { get; private set; } = null!;

        /// <summary>
        /// Last incident timestamp of the service.
        /// </summary>
        [Output("lastIncidentTimestamp")]
        public Output<string> LastIncidentTimestamp { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("responsePlay")]
        public Output<string> ResponsePlay { get; private set; } = null!;

        [Output("scheduledActions")]
        public Output<ImmutableArray<Outputs.ServiceScheduledAction>> ScheduledActions { get; private set; } = null!;

        /// <summary>
        /// The status of the service.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("supportHours")]
        public Output<Outputs.ServiceSupportHours?> SupportHours { get; private set; } = null!;

        /// <summary>
        /// The type of object. The value returned will be `service`. Can be used for passing to a service dependency.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("acknowledgementTimeout")]
        public Input<string>? AcknowledgementTimeout { get; set; }

        [Input("alertCreation")]
        public Input<string>? AlertCreation { get; set; }

        [Input("alertGrouping")]
        public Input<string>? AlertGrouping { get; set; }

        [Input("alertGroupingParameters")]
        public Input<Inputs.ServiceAlertGroupingParametersArgs>? AlertGroupingParameters { get; set; }

        [Input("alertGroupingTimeout")]
        public Input<string>? AlertGroupingTimeout { get; set; }

        [Input("autoPauseNotificationsParameters")]
        public Input<Inputs.ServiceAutoPauseNotificationsParametersArgs>? AutoPauseNotificationsParameters { get; set; }

        [Input("autoResolveTimeout")]
        public Input<string>? AutoResolveTimeout { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("escalationPolicy", required: true)]
        public Input<string> EscalationPolicy { get; set; } = null!;

        [Input("incidentUrgencyRule")]
        public Input<Inputs.ServiceIncidentUrgencyRuleArgs>? IncidentUrgencyRule { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("responsePlay")]
        public Input<string>? ResponsePlay { get; set; }

        [Input("scheduledActions")]
        private InputList<Inputs.ServiceScheduledActionArgs>? _scheduledActions;
        public InputList<Inputs.ServiceScheduledActionArgs> ScheduledActions
        {
            get => _scheduledActions ?? (_scheduledActions = new InputList<Inputs.ServiceScheduledActionArgs>());
            set => _scheduledActions = value;
        }

        [Input("supportHours")]
        public Input<Inputs.ServiceSupportHoursArgs>? SupportHours { get; set; }

        public ServiceArgs()
        {
            Description = "Managed by Pulumi";
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        [Input("acknowledgementTimeout")]
        public Input<string>? AcknowledgementTimeout { get; set; }

        [Input("alertCreation")]
        public Input<string>? AlertCreation { get; set; }

        [Input("alertGrouping")]
        public Input<string>? AlertGrouping { get; set; }

        [Input("alertGroupingParameters")]
        public Input<Inputs.ServiceAlertGroupingParametersGetArgs>? AlertGroupingParameters { get; set; }

        [Input("alertGroupingTimeout")]
        public Input<string>? AlertGroupingTimeout { get; set; }

        [Input("autoPauseNotificationsParameters")]
        public Input<Inputs.ServiceAutoPauseNotificationsParametersGetArgs>? AutoPauseNotificationsParameters { get; set; }

        [Input("autoResolveTimeout")]
        public Input<string>? AutoResolveTimeout { get; set; }

        /// <summary>
        /// Creation timestamp of the service.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("escalationPolicy")]
        public Input<string>? EscalationPolicy { get; set; }

        /// <summary>
        /// URL at which the entity is uniquely displayed in the Web app.
        /// </summary>
        [Input("htmlUrl")]
        public Input<string>? HtmlUrl { get; set; }

        [Input("incidentUrgencyRule")]
        public Input<Inputs.ServiceIncidentUrgencyRuleGetArgs>? IncidentUrgencyRule { get; set; }

        /// <summary>
        /// Last incident timestamp of the service.
        /// </summary>
        [Input("lastIncidentTimestamp")]
        public Input<string>? LastIncidentTimestamp { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("responsePlay")]
        public Input<string>? ResponsePlay { get; set; }

        [Input("scheduledActions")]
        private InputList<Inputs.ServiceScheduledActionGetArgs>? _scheduledActions;
        public InputList<Inputs.ServiceScheduledActionGetArgs> ScheduledActions
        {
            get => _scheduledActions ?? (_scheduledActions = new InputList<Inputs.ServiceScheduledActionGetArgs>());
            set => _scheduledActions = value;
        }

        /// <summary>
        /// The status of the service.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("supportHours")]
        public Input<Inputs.ServiceSupportHoursGetArgs>? SupportHours { get; set; }

        /// <summary>
        /// The type of object. The value returned will be `service`. Can be used for passing to a service dependency.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServiceState()
        {
            Description = "Managed by Pulumi";
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
