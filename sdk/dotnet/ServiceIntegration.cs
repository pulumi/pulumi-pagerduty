// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// A [service integration](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1services~1%7Bid%7D~1integrations/post) is an integration that belongs to a service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleUser = new Pagerduty.User("exampleUser", new Pagerduty.UserArgs
    ///         {
    ///             Email = "125.greenholt.earline@graham.name",
    ///             Teams = 
    ///             {
    ///                 pagerduty_team.Example.Id,
    ///             },
    ///         });
    ///         var foo = new Pagerduty.EscalationPolicy("foo", new Pagerduty.EscalationPolicyArgs
    ///         {
    ///             NumLoops = 2,
    ///             Rules = 
    ///             {
    ///                 new Pagerduty.Inputs.EscalationPolicyRuleArgs
    ///                 {
    ///                     EscalationDelayInMinutes = 10,
    ///                     Targets = 
    ///                     {
    ///                         new Pagerduty.Inputs.EscalationPolicyRuleTargetArgs
    ///                         {
    ///                             Type = "user",
    ///                             Id = exampleUser.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var exampleService = new Pagerduty.Service("exampleService", new Pagerduty.ServiceArgs
    ///         {
    ///             AutoResolveTimeout = "14400",
    ///             AcknowledgementTimeout = "600",
    ///             EscalationPolicy = pagerduty_escalation_policy.Example.Id,
    ///         });
    ///         var exampleServiceIntegration = new Pagerduty.ServiceIntegration("exampleServiceIntegration", new Pagerduty.ServiceIntegrationArgs
    ///         {
    ///             Type = "generic_events_api_inbound_integration",
    ///             Service = exampleService.Id,
    ///         });
    ///         var apiv2 = new Pagerduty.ServiceIntegration("apiv2", new Pagerduty.ServiceIntegrationArgs
    ///         {
    ///             Type = "events_api_v2_inbound_integration",
    ///             IntegrationKey = "12345678910testtesttesttesttes",
    ///             Service = exampleService.Id,
    ///         });
    ///         var emailX = new Pagerduty.ServiceIntegration("emailX", new Pagerduty.ServiceIntegrationArgs
    ///         {
    ///             Type = "generic_email_inbound_integration",
    ///             IntegrationEmail = "ecommerce@subdomain.pagerduty.com",
    ///             Service = exampleService.Id,
    ///         });
    ///         var datadogVendor = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs
    ///         {
    ///             Name = "Datadog",
    ///         }));
    ///         var datadogServiceIntegration = new Pagerduty.ServiceIntegration("datadogServiceIntegration", new Pagerduty.ServiceIntegrationArgs
    ///         {
    ///             Service = exampleService.Id,
    ///             Vendor = datadogVendor.Apply(datadogVendor =&gt; datadogVendor.Id),
    ///         });
    ///         var cloudwatchVendor = Output.Create(Pagerduty.GetVendor.InvokeAsync(new Pagerduty.GetVendorArgs
    ///         {
    ///             Name = "Cloudwatch",
    ///         }));
    ///         var cloudwatchServiceIntegration = new Pagerduty.ServiceIntegration("cloudwatchServiceIntegration", new Pagerduty.ServiceIntegrationArgs
    ///         {
    ///             Service = exampleService.Id,
    ///             Vendor = cloudwatchVendor.Apply(cloudwatchVendor =&gt; cloudwatchVendor.Id),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Services can be imported using their related `service` id and service integration `id` separated by a dot, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import pagerduty:index/serviceIntegration:ServiceIntegration main PLSSSSS.PLIIIII
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/serviceIntegration:ServiceIntegration")]
    public partial class ServiceIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// URL at which the entity is uniquely displayed in the Web app.
        /// </summary>
        [Output("htmlUrl")]
        public Output<string> HtmlUrl { get; private set; } = null!;

        /// <summary>
        /// This is the unique fully-qualified email address used for routing emails to this integration for processing.
        /// </summary>
        [Output("integrationEmail")]
        public Output<string> IntegrationEmail { get; private set; } = null!;

        /// <summary>
        /// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
        /// </summary>
        [Output("integrationKey")]
        public Output<string> IntegrationKey { get; private set; } = null!;

        /// <summary>
        /// The name of the service integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the service the integration should belong to.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The service type. Can be:
        /// `aws_cloudwatch_inbound_integration`,
        /// `cloudkick_inbound_integration`,
        /// `event_transformer_api_inbound_integration`,
        /// `events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),
        /// `generic_email_inbound_integration`,
        /// `generic_events_api_inbound_integration`,
        /// `keynote_inbound_integration`,
        /// `nagios_inbound_integration`,
        /// `pingdom_inbound_integration`or `sql_monitor_inbound_integration`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).
        /// </summary>
        [Output("vendor")]
        public Output<string> Vendor { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceIntegration(string name, ServiceIntegrationArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/serviceIntegration:ServiceIntegration", name, args ?? new ServiceIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceIntegration(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/serviceIntegration:ServiceIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceIntegration Get(string name, Input<string> id, ServiceIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceIntegration(name, id, state, options);
        }
    }

    public sealed class ServiceIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the unique fully-qualified email address used for routing emails to this integration for processing.
        /// </summary>
        [Input("integrationEmail")]
        public Input<string>? IntegrationEmail { get; set; }

        /// <summary>
        /// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
        /// </summary>
        [Input("integrationKey")]
        public Input<string>? IntegrationKey { get; set; }

        /// <summary>
        /// The name of the service integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the service the integration should belong to.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// The service type. Can be:
        /// `aws_cloudwatch_inbound_integration`,
        /// `cloudkick_inbound_integration`,
        /// `event_transformer_api_inbound_integration`,
        /// `events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),
        /// `generic_email_inbound_integration`,
        /// `generic_events_api_inbound_integration`,
        /// `keynote_inbound_integration`,
        /// `nagios_inbound_integration`,
        /// `pingdom_inbound_integration`or `sql_monitor_inbound_integration`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public ServiceIntegrationArgs()
        {
        }
    }

    public sealed class ServiceIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL at which the entity is uniquely displayed in the Web app.
        /// </summary>
        [Input("htmlUrl")]
        public Input<string>? HtmlUrl { get; set; }

        /// <summary>
        /// This is the unique fully-qualified email address used for routing emails to this integration for processing.
        /// </summary>
        [Input("integrationEmail")]
        public Input<string>? IntegrationEmail { get; set; }

        /// <summary>
        /// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
        /// </summary>
        [Input("integrationKey")]
        public Input<string>? IntegrationKey { get; set; }

        /// <summary>
        /// The name of the service integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the service the integration should belong to.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The service type. Can be:
        /// `aws_cloudwatch_inbound_integration`,
        /// `cloudkick_inbound_integration`,
        /// `event_transformer_api_inbound_integration`,
        /// `events_api_v2_inbound_integration` (requires service `alert_creation` to be `create_alerts_and_incidents`),
        /// `generic_email_inbound_integration`,
        /// `generic_events_api_inbound_integration`,
        /// `keynote_inbound_integration`,
        /// `nagios_inbound_integration`,
        /// `pingdom_inbound_integration`or `sql_monitor_inbound_integration`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The ID of the vendor the integration should integrate with (e.g. Datadog or Amazon Cloudwatch).
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public ServiceIntegrationState()
        {
        }
    }
}
