// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pagerduty
{
    /// <summary>
    /// An [user handoff notification rule](https://developer.pagerduty.com/api-reference/f2ab7a3c1418a-create-a-user-handoff-notification-rule) is a rule that specifies how a user should be notified when they are handed off an incident.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pagerduty = Pulumi.Pagerduty;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Pagerduty.User("example", new()
    ///     {
    ///         Name = "Earline Greenholt",
    ///         Email = "125.greenholt.earline@foo.test",
    ///     });
    /// 
    ///     var phone = new Pagerduty.UserContactMethod("phone", new()
    ///     {
    ///         UserId = example.Id,
    ///         Type = "phone_contact_method",
    ///         CountryCode = 1,
    ///         Address = "2025550199",
    ///         Label = "Work",
    ///     });
    /// 
    ///     var example_oncall_offcall = new Pagerduty.UserHandoffNotificationRule("example-oncall-offcall", new()
    ///     {
    ///         UserId = example.Id,
    ///         HandoffType = "both",
    ///         NotifyAdvanceInMinutes = 180,
    ///         ContactMethod = new Pagerduty.Inputs.UserHandoffNotificationRuleContactMethodArgs
    ///         {
    ///             Id = phone.Id,
    ///             Type = phone.Type,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// User handoff notification rules can be imported using the `user_id` and `id` separated by a dot, e.g.
    /// 
    /// ```sh
    /// $ pulumi import pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule main PX4IAP4.PULREBP
    /// ```
    /// </summary>
    [PagerdutyResourceType("pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule")]
    public partial class UserHandoffNotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The contact method to notify the user. Contact method documented below.
        /// </summary>
        [Output("contactMethod")]
        public Output<Outputs.UserHandoffNotificationRuleContactMethod> ContactMethod { get; private set; } = null!;

        /// <summary>
        /// The type of handoff to notify the user about. Possible values are `Oncall`, `Offcall`, `Both`.
        /// </summary>
        [Output("handoffType")]
        public Output<string> HandoffType { get; private set; } = null!;

        /// <summary>
        /// The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
        /// </summary>
        [Output("notifyAdvanceInMinutes")]
        public Output<int> NotifyAdvanceInMinutes { get; private set; } = null!;

        /// <summary>
        /// The ID of the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserHandoffNotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserHandoffNotificationRule(string name, UserHandoffNotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule", name, args ?? new UserHandoffNotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserHandoffNotificationRule(string name, Input<string> id, UserHandoffNotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserHandoffNotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserHandoffNotificationRule Get(string name, Input<string> id, UserHandoffNotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new UserHandoffNotificationRule(name, id, state, options);
        }
    }

    public sealed class UserHandoffNotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The contact method to notify the user. Contact method documented below.
        /// </summary>
        [Input("contactMethod", required: true)]
        public Input<Inputs.UserHandoffNotificationRuleContactMethodArgs> ContactMethod { get; set; } = null!;

        /// <summary>
        /// The type of handoff to notify the user about. Possible values are `Oncall`, `Offcall`, `Both`.
        /// </summary>
        [Input("handoffType")]
        public Input<string>? HandoffType { get; set; }

        /// <summary>
        /// The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
        /// </summary>
        [Input("notifyAdvanceInMinutes", required: true)]
        public Input<int> NotifyAdvanceInMinutes { get; set; } = null!;

        /// <summary>
        /// The ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public UserHandoffNotificationRuleArgs()
        {
        }
        public static new UserHandoffNotificationRuleArgs Empty => new UserHandoffNotificationRuleArgs();
    }

    public sealed class UserHandoffNotificationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The contact method to notify the user. Contact method documented below.
        /// </summary>
        [Input("contactMethod")]
        public Input<Inputs.UserHandoffNotificationRuleContactMethodGetArgs>? ContactMethod { get; set; }

        /// <summary>
        /// The type of handoff to notify the user about. Possible values are `Oncall`, `Offcall`, `Both`.
        /// </summary>
        [Input("handoffType")]
        public Input<string>? HandoffType { get; set; }

        /// <summary>
        /// The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
        /// </summary>
        [Input("notifyAdvanceInMinutes")]
        public Input<int>? NotifyAdvanceInMinutes { get; set; }

        /// <summary>
        /// The ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserHandoffNotificationRuleState()
        {
        }
        public static new UserHandoffNotificationRuleState Empty => new UserHandoffNotificationRuleState();
    }
}
