// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An [alert grouping setting](https://developer.pagerduty.com/api-reference/587edbc8ff416-create-an-alert-grouping-setting)
// stores and centralize the configuration used during grouping of the alerts.
//
// ## Example Usage
//
// ## Migration from `alertGroupingParameters`
//
// To migrate from using the field `alertGroupingParameters` of a
// service
// to a `AlertGroupingSetting` resource, you can cut-and-paste the
// contents of an `alertGroupingParameters` field from a `Service`
// resource into the new resource, but you also need to add at least one value in
// the field `services` to create the alert grouping setting with a service
// associated to it.
//
// If you are using `timeout = 0` or `timeWindow = 0` in order to use the values
// recommended by PagerDuty you also need to set its value to null or delete it,
// since a value of `0` is no longer accepted.
//
// **Example**:
//
// Before:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := pagerduty.LookupEscalationPolicy(ctx, &pagerduty.LookupEscalationPolicyArgs{
//				Name: "Default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewService(ctx, "foo", &pagerduty.ServiceArgs{
//				Name:             pulumi.String("Foo"),
//				EscalationPolicy: pulumi.String(_default.Id),
//				AlertGroupingParameters: &pagerduty.ServiceAlertGroupingParametersArgs{
//					Type: pulumi.String("time"),
//					Config: &pagerduty.ServiceAlertGroupingParametersConfigArgs{
//						Timeout: pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// After:
//
// ## Import
//
// Alert grouping settings can be imported using its `id`, e.g.
//
// ```sh
// $ pulumi import pagerduty:index/alertGroupingSetting:AlertGroupingSetting example P3DH5M6
// ```
type AlertGroupingSetting struct {
	pulumi.CustomResourceState

	// The set of values used for configuration.
	Config AlertGroupingSettingConfigPtrOutput `pulumi:"config"`
	// A human-friendly text to describe and identify this alert grouping setting.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name for the alert grouping settings.
	Name pulumi.StringOutput `pulumi:"name"`
	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	Services pulumi.StringArrayOutput `pulumi:"services"`
	// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAlertGroupingSetting registers a new resource with the given unique name, arguments, and options.
func NewAlertGroupingSetting(ctx *pulumi.Context,
	name string, args *AlertGroupingSettingArgs, opts ...pulumi.ResourceOption) (*AlertGroupingSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertGroupingSetting
	err := ctx.RegisterResource("pagerduty:index/alertGroupingSetting:AlertGroupingSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertGroupingSetting gets an existing AlertGroupingSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertGroupingSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertGroupingSettingState, opts ...pulumi.ResourceOption) (*AlertGroupingSetting, error) {
	var resource AlertGroupingSetting
	err := ctx.ReadResource("pagerduty:index/alertGroupingSetting:AlertGroupingSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertGroupingSetting resources.
type alertGroupingSettingState struct {
	// The set of values used for configuration.
	Config *AlertGroupingSettingConfig `pulumi:"config"`
	// A human-friendly text to describe and identify this alert grouping setting.
	Description *string `pulumi:"description"`
	// The name for the alert grouping settings.
	Name *string `pulumi:"name"`
	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	Services []string `pulumi:"services"`
	// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
	Type *string `pulumi:"type"`
}

type AlertGroupingSettingState struct {
	// The set of values used for configuration.
	Config AlertGroupingSettingConfigPtrInput
	// A human-friendly text to describe and identify this alert grouping setting.
	Description pulumi.StringPtrInput
	// The name for the alert grouping settings.
	Name pulumi.StringPtrInput
	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	Services pulumi.StringArrayInput
	// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
	Type pulumi.StringPtrInput
}

func (AlertGroupingSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertGroupingSettingState)(nil)).Elem()
}

type alertGroupingSettingArgs struct {
	// The set of values used for configuration.
	Config *AlertGroupingSettingConfig `pulumi:"config"`
	// A human-friendly text to describe and identify this alert grouping setting.
	Description *string `pulumi:"description"`
	// The name for the alert grouping settings.
	Name *string `pulumi:"name"`
	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	Services []string `pulumi:"services"`
	// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AlertGroupingSetting resource.
type AlertGroupingSettingArgs struct {
	// The set of values used for configuration.
	Config AlertGroupingSettingConfigPtrInput
	// A human-friendly text to describe and identify this alert grouping setting.
	Description pulumi.StringPtrInput
	// The name for the alert grouping settings.
	Name pulumi.StringPtrInput
	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	Services pulumi.StringArrayInput
	// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
	Type pulumi.StringInput
}

func (AlertGroupingSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertGroupingSettingArgs)(nil)).Elem()
}

type AlertGroupingSettingInput interface {
	pulumi.Input

	ToAlertGroupingSettingOutput() AlertGroupingSettingOutput
	ToAlertGroupingSettingOutputWithContext(ctx context.Context) AlertGroupingSettingOutput
}

func (*AlertGroupingSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertGroupingSetting)(nil)).Elem()
}

func (i *AlertGroupingSetting) ToAlertGroupingSettingOutput() AlertGroupingSettingOutput {
	return i.ToAlertGroupingSettingOutputWithContext(context.Background())
}

func (i *AlertGroupingSetting) ToAlertGroupingSettingOutputWithContext(ctx context.Context) AlertGroupingSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertGroupingSettingOutput)
}

// AlertGroupingSettingArrayInput is an input type that accepts AlertGroupingSettingArray and AlertGroupingSettingArrayOutput values.
// You can construct a concrete instance of `AlertGroupingSettingArrayInput` via:
//
//	AlertGroupingSettingArray{ AlertGroupingSettingArgs{...} }
type AlertGroupingSettingArrayInput interface {
	pulumi.Input

	ToAlertGroupingSettingArrayOutput() AlertGroupingSettingArrayOutput
	ToAlertGroupingSettingArrayOutputWithContext(context.Context) AlertGroupingSettingArrayOutput
}

type AlertGroupingSettingArray []AlertGroupingSettingInput

func (AlertGroupingSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertGroupingSetting)(nil)).Elem()
}

func (i AlertGroupingSettingArray) ToAlertGroupingSettingArrayOutput() AlertGroupingSettingArrayOutput {
	return i.ToAlertGroupingSettingArrayOutputWithContext(context.Background())
}

func (i AlertGroupingSettingArray) ToAlertGroupingSettingArrayOutputWithContext(ctx context.Context) AlertGroupingSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertGroupingSettingArrayOutput)
}

// AlertGroupingSettingMapInput is an input type that accepts AlertGroupingSettingMap and AlertGroupingSettingMapOutput values.
// You can construct a concrete instance of `AlertGroupingSettingMapInput` via:
//
//	AlertGroupingSettingMap{ "key": AlertGroupingSettingArgs{...} }
type AlertGroupingSettingMapInput interface {
	pulumi.Input

	ToAlertGroupingSettingMapOutput() AlertGroupingSettingMapOutput
	ToAlertGroupingSettingMapOutputWithContext(context.Context) AlertGroupingSettingMapOutput
}

type AlertGroupingSettingMap map[string]AlertGroupingSettingInput

func (AlertGroupingSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertGroupingSetting)(nil)).Elem()
}

func (i AlertGroupingSettingMap) ToAlertGroupingSettingMapOutput() AlertGroupingSettingMapOutput {
	return i.ToAlertGroupingSettingMapOutputWithContext(context.Background())
}

func (i AlertGroupingSettingMap) ToAlertGroupingSettingMapOutputWithContext(ctx context.Context) AlertGroupingSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertGroupingSettingMapOutput)
}

type AlertGroupingSettingOutput struct{ *pulumi.OutputState }

func (AlertGroupingSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertGroupingSetting)(nil)).Elem()
}

func (o AlertGroupingSettingOutput) ToAlertGroupingSettingOutput() AlertGroupingSettingOutput {
	return o
}

func (o AlertGroupingSettingOutput) ToAlertGroupingSettingOutputWithContext(ctx context.Context) AlertGroupingSettingOutput {
	return o
}

// The set of values used for configuration.
func (o AlertGroupingSettingOutput) Config() AlertGroupingSettingConfigPtrOutput {
	return o.ApplyT(func(v *AlertGroupingSetting) AlertGroupingSettingConfigPtrOutput { return v.Config }).(AlertGroupingSettingConfigPtrOutput)
}

// A human-friendly text to describe and identify this alert grouping setting.
func (o AlertGroupingSettingOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertGroupingSetting) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name for the alert grouping settings.
func (o AlertGroupingSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertGroupingSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
func (o AlertGroupingSettingOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertGroupingSetting) pulumi.StringArrayOutput { return v.Services }).(pulumi.StringArrayOutput)
}

// The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
func (o AlertGroupingSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertGroupingSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AlertGroupingSettingArrayOutput struct{ *pulumi.OutputState }

func (AlertGroupingSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertGroupingSetting)(nil)).Elem()
}

func (o AlertGroupingSettingArrayOutput) ToAlertGroupingSettingArrayOutput() AlertGroupingSettingArrayOutput {
	return o
}

func (o AlertGroupingSettingArrayOutput) ToAlertGroupingSettingArrayOutputWithContext(ctx context.Context) AlertGroupingSettingArrayOutput {
	return o
}

func (o AlertGroupingSettingArrayOutput) Index(i pulumi.IntInput) AlertGroupingSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertGroupingSetting {
		return vs[0].([]*AlertGroupingSetting)[vs[1].(int)]
	}).(AlertGroupingSettingOutput)
}

type AlertGroupingSettingMapOutput struct{ *pulumi.OutputState }

func (AlertGroupingSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertGroupingSetting)(nil)).Elem()
}

func (o AlertGroupingSettingMapOutput) ToAlertGroupingSettingMapOutput() AlertGroupingSettingMapOutput {
	return o
}

func (o AlertGroupingSettingMapOutput) ToAlertGroupingSettingMapOutputWithContext(ctx context.Context) AlertGroupingSettingMapOutput {
	return o
}

func (o AlertGroupingSettingMapOutput) MapIndex(k pulumi.StringInput) AlertGroupingSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertGroupingSetting {
		return vs[0].(map[string]*AlertGroupingSetting)[vs[1].(string)]
	}).(AlertGroupingSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertGroupingSettingInput)(nil)).Elem(), &AlertGroupingSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertGroupingSettingArrayInput)(nil)).Elem(), AlertGroupingSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertGroupingSettingMapInput)(nil)).Elem(), AlertGroupingSettingMap{})
	pulumi.RegisterOutputType(AlertGroupingSettingOutput{})
	pulumi.RegisterOutputType(AlertGroupingSettingArrayOutput{})
	pulumi.RegisterOutputType(AlertGroupingSettingMapOutput{})
}
