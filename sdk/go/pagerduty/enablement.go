// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Enablements](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-list-enablements) allow you to enable or disable specific features for PagerDuty entities such as services and event orchestrations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := pagerduty.LookupService(ctx, &pagerduty.LookupServiceArgs{
//				Name: "My Web Service",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewEnablement(ctx, "example", &pagerduty.EnablementArgs{
//				EntityType: pulumi.String("service"),
//				EntityId:   pulumi.String(example.Id),
//				Feature:    pulumi.String("aiops"),
//				Enabled:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Enablements can be imported using the `id`, which is constructed by concatenating the `entity_type`, `entity_id`, and `feature` with dots, e.g.
//
// ```sh
// $ pulumi import pagerduty:index/enablement:Enablement example service.P7HHMVK.aiops
// ```
type Enablement struct {
	pulumi.CustomResourceState

	// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the entity for which to manage the enablement.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The name of the feature to enable or disable. Possible values can be `aiops`.
	Feature pulumi.StringOutput `pulumi:"feature"`
}

// NewEnablement registers a new resource with the given unique name, arguments, and options.
func NewEnablement(ctx *pulumi.Context,
	name string, args *EnablementArgs, opts ...pulumi.ResourceOption) (*Enablement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.Feature == nil {
		return nil, errors.New("invalid value for required argument 'Feature'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Enablement
	err := ctx.RegisterResource("pagerduty:index/enablement:Enablement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnablement gets an existing Enablement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnablement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnablementState, opts ...pulumi.ResourceOption) (*Enablement, error) {
	var resource Enablement
	err := ctx.ReadResource("pagerduty:index/enablement:Enablement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Enablement resources.
type enablementState struct {
	// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the entity for which to manage the enablement.
	EntityId *string `pulumi:"entityId"`
	// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
	EntityType *string `pulumi:"entityType"`
	// The name of the feature to enable or disable. Possible values can be `aiops`.
	Feature *string `pulumi:"feature"`
}

type EnablementState struct {
	// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
	Enabled pulumi.BoolPtrInput
	// The ID of the entity for which to manage the enablement.
	EntityId pulumi.StringPtrInput
	// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
	EntityType pulumi.StringPtrInput
	// The name of the feature to enable or disable. Possible values can be `aiops`.
	Feature pulumi.StringPtrInput
}

func (EnablementState) ElementType() reflect.Type {
	return reflect.TypeOf((*enablementState)(nil)).Elem()
}

type enablementArgs struct {
	// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the entity for which to manage the enablement.
	EntityId string `pulumi:"entityId"`
	// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
	EntityType string `pulumi:"entityType"`
	// The name of the feature to enable or disable. Possible values can be `aiops`.
	Feature string `pulumi:"feature"`
}

// The set of arguments for constructing a Enablement resource.
type EnablementArgs struct {
	// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
	Enabled pulumi.BoolPtrInput
	// The ID of the entity for which to manage the enablement.
	EntityId pulumi.StringInput
	// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
	EntityType pulumi.StringInput
	// The name of the feature to enable or disable. Possible values can be `aiops`.
	Feature pulumi.StringInput
}

func (EnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enablementArgs)(nil)).Elem()
}

type EnablementInput interface {
	pulumi.Input

	ToEnablementOutput() EnablementOutput
	ToEnablementOutputWithContext(ctx context.Context) EnablementOutput
}

func (*Enablement) ElementType() reflect.Type {
	return reflect.TypeOf((**Enablement)(nil)).Elem()
}

func (i *Enablement) ToEnablementOutput() EnablementOutput {
	return i.ToEnablementOutputWithContext(context.Background())
}

func (i *Enablement) ToEnablementOutputWithContext(ctx context.Context) EnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablementOutput)
}

// EnablementArrayInput is an input type that accepts EnablementArray and EnablementArrayOutput values.
// You can construct a concrete instance of `EnablementArrayInput` via:
//
//	EnablementArray{ EnablementArgs{...} }
type EnablementArrayInput interface {
	pulumi.Input

	ToEnablementArrayOutput() EnablementArrayOutput
	ToEnablementArrayOutputWithContext(context.Context) EnablementArrayOutput
}

type EnablementArray []EnablementInput

func (EnablementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enablement)(nil)).Elem()
}

func (i EnablementArray) ToEnablementArrayOutput() EnablementArrayOutput {
	return i.ToEnablementArrayOutputWithContext(context.Background())
}

func (i EnablementArray) ToEnablementArrayOutputWithContext(ctx context.Context) EnablementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablementArrayOutput)
}

// EnablementMapInput is an input type that accepts EnablementMap and EnablementMapOutput values.
// You can construct a concrete instance of `EnablementMapInput` via:
//
//	EnablementMap{ "key": EnablementArgs{...} }
type EnablementMapInput interface {
	pulumi.Input

	ToEnablementMapOutput() EnablementMapOutput
	ToEnablementMapOutputWithContext(context.Context) EnablementMapOutput
}

type EnablementMap map[string]EnablementInput

func (EnablementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enablement)(nil)).Elem()
}

func (i EnablementMap) ToEnablementMapOutput() EnablementMapOutput {
	return i.ToEnablementMapOutputWithContext(context.Background())
}

func (i EnablementMap) ToEnablementMapOutputWithContext(ctx context.Context) EnablementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablementMapOutput)
}

type EnablementOutput struct{ *pulumi.OutputState }

func (EnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enablement)(nil)).Elem()
}

func (o EnablementOutput) ToEnablementOutput() EnablementOutput {
	return o
}

func (o EnablementOutput) ToEnablementOutputWithContext(ctx context.Context) EnablementOutput {
	return o
}

// Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
func (o EnablementOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Enablement) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the entity for which to manage the enablement.
func (o EnablementOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *Enablement) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
func (o EnablementOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Enablement) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The name of the feature to enable or disable. Possible values can be `aiops`.
func (o EnablementOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v *Enablement) pulumi.StringOutput { return v.Feature }).(pulumi.StringOutput)
}

type EnablementArrayOutput struct{ *pulumi.OutputState }

func (EnablementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enablement)(nil)).Elem()
}

func (o EnablementArrayOutput) ToEnablementArrayOutput() EnablementArrayOutput {
	return o
}

func (o EnablementArrayOutput) ToEnablementArrayOutputWithContext(ctx context.Context) EnablementArrayOutput {
	return o
}

func (o EnablementArrayOutput) Index(i pulumi.IntInput) EnablementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Enablement {
		return vs[0].([]*Enablement)[vs[1].(int)]
	}).(EnablementOutput)
}

type EnablementMapOutput struct{ *pulumi.OutputState }

func (EnablementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enablement)(nil)).Elem()
}

func (o EnablementMapOutput) ToEnablementMapOutput() EnablementMapOutput {
	return o
}

func (o EnablementMapOutput) ToEnablementMapOutputWithContext(ctx context.Context) EnablementMapOutput {
	return o
}

func (o EnablementMapOutput) MapIndex(k pulumi.StringInput) EnablementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Enablement {
		return vs[0].(map[string]*Enablement)[vs[1].(string)]
	}).(EnablementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnablementInput)(nil)).Elem(), &Enablement{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnablementArrayInput)(nil)).Elem(), EnablementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnablementMapInput)(nil)).Elem(), EnablementMap{})
	pulumi.RegisterOutputType(EnablementOutput{})
	pulumi.RegisterOutputType(EnablementArrayOutput{})
	pulumi.RegisterOutputType(EnablementMapOutput{})
}
