// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An [escalation policy](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Escalation_Policies/get_escalation_policies) determines what user or schedule will be notified first, second, and so on when an incident is triggered. Escalation policies are used by one or more services.
type EscalationPolicy struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the escalation policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops pulumi.IntPtrOutput `pulumi:"numLoops"`
	// An Escalation rule block. Escalation rules documented below.
	Rules EscalationPolicyRuleArrayOutput `pulumi:"rules"`
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter.
	Teams pulumi.StringArrayOutput `pulumi:"teams"`
}

// NewEscalationPolicy registers a new resource with the given unique name, arguments, and options.
func NewEscalationPolicy(ctx *pulumi.Context,
	name string, args *EscalationPolicyArgs, opts ...pulumi.ResourceOption) (*EscalationPolicy, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	if args == nil {
		args = &EscalationPolicyArgs{}
	}
	var resource EscalationPolicy
	err := ctx.RegisterResource("pagerduty:index/escalationPolicy:EscalationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscalationPolicy gets an existing EscalationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscalationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscalationPolicyState, opts ...pulumi.ResourceOption) (*EscalationPolicy, error) {
	var resource EscalationPolicy
	err := ctx.ReadResource("pagerduty:index/escalationPolicy:EscalationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EscalationPolicy resources.
type escalationPolicyState struct {
	Description *string `pulumi:"description"`
	// The name of the escalation policy.
	Name *string `pulumi:"name"`
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops *int `pulumi:"numLoops"`
	// An Escalation rule block. Escalation rules documented below.
	Rules []EscalationPolicyRule `pulumi:"rules"`
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter.
	Teams []string `pulumi:"teams"`
}

type EscalationPolicyState struct {
	Description pulumi.StringPtrInput
	// The name of the escalation policy.
	Name pulumi.StringPtrInput
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops pulumi.IntPtrInput
	// An Escalation rule block. Escalation rules documented below.
	Rules EscalationPolicyRuleArrayInput
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter.
	Teams pulumi.StringArrayInput
}

func (EscalationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationPolicyState)(nil)).Elem()
}

type escalationPolicyArgs struct {
	Description *string `pulumi:"description"`
	// The name of the escalation policy.
	Name *string `pulumi:"name"`
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops *int `pulumi:"numLoops"`
	// An Escalation rule block. Escalation rules documented below.
	Rules []EscalationPolicyRule `pulumi:"rules"`
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter.
	Teams []string `pulumi:"teams"`
}

// The set of arguments for constructing a EscalationPolicy resource.
type EscalationPolicyArgs struct {
	Description pulumi.StringPtrInput
	// The name of the escalation policy.
	Name pulumi.StringPtrInput
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops pulumi.IntPtrInput
	// An Escalation rule block. Escalation rules documented below.
	Rules EscalationPolicyRuleArrayInput
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter.
	Teams pulumi.StringArrayInput
}

func (EscalationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationPolicyArgs)(nil)).Elem()
}
