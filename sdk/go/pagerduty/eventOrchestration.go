// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Global Event Orchestrations](https://support.pagerduty.com/docs/event-orchestration#global-orchestrations) allow you define a set of Event Rules, so that when you ingest events using the Orchestration's Routing Key your events will be routed to the correct Service, based on the event's content.
//
// ## Example of configuring a Global Event Orchestration
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		engineering, err := pagerduty.NewTeam(ctx, "engineering", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewEventOrchestration(ctx, "myMonitor", &pagerduty.EventOrchestrationArgs{
// 			Description: pulumi.String("Send events to a pair of services"),
// 			Team:        engineering.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// EventOrchestrations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import pagerduty:index/eventOrchestration:EventOrchestration main 19acac92-027a-4ea0-b06c-bbf516519601
// ```
type EventOrchestration struct {
	pulumi.CustomResourceState

	// A human-friendly description of the Event Orchestration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An integration for the Event Orchestration.
	Integrations EventOrchestrationIntegrationArrayOutput `pulumi:"integrations"`
	// Name of the Event Orchestration.
	Name   pulumi.StringOutput `pulumi:"name"`
	Routes pulumi.IntOutput    `pulumi:"routes"`
	// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
	Team pulumi.StringPtrOutput `pulumi:"team"`
}

// NewEventOrchestration registers a new resource with the given unique name, arguments, and options.
func NewEventOrchestration(ctx *pulumi.Context,
	name string, args *EventOrchestrationArgs, opts ...pulumi.ResourceOption) (*EventOrchestration, error) {
	if args == nil {
		args = &EventOrchestrationArgs{}
	}

	var resource EventOrchestration
	err := ctx.RegisterResource("pagerduty:index/eventOrchestration:EventOrchestration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventOrchestration gets an existing EventOrchestration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventOrchestration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventOrchestrationState, opts ...pulumi.ResourceOption) (*EventOrchestration, error) {
	var resource EventOrchestration
	err := ctx.ReadResource("pagerduty:index/eventOrchestration:EventOrchestration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventOrchestration resources.
type eventOrchestrationState struct {
	// A human-friendly description of the Event Orchestration.
	Description *string `pulumi:"description"`
	// An integration for the Event Orchestration.
	Integrations []EventOrchestrationIntegration `pulumi:"integrations"`
	// Name of the Event Orchestration.
	Name   *string `pulumi:"name"`
	Routes *int    `pulumi:"routes"`
	// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
	Team *string `pulumi:"team"`
}

type EventOrchestrationState struct {
	// A human-friendly description of the Event Orchestration.
	Description pulumi.StringPtrInput
	// An integration for the Event Orchestration.
	Integrations EventOrchestrationIntegrationArrayInput
	// Name of the Event Orchestration.
	Name   pulumi.StringPtrInput
	Routes pulumi.IntPtrInput
	// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
	Team pulumi.StringPtrInput
}

func (EventOrchestrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventOrchestrationState)(nil)).Elem()
}

type eventOrchestrationArgs struct {
	// A human-friendly description of the Event Orchestration.
	Description *string `pulumi:"description"`
	// An integration for the Event Orchestration.
	Integrations []EventOrchestrationIntegration `pulumi:"integrations"`
	// Name of the Event Orchestration.
	Name *string `pulumi:"name"`
	// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
	Team *string `pulumi:"team"`
}

// The set of arguments for constructing a EventOrchestration resource.
type EventOrchestrationArgs struct {
	// A human-friendly description of the Event Orchestration.
	Description pulumi.StringPtrInput
	// An integration for the Event Orchestration.
	Integrations EventOrchestrationIntegrationArrayInput
	// Name of the Event Orchestration.
	Name pulumi.StringPtrInput
	// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
	Team pulumi.StringPtrInput
}

func (EventOrchestrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventOrchestrationArgs)(nil)).Elem()
}

type EventOrchestrationInput interface {
	pulumi.Input

	ToEventOrchestrationOutput() EventOrchestrationOutput
	ToEventOrchestrationOutputWithContext(ctx context.Context) EventOrchestrationOutput
}

func (*EventOrchestration) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestration)(nil)).Elem()
}

func (i *EventOrchestration) ToEventOrchestrationOutput() EventOrchestrationOutput {
	return i.ToEventOrchestrationOutputWithContext(context.Background())
}

func (i *EventOrchestration) ToEventOrchestrationOutputWithContext(ctx context.Context) EventOrchestrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationOutput)
}

// EventOrchestrationArrayInput is an input type that accepts EventOrchestrationArray and EventOrchestrationArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationArrayInput` via:
//
//          EventOrchestrationArray{ EventOrchestrationArgs{...} }
type EventOrchestrationArrayInput interface {
	pulumi.Input

	ToEventOrchestrationArrayOutput() EventOrchestrationArrayOutput
	ToEventOrchestrationArrayOutputWithContext(context.Context) EventOrchestrationArrayOutput
}

type EventOrchestrationArray []EventOrchestrationInput

func (EventOrchestrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventOrchestration)(nil)).Elem()
}

func (i EventOrchestrationArray) ToEventOrchestrationArrayOutput() EventOrchestrationArrayOutput {
	return i.ToEventOrchestrationArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationArray) ToEventOrchestrationArrayOutputWithContext(ctx context.Context) EventOrchestrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationArrayOutput)
}

// EventOrchestrationMapInput is an input type that accepts EventOrchestrationMap and EventOrchestrationMapOutput values.
// You can construct a concrete instance of `EventOrchestrationMapInput` via:
//
//          EventOrchestrationMap{ "key": EventOrchestrationArgs{...} }
type EventOrchestrationMapInput interface {
	pulumi.Input

	ToEventOrchestrationMapOutput() EventOrchestrationMapOutput
	ToEventOrchestrationMapOutputWithContext(context.Context) EventOrchestrationMapOutput
}

type EventOrchestrationMap map[string]EventOrchestrationInput

func (EventOrchestrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventOrchestration)(nil)).Elem()
}

func (i EventOrchestrationMap) ToEventOrchestrationMapOutput() EventOrchestrationMapOutput {
	return i.ToEventOrchestrationMapOutputWithContext(context.Background())
}

func (i EventOrchestrationMap) ToEventOrchestrationMapOutputWithContext(ctx context.Context) EventOrchestrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationMapOutput)
}

type EventOrchestrationOutput struct{ *pulumi.OutputState }

func (EventOrchestrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestration)(nil)).Elem()
}

func (o EventOrchestrationOutput) ToEventOrchestrationOutput() EventOrchestrationOutput {
	return o
}

func (o EventOrchestrationOutput) ToEventOrchestrationOutputWithContext(ctx context.Context) EventOrchestrationOutput {
	return o
}

// A human-friendly description of the Event Orchestration.
func (o EventOrchestrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An integration for the Event Orchestration.
func (o EventOrchestrationOutput) Integrations() EventOrchestrationIntegrationArrayOutput {
	return o.ApplyT(func(v *EventOrchestration) EventOrchestrationIntegrationArrayOutput { return v.Integrations }).(EventOrchestrationIntegrationArrayOutput)
}

// Name of the Event Orchestration.
func (o EventOrchestrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventOrchestration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventOrchestrationOutput) Routes() pulumi.IntOutput {
	return o.ApplyT(func(v *EventOrchestration) pulumi.IntOutput { return v.Routes }).(pulumi.IntOutput)
}

// ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
func (o EventOrchestrationOutput) Team() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestration) pulumi.StringPtrOutput { return v.Team }).(pulumi.StringPtrOutput)
}

type EventOrchestrationArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventOrchestration)(nil)).Elem()
}

func (o EventOrchestrationArrayOutput) ToEventOrchestrationArrayOutput() EventOrchestrationArrayOutput {
	return o
}

func (o EventOrchestrationArrayOutput) ToEventOrchestrationArrayOutputWithContext(ctx context.Context) EventOrchestrationArrayOutput {
	return o
}

func (o EventOrchestrationArrayOutput) Index(i pulumi.IntInput) EventOrchestrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventOrchestration {
		return vs[0].([]*EventOrchestration)[vs[1].(int)]
	}).(EventOrchestrationOutput)
}

type EventOrchestrationMapOutput struct{ *pulumi.OutputState }

func (EventOrchestrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventOrchestration)(nil)).Elem()
}

func (o EventOrchestrationMapOutput) ToEventOrchestrationMapOutput() EventOrchestrationMapOutput {
	return o
}

func (o EventOrchestrationMapOutput) ToEventOrchestrationMapOutputWithContext(ctx context.Context) EventOrchestrationMapOutput {
	return o
}

func (o EventOrchestrationMapOutput) MapIndex(k pulumi.StringInput) EventOrchestrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventOrchestration {
		return vs[0].(map[string]*EventOrchestration)[vs[1].(string)]
	}).(EventOrchestrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationInput)(nil)).Elem(), &EventOrchestration{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationArrayInput)(nil)).Elem(), EventOrchestrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationMapInput)(nil)).Elem(), EventOrchestrationMap{})
	pulumi.RegisterOutputType(EventOrchestrationOutput{})
	pulumi.RegisterOutputType(EventOrchestrationArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationMapOutput{})
}
