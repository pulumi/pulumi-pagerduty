// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration
//
// ## Example of configuring a Cache Variable for a Global Event Orchestration
//
// This example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			databaseTeam, err := pagerduty.NewTeam(ctx, "database_team", &pagerduty.TeamArgs{
//				Name: pulumi.String("Database Team"),
//			})
//			if err != nil {
//				return err
//			}
//			eventOrchestration, err := pagerduty.NewEventOrchestration(ctx, "event_orchestration", &pagerduty.EventOrchestrationArgs{
//				Name: pulumi.String("Example Orchestration"),
//				Team: databaseTeam.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewEventOrchestrationGlobalCacheVariable(ctx, "cache_var", &pagerduty.EventOrchestrationGlobalCacheVariableArgs{
//				EventOrchestration: eventOrchestration.ID(),
//				Name:               pulumi.String("recent_host"),
//				Conditions: pagerduty.EventOrchestrationGlobalCacheVariableConditionArray{
//					&pagerduty.EventOrchestrationGlobalCacheVariableConditionArgs{
//						Expression: pulumi.String("event.source exists"),
//					},
//				},
//				Configuration: &pagerduty.EventOrchestrationGlobalCacheVariableConfigurationArgs{
//					Type:   pulumi.String("recent_value"),
//					Source: pulumi.String("event.source"),
//					Regex:  pulumi.String(".*"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewEventOrchestrationGlobal(ctx, "global", &pagerduty.EventOrchestrationGlobalArgs{
//				EventOrchestration: eventOrchestration.ID(),
//				Sets: pagerduty.EventOrchestrationGlobalSetArray{
//					&pagerduty.EventOrchestrationGlobalSetArgs{
//						Id: pulumi.String("start"),
//						Rules: pagerduty.EventOrchestrationGlobalSetRuleArray{
//							&pagerduty.EventOrchestrationGlobalSetRuleArgs{
//								Label: pulumi.String("Always annotate the incident with the event source for all events"),
//								Actions: &pagerduty.EventOrchestrationGlobalSetRuleActionsArgs{
//									Annotate: pulumi.String("Last time, we saw this incident occur on host: {{cache_var.recent_host}}"),
//								},
//							},
//						},
//					},
//				},
//				CatchAll: &pagerduty.EventOrchestrationGlobalCatchAllArgs{
//					Actions: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.
//
// ```sh
// $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
// ```
type EventOrchestrationGlobalCacheVariable struct {
	pulumi.CustomResourceState

	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions EventOrchestrationGlobalCacheVariableConditionArrayOutput `pulumi:"conditions"`
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configuration EventOrchestrationGlobalCacheVariableConfigurationOutput `pulumi:"configuration"`
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration pulumi.StringOutput `pulumi:"eventOrchestration"`
	// Name of the Cache Variable associated with the Global Event Orchestration.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewEventOrchestrationGlobalCacheVariable registers a new resource with the given unique name, arguments, and options.
func NewEventOrchestrationGlobalCacheVariable(ctx *pulumi.Context,
	name string, args *EventOrchestrationGlobalCacheVariableArgs, opts ...pulumi.ResourceOption) (*EventOrchestrationGlobalCacheVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.EventOrchestration == nil {
		return nil, errors.New("invalid value for required argument 'EventOrchestration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventOrchestrationGlobalCacheVariable
	err := ctx.RegisterResource("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventOrchestrationGlobalCacheVariable gets an existing EventOrchestrationGlobalCacheVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventOrchestrationGlobalCacheVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventOrchestrationGlobalCacheVariableState, opts ...pulumi.ResourceOption) (*EventOrchestrationGlobalCacheVariable, error) {
	var resource EventOrchestrationGlobalCacheVariable
	err := ctx.ReadResource("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventOrchestrationGlobalCacheVariable resources.
type eventOrchestrationGlobalCacheVariableState struct {
	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions []EventOrchestrationGlobalCacheVariableCondition `pulumi:"conditions"`
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configuration *EventOrchestrationGlobalCacheVariableConfiguration `pulumi:"configuration"`
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration *string `pulumi:"eventOrchestration"`
	// Name of the Cache Variable associated with the Global Event Orchestration.
	Name *string `pulumi:"name"`
}

type EventOrchestrationGlobalCacheVariableState struct {
	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions EventOrchestrationGlobalCacheVariableConditionArrayInput
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configuration EventOrchestrationGlobalCacheVariableConfigurationPtrInput
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration pulumi.StringPtrInput
	// Name of the Cache Variable associated with the Global Event Orchestration.
	Name pulumi.StringPtrInput
}

func (EventOrchestrationGlobalCacheVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventOrchestrationGlobalCacheVariableState)(nil)).Elem()
}

type eventOrchestrationGlobalCacheVariableArgs struct {
	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions []EventOrchestrationGlobalCacheVariableCondition `pulumi:"conditions"`
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configuration EventOrchestrationGlobalCacheVariableConfiguration `pulumi:"configuration"`
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration string `pulumi:"eventOrchestration"`
	// Name of the Cache Variable associated with the Global Event Orchestration.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a EventOrchestrationGlobalCacheVariable resource.
type EventOrchestrationGlobalCacheVariableArgs struct {
	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions EventOrchestrationGlobalCacheVariableConditionArrayInput
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configuration EventOrchestrationGlobalCacheVariableConfigurationInput
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration pulumi.StringInput
	// Name of the Cache Variable associated with the Global Event Orchestration.
	Name pulumi.StringPtrInput
}

func (EventOrchestrationGlobalCacheVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventOrchestrationGlobalCacheVariableArgs)(nil)).Elem()
}

type EventOrchestrationGlobalCacheVariableInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCacheVariableOutput() EventOrchestrationGlobalCacheVariableOutput
	ToEventOrchestrationGlobalCacheVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableOutput
}

func (*EventOrchestrationGlobalCacheVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (i *EventOrchestrationGlobalCacheVariable) ToEventOrchestrationGlobalCacheVariableOutput() EventOrchestrationGlobalCacheVariableOutput {
	return i.ToEventOrchestrationGlobalCacheVariableOutputWithContext(context.Background())
}

func (i *EventOrchestrationGlobalCacheVariable) ToEventOrchestrationGlobalCacheVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCacheVariableOutput)
}

// EventOrchestrationGlobalCacheVariableArrayInput is an input type that accepts EventOrchestrationGlobalCacheVariableArray and EventOrchestrationGlobalCacheVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCacheVariableArrayInput` via:
//
//	EventOrchestrationGlobalCacheVariableArray{ EventOrchestrationGlobalCacheVariableArgs{...} }
type EventOrchestrationGlobalCacheVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCacheVariableArrayOutput() EventOrchestrationGlobalCacheVariableArrayOutput
	ToEventOrchestrationGlobalCacheVariableArrayOutputWithContext(context.Context) EventOrchestrationGlobalCacheVariableArrayOutput
}

type EventOrchestrationGlobalCacheVariableArray []EventOrchestrationGlobalCacheVariableInput

func (EventOrchestrationGlobalCacheVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalCacheVariableArray) ToEventOrchestrationGlobalCacheVariableArrayOutput() EventOrchestrationGlobalCacheVariableArrayOutput {
	return i.ToEventOrchestrationGlobalCacheVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCacheVariableArray) ToEventOrchestrationGlobalCacheVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCacheVariableArrayOutput)
}

// EventOrchestrationGlobalCacheVariableMapInput is an input type that accepts EventOrchestrationGlobalCacheVariableMap and EventOrchestrationGlobalCacheVariableMapOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCacheVariableMapInput` via:
//
//	EventOrchestrationGlobalCacheVariableMap{ "key": EventOrchestrationGlobalCacheVariableArgs{...} }
type EventOrchestrationGlobalCacheVariableMapInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCacheVariableMapOutput() EventOrchestrationGlobalCacheVariableMapOutput
	ToEventOrchestrationGlobalCacheVariableMapOutputWithContext(context.Context) EventOrchestrationGlobalCacheVariableMapOutput
}

type EventOrchestrationGlobalCacheVariableMap map[string]EventOrchestrationGlobalCacheVariableInput

func (EventOrchestrationGlobalCacheVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalCacheVariableMap) ToEventOrchestrationGlobalCacheVariableMapOutput() EventOrchestrationGlobalCacheVariableMapOutput {
	return i.ToEventOrchestrationGlobalCacheVariableMapOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCacheVariableMap) ToEventOrchestrationGlobalCacheVariableMapOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCacheVariableMapOutput)
}

type EventOrchestrationGlobalCacheVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCacheVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalCacheVariableOutput) ToEventOrchestrationGlobalCacheVariableOutput() EventOrchestrationGlobalCacheVariableOutput {
	return o
}

func (o EventOrchestrationGlobalCacheVariableOutput) ToEventOrchestrationGlobalCacheVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableOutput {
	return o
}

// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
func (o EventOrchestrationGlobalCacheVariableOutput) Conditions() EventOrchestrationGlobalCacheVariableConditionArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCacheVariable) EventOrchestrationGlobalCacheVariableConditionArrayOutput {
		return v.Conditions
	}).(EventOrchestrationGlobalCacheVariableConditionArrayOutput)
}

// A configuration object to define what and how values will be stored in the Cache Variable.
func (o EventOrchestrationGlobalCacheVariableOutput) Configuration() EventOrchestrationGlobalCacheVariableConfigurationOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCacheVariable) EventOrchestrationGlobalCacheVariableConfigurationOutput {
		return v.Configuration
	}).(EventOrchestrationGlobalCacheVariableConfigurationOutput)
}

// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
func (o EventOrchestrationGlobalCacheVariableOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCacheVariable) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// ID of the Global Event Orchestration to which this Cache Variable belongs.
func (o EventOrchestrationGlobalCacheVariableOutput) EventOrchestration() pulumi.StringOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCacheVariable) pulumi.StringOutput { return v.EventOrchestration }).(pulumi.StringOutput)
}

// Name of the Cache Variable associated with the Global Event Orchestration.
func (o EventOrchestrationGlobalCacheVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCacheVariable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalCacheVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCacheVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalCacheVariableArrayOutput) ToEventOrchestrationGlobalCacheVariableArrayOutput() EventOrchestrationGlobalCacheVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCacheVariableArrayOutput) ToEventOrchestrationGlobalCacheVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCacheVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalCacheVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventOrchestrationGlobalCacheVariable {
		return vs[0].([]*EventOrchestrationGlobalCacheVariable)[vs[1].(int)]
	}).(EventOrchestrationGlobalCacheVariableOutput)
}

type EventOrchestrationGlobalCacheVariableMapOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCacheVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventOrchestrationGlobalCacheVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalCacheVariableMapOutput) ToEventOrchestrationGlobalCacheVariableMapOutput() EventOrchestrationGlobalCacheVariableMapOutput {
	return o
}

func (o EventOrchestrationGlobalCacheVariableMapOutput) ToEventOrchestrationGlobalCacheVariableMapOutputWithContext(ctx context.Context) EventOrchestrationGlobalCacheVariableMapOutput {
	return o
}

func (o EventOrchestrationGlobalCacheVariableMapOutput) MapIndex(k pulumi.StringInput) EventOrchestrationGlobalCacheVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventOrchestrationGlobalCacheVariable {
		return vs[0].(map[string]*EventOrchestrationGlobalCacheVariable)[vs[1].(string)]
	}).(EventOrchestrationGlobalCacheVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCacheVariableInput)(nil)).Elem(), &EventOrchestrationGlobalCacheVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCacheVariableArrayInput)(nil)).Elem(), EventOrchestrationGlobalCacheVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCacheVariableMapInput)(nil)).Elem(), EventOrchestrationGlobalCacheVariableMap{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCacheVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCacheVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCacheVariableMapOutput{})
}
