// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// *NOTE: The `.EventRule` resource has been deprecated in favor the the .Ruleset and .RulesetRule resources. Please use the `ruleset` based resources for working with Event Rules.*
//
//
// An [event rule](https://v2.developer.pagerduty.com/docs/global-event-rules-api) determines what happens to an event that is sent to PagerDuty by monitoring tools and other integrations.
type EventRule struct {
	pulumi.CustomResourceState

	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJson pulumi.StringOutput `pulumi:"actionJson"`
	// Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.
	AdvancedConditionJson pulumi.StringPtrOutput `pulumi:"advancedConditionJson"`
	// A boolean that indicates whether the rule is a catch all for the account. This field is read-only through the PagerDuty API.
	CatchAll pulumi.BoolOutput `pulumi:"catchAll"`
	// Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
	ConditionJson pulumi.StringOutput `pulumi:"conditionJson"`
}

// NewEventRule registers a new resource with the given unique name, arguments, and options.
func NewEventRule(ctx *pulumi.Context,
	name string, args *EventRuleArgs, opts ...pulumi.ResourceOption) (*EventRule, error) {
	if args == nil || args.ActionJson == nil {
		return nil, errors.New("missing required argument 'ActionJson'")
	}
	if args == nil || args.ConditionJson == nil {
		return nil, errors.New("missing required argument 'ConditionJson'")
	}
	if args == nil {
		args = &EventRuleArgs{}
	}
	var resource EventRule
	err := ctx.RegisterResource("pagerduty:index/eventRule:EventRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventRule gets an existing EventRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventRuleState, opts ...pulumi.ResourceOption) (*EventRule, error) {
	var resource EventRule
	err := ctx.ReadResource("pagerduty:index/eventRule:EventRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventRule resources.
type eventRuleState struct {
	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJson *string `pulumi:"actionJson"`
	// Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.
	AdvancedConditionJson *string `pulumi:"advancedConditionJson"`
	// A boolean that indicates whether the rule is a catch all for the account. This field is read-only through the PagerDuty API.
	CatchAll *bool `pulumi:"catchAll"`
	// Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
	ConditionJson *string `pulumi:"conditionJson"`
}

type EventRuleState struct {
	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJson pulumi.StringPtrInput
	// Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.
	AdvancedConditionJson pulumi.StringPtrInput
	// A boolean that indicates whether the rule is a catch all for the account. This field is read-only through the PagerDuty API.
	CatchAll pulumi.BoolPtrInput
	// Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
	ConditionJson pulumi.StringPtrInput
}

func (EventRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleState)(nil)).Elem()
}

type eventRuleArgs struct {
	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJson string `pulumi:"actionJson"`
	// Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.
	AdvancedConditionJson *string `pulumi:"advancedConditionJson"`
	// Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
	ConditionJson string `pulumi:"conditionJson"`
}

// The set of arguments for constructing a EventRule resource.
type EventRuleArgs struct {
	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJson pulumi.StringInput
	// Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://v2.developer.pagerduty.com/docs/global-event-rules-api#section-advanced-condition) in the PagerDuty API documentation.
	AdvancedConditionJson pulumi.StringPtrInput
	// Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
	ConditionJson pulumi.StringInput
}

func (EventRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleArgs)(nil)).Elem()
}
