// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) can be associated with a service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			webhook, err := pagerduty.GetExtensionSchema(ctx, &pagerduty.GetExtensionSchemaArgs{
//				Name: "Generic V2 Webhook",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := pagerduty.NewUser(ctx, "exampleUser", &pagerduty.UserArgs{
//				Email: pulumi.String("howard.james@example.domain"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEscalationPolicy, err := pagerduty.NewEscalationPolicy(ctx, "exampleEscalationPolicy", &pagerduty.EscalationPolicyArgs{
//				NumLoops: pulumi.Int(2),
//				Rules: pagerduty.EscalationPolicyRuleArray{
//					&pagerduty.EscalationPolicyRuleArgs{
//						EscalationDelayInMinutes: pulumi.Int(10),
//						Targets: pagerduty.EscalationPolicyRuleTargetArray{
//							&pagerduty.EscalationPolicyRuleTargetArgs{
//								Type: pulumi.String("user"),
//								Id:   exampleUser.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := pagerduty.NewService(ctx, "exampleService", &pagerduty.ServiceArgs{
//				AutoResolveTimeout:     pulumi.String("14400"),
//				AcknowledgementTimeout: pulumi.String("600"),
//				EscalationPolicy:       exampleEscalationPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewExtension(ctx, "slack", &pagerduty.ExtensionArgs{
//				EndpointUrl:     pulumi.String("https://generic_webhook_url/XXXXXX/BBBBBB"),
//				ExtensionSchema: *pulumi.String(webhook.Id),
//				ExtensionObjects: pulumi.StringArray{
//					exampleService.ID(),
//				},
//				Config: pulumi.String("{\n	\"restrict\": \"any\",\n	\"notify_types\": {\n			\"resolve\": false,\n			\"acknowledge\": false,\n			\"assignments\": false\n	},\n	\"access_token\": \"XXX\"\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Extensions can be imported using the id.e.g.
//
// ```sh
//
//	$ pulumi import pagerduty:index/extension:Extension main PLBP09X
//
// ```
type Extension struct {
	pulumi.CustomResourceState

	// The configuration of the service extension as string containing plain JSON-encoded data.
	Config pulumi.StringPtrOutput `pulumi:"config"`
	// The url of the extension.
	// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
	EndpointUrl pulumi.StringPtrOutput `pulumi:"endpointUrl"`
	// This is the objects for which the extension applies (An array of service ids).
	ExtensionObjects pulumi.StringArrayOutput `pulumi:"extensionObjects"`
	// This is the schema for this extension.
	ExtensionSchema pulumi.StringOutput `pulumi:"extensionSchema"`
	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl pulumi.StringOutput `pulumi:"htmlUrl"`
	// The name of the service extension.
	Name pulumi.StringOutput `pulumi:"name"`
	// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
	//
	// **Note:** You can use the `getExtensionSchema` data source to locate the appropriate extension vendor ID.
	Summary pulumi.StringOutput `pulumi:"summary"`
	Type    pulumi.StringOutput `pulumi:"type"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtensionObjects == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionObjects'")
	}
	if args.ExtensionSchema == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionSchema'")
	}
	if args.EndpointUrl != nil {
		args.EndpointUrl = pulumi.ToSecret(args.EndpointUrl).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"endpointUrl",
	})
	opts = append(opts, secrets)
	var resource Extension
	err := ctx.RegisterResource("pagerduty:index/extension:Extension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	var resource Extension
	err := ctx.ReadResource("pagerduty:index/extension:Extension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type extensionState struct {
	// The configuration of the service extension as string containing plain JSON-encoded data.
	Config *string `pulumi:"config"`
	// The url of the extension.
	// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// This is the objects for which the extension applies (An array of service ids).
	ExtensionObjects []string `pulumi:"extensionObjects"`
	// This is the schema for this extension.
	ExtensionSchema *string `pulumi:"extensionSchema"`
	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl *string `pulumi:"htmlUrl"`
	// The name of the service extension.
	Name *string `pulumi:"name"`
	// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
	//
	// **Note:** You can use the `getExtensionSchema` data source to locate the appropriate extension vendor ID.
	Summary *string `pulumi:"summary"`
	Type    *string `pulumi:"type"`
}

type ExtensionState struct {
	// The configuration of the service extension as string containing plain JSON-encoded data.
	Config pulumi.StringPtrInput
	// The url of the extension.
	// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
	EndpointUrl pulumi.StringPtrInput
	// This is the objects for which the extension applies (An array of service ids).
	ExtensionObjects pulumi.StringArrayInput
	// This is the schema for this extension.
	ExtensionSchema pulumi.StringPtrInput
	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl pulumi.StringPtrInput
	// The name of the service extension.
	Name pulumi.StringPtrInput
	// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
	//
	// **Note:** You can use the `getExtensionSchema` data source to locate the appropriate extension vendor ID.
	Summary pulumi.StringPtrInput
	Type    pulumi.StringPtrInput
}

func (ExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionState)(nil)).Elem()
}

type extensionArgs struct {
	// The configuration of the service extension as string containing plain JSON-encoded data.
	Config *string `pulumi:"config"`
	// The url of the extension.
	// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// This is the objects for which the extension applies (An array of service ids).
	ExtensionObjects []string `pulumi:"extensionObjects"`
	// This is the schema for this extension.
	ExtensionSchema string `pulumi:"extensionSchema"`
	// The name of the service extension.
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// The configuration of the service extension as string containing plain JSON-encoded data.
	Config pulumi.StringPtrInput
	// The url of the extension.
	// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
	EndpointUrl pulumi.StringPtrInput
	// This is the objects for which the extension applies (An array of service ids).
	ExtensionObjects pulumi.StringArrayInput
	// This is the schema for this extension.
	ExtensionSchema pulumi.StringInput
	// The name of the service extension.
	Name pulumi.StringPtrInput
	Type pulumi.StringPtrInput
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionArgs)(nil)).Elem()
}

type ExtensionInput interface {
	pulumi.Input

	ToExtensionOutput() ExtensionOutput
	ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput
}

func (*Extension) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (i *Extension) ToExtensionOutput() ExtensionOutput {
	return i.ToExtensionOutputWithContext(context.Background())
}

func (i *Extension) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionOutput)
}

// ExtensionArrayInput is an input type that accepts ExtensionArray and ExtensionArrayOutput values.
// You can construct a concrete instance of `ExtensionArrayInput` via:
//
//	ExtensionArray{ ExtensionArgs{...} }
type ExtensionArrayInput interface {
	pulumi.Input

	ToExtensionArrayOutput() ExtensionArrayOutput
	ToExtensionArrayOutputWithContext(context.Context) ExtensionArrayOutput
}

type ExtensionArray []ExtensionInput

func (ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (i ExtensionArray) ToExtensionArrayOutput() ExtensionArrayOutput {
	return i.ToExtensionArrayOutputWithContext(context.Background())
}

func (i ExtensionArray) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionArrayOutput)
}

// ExtensionMapInput is an input type that accepts ExtensionMap and ExtensionMapOutput values.
// You can construct a concrete instance of `ExtensionMapInput` via:
//
//	ExtensionMap{ "key": ExtensionArgs{...} }
type ExtensionMapInput interface {
	pulumi.Input

	ToExtensionMapOutput() ExtensionMapOutput
	ToExtensionMapOutputWithContext(context.Context) ExtensionMapOutput
}

type ExtensionMap map[string]ExtensionInput

func (ExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (i ExtensionMap) ToExtensionMapOutput() ExtensionMapOutput {
	return i.ToExtensionMapOutputWithContext(context.Background())
}

func (i ExtensionMap) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionMapOutput)
}

type ExtensionOutput struct{ *pulumi.OutputState }

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

// The configuration of the service extension as string containing plain JSON-encoded data.
func (o ExtensionOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringPtrOutput { return v.Config }).(pulumi.StringPtrOutput)
}

// The url of the extension.
// **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpointUrl`, but one with named `Slack` accepts.
func (o ExtensionOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringPtrOutput { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// This is the objects for which the extension applies (An array of service ids).
func (o ExtensionOutput) ExtensionObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringArrayOutput { return v.ExtensionObjects }).(pulumi.StringArrayOutput)
}

// This is the schema for this extension.
func (o ExtensionOutput) ExtensionSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.ExtensionSchema }).(pulumi.StringOutput)
}

// URL at which the entity is uniquely displayed in the Web app
func (o ExtensionOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The name of the service extension.
func (o ExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
//
// **Note:** You can use the `getExtensionSchema` data source to locate the appropriate extension vendor ID.
func (o ExtensionOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Summary }).(pulumi.StringOutput)
}

func (o ExtensionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ExtensionArrayOutput struct{ *pulumi.OutputState }

func (ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (o ExtensionArrayOutput) ToExtensionArrayOutput() ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) Index(i pulumi.IntInput) ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].([]*Extension)[vs[1].(int)]
	}).(ExtensionOutput)
}

type ExtensionMapOutput struct{ *pulumi.OutputState }

func (ExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (o ExtensionMapOutput) ToExtensionMapOutput() ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) MapIndex(k pulumi.StringInput) ExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].(map[string]*Extension)[vs[1].(string)]
	}).(ExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionInput)(nil)).Elem(), &Extension{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionArrayInput)(nil)).Elem(), ExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionMapInput)(nil)).Elem(), ExtensionMap{})
	pulumi.RegisterOutputType(ExtensionOutput{})
	pulumi.RegisterOutputType(ExtensionArrayOutput{})
	pulumi.RegisterOutputType(ExtensionMapOutput{})
}
