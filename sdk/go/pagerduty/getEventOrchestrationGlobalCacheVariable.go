// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) for a Global Event Orchestration.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			eventOrchestration, err := pagerduty.NewEventOrchestration(ctx, "event_orchestration", &pagerduty.EventOrchestrationArgs{
//				Name: pulumi.String("Test Event Orchestration"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = pagerduty.LookupEventOrchestrationGlobalCacheVariableOutput(ctx, pagerduty.GetEventOrchestrationGlobalCacheVariableOutputArgs{
//				EventOrchestration: eventOrchestration.ID(),
//				Name:               pulumi.String("example_cache_variable"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupEventOrchestrationGlobalCacheVariable(ctx *pulumi.Context, args *LookupEventOrchestrationGlobalCacheVariableArgs, opts ...pulumi.InvokeOption) (*LookupEventOrchestrationGlobalCacheVariableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventOrchestrationGlobalCacheVariableResult
	err := ctx.Invoke("pagerduty:index/getEventOrchestrationGlobalCacheVariable:getEventOrchestrationGlobalCacheVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
type LookupEventOrchestrationGlobalCacheVariableArgs struct {
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration string `pulumi:"eventOrchestration"`
	// ID of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
	Id *string `pulumi:"id"`
	// Name of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getEventOrchestrationGlobalCacheVariable.
type LookupEventOrchestrationGlobalCacheVariableResult struct {
	// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
	Conditions []GetEventOrchestrationGlobalCacheVariableCondition `pulumi:"conditions"`
	// A configuration object to define what and how values will be stored in the Cache Variable.
	Configurations []GetEventOrchestrationGlobalCacheVariableConfiguration `pulumi:"configurations"`
	// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
	Disabled           bool    `pulumi:"disabled"`
	EventOrchestration string  `pulumi:"eventOrchestration"`
	Id                 *string `pulumi:"id"`
	Name               *string `pulumi:"name"`
}

func LookupEventOrchestrationGlobalCacheVariableOutput(ctx *pulumi.Context, args LookupEventOrchestrationGlobalCacheVariableOutputArgs, opts ...pulumi.InvokeOption) LookupEventOrchestrationGlobalCacheVariableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventOrchestrationGlobalCacheVariableResult, error) {
			args := v.(LookupEventOrchestrationGlobalCacheVariableArgs)
			r, err := LookupEventOrchestrationGlobalCacheVariable(ctx, &args, opts...)
			var s LookupEventOrchestrationGlobalCacheVariableResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEventOrchestrationGlobalCacheVariableResultOutput)
}

// A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
type LookupEventOrchestrationGlobalCacheVariableOutputArgs struct {
	// ID of the Global Event Orchestration to which this Cache Variable belongs.
	EventOrchestration pulumi.StringInput `pulumi:"eventOrchestration"`
	// ID of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupEventOrchestrationGlobalCacheVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventOrchestrationGlobalCacheVariableArgs)(nil)).Elem()
}

// A collection of values returned by getEventOrchestrationGlobalCacheVariable.
type LookupEventOrchestrationGlobalCacheVariableResultOutput struct{ *pulumi.OutputState }

func (LookupEventOrchestrationGlobalCacheVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventOrchestrationGlobalCacheVariableResult)(nil)).Elem()
}

func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) ToLookupEventOrchestrationGlobalCacheVariableResultOutput() LookupEventOrchestrationGlobalCacheVariableResultOutput {
	return o
}

func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) ToLookupEventOrchestrationGlobalCacheVariableResultOutputWithContext(ctx context.Context) LookupEventOrchestrationGlobalCacheVariableResultOutput {
	return o
}

// Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) Conditions() GetEventOrchestrationGlobalCacheVariableConditionArrayOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) []GetEventOrchestrationGlobalCacheVariableCondition {
		return v.Conditions
	}).(GetEventOrchestrationGlobalCacheVariableConditionArrayOutput)
}

// A configuration object to define what and how values will be stored in the Cache Variable.
func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) Configurations() GetEventOrchestrationGlobalCacheVariableConfigurationArrayOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) []GetEventOrchestrationGlobalCacheVariableConfiguration {
		return v.Configurations
	}).(GetEventOrchestrationGlobalCacheVariableConfigurationArrayOutput)
}

// Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) EventOrchestration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) string { return v.EventOrchestration }).(pulumi.StringOutput)
}

func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupEventOrchestrationGlobalCacheVariableResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventOrchestrationGlobalCacheVariableResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventOrchestrationGlobalCacheVariableResultOutput{})
}
