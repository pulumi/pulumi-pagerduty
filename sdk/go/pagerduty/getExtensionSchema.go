// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a specific [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMA-list-extension-schemas) vendor that you can use for a service (e.g: Slack, Generic Webhook, ServiceNow).
func GetExtensionSchema(ctx *pulumi.Context, args *GetExtensionSchemaArgs, opts ...pulumi.InvokeOption) (*GetExtensionSchemaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetExtensionSchemaResult
	err := ctx.Invoke("pagerduty:index/getExtensionSchema:getExtensionSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExtensionSchema.
type GetExtensionSchemaArgs struct {
	// The extension name to use to find an extension vendor in the PagerDuty API.
	Name string `pulumi:"name"`
}

// A collection of values returned by getExtensionSchema.
type GetExtensionSchemaResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The short name of the found extension vendor.
	Name string `pulumi:"name"`
	// The generic service type for this extension vendor.
	Type string `pulumi:"type"`
}

func GetExtensionSchemaOutput(ctx *pulumi.Context, args GetExtensionSchemaOutputArgs, opts ...pulumi.InvokeOption) GetExtensionSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetExtensionSchemaResult, error) {
			args := v.(GetExtensionSchemaArgs)
			r, err := GetExtensionSchema(ctx, &args, opts...)
			var s GetExtensionSchemaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetExtensionSchemaResultOutput)
}

// A collection of arguments for invoking getExtensionSchema.
type GetExtensionSchemaOutputArgs struct {
	// The extension name to use to find an extension vendor in the PagerDuty API.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetExtensionSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExtensionSchemaArgs)(nil)).Elem()
}

// A collection of values returned by getExtensionSchema.
type GetExtensionSchemaResultOutput struct{ *pulumi.OutputState }

func (GetExtensionSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExtensionSchemaResult)(nil)).Elem()
}

func (o GetExtensionSchemaResultOutput) ToGetExtensionSchemaResultOutput() GetExtensionSchemaResultOutput {
	return o
}

func (o GetExtensionSchemaResultOutput) ToGetExtensionSchemaResultOutputWithContext(ctx context.Context) GetExtensionSchemaResultOutput {
	return o
}

func (o GetExtensionSchemaResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetExtensionSchemaResult] {
	return pulumix.Output[GetExtensionSchemaResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetExtensionSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetExtensionSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

// The short name of the found extension vendor.
func (o GetExtensionSchemaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExtensionSchemaResult) string { return v.Name }).(pulumi.StringOutput)
}

// The generic service type for this extension vendor.
func (o GetExtensionSchemaResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetExtensionSchemaResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetExtensionSchemaResultOutput{})
}
