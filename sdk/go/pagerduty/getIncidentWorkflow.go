// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific [Incident Workflow](https://support.pagerduty.com/docs/incident-workflows) so that you can create a trigger for it.
//
// > The Incident Workflows feature is currently available in Early Access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myWorkflow, err := pagerduty.GetIncidentWorkflow(ctx, &pagerduty.GetIncidentWorkflowArgs{
//				Name: "Some Workflow Name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			firstService, err := pagerduty.LookupService(ctx, &pagerduty.LookupServiceArgs{
//				Name: "My First Service",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewPagerdutyIncidentWorkflowTrigger(ctx, "automaticTrigger", &pagerduty.PagerdutyIncidentWorkflowTriggerArgs{
//				Type:     pulumi.String("conditional"),
//				Workflow: *pulumi.String(myWorkflow.Id),
//				Services: pulumi.StringArray{
//					*pulumi.String(firstService.Id),
//				},
//				Condition: pulumi.String("incident.priority matches 'P1'"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetIncidentWorkflow(ctx *pulumi.Context, args *GetIncidentWorkflowArgs, opts ...pulumi.InvokeOption) (*GetIncidentWorkflowResult, error) {
	var rv GetIncidentWorkflowResult
	err := ctx.Invoke("pagerduty:index/getIncidentWorkflow:getIncidentWorkflow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIncidentWorkflow.
type GetIncidentWorkflowArgs struct {
	// The name of the workflow.
	Name string `pulumi:"name"`
}

// A collection of values returned by getIncidentWorkflow.
type GetIncidentWorkflowResult struct {
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func GetIncidentWorkflowOutput(ctx *pulumi.Context, args GetIncidentWorkflowOutputArgs, opts ...pulumi.InvokeOption) GetIncidentWorkflowResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIncidentWorkflowResult, error) {
			args := v.(GetIncidentWorkflowArgs)
			r, err := GetIncidentWorkflow(ctx, &args, opts...)
			var s GetIncidentWorkflowResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIncidentWorkflowResultOutput)
}

// A collection of arguments for invoking getIncidentWorkflow.
type GetIncidentWorkflowOutputArgs struct {
	// The name of the workflow.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetIncidentWorkflowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIncidentWorkflowArgs)(nil)).Elem()
}

// A collection of values returned by getIncidentWorkflow.
type GetIncidentWorkflowResultOutput struct{ *pulumi.OutputState }

func (GetIncidentWorkflowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIncidentWorkflowResult)(nil)).Elem()
}

func (o GetIncidentWorkflowResultOutput) ToGetIncidentWorkflowResultOutput() GetIncidentWorkflowResultOutput {
	return o
}

func (o GetIncidentWorkflowResultOutput) ToGetIncidentWorkflowResultOutputWithContext(ctx context.Context) GetIncidentWorkflowResultOutput {
	return o
}

func (o GetIncidentWorkflowResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetIncidentWorkflowResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIncidentWorkflowResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIncidentWorkflowResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIncidentWorkflowResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIncidentWorkflowResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIncidentWorkflowResultOutput{})
}
