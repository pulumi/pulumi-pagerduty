// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about the purchased [licenses](https://developer.pagerduty.com/api-reference/4c10cb38f7381-list-licenses) that you can use for other managing PagerDuty user resources. To reference a unique license, see `getLicense` [data source](https://registry.terraform.io/providers/PagerDuty/pagerduty/latest/docs/data-sources/pagerduty_license). After applying changes to users' licenses, the `currentValue` and `allocationsAvailable` attributes of licenses will change.
func GetLicenses(ctx *pulumi.Context, args *GetLicensesArgs, opts ...pulumi.InvokeOption) (*GetLicensesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLicensesResult
	err := ctx.Invoke("pagerduty:index/getLicenses:getLicenses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLicenses.
type GetLicensesArgs struct {
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id *string `pulumi:"id"`
	// The list of purchased licenses.
	Licenses []GetLicensesLicense `pulumi:"licenses"`
}

// A collection of values returned by getLicenses.
type GetLicensesResult struct {
	// ID of the license
	Id *string `pulumi:"id"`
	// The list of purchased licenses.
	Licenses []GetLicensesLicense `pulumi:"licenses"`
}

func GetLicensesOutput(ctx *pulumi.Context, args GetLicensesOutputArgs, opts ...pulumi.InvokeOption) GetLicensesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLicensesResult, error) {
			args := v.(GetLicensesArgs)
			r, err := GetLicenses(ctx, &args, opts...)
			var s GetLicensesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLicensesResultOutput)
}

// A collection of arguments for invoking getLicenses.
type GetLicensesOutputArgs struct {
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The list of purchased licenses.
	Licenses GetLicensesLicenseArrayInput `pulumi:"licenses"`
}

func (GetLicensesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesArgs)(nil)).Elem()
}

// A collection of values returned by getLicenses.
type GetLicensesResultOutput struct{ *pulumi.OutputState }

func (GetLicensesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesResult)(nil)).Elem()
}

func (o GetLicensesResultOutput) ToGetLicensesResultOutput() GetLicensesResultOutput {
	return o
}

func (o GetLicensesResultOutput) ToGetLicensesResultOutputWithContext(ctx context.Context) GetLicensesResultOutput {
	return o
}

func (o GetLicensesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetLicensesResult] {
	return pulumix.Output[GetLicensesResult]{
		OutputState: o.OutputState,
	}
}

// ID of the license
func (o GetLicensesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLicensesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of purchased licenses.
func (o GetLicensesResultOutput) Licenses() GetLicensesLicenseArrayOutput {
	return o.ApplyT(func(v GetLicensesResult) []GetLicensesLicense { return v.Licenses }).(GetLicensesLicenseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLicensesResultOutput{})
}
