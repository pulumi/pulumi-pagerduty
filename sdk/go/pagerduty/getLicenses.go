// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_ := []string{
//				"owner",
//			}
//			licenses, err := pagerduty.GetLicenses(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewUser(ctx, "example", &pagerduty.UserArgs{
//				Name:    pulumi.String("Earline Greenholt"),
//				Email:   pulumi.String("125.greenholt.earline@graham.name"),
//				License: pulumi.String(licenses.Licenses[0].Id),
//				Role:    pulumi.String("user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLicenses(ctx *pulumi.Context, args *GetLicensesArgs, opts ...pulumi.InvokeOption) (*GetLicensesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLicensesResult
	err := ctx.Invoke("pagerduty:index/getLicenses:getLicenses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLicenses.
type GetLicensesArgs struct {
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getLicenses.
type GetLicensesResult struct {
	// ID of the license
	Id *string `pulumi:"id"`
	// The list of purchased licenses.
	Licenses []GetLicensesLicense `pulumi:"licenses"`
}

func GetLicensesOutput(ctx *pulumi.Context, args GetLicensesOutputArgs, opts ...pulumi.InvokeOption) GetLicensesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLicensesResult, error) {
			args := v.(GetLicensesArgs)
			r, err := GetLicenses(ctx, &args, opts...)
			var s GetLicensesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLicensesResultOutput)
}

// A collection of arguments for invoking getLicenses.
type GetLicensesOutputArgs struct {
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (GetLicensesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesArgs)(nil)).Elem()
}

// A collection of values returned by getLicenses.
type GetLicensesResultOutput struct{ *pulumi.OutputState }

func (GetLicensesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesResult)(nil)).Elem()
}

func (o GetLicensesResultOutput) ToGetLicensesResultOutput() GetLicensesResultOutput {
	return o
}

func (o GetLicensesResultOutput) ToGetLicensesResultOutputWithContext(ctx context.Context) GetLicensesResultOutput {
	return o
}

// ID of the license
func (o GetLicensesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLicensesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of purchased licenses.
func (o GetLicensesResultOutput) Licenses() GetLicensesLicenseArrayOutput {
	return o.ApplyT(func(v GetLicensesResult) []GetLicensesLicense { return v.Licenses }).(GetLicensesLicenseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLicensesResultOutput{})
}
