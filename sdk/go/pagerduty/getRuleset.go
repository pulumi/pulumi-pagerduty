// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific [ruleset](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE3MQ-list-rulesets) that you can use for managing and grouping [event rules](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE3Ng-list-event-rules).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := pagerduty.LookupRuleset(ctx, &pagerduty.LookupRulesetArgs{
//				Name: "My Ruleset",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewRulesetRule(ctx, "foo", &pagerduty.RulesetRuleArgs{
//				Ruleset:  *pulumi.String(example.Id),
//				Position: pulumi.Int(0),
//				Disabled: pulumi.Bool(false),
//				Conditions: &pagerduty.RulesetRuleConditionsArgs{
//					Operator: pulumi.String("and"),
//					Subconditions: pagerduty.RulesetRuleConditionsSubconditionArray{
//						&pagerduty.RulesetRuleConditionsSubconditionArgs{
//							Operator: pulumi.String("contains"),
//							Parameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{
//								&pagerduty.RulesetRuleConditionsSubconditionParameterArgs{
//									Value: pulumi.String("disk space"),
//									Path:  pulumi.String("payload.summary"),
//								},
//							},
//						},
//						&pagerduty.RulesetRuleConditionsSubconditionArgs{
//							Operator: pulumi.String("contains"),
//							Parameters: pagerduty.RulesetRuleConditionsSubconditionParameterArray{
//								&pagerduty.RulesetRuleConditionsSubconditionParameterArgs{
//									Value: pulumi.String("db"),
//									Path:  pulumi.String("payload.source"),
//								},
//							},
//						},
//					},
//				},
//				Actions: &pagerduty.RulesetRuleActionsArgs{
//					Routes: pagerduty.RulesetRuleActionsRouteArray{
//						&pagerduty.RulesetRuleActionsRouteArgs{
//							Value: pulumi.String("P5DTL0K"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Default Global Ruleset
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v3/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pagerduty.LookupRuleset(ctx, &pagerduty.LookupRulesetArgs{
//				Name: "Default Global",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRuleset(ctx *pulumi.Context, args *LookupRulesetArgs, opts ...pulumi.InvokeOption) (*LookupRulesetResult, error) {
	var rv LookupRulesetResult
	err := ctx.Invoke("pagerduty:index/getRuleset:getRuleset", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRuleset.
type LookupRulesetArgs struct {
	// The name of the ruleset to find in the PagerDuty API.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRuleset.
type LookupRulesetResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the found ruleset.
	Name string `pulumi:"name"`
	// Routing keys routed to this ruleset.
	RoutingKeys []string `pulumi:"routingKeys"`
}

func LookupRulesetOutput(ctx *pulumi.Context, args LookupRulesetOutputArgs, opts ...pulumi.InvokeOption) LookupRulesetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRulesetResult, error) {
			args := v.(LookupRulesetArgs)
			r, err := LookupRuleset(ctx, &args, opts...)
			var s LookupRulesetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRulesetResultOutput)
}

// A collection of arguments for invoking getRuleset.
type LookupRulesetOutputArgs struct {
	// The name of the ruleset to find in the PagerDuty API.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRulesetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRulesetArgs)(nil)).Elem()
}

// A collection of values returned by getRuleset.
type LookupRulesetResultOutput struct{ *pulumi.OutputState }

func (LookupRulesetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRulesetResult)(nil)).Elem()
}

func (o LookupRulesetResultOutput) ToLookupRulesetResultOutput() LookupRulesetResultOutput {
	return o
}

func (o LookupRulesetResultOutput) ToLookupRulesetResultOutputWithContext(ctx context.Context) LookupRulesetResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRulesetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRulesetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the found ruleset.
func (o LookupRulesetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRulesetResult) string { return v.Name }).(pulumi.StringOutput)
}

// Routing keys routed to this ruleset.
func (o LookupRulesetResultOutput) RoutingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRulesetResult) []string { return v.RoutingKeys }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRulesetResultOutput{})
}
