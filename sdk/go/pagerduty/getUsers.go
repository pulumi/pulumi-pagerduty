// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about [list of users](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODIzMw-list-users) that you can use for other PagerDuty resources, optionally filtering by team ids.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := pagerduty.LookupTeam(ctx, &pagerduty.LookupTeamArgs{
// Name: "devops",
// }, nil);
// if err != nil {
// return err
// }
// _, err = pagerduty.LookupUser(ctx, &pagerduty.LookupUserArgs{
// Email: "me@example.com",
// }, nil);
// if err != nil {
// return err
// }
// exampleWTeam, err := pagerduty.NewUser(ctx, "exampleWTeam", &pagerduty.UserArgs{
// Email: pulumi.String("user-with-team@example.com"),
// })
// if err != nil {
// return err
// }
// _, err = pagerduty.NewTeamMembership(ctx, "example", &pagerduty.TeamMembershipArgs{
// TeamId: pulumi.Any(pagerduty_team.Devops.Id),
// UserId: exampleWTeam.ID(),
// })
// if err != nil {
// return err
// }
// _, err = pagerduty.GetUsers(ctx, nil, nil);
// if err != nil {
// return err
// }
// _, err = pagerduty.GetUsers(ctx, &pagerduty.GetUsersArgs{
// TeamIds: interface{}{
// pagerduty_team.Devops.Id,
// },
// }, nil);
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsersResult
	err := ctx.Invoke("pagerduty:index/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	// List of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
	TeamIds []string `pulumi:"teamIds"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id      string   `pulumi:"id"`
	TeamIds []string `pulumi:"teamIds"`
	// List of users queried.
	Users []GetUsersUser `pulumi:"users"`
}

func GetUsersOutput(ctx *pulumi.Context, args GetUsersOutputArgs, opts ...pulumi.InvokeOption) GetUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsersResult, error) {
			args := v.(GetUsersArgs)
			r, err := GetUsers(ctx, &args, opts...)
			var s GetUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsersResultOutput)
}

// A collection of arguments for invoking getUsers.
type GetUsersOutputArgs struct {
	// List of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
	TeamIds pulumi.StringArrayInput `pulumi:"teamIds"`
}

func (GetUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersArgs)(nil)).Elem()
}

// A collection of values returned by getUsers.
type GetUsersResultOutput struct{ *pulumi.OutputState }

func (GetUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersResult)(nil)).Elem()
}

func (o GetUsersResultOutput) ToGetUsersResultOutput() GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) ToGetUsersResultOutputWithContext(ctx context.Context) GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetUsersResult] {
	return pulumix.Output[GetUsersResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUsersResultOutput) TeamIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []string { return v.TeamIds }).(pulumi.StringArrayOutput)
}

// List of users queried.
func (o GetUsersResultOutput) Users() GetUsersUserArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersUser { return v.Users }).(GetUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsersResultOutput{})
}
