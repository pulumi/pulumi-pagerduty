// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			base, err := pagerduty.LookupIncidentType(ctx, &pagerduty.LookupIncidentTypeArgs{
//				DisplayName: "Base Incident",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pagerduty.NewIncidentType(ctx, "example", &pagerduty.IncidentTypeArgs{
//				Name:        pulumi.String("backoffice"),
//				DisplayName: pulumi.String("Backoffice Incident"),
//				ParentType:  pulumi.String(base.Id),
//				Description: pulumi.String("Internal incidents not facing customer"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Services can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import pagerduty:index/incidentType:IncidentType main P12345
// ```
type IncidentType struct {
	pulumi.CustomResourceState

	// A succinct description of the Incident Type.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// State of this Incident Type object. Defaults to true if not provided.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent type of the Incident Type. Either name or id of the parent type can be used.
	ParentType pulumi.StringOutput `pulumi:"parentType"`
	// A string that determines the schema of the object.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIncidentType registers a new resource with the given unique name, arguments, and options.
func NewIncidentType(ctx *pulumi.Context,
	name string, args *IncidentTypeArgs, opts ...pulumi.ResourceOption) (*IncidentType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ParentType == nil {
		return nil, errors.New("invalid value for required argument 'ParentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IncidentType
	err := ctx.RegisterResource("pagerduty:index/incidentType:IncidentType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentType gets an existing IncidentType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentTypeState, opts ...pulumi.ResourceOption) (*IncidentType, error) {
	var resource IncidentType
	err := ctx.ReadResource("pagerduty:index/incidentType:IncidentType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentType resources.
type incidentTypeState struct {
	// A succinct description of the Incident Type.
	Description *string `pulumi:"description"`
	// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
	DisplayName *string `pulumi:"displayName"`
	// State of this Incident Type object. Defaults to true if not provided.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
	Name *string `pulumi:"name"`
	// The parent type of the Incident Type. Either name or id of the parent type can be used.
	ParentType *string `pulumi:"parentType"`
	// A string that determines the schema of the object.
	Type *string `pulumi:"type"`
}

type IncidentTypeState struct {
	// A succinct description of the Incident Type.
	Description pulumi.StringPtrInput
	// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
	DisplayName pulumi.StringPtrInput
	// State of this Incident Type object. Defaults to true if not provided.
	Enabled pulumi.BoolPtrInput
	// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
	Name pulumi.StringPtrInput
	// The parent type of the Incident Type. Either name or id of the parent type can be used.
	ParentType pulumi.StringPtrInput
	// A string that determines the schema of the object.
	Type pulumi.StringPtrInput
}

func (IncidentTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentTypeState)(nil)).Elem()
}

type incidentTypeArgs struct {
	// A succinct description of the Incident Type.
	Description *string `pulumi:"description"`
	// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
	DisplayName string `pulumi:"displayName"`
	// State of this Incident Type object. Defaults to true if not provided.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
	Name *string `pulumi:"name"`
	// The parent type of the Incident Type. Either name or id of the parent type can be used.
	ParentType string `pulumi:"parentType"`
}

// The set of arguments for constructing a IncidentType resource.
type IncidentTypeArgs struct {
	// A succinct description of the Incident Type.
	Description pulumi.StringPtrInput
	// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
	DisplayName pulumi.StringInput
	// State of this Incident Type object. Defaults to true if not provided.
	Enabled pulumi.BoolPtrInput
	// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
	Name pulumi.StringPtrInput
	// The parent type of the Incident Type. Either name or id of the parent type can be used.
	ParentType pulumi.StringInput
}

func (IncidentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentTypeArgs)(nil)).Elem()
}

type IncidentTypeInput interface {
	pulumi.Input

	ToIncidentTypeOutput() IncidentTypeOutput
	ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput
}

func (*IncidentType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentType)(nil)).Elem()
}

func (i *IncidentType) ToIncidentTypeOutput() IncidentTypeOutput {
	return i.ToIncidentTypeOutputWithContext(context.Background())
}

func (i *IncidentType) ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeOutput)
}

// IncidentTypeArrayInput is an input type that accepts IncidentTypeArray and IncidentTypeArrayOutput values.
// You can construct a concrete instance of `IncidentTypeArrayInput` via:
//
//	IncidentTypeArray{ IncidentTypeArgs{...} }
type IncidentTypeArrayInput interface {
	pulumi.Input

	ToIncidentTypeArrayOutput() IncidentTypeArrayOutput
	ToIncidentTypeArrayOutputWithContext(context.Context) IncidentTypeArrayOutput
}

type IncidentTypeArray []IncidentTypeInput

func (IncidentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentType)(nil)).Elem()
}

func (i IncidentTypeArray) ToIncidentTypeArrayOutput() IncidentTypeArrayOutput {
	return i.ToIncidentTypeArrayOutputWithContext(context.Background())
}

func (i IncidentTypeArray) ToIncidentTypeArrayOutputWithContext(ctx context.Context) IncidentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeArrayOutput)
}

// IncidentTypeMapInput is an input type that accepts IncidentTypeMap and IncidentTypeMapOutput values.
// You can construct a concrete instance of `IncidentTypeMapInput` via:
//
//	IncidentTypeMap{ "key": IncidentTypeArgs{...} }
type IncidentTypeMapInput interface {
	pulumi.Input

	ToIncidentTypeMapOutput() IncidentTypeMapOutput
	ToIncidentTypeMapOutputWithContext(context.Context) IncidentTypeMapOutput
}

type IncidentTypeMap map[string]IncidentTypeInput

func (IncidentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentType)(nil)).Elem()
}

func (i IncidentTypeMap) ToIncidentTypeMapOutput() IncidentTypeMapOutput {
	return i.ToIncidentTypeMapOutputWithContext(context.Background())
}

func (i IncidentTypeMap) ToIncidentTypeMapOutputWithContext(ctx context.Context) IncidentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeMapOutput)
}

type IncidentTypeOutput struct{ *pulumi.OutputState }

func (IncidentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentType)(nil)).Elem()
}

func (o IncidentTypeOutput) ToIncidentTypeOutput() IncidentTypeOutput {
	return o
}

func (o IncidentTypeOutput) ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput {
	return o
}

// A succinct description of the Incident Type.
func (o IncidentTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
func (o IncidentTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// State of this Incident Type object. Defaults to true if not provided.
func (o IncidentTypeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
func (o IncidentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent type of the Incident Type. Either name or id of the parent type can be used.
func (o IncidentTypeOutput) ParentType() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.StringOutput { return v.ParentType }).(pulumi.StringOutput)
}

// A string that determines the schema of the object.
func (o IncidentTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentType) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IncidentTypeArrayOutput struct{ *pulumi.OutputState }

func (IncidentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentType)(nil)).Elem()
}

func (o IncidentTypeArrayOutput) ToIncidentTypeArrayOutput() IncidentTypeArrayOutput {
	return o
}

func (o IncidentTypeArrayOutput) ToIncidentTypeArrayOutputWithContext(ctx context.Context) IncidentTypeArrayOutput {
	return o
}

func (o IncidentTypeArrayOutput) Index(i pulumi.IntInput) IncidentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentType {
		return vs[0].([]*IncidentType)[vs[1].(int)]
	}).(IncidentTypeOutput)
}

type IncidentTypeMapOutput struct{ *pulumi.OutputState }

func (IncidentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentType)(nil)).Elem()
}

func (o IncidentTypeMapOutput) ToIncidentTypeMapOutput() IncidentTypeMapOutput {
	return o
}

func (o IncidentTypeMapOutput) ToIncidentTypeMapOutputWithContext(ctx context.Context) IncidentTypeMapOutput {
	return o
}

func (o IncidentTypeMapOutput) MapIndex(k pulumi.StringInput) IncidentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentType {
		return vs[0].(map[string]*IncidentType)[vs[1].(string)]
	}).(IncidentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeInput)(nil)).Elem(), &IncidentType{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeArrayInput)(nil)).Elem(), IncidentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeMapInput)(nil)).Elem(), IncidentTypeMap{})
	pulumi.RegisterOutputType(IncidentTypeOutput{})
	pulumi.RegisterOutputType(IncidentTypeArrayOutput{})
	pulumi.RegisterOutputType(IncidentTypeMapOutput{})
}
