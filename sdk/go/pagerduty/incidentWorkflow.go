// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An [Incident Workflow](https://support.pagerduty.com/docs/incident-workflows) is a series of steps which can be executed on an incident.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pagerduty.NewIncidentWorkflow(ctx, "my_first_workflow", &pagerduty.IncidentWorkflowArgs{
//				Name:        pulumi.String("Example Incident Workflow"),
//				Description: pulumi.String("This Incident Workflow is an example"),
//				Steps: pagerduty.IncidentWorkflowStepArray{
//					&pagerduty.IncidentWorkflowStepArgs{
//						Name:   pulumi.String("Send Status Update"),
//						Action: pulumi.String("pagerduty.com:incident-workflows:send-status-update:1"),
//						Inputs: pagerduty.IncidentWorkflowStepInputTypeArray{
//							&pagerduty.IncidentWorkflowStepInputTypeArgs{
//								Name:  pulumi.String("Message"),
//								Value: pulumi.String("Example status message sent on {{current_date}}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Incident workflows can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import pagerduty:index/incidentWorkflow:IncidentWorkflow major_incident_workflow PLBP09X
// ```
type IncidentWorkflow struct {
	pulumi.CustomResourceState

	// The description of the workflow.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the workflow.
	Name pulumi.StringOutput `pulumi:"name"`
	// The steps in the workflow.
	Steps IncidentWorkflowStepArrayOutput `pulumi:"steps"`
	// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
	Team pulumi.StringPtrOutput `pulumi:"team"`
}

// NewIncidentWorkflow registers a new resource with the given unique name, arguments, and options.
func NewIncidentWorkflow(ctx *pulumi.Context,
	name string, args *IncidentWorkflowArgs, opts ...pulumi.ResourceOption) (*IncidentWorkflow, error) {
	if args == nil {
		args = &IncidentWorkflowArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IncidentWorkflow
	err := ctx.RegisterResource("pagerduty:index/incidentWorkflow:IncidentWorkflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentWorkflow gets an existing IncidentWorkflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentWorkflowState, opts ...pulumi.ResourceOption) (*IncidentWorkflow, error) {
	var resource IncidentWorkflow
	err := ctx.ReadResource("pagerduty:index/incidentWorkflow:IncidentWorkflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentWorkflow resources.
type incidentWorkflowState struct {
	// The description of the workflow.
	Description *string `pulumi:"description"`
	// The name of the workflow.
	Name *string `pulumi:"name"`
	// The steps in the workflow.
	Steps []IncidentWorkflowStep `pulumi:"steps"`
	// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
	Team *string `pulumi:"team"`
}

type IncidentWorkflowState struct {
	// The description of the workflow.
	Description pulumi.StringPtrInput
	// The name of the workflow.
	Name pulumi.StringPtrInput
	// The steps in the workflow.
	Steps IncidentWorkflowStepArrayInput
	// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
	Team pulumi.StringPtrInput
}

func (IncidentWorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentWorkflowState)(nil)).Elem()
}

type incidentWorkflowArgs struct {
	// The description of the workflow.
	Description *string `pulumi:"description"`
	// The name of the workflow.
	Name *string `pulumi:"name"`
	// The steps in the workflow.
	Steps []IncidentWorkflowStep `pulumi:"steps"`
	// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
	Team *string `pulumi:"team"`
}

// The set of arguments for constructing a IncidentWorkflow resource.
type IncidentWorkflowArgs struct {
	// The description of the workflow.
	Description pulumi.StringPtrInput
	// The name of the workflow.
	Name pulumi.StringPtrInput
	// The steps in the workflow.
	Steps IncidentWorkflowStepArrayInput
	// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
	Team pulumi.StringPtrInput
}

func (IncidentWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentWorkflowArgs)(nil)).Elem()
}

type IncidentWorkflowInput interface {
	pulumi.Input

	ToIncidentWorkflowOutput() IncidentWorkflowOutput
	ToIncidentWorkflowOutputWithContext(ctx context.Context) IncidentWorkflowOutput
}

func (*IncidentWorkflow) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentWorkflow)(nil)).Elem()
}

func (i *IncidentWorkflow) ToIncidentWorkflowOutput() IncidentWorkflowOutput {
	return i.ToIncidentWorkflowOutputWithContext(context.Background())
}

func (i *IncidentWorkflow) ToIncidentWorkflowOutputWithContext(ctx context.Context) IncidentWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowOutput)
}

// IncidentWorkflowArrayInput is an input type that accepts IncidentWorkflowArray and IncidentWorkflowArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowArrayInput` via:
//
//	IncidentWorkflowArray{ IncidentWorkflowArgs{...} }
type IncidentWorkflowArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowArrayOutput() IncidentWorkflowArrayOutput
	ToIncidentWorkflowArrayOutputWithContext(context.Context) IncidentWorkflowArrayOutput
}

type IncidentWorkflowArray []IncidentWorkflowInput

func (IncidentWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentWorkflow)(nil)).Elem()
}

func (i IncidentWorkflowArray) ToIncidentWorkflowArrayOutput() IncidentWorkflowArrayOutput {
	return i.ToIncidentWorkflowArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowArray) ToIncidentWorkflowArrayOutputWithContext(ctx context.Context) IncidentWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowArrayOutput)
}

// IncidentWorkflowMapInput is an input type that accepts IncidentWorkflowMap and IncidentWorkflowMapOutput values.
// You can construct a concrete instance of `IncidentWorkflowMapInput` via:
//
//	IncidentWorkflowMap{ "key": IncidentWorkflowArgs{...} }
type IncidentWorkflowMapInput interface {
	pulumi.Input

	ToIncidentWorkflowMapOutput() IncidentWorkflowMapOutput
	ToIncidentWorkflowMapOutputWithContext(context.Context) IncidentWorkflowMapOutput
}

type IncidentWorkflowMap map[string]IncidentWorkflowInput

func (IncidentWorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentWorkflow)(nil)).Elem()
}

func (i IncidentWorkflowMap) ToIncidentWorkflowMapOutput() IncidentWorkflowMapOutput {
	return i.ToIncidentWorkflowMapOutputWithContext(context.Background())
}

func (i IncidentWorkflowMap) ToIncidentWorkflowMapOutputWithContext(ctx context.Context) IncidentWorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowMapOutput)
}

type IncidentWorkflowOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentWorkflow)(nil)).Elem()
}

func (o IncidentWorkflowOutput) ToIncidentWorkflowOutput() IncidentWorkflowOutput {
	return o
}

func (o IncidentWorkflowOutput) ToIncidentWorkflowOutputWithContext(ctx context.Context) IncidentWorkflowOutput {
	return o
}

// The description of the workflow.
func (o IncidentWorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentWorkflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the workflow.
func (o IncidentWorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentWorkflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The steps in the workflow.
func (o IncidentWorkflowOutput) Steps() IncidentWorkflowStepArrayOutput {
	return o.ApplyT(func(v *IncidentWorkflow) IncidentWorkflowStepArrayOutput { return v.Steps }).(IncidentWorkflowStepArrayOutput)
}

// A team ID. If specified then workflow edit permissions will be scoped to members of this team.
func (o IncidentWorkflowOutput) Team() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentWorkflow) pulumi.StringPtrOutput { return v.Team }).(pulumi.StringPtrOutput)
}

type IncidentWorkflowArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentWorkflow)(nil)).Elem()
}

func (o IncidentWorkflowArrayOutput) ToIncidentWorkflowArrayOutput() IncidentWorkflowArrayOutput {
	return o
}

func (o IncidentWorkflowArrayOutput) ToIncidentWorkflowArrayOutputWithContext(ctx context.Context) IncidentWorkflowArrayOutput {
	return o
}

func (o IncidentWorkflowArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentWorkflow {
		return vs[0].([]*IncidentWorkflow)[vs[1].(int)]
	}).(IncidentWorkflowOutput)
}

type IncidentWorkflowMapOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentWorkflow)(nil)).Elem()
}

func (o IncidentWorkflowMapOutput) ToIncidentWorkflowMapOutput() IncidentWorkflowMapOutput {
	return o
}

func (o IncidentWorkflowMapOutput) ToIncidentWorkflowMapOutputWithContext(ctx context.Context) IncidentWorkflowMapOutput {
	return o
}

func (o IncidentWorkflowMapOutput) MapIndex(k pulumi.StringInput) IncidentWorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentWorkflow {
		return vs[0].(map[string]*IncidentWorkflow)[vs[1].(string)]
	}).(IncidentWorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowInput)(nil)).Elem(), &IncidentWorkflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowArrayInput)(nil)).Elem(), IncidentWorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowMapInput)(nil)).Elem(), IncidentWorkflowMap{})
	pulumi.RegisterOutputType(IncidentWorkflowOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowMapOutput{})
}
