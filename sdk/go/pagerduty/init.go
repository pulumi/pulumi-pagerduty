// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "pagerduty:index/addon:Addon":
		r, err = NewAddon(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/businessService:BusinessService":
		r, err = NewBusinessService(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/escalationPolicy:EscalationPolicy":
		r, err = NewEscalationPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/eventRule:EventRule":
		r, err = NewEventRule(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/extension:Extension":
		r, err = NewExtension(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/maintenanceWindow:MaintenanceWindow":
		r, err = NewMaintenanceWindow(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/ruleset:Ruleset":
		r, err = NewRuleset(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/rulesetRule:RulesetRule":
		r, err = NewRulesetRule(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/schedule:Schedule":
		r, err = NewSchedule(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/service:Service":
		r, err = NewService(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/serviceDependency:ServiceDependency":
		r, err = NewServiceDependency(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/serviceIntegration:ServiceIntegration":
		r, err = NewServiceIntegration(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/team:Team":
		r, err = NewTeam(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/teamMembership:TeamMembership":
		r, err = NewTeamMembership(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/userContactMethod:UserContactMethod":
		r, err = NewUserContactMethod(ctx, name, nil, pulumi.URN_(urn))
	case "pagerduty:index/userNotificationRule:UserNotificationRule":
		r, err = NewUserNotificationRule(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:pagerduty" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/addon",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/businessService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/escalationPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/eventRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/extension",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/maintenanceWindow",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/ruleset",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/rulesetRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/schedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/service",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/serviceDependency",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/serviceIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/team",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/teamMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/userContactMethod",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"pagerduty",
		"index/userNotificationRule",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"pagerduty",
		&pkg{version},
	)
}
