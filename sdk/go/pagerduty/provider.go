// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the pagerduty package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	ApiUrlOverride pulumi.StringPtrOutput `pulumi:"apiUrlOverride"`
	ServiceRegion  pulumi.StringPtrOutput `pulumi:"serviceRegion"`
	Token          pulumi.StringOutput    `pulumi:"token"`
	UserToken      pulumi.StringPtrOutput `pulumi:"userToken"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if isZero(args.SkipCredentialsValidation) {
		args.SkipCredentialsValidation = pulumi.BoolPtr(false)
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:pagerduty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	ApiUrlOverride            *string `pulumi:"apiUrlOverride"`
	ServiceRegion             *string `pulumi:"serviceRegion"`
	SkipCredentialsValidation *bool   `pulumi:"skipCredentialsValidation"`
	Token                     string  `pulumi:"token"`
	UserToken                 *string `pulumi:"userToken"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	ApiUrlOverride            pulumi.StringPtrInput
	ServiceRegion             pulumi.StringPtrInput
	SkipCredentialsValidation pulumi.BoolPtrInput
	Token                     pulumi.StringInput
	UserToken                 pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ApiUrlOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrlOverride }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ServiceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ServiceRegion }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func (o ProviderOutput) UserToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.UserToken }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
