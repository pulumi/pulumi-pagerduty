// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AutomationActionsActionActionDataReference struct {
	// The command to execute the script with.
	InvocationCommand *string `pulumi:"invocationCommand"`
	// The arguments to pass to the Process Automation job execution.
	ProcessAutomationJobArguments *string `pulumi:"processAutomationJobArguments"`
	// The ID of the Process Automation job to execute.
	ProcessAutomationJobId *string `pulumi:"processAutomationJobId"`
	// The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
	ProcessAutomationNodeFilter *string `pulumi:"processAutomationNodeFilter"`
	// Body of the script to be executed on the Runner. Max length is 16777215 characters.
	Script *string `pulumi:"script"`
}

// AutomationActionsActionActionDataReferenceInput is an input type that accepts AutomationActionsActionActionDataReferenceArgs and AutomationActionsActionActionDataReferenceOutput values.
// You can construct a concrete instance of `AutomationActionsActionActionDataReferenceInput` via:
//
//	AutomationActionsActionActionDataReferenceArgs{...}
type AutomationActionsActionActionDataReferenceInput interface {
	pulumi.Input

	ToAutomationActionsActionActionDataReferenceOutput() AutomationActionsActionActionDataReferenceOutput
	ToAutomationActionsActionActionDataReferenceOutputWithContext(context.Context) AutomationActionsActionActionDataReferenceOutput
}

type AutomationActionsActionActionDataReferenceArgs struct {
	// The command to execute the script with.
	InvocationCommand pulumi.StringPtrInput `pulumi:"invocationCommand"`
	// The arguments to pass to the Process Automation job execution.
	ProcessAutomationJobArguments pulumi.StringPtrInput `pulumi:"processAutomationJobArguments"`
	// The ID of the Process Automation job to execute.
	ProcessAutomationJobId pulumi.StringPtrInput `pulumi:"processAutomationJobId"`
	// The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
	ProcessAutomationNodeFilter pulumi.StringPtrInput `pulumi:"processAutomationNodeFilter"`
	// Body of the script to be executed on the Runner. Max length is 16777215 characters.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (AutomationActionsActionActionDataReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationActionsActionActionDataReference)(nil)).Elem()
}

func (i AutomationActionsActionActionDataReferenceArgs) ToAutomationActionsActionActionDataReferenceOutput() AutomationActionsActionActionDataReferenceOutput {
	return i.ToAutomationActionsActionActionDataReferenceOutputWithContext(context.Background())
}

func (i AutomationActionsActionActionDataReferenceArgs) ToAutomationActionsActionActionDataReferenceOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionsActionActionDataReferenceOutput)
}

func (i AutomationActionsActionActionDataReferenceArgs) ToAutomationActionsActionActionDataReferencePtrOutput() AutomationActionsActionActionDataReferencePtrOutput {
	return i.ToAutomationActionsActionActionDataReferencePtrOutputWithContext(context.Background())
}

func (i AutomationActionsActionActionDataReferenceArgs) ToAutomationActionsActionActionDataReferencePtrOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionsActionActionDataReferenceOutput).ToAutomationActionsActionActionDataReferencePtrOutputWithContext(ctx)
}

// AutomationActionsActionActionDataReferencePtrInput is an input type that accepts AutomationActionsActionActionDataReferenceArgs, AutomationActionsActionActionDataReferencePtr and AutomationActionsActionActionDataReferencePtrOutput values.
// You can construct a concrete instance of `AutomationActionsActionActionDataReferencePtrInput` via:
//
//	        AutomationActionsActionActionDataReferenceArgs{...}
//
//	or:
//
//	        nil
type AutomationActionsActionActionDataReferencePtrInput interface {
	pulumi.Input

	ToAutomationActionsActionActionDataReferencePtrOutput() AutomationActionsActionActionDataReferencePtrOutput
	ToAutomationActionsActionActionDataReferencePtrOutputWithContext(context.Context) AutomationActionsActionActionDataReferencePtrOutput
}

type automationActionsActionActionDataReferencePtrType AutomationActionsActionActionDataReferenceArgs

func AutomationActionsActionActionDataReferencePtr(v *AutomationActionsActionActionDataReferenceArgs) AutomationActionsActionActionDataReferencePtrInput {
	return (*automationActionsActionActionDataReferencePtrType)(v)
}

func (*automationActionsActionActionDataReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationActionsActionActionDataReference)(nil)).Elem()
}

func (i *automationActionsActionActionDataReferencePtrType) ToAutomationActionsActionActionDataReferencePtrOutput() AutomationActionsActionActionDataReferencePtrOutput {
	return i.ToAutomationActionsActionActionDataReferencePtrOutputWithContext(context.Background())
}

func (i *automationActionsActionActionDataReferencePtrType) ToAutomationActionsActionActionDataReferencePtrOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionsActionActionDataReferencePtrOutput)
}

type AutomationActionsActionActionDataReferenceOutput struct{ *pulumi.OutputState }

func (AutomationActionsActionActionDataReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationActionsActionActionDataReference)(nil)).Elem()
}

func (o AutomationActionsActionActionDataReferenceOutput) ToAutomationActionsActionActionDataReferenceOutput() AutomationActionsActionActionDataReferenceOutput {
	return o
}

func (o AutomationActionsActionActionDataReferenceOutput) ToAutomationActionsActionActionDataReferenceOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferenceOutput {
	return o
}

func (o AutomationActionsActionActionDataReferenceOutput) ToAutomationActionsActionActionDataReferencePtrOutput() AutomationActionsActionActionDataReferencePtrOutput {
	return o.ToAutomationActionsActionActionDataReferencePtrOutputWithContext(context.Background())
}

func (o AutomationActionsActionActionDataReferenceOutput) ToAutomationActionsActionActionDataReferencePtrOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomationActionsActionActionDataReference) *AutomationActionsActionActionDataReference {
		return &v
	}).(AutomationActionsActionActionDataReferencePtrOutput)
}

// The command to execute the script with.
func (o AutomationActionsActionActionDataReferenceOutput) InvocationCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationActionsActionActionDataReference) *string { return v.InvocationCommand }).(pulumi.StringPtrOutput)
}

// The arguments to pass to the Process Automation job execution.
func (o AutomationActionsActionActionDataReferenceOutput) ProcessAutomationJobArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationActionsActionActionDataReference) *string { return v.ProcessAutomationJobArguments }).(pulumi.StringPtrOutput)
}

// The ID of the Process Automation job to execute.
func (o AutomationActionsActionActionDataReferenceOutput) ProcessAutomationJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationActionsActionActionDataReference) *string { return v.ProcessAutomationJobId }).(pulumi.StringPtrOutput)
}

// The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
func (o AutomationActionsActionActionDataReferenceOutput) ProcessAutomationNodeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationActionsActionActionDataReference) *string { return v.ProcessAutomationNodeFilter }).(pulumi.StringPtrOutput)
}

// Body of the script to be executed on the Runner. Max length is 16777215 characters.
func (o AutomationActionsActionActionDataReferenceOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationActionsActionActionDataReference) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type AutomationActionsActionActionDataReferencePtrOutput struct{ *pulumi.OutputState }

func (AutomationActionsActionActionDataReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationActionsActionActionDataReference)(nil)).Elem()
}

func (o AutomationActionsActionActionDataReferencePtrOutput) ToAutomationActionsActionActionDataReferencePtrOutput() AutomationActionsActionActionDataReferencePtrOutput {
	return o
}

func (o AutomationActionsActionActionDataReferencePtrOutput) ToAutomationActionsActionActionDataReferencePtrOutputWithContext(ctx context.Context) AutomationActionsActionActionDataReferencePtrOutput {
	return o
}

func (o AutomationActionsActionActionDataReferencePtrOutput) Elem() AutomationActionsActionActionDataReferenceOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) AutomationActionsActionActionDataReference {
		if v != nil {
			return *v
		}
		var ret AutomationActionsActionActionDataReference
		return ret
	}).(AutomationActionsActionActionDataReferenceOutput)
}

// The command to execute the script with.
func (o AutomationActionsActionActionDataReferencePtrOutput) InvocationCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) *string {
		if v == nil {
			return nil
		}
		return v.InvocationCommand
	}).(pulumi.StringPtrOutput)
}

// The arguments to pass to the Process Automation job execution.
func (o AutomationActionsActionActionDataReferencePtrOutput) ProcessAutomationJobArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) *string {
		if v == nil {
			return nil
		}
		return v.ProcessAutomationJobArguments
	}).(pulumi.StringPtrOutput)
}

// The ID of the Process Automation job to execute.
func (o AutomationActionsActionActionDataReferencePtrOutput) ProcessAutomationJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) *string {
		if v == nil {
			return nil
		}
		return v.ProcessAutomationJobId
	}).(pulumi.StringPtrOutput)
}

// The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
func (o AutomationActionsActionActionDataReferencePtrOutput) ProcessAutomationNodeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) *string {
		if v == nil {
			return nil
		}
		return v.ProcessAutomationNodeFilter
	}).(pulumi.StringPtrOutput)
}

// Body of the script to be executed on the Runner. Max length is 16777215 characters.
func (o AutomationActionsActionActionDataReferencePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationActionsActionActionDataReference) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

type EscalationPolicyRule struct {
	// The number of minutes before an unacknowledged incident escalates away from this rule.
	EscalationDelayInMinutes int `pulumi:"escalationDelayInMinutes"`
	// The strategy used to assign the escalation rule to an incident. Documented below.
	EscalationRuleAssignmentStrategy *EscalationPolicyRuleEscalationRuleAssignmentStrategy `pulumi:"escalationRuleAssignmentStrategy"`
	// A target ID
	Id      *string                      `pulumi:"id"`
	Targets []EscalationPolicyRuleTarget `pulumi:"targets"`
}

// EscalationPolicyRuleInput is an input type that accepts EscalationPolicyRuleArgs and EscalationPolicyRuleOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleInput` via:
//
//	EscalationPolicyRuleArgs{...}
type EscalationPolicyRuleInput interface {
	pulumi.Input

	ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput
	ToEscalationPolicyRuleOutputWithContext(context.Context) EscalationPolicyRuleOutput
}

type EscalationPolicyRuleArgs struct {
	// The number of minutes before an unacknowledged incident escalates away from this rule.
	EscalationDelayInMinutes pulumi.IntInput `pulumi:"escalationDelayInMinutes"`
	// The strategy used to assign the escalation rule to an incident. Documented below.
	EscalationRuleAssignmentStrategy EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput `pulumi:"escalationRuleAssignmentStrategy"`
	// A target ID
	Id      pulumi.StringPtrInput                `pulumi:"id"`
	Targets EscalationPolicyRuleTargetArrayInput `pulumi:"targets"`
}

func (EscalationPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRule)(nil)).Elem()
}

func (i EscalationPolicyRuleArgs) ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput {
	return i.ToEscalationPolicyRuleOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleArgs) ToEscalationPolicyRuleOutputWithContext(ctx context.Context) EscalationPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleOutput)
}

// EscalationPolicyRuleArrayInput is an input type that accepts EscalationPolicyRuleArray and EscalationPolicyRuleArrayOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleArrayInput` via:
//
//	EscalationPolicyRuleArray{ EscalationPolicyRuleArgs{...} }
type EscalationPolicyRuleArrayInput interface {
	pulumi.Input

	ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput
	ToEscalationPolicyRuleArrayOutputWithContext(context.Context) EscalationPolicyRuleArrayOutput
}

type EscalationPolicyRuleArray []EscalationPolicyRuleInput

func (EscalationPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRule)(nil)).Elem()
}

func (i EscalationPolicyRuleArray) ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput {
	return i.ToEscalationPolicyRuleArrayOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleArray) ToEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleArrayOutput)
}

type EscalationPolicyRuleOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRule)(nil)).Elem()
}

func (o EscalationPolicyRuleOutput) ToEscalationPolicyRuleOutput() EscalationPolicyRuleOutput {
	return o
}

func (o EscalationPolicyRuleOutput) ToEscalationPolicyRuleOutputWithContext(ctx context.Context) EscalationPolicyRuleOutput {
	return o
}

// The number of minutes before an unacknowledged incident escalates away from this rule.
func (o EscalationPolicyRuleOutput) EscalationDelayInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationPolicyRule) int { return v.EscalationDelayInMinutes }).(pulumi.IntOutput)
}

// The strategy used to assign the escalation rule to an incident. Documented below.
func (o EscalationPolicyRuleOutput) EscalationRuleAssignmentStrategy() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRule) *EscalationPolicyRuleEscalationRuleAssignmentStrategy {
		return v.EscalationRuleAssignmentStrategy
	}).(EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput)
}

// A target ID
func (o EscalationPolicyRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o EscalationPolicyRuleOutput) Targets() EscalationPolicyRuleTargetArrayOutput {
	return o.ApplyT(func(v EscalationPolicyRule) []EscalationPolicyRuleTarget { return v.Targets }).(EscalationPolicyRuleTargetArrayOutput)
}

type EscalationPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRule)(nil)).Elem()
}

func (o EscalationPolicyRuleArrayOutput) ToEscalationPolicyRuleArrayOutput() EscalationPolicyRuleArrayOutput {
	return o
}

func (o EscalationPolicyRuleArrayOutput) ToEscalationPolicyRuleArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleArrayOutput {
	return o
}

func (o EscalationPolicyRuleArrayOutput) Index(i pulumi.IntInput) EscalationPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationPolicyRule {
		return vs[0].([]EscalationPolicyRule)[vs[1].(int)]
	}).(EscalationPolicyRuleOutput)
}

type EscalationPolicyRuleEscalationRuleAssignmentStrategy struct {
	// Can be `roundRobin` or `assignToEveryone`.
	Type *string `pulumi:"type"`
}

// EscalationPolicyRuleEscalationRuleAssignmentStrategyInput is an input type that accepts EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs and EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleEscalationRuleAssignmentStrategyInput` via:
//
//	EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs{...}
type EscalationPolicyRuleEscalationRuleAssignmentStrategyInput interface {
	pulumi.Input

	ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput
	ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutputWithContext(context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput
}

type EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs struct {
	// Can be `roundRobin` or `assignToEveryone`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleEscalationRuleAssignmentStrategy)(nil)).Elem()
}

func (i EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput {
	return i.ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput)
}

func (i EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return i.ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput).ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(ctx)
}

// EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput is an input type that accepts EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs, EscalationPolicyRuleEscalationRuleAssignmentStrategyPtr and EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput` via:
//
//	        EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs{...}
//
//	or:
//
//	        nil
type EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput interface {
	pulumi.Input

	ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput
	ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput
}

type escalationPolicyRuleEscalationRuleAssignmentStrategyPtrType EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs

func EscalationPolicyRuleEscalationRuleAssignmentStrategyPtr(v *EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput {
	return (*escalationPolicyRuleEscalationRuleAssignmentStrategyPtrType)(v)
}

func (*escalationPolicyRuleEscalationRuleAssignmentStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleEscalationRuleAssignmentStrategy)(nil)).Elem()
}

func (i *escalationPolicyRuleEscalationRuleAssignmentStrategyPtrType) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return i.ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(context.Background())
}

func (i *escalationPolicyRuleEscalationRuleAssignmentStrategyPtrType) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput)
}

type EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleEscalationRuleAssignmentStrategy)(nil)).Elem()
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput {
	return o
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput {
	return o
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return o.ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(context.Background())
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EscalationPolicyRuleEscalationRuleAssignmentStrategy) *EscalationPolicyRuleEscalationRuleAssignmentStrategy {
		return &v
	}).(EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput)
}

// Can be `roundRobin` or `assignToEveryone`.
func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRuleEscalationRuleAssignmentStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicyRuleEscalationRuleAssignmentStrategy)(nil)).Elem()
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput() EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return o
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput) ToEscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutputWithContext(ctx context.Context) EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput {
	return o
}

func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput) Elem() EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleEscalationRuleAssignmentStrategy) EscalationPolicyRuleEscalationRuleAssignmentStrategy {
		if v != nil {
			return *v
		}
		var ret EscalationPolicyRuleEscalationRuleAssignmentStrategy
		return ret
	}).(EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput)
}

// Can be `roundRobin` or `assignToEveryone`.
func (o EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EscalationPolicyRuleEscalationRuleAssignmentStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type EscalationPolicyRuleTarget struct {
	// A target ID
	Id string `pulumi:"id"`
	// Can be `userReference` or `scheduleReference`. Defaults to `userReference`. For multiple users as example, repeat the target.
	Type *string `pulumi:"type"`
}

// EscalationPolicyRuleTargetInput is an input type that accepts EscalationPolicyRuleTargetArgs and EscalationPolicyRuleTargetOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleTargetInput` via:
//
//	EscalationPolicyRuleTargetArgs{...}
type EscalationPolicyRuleTargetInput interface {
	pulumi.Input

	ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput
	ToEscalationPolicyRuleTargetOutputWithContext(context.Context) EscalationPolicyRuleTargetOutput
}

type EscalationPolicyRuleTargetArgs struct {
	// A target ID
	Id pulumi.StringInput `pulumi:"id"`
	// Can be `userReference` or `scheduleReference`. Defaults to `userReference`. For multiple users as example, repeat the target.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EscalationPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleTarget)(nil)).Elem()
}

func (i EscalationPolicyRuleTargetArgs) ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput {
	return i.ToEscalationPolicyRuleTargetOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleTargetArgs) ToEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleTargetOutput)
}

// EscalationPolicyRuleTargetArrayInput is an input type that accepts EscalationPolicyRuleTargetArray and EscalationPolicyRuleTargetArrayOutput values.
// You can construct a concrete instance of `EscalationPolicyRuleTargetArrayInput` via:
//
//	EscalationPolicyRuleTargetArray{ EscalationPolicyRuleTargetArgs{...} }
type EscalationPolicyRuleTargetArrayInput interface {
	pulumi.Input

	ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput
	ToEscalationPolicyRuleTargetArrayOutputWithContext(context.Context) EscalationPolicyRuleTargetArrayOutput
}

type EscalationPolicyRuleTargetArray []EscalationPolicyRuleTargetInput

func (EscalationPolicyRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRuleTarget)(nil)).Elem()
}

func (i EscalationPolicyRuleTargetArray) ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput {
	return i.ToEscalationPolicyRuleTargetArrayOutputWithContext(context.Background())
}

func (i EscalationPolicyRuleTargetArray) ToEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyRuleTargetArrayOutput)
}

type EscalationPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationPolicyRuleTarget)(nil)).Elem()
}

func (o EscalationPolicyRuleTargetOutput) ToEscalationPolicyRuleTargetOutput() EscalationPolicyRuleTargetOutput {
	return o
}

func (o EscalationPolicyRuleTargetOutput) ToEscalationPolicyRuleTargetOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetOutput {
	return o
}

// A target ID
func (o EscalationPolicyRuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationPolicyRuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

// Can be `userReference` or `scheduleReference`. Defaults to `userReference`. For multiple users as example, repeat the target.
func (o EscalationPolicyRuleTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EscalationPolicyRuleTarget) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EscalationPolicyRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (EscalationPolicyRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationPolicyRuleTarget)(nil)).Elem()
}

func (o EscalationPolicyRuleTargetArrayOutput) ToEscalationPolicyRuleTargetArrayOutput() EscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o EscalationPolicyRuleTargetArrayOutput) ToEscalationPolicyRuleTargetArrayOutputWithContext(ctx context.Context) EscalationPolicyRuleTargetArrayOutput {
	return o
}

func (o EscalationPolicyRuleTargetArrayOutput) Index(i pulumi.IntInput) EscalationPolicyRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationPolicyRuleTarget {
		return vs[0].([]EscalationPolicyRuleTarget)[vs[1].(int)]
	}).(EscalationPolicyRuleTargetOutput)
}

type EventOrchestrationGlobalCatchAll struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationGlobalCatchAllActions `pulumi:"actions"`
}

// EventOrchestrationGlobalCatchAllInput is an input type that accepts EventOrchestrationGlobalCatchAllArgs and EventOrchestrationGlobalCatchAllOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllInput` via:
//
//	EventOrchestrationGlobalCatchAllArgs{...}
type EventOrchestrationGlobalCatchAllInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllOutput() EventOrchestrationGlobalCatchAllOutput
	ToEventOrchestrationGlobalCatchAllOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllOutput
}

type EventOrchestrationGlobalCatchAllArgs struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationGlobalCatchAllActionsInput `pulumi:"actions"`
}

func (EventOrchestrationGlobalCatchAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAll)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllArgs) ToEventOrchestrationGlobalCatchAllOutput() EventOrchestrationGlobalCatchAllOutput {
	return i.ToEventOrchestrationGlobalCatchAllOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllArgs) ToEventOrchestrationGlobalCatchAllOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllOutput)
}

func (i EventOrchestrationGlobalCatchAllArgs) ToEventOrchestrationGlobalCatchAllPtrOutput() EventOrchestrationGlobalCatchAllPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllArgs) ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllOutput).ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(ctx)
}

// EventOrchestrationGlobalCatchAllPtrInput is an input type that accepts EventOrchestrationGlobalCatchAllArgs, EventOrchestrationGlobalCatchAllPtr and EventOrchestrationGlobalCatchAllPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllPtrInput` via:
//
//	        EventOrchestrationGlobalCatchAllArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationGlobalCatchAllPtrInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllPtrOutput() EventOrchestrationGlobalCatchAllPtrOutput
	ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllPtrOutput
}

type eventOrchestrationGlobalCatchAllPtrType EventOrchestrationGlobalCatchAllArgs

func EventOrchestrationGlobalCatchAllPtr(v *EventOrchestrationGlobalCatchAllArgs) EventOrchestrationGlobalCatchAllPtrInput {
	return (*eventOrchestrationGlobalCatchAllPtrType)(v)
}

func (*eventOrchestrationGlobalCatchAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAll)(nil)).Elem()
}

func (i *eventOrchestrationGlobalCatchAllPtrType) ToEventOrchestrationGlobalCatchAllPtrOutput() EventOrchestrationGlobalCatchAllPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationGlobalCatchAllPtrType) ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllPtrOutput)
}

type EventOrchestrationGlobalCatchAllOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAll)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllOutput) ToEventOrchestrationGlobalCatchAllOutput() EventOrchestrationGlobalCatchAllOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllOutput) ToEventOrchestrationGlobalCatchAllOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllOutput) ToEventOrchestrationGlobalCatchAllPtrOutput() EventOrchestrationGlobalCatchAllPtrOutput {
	return o.ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationGlobalCatchAllOutput) ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationGlobalCatchAll) *EventOrchestrationGlobalCatchAll {
		return &v
	}).(EventOrchestrationGlobalCatchAllPtrOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationGlobalCatchAllOutput) Actions() EventOrchestrationGlobalCatchAllActionsOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAll) EventOrchestrationGlobalCatchAllActions { return v.Actions }).(EventOrchestrationGlobalCatchAllActionsOutput)
}

type EventOrchestrationGlobalCatchAllPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAll)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllPtrOutput) ToEventOrchestrationGlobalCatchAllPtrOutput() EventOrchestrationGlobalCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllPtrOutput) ToEventOrchestrationGlobalCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllPtrOutput) Elem() EventOrchestrationGlobalCatchAllOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAll) EventOrchestrationGlobalCatchAll {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationGlobalCatchAll
		return ret
	}).(EventOrchestrationGlobalCatchAllOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationGlobalCatchAllPtrOutput) Actions() EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAll) *EventOrchestrationGlobalCatchAllActions {
		if v == nil {
			return nil
		}
		return &v.Actions
	}).(EventOrchestrationGlobalCatchAllActionsPtrOutput)
}

type EventOrchestrationGlobalCatchAllActions struct {
	// Add this text as a note on the resulting incident.
	Annotate *string `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction *EventOrchestrationGlobalCatchAllActionsAutomationAction `pulumi:"automationAction"`
	// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
	DropEvent *bool `pulumi:"dropEvent"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationGlobalCatchAllActionsExtraction `pulumi:"extractions"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority *string `pulumi:"priority"`
	// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
	RouteTo *string `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress *bool `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend *int `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationGlobalCatchAllActionsVariable `pulumi:"variables"`
}

// EventOrchestrationGlobalCatchAllActionsInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsArgs and EventOrchestrationGlobalCatchAllActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsArgs{...}
type EventOrchestrationGlobalCatchAllActionsInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsOutput() EventOrchestrationGlobalCatchAllActionsOutput
	ToEventOrchestrationGlobalCatchAllActionsOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsOutput
}

type EventOrchestrationGlobalCatchAllActionsArgs struct {
	// Add this text as a note on the resulting incident.
	Annotate pulumi.StringPtrInput `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput `pulumi:"automationAction"`
	// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
	DropEvent pulumi.BoolPtrInput `pulumi:"dropEvent"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationGlobalCatchAllActionsExtractionArrayInput `pulumi:"extractions"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
	RouteTo pulumi.StringPtrInput `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress pulumi.BoolPtrInput `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend pulumi.IntPtrInput `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationGlobalCatchAllActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationGlobalCatchAllActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActions)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsArgs) ToEventOrchestrationGlobalCatchAllActionsOutput() EventOrchestrationGlobalCatchAllActionsOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsArgs) ToEventOrchestrationGlobalCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsOutput)
}

func (i EventOrchestrationGlobalCatchAllActionsArgs) ToEventOrchestrationGlobalCatchAllActionsPtrOutput() EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsArgs) ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsOutput).ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(ctx)
}

// EventOrchestrationGlobalCatchAllActionsPtrInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsArgs, EventOrchestrationGlobalCatchAllActionsPtr and EventOrchestrationGlobalCatchAllActionsPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsPtrInput` via:
//
//	        EventOrchestrationGlobalCatchAllActionsArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationGlobalCatchAllActionsPtrInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsPtrOutput() EventOrchestrationGlobalCatchAllActionsPtrOutput
	ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsPtrOutput
}

type eventOrchestrationGlobalCatchAllActionsPtrType EventOrchestrationGlobalCatchAllActionsArgs

func EventOrchestrationGlobalCatchAllActionsPtr(v *EventOrchestrationGlobalCatchAllActionsArgs) EventOrchestrationGlobalCatchAllActionsPtrInput {
	return (*eventOrchestrationGlobalCatchAllActionsPtrType)(v)
}

func (*eventOrchestrationGlobalCatchAllActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAllActions)(nil)).Elem()
}

func (i *eventOrchestrationGlobalCatchAllActionsPtrType) ToEventOrchestrationGlobalCatchAllActionsPtrOutput() EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationGlobalCatchAllActionsPtrType) ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsPtrOutput)
}

type EventOrchestrationGlobalCatchAllActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsOutput) ToEventOrchestrationGlobalCatchAllActionsOutput() EventOrchestrationGlobalCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsOutput) ToEventOrchestrationGlobalCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsOutput) ToEventOrchestrationGlobalCatchAllActionsPtrOutput() EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return o.ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationGlobalCatchAllActionsOutput) ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationGlobalCatchAllActions) *EventOrchestrationGlobalCatchAllActions {
		return &v
	}).(EventOrchestrationGlobalCatchAllActionsPtrOutput)
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *string { return v.Annotate }).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationGlobalCatchAllActionsOutput) AutomationAction() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *EventOrchestrationGlobalCatchAllActionsAutomationAction {
		return v.AutomationAction
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput)
}

// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
func (o EventOrchestrationGlobalCatchAllActionsOutput) DropEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *bool { return v.DropEvent }).(pulumi.BoolPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationGlobalCatchAllActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Extractions() EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) []EventOrchestrationGlobalCatchAllActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationGlobalCatchAllActionsOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *string { return v.RouteTo }).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationGlobalCatchAllActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *bool { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) *int { return v.Suspend }).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationGlobalCatchAllActionsOutput) Variables() EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActions) []EventOrchestrationGlobalCatchAllActionsVariable {
		return v.Variables
	}).(EventOrchestrationGlobalCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) ToEventOrchestrationGlobalCatchAllActionsPtrOutput() EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) ToEventOrchestrationGlobalCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Elem() EventOrchestrationGlobalCatchAllActionsOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) EventOrchestrationGlobalCatchAllActions {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationGlobalCatchAllActions
		return ret
	}).(EventOrchestrationGlobalCatchAllActionsOutput)
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Annotate
	}).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) AutomationAction() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *EventOrchestrationGlobalCatchAllActionsAutomationAction {
		if v == nil {
			return nil
		}
		return v.AutomationAction
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput)
}

// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) DropEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *bool {
		if v == nil {
			return nil
		}
		return v.DropEvent
	}).(pulumi.BoolPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.EventAction
	}).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Extractions() EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) []EventOrchestrationGlobalCatchAllActionsExtraction {
		if v == nil {
			return nil
		}
		return v.Extractions
	}).(EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.RouteTo
	}).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *bool {
		if v == nil {
			return nil
		}
		return v.Suppress
	}).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) *int {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationGlobalCatchAllActionsPtrOutput) Variables() EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActions) []EventOrchestrationGlobalCatchAllActionsVariable {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(EventOrchestrationGlobalCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationAction struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend *bool `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers []EventOrchestrationGlobalCatchAllActionsAutomationActionHeader `pulumi:"headers"`
	// The name of the variable
	Name string `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters []EventOrchestrationGlobalCatchAllActionsAutomationActionParameter `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url string `pulumi:"url"`
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionArgs and EventOrchestrationGlobalCatchAllActionsAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsAutomationActionArgs{...}
type EventOrchestrationGlobalCatchAllActionsAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionOutput
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionArgs struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend pulumi.BoolPtrInput `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayInput `pulumi:"headers"`
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayInput `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionOutput)
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionOutput).ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionArgs, EventOrchestrationGlobalCatchAllActionsAutomationActionPtr and EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput` via:
//
//	        EventOrchestrationGlobalCatchAllActionsAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput
}

type eventOrchestrationGlobalCatchAllActionsAutomationActionPtrType EventOrchestrationGlobalCatchAllActionsAutomationActionArgs

func EventOrchestrationGlobalCatchAllActionsAutomationActionPtr(v *EventOrchestrationGlobalCatchAllActionsAutomationActionArgs) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput {
	return (*eventOrchestrationGlobalCatchAllActionsAutomationActionPtrType)(v)
}

func (*eventOrchestrationGlobalCatchAllActionsAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAllActionsAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationGlobalCatchAllActionsAutomationActionPtrType) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationGlobalCatchAllActionsAutomationActionPtrType) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o.ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationGlobalCatchAllActionsAutomationAction) *EventOrchestrationGlobalCatchAllActionsAutomationAction {
		return &v
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationAction) *bool { return v.AutoSend }).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) Headers() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationAction) []EventOrchestrationGlobalCatchAllActionsAutomationActionHeader {
		return v.Headers
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationAction) string { return v.Name }).(pulumi.StringOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) Parameters() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationAction) []EventOrchestrationGlobalCatchAllActionsAutomationActionParameter {
		return v.Parameters
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationAction) string { return v.Url }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalCatchAllActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) Elem() EventOrchestrationGlobalCatchAllActionsAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) EventOrchestrationGlobalCatchAllActionsAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationGlobalCatchAllActionsAutomationAction
		return ret
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) *bool {
		if v == nil {
			return nil
		}
		return v.AutoSend
	}).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) Headers() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) []EventOrchestrationGlobalCatchAllActionsAutomationActionHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) Parameters() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) []EventOrchestrationGlobalCatchAllActionsAutomationActionParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalCatchAllActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionHeader struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs and EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs{...}
type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput)
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray and EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray{ EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs{...} }
type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray []EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderInput

func (EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationActionHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationActionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalCatchAllActionsAutomationActionHeader {
		return vs[0].([]EventOrchestrationGlobalCatchAllActionsAutomationActionHeader)[vs[1].(int)]
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionParameter struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionParameterInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs and EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionParameterInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs{...}
type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput)
}

// EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray and EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray{ EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs{...} }
type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput
	ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray []EventOrchestrationGlobalCatchAllActionsAutomationActionParameterInput

func (EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationActionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsAutomationActionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput) ToEventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalCatchAllActionsAutomationActionParameter {
		return vs[0].([]EventOrchestrationGlobalCatchAllActionsAutomationActionParameter)[vs[1].(int)]
	}).(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput)
}

type EventOrchestrationGlobalCatchAllActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationGlobalCatchAllActionsExtractionInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsExtractionArgs and EventOrchestrationGlobalCatchAllActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsExtractionInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsExtractionArgs{...}
type EventOrchestrationGlobalCatchAllActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsExtractionOutput() EventOrchestrationGlobalCatchAllActionsExtractionOutput
	ToEventOrchestrationGlobalCatchAllActionsExtractionOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsExtractionOutput
}

type EventOrchestrationGlobalCatchAllActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationGlobalCatchAllActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsExtractionArgs) ToEventOrchestrationGlobalCatchAllActionsExtractionOutput() EventOrchestrationGlobalCatchAllActionsExtractionOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsExtractionArgs) ToEventOrchestrationGlobalCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsExtractionOutput)
}

// EventOrchestrationGlobalCatchAllActionsExtractionArrayInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsExtractionArray and EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsExtractionArrayInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsExtractionArray{ EventOrchestrationGlobalCatchAllActionsExtractionArgs{...} }
type EventOrchestrationGlobalCatchAllActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutput() EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput
	ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput
}

type EventOrchestrationGlobalCatchAllActionsExtractionArray []EventOrchestrationGlobalCatchAllActionsExtractionInput

func (EventOrchestrationGlobalCatchAllActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsExtractionArray) ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutput() EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsExtractionArray) ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) ToEventOrchestrationGlobalCatchAllActionsExtractionOutput() EventOrchestrationGlobalCatchAllActionsExtractionOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) ToEventOrchestrationGlobalCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationGlobalCatchAllActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput) ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutput() EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput) ToEventOrchestrationGlobalCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalCatchAllActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalCatchAllActionsExtraction {
		return vs[0].([]EventOrchestrationGlobalCatchAllActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationGlobalCatchAllActionsExtractionOutput)
}

type EventOrchestrationGlobalCatchAllActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalCatchAllActionsVariableInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsVariableArgs and EventOrchestrationGlobalCatchAllActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsVariableInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsVariableArgs{...}
type EventOrchestrationGlobalCatchAllActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsVariableOutput() EventOrchestrationGlobalCatchAllActionsVariableOutput
	ToEventOrchestrationGlobalCatchAllActionsVariableOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsVariableOutput
}

type EventOrchestrationGlobalCatchAllActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalCatchAllActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsVariableArgs) ToEventOrchestrationGlobalCatchAllActionsVariableOutput() EventOrchestrationGlobalCatchAllActionsVariableOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsVariableArgs) ToEventOrchestrationGlobalCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsVariableOutput)
}

// EventOrchestrationGlobalCatchAllActionsVariableArrayInput is an input type that accepts EventOrchestrationGlobalCatchAllActionsVariableArray and EventOrchestrationGlobalCatchAllActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalCatchAllActionsVariableArrayInput` via:
//
//	EventOrchestrationGlobalCatchAllActionsVariableArray{ EventOrchestrationGlobalCatchAllActionsVariableArgs{...} }
type EventOrchestrationGlobalCatchAllActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutput() EventOrchestrationGlobalCatchAllActionsVariableArrayOutput
	ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationGlobalCatchAllActionsVariableArrayOutput
}

type EventOrchestrationGlobalCatchAllActionsVariableArray []EventOrchestrationGlobalCatchAllActionsVariableInput

func (EventOrchestrationGlobalCatchAllActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalCatchAllActionsVariableArray) ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutput() EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return i.ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalCatchAllActionsVariableArray) ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationGlobalCatchAllActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) ToEventOrchestrationGlobalCatchAllActionsVariableOutput() EventOrchestrationGlobalCatchAllActionsVariableOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) ToEventOrchestrationGlobalCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalCatchAllActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalCatchAllActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalCatchAllActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalCatchAllActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalCatchAllActionsVariableArrayOutput) ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutput() EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsVariableArrayOutput) ToEventOrchestrationGlobalCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalCatchAllActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalCatchAllActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalCatchAllActionsVariable {
		return vs[0].([]EventOrchestrationGlobalCatchAllActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationGlobalCatchAllActionsVariableOutput)
}

type EventOrchestrationGlobalSet struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    string                            `pulumi:"id"`
	Rules []EventOrchestrationGlobalSetRule `pulumi:"rules"`
}

// EventOrchestrationGlobalSetInput is an input type that accepts EventOrchestrationGlobalSetArgs and EventOrchestrationGlobalSetOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetInput` via:
//
//	EventOrchestrationGlobalSetArgs{...}
type EventOrchestrationGlobalSetInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetOutput() EventOrchestrationGlobalSetOutput
	ToEventOrchestrationGlobalSetOutputWithContext(context.Context) EventOrchestrationGlobalSetOutput
}

type EventOrchestrationGlobalSetArgs struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    pulumi.StringInput                        `pulumi:"id"`
	Rules EventOrchestrationGlobalSetRuleArrayInput `pulumi:"rules"`
}

func (EventOrchestrationGlobalSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSet)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetArgs) ToEventOrchestrationGlobalSetOutput() EventOrchestrationGlobalSetOutput {
	return i.ToEventOrchestrationGlobalSetOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetArgs) ToEventOrchestrationGlobalSetOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetOutput)
}

// EventOrchestrationGlobalSetArrayInput is an input type that accepts EventOrchestrationGlobalSetArray and EventOrchestrationGlobalSetArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetArrayInput` via:
//
//	EventOrchestrationGlobalSetArray{ EventOrchestrationGlobalSetArgs{...} }
type EventOrchestrationGlobalSetArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetArrayOutput() EventOrchestrationGlobalSetArrayOutput
	ToEventOrchestrationGlobalSetArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetArrayOutput
}

type EventOrchestrationGlobalSetArray []EventOrchestrationGlobalSetInput

func (EventOrchestrationGlobalSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSet)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetArray) ToEventOrchestrationGlobalSetArrayOutput() EventOrchestrationGlobalSetArrayOutput {
	return i.ToEventOrchestrationGlobalSetArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetArray) ToEventOrchestrationGlobalSetArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetArrayOutput)
}

type EventOrchestrationGlobalSetOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSet)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetOutput) ToEventOrchestrationGlobalSetOutput() EventOrchestrationGlobalSetOutput {
	return o
}

func (o EventOrchestrationGlobalSetOutput) ToEventOrchestrationGlobalSetOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetOutput {
	return o
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationGlobalSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSet) string { return v.Id }).(pulumi.StringOutput)
}

func (o EventOrchestrationGlobalSetOutput) Rules() EventOrchestrationGlobalSetRuleArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSet) []EventOrchestrationGlobalSetRule { return v.Rules }).(EventOrchestrationGlobalSetRuleArrayOutput)
}

type EventOrchestrationGlobalSetArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSet)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetArrayOutput) ToEventOrchestrationGlobalSetArrayOutput() EventOrchestrationGlobalSetArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetArrayOutput) ToEventOrchestrationGlobalSetArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSet {
		return vs[0].([]EventOrchestrationGlobalSet)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetOutput)
}

type EventOrchestrationGlobalSetRule struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationGlobalSetRuleActions `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions []EventOrchestrationGlobalSetRuleCondition `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id *string `pulumi:"id"`
	// A description of this rule's purpose.
	Label *string `pulumi:"label"`
}

// EventOrchestrationGlobalSetRuleInput is an input type that accepts EventOrchestrationGlobalSetRuleArgs and EventOrchestrationGlobalSetRuleOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleInput` via:
//
//	EventOrchestrationGlobalSetRuleArgs{...}
type EventOrchestrationGlobalSetRuleInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleOutput() EventOrchestrationGlobalSetRuleOutput
	ToEventOrchestrationGlobalSetRuleOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleOutput
}

type EventOrchestrationGlobalSetRuleArgs struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationGlobalSetRuleActionsInput `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions EventOrchestrationGlobalSetRuleConditionArrayInput `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A description of this rule's purpose.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (EventOrchestrationGlobalSetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRule)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleArgs) ToEventOrchestrationGlobalSetRuleOutput() EventOrchestrationGlobalSetRuleOutput {
	return i.ToEventOrchestrationGlobalSetRuleOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleArgs) ToEventOrchestrationGlobalSetRuleOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleOutput)
}

// EventOrchestrationGlobalSetRuleArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleArray and EventOrchestrationGlobalSetRuleArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleArray{ EventOrchestrationGlobalSetRuleArgs{...} }
type EventOrchestrationGlobalSetRuleArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleArrayOutput() EventOrchestrationGlobalSetRuleArrayOutput
	ToEventOrchestrationGlobalSetRuleArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleArrayOutput
}

type EventOrchestrationGlobalSetRuleArray []EventOrchestrationGlobalSetRuleInput

func (EventOrchestrationGlobalSetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRule)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleArray) ToEventOrchestrationGlobalSetRuleArrayOutput() EventOrchestrationGlobalSetRuleArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleArray) ToEventOrchestrationGlobalSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleArrayOutput)
}

type EventOrchestrationGlobalSetRuleOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRule)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleOutput) ToEventOrchestrationGlobalSetRuleOutput() EventOrchestrationGlobalSetRuleOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleOutput) ToEventOrchestrationGlobalSetRuleOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleOutput {
	return o
}

// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
func (o EventOrchestrationGlobalSetRuleOutput) Actions() EventOrchestrationGlobalSetRuleActionsOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRule) EventOrchestrationGlobalSetRuleActions { return v.Actions }).(EventOrchestrationGlobalSetRuleActionsOutput)
}

// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
func (o EventOrchestrationGlobalSetRuleOutput) Conditions() EventOrchestrationGlobalSetRuleConditionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRule) []EventOrchestrationGlobalSetRuleCondition {
		return v.Conditions
	}).(EventOrchestrationGlobalSetRuleConditionArrayOutput)
}

// Indicates whether the rule is disabled and would therefore not be evaluated.
func (o EventOrchestrationGlobalSetRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationGlobalSetRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A description of this rule's purpose.
func (o EventOrchestrationGlobalSetRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type EventOrchestrationGlobalSetRuleArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRule)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleArrayOutput) ToEventOrchestrationGlobalSetRuleArrayOutput() EventOrchestrationGlobalSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleArrayOutput) ToEventOrchestrationGlobalSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRule {
		return vs[0].([]EventOrchestrationGlobalSetRule)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleOutput)
}

type EventOrchestrationGlobalSetRuleActions struct {
	// Add this text as a note on the resulting incident.
	Annotate *string `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction *EventOrchestrationGlobalSetRuleActionsAutomationAction `pulumi:"automationAction"`
	// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
	DropEvent *bool `pulumi:"dropEvent"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationGlobalSetRuleActionsExtraction `pulumi:"extractions"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority *string `pulumi:"priority"`
	// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
	RouteTo *string `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress *bool `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend *int `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationGlobalSetRuleActionsVariable `pulumi:"variables"`
}

// EventOrchestrationGlobalSetRuleActionsInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsArgs and EventOrchestrationGlobalSetRuleActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsArgs{...}
type EventOrchestrationGlobalSetRuleActionsInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsOutput() EventOrchestrationGlobalSetRuleActionsOutput
	ToEventOrchestrationGlobalSetRuleActionsOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsOutput
}

type EventOrchestrationGlobalSetRuleActionsArgs struct {
	// Add this text as a note on the resulting incident.
	Annotate pulumi.StringPtrInput `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput `pulumi:"automationAction"`
	// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
	DropEvent pulumi.BoolPtrInput `pulumi:"dropEvent"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationGlobalSetRuleActionsExtractionArrayInput `pulumi:"extractions"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
	RouteTo pulumi.StringPtrInput `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress pulumi.BoolPtrInput `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend pulumi.IntPtrInput `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationGlobalSetRuleActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationGlobalSetRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActions)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsArgs) ToEventOrchestrationGlobalSetRuleActionsOutput() EventOrchestrationGlobalSetRuleActionsOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsArgs) ToEventOrchestrationGlobalSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsOutput)
}

type EventOrchestrationGlobalSetRuleActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActions)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsOutput) ToEventOrchestrationGlobalSetRuleActionsOutput() EventOrchestrationGlobalSetRuleActionsOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsOutput) ToEventOrchestrationGlobalSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsOutput {
	return o
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *string { return v.Annotate }).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationGlobalSetRuleActionsOutput) AutomationAction() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *EventOrchestrationGlobalSetRuleActionsAutomationAction {
		return v.AutomationAction
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput)
}

// When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
func (o EventOrchestrationGlobalSetRuleActionsOutput) DropEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *bool { return v.DropEvent }).(pulumi.BoolPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationGlobalSetRuleActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Extractions() EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) []EventOrchestrationGlobalSetRuleActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationGlobalSetRuleActionsOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *string { return v.RouteTo }).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationGlobalSetRuleActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *bool { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) *int { return v.Suspend }).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationGlobalSetRuleActionsOutput) Variables() EventOrchestrationGlobalSetRuleActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActions) []EventOrchestrationGlobalSetRuleActionsVariable {
		return v.Variables
	}).(EventOrchestrationGlobalSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationAction struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend *bool `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers []EventOrchestrationGlobalSetRuleActionsAutomationActionHeader `pulumi:"headers"`
	// The name of the variable
	Name string `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters []EventOrchestrationGlobalSetRuleActionsAutomationActionParameter `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url string `pulumi:"url"`
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionArgs and EventOrchestrationGlobalSetRuleActionsAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsAutomationActionArgs{...}
type EventOrchestrationGlobalSetRuleActionsAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionOutput
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionArgs struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend pulumi.BoolPtrInput `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayInput `pulumi:"headers"`
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayInput `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionOutput)
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionOutput).ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionArgs, EventOrchestrationGlobalSetRuleActionsAutomationActionPtr and EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput` via:
//
//	        EventOrchestrationGlobalSetRuleActionsAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput
}

type eventOrchestrationGlobalSetRuleActionsAutomationActionPtrType EventOrchestrationGlobalSetRuleActionsAutomationActionArgs

func EventOrchestrationGlobalSetRuleActionsAutomationActionPtr(v *EventOrchestrationGlobalSetRuleActionsAutomationActionArgs) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput {
	return (*eventOrchestrationGlobalSetRuleActionsAutomationActionPtrType)(v)
}

func (*eventOrchestrationGlobalSetRuleActionsAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalSetRuleActionsAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationGlobalSetRuleActionsAutomationActionPtrType) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationGlobalSetRuleActionsAutomationActionPtrType) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return o.ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationGlobalSetRuleActionsAutomationAction) *EventOrchestrationGlobalSetRuleActionsAutomationAction {
		return &v
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationAction) *bool { return v.AutoSend }).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) Headers() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationAction) []EventOrchestrationGlobalSetRuleActionsAutomationActionHeader {
		return v.Headers
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationAction) string { return v.Name }).(pulumi.StringOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) Parameters() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationAction) []EventOrchestrationGlobalSetRuleActionsAutomationActionParameter {
		return v.Parameters
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationAction) string { return v.Url }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationGlobalSetRuleActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) Elem() EventOrchestrationGlobalSetRuleActionsAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) EventOrchestrationGlobalSetRuleActionsAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationGlobalSetRuleActionsAutomationAction
		return ret
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) *bool {
		if v == nil {
			return nil
		}
		return v.AutoSend
	}).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) Headers() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) []EventOrchestrationGlobalSetRuleActionsAutomationActionHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) Parameters() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) []EventOrchestrationGlobalSetRuleActionsAutomationActionParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationGlobalSetRuleActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionHeader struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs and EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs{...}
type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput)
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray and EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray{ EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs{...} }
type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray []EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderInput

func (EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationActionHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationActionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRuleActionsAutomationActionHeader {
		return vs[0].([]EventOrchestrationGlobalSetRuleActionsAutomationActionHeader)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionParameter struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionParameterInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs and EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionParameterInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs{...}
type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput)
}

// EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray and EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray{ EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs{...} }
type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput
	ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray []EventOrchestrationGlobalSetRuleActionsAutomationActionParameterInput

func (EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationActionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsAutomationActionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput) ToEventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRuleActionsAutomationActionParameter {
		return vs[0].([]EventOrchestrationGlobalSetRuleActionsAutomationActionParameter)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput)
}

type EventOrchestrationGlobalSetRuleActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationGlobalSetRuleActionsExtractionInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsExtractionArgs and EventOrchestrationGlobalSetRuleActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsExtractionInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsExtractionArgs{...}
type EventOrchestrationGlobalSetRuleActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsExtractionOutput() EventOrchestrationGlobalSetRuleActionsExtractionOutput
	ToEventOrchestrationGlobalSetRuleActionsExtractionOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsExtractionOutput
}

type EventOrchestrationGlobalSetRuleActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationGlobalSetRuleActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsExtractionArgs) ToEventOrchestrationGlobalSetRuleActionsExtractionOutput() EventOrchestrationGlobalSetRuleActionsExtractionOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsExtractionArgs) ToEventOrchestrationGlobalSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsExtractionOutput)
}

// EventOrchestrationGlobalSetRuleActionsExtractionArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsExtractionArray and EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsExtractionArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsExtractionArray{ EventOrchestrationGlobalSetRuleActionsExtractionArgs{...} }
type EventOrchestrationGlobalSetRuleActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutput() EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput
	ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput
}

type EventOrchestrationGlobalSetRuleActionsExtractionArray []EventOrchestrationGlobalSetRuleActionsExtractionInput

func (EventOrchestrationGlobalSetRuleActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsExtractionArray) ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutput() EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsExtractionArray) ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput)
}

type EventOrchestrationGlobalSetRuleActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) ToEventOrchestrationGlobalSetRuleActionsExtractionOutput() EventOrchestrationGlobalSetRuleActionsExtractionOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) ToEventOrchestrationGlobalSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationGlobalSetRuleActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput) ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutput() EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput) ToEventOrchestrationGlobalSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRuleActionsExtraction {
		return vs[0].([]EventOrchestrationGlobalSetRuleActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleActionsExtractionOutput)
}

type EventOrchestrationGlobalSetRuleActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationGlobalSetRuleActionsVariableInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsVariableArgs and EventOrchestrationGlobalSetRuleActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsVariableInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsVariableArgs{...}
type EventOrchestrationGlobalSetRuleActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsVariableOutput() EventOrchestrationGlobalSetRuleActionsVariableOutput
	ToEventOrchestrationGlobalSetRuleActionsVariableOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsVariableOutput
}

type EventOrchestrationGlobalSetRuleActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationGlobalSetRuleActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsVariableArgs) ToEventOrchestrationGlobalSetRuleActionsVariableOutput() EventOrchestrationGlobalSetRuleActionsVariableOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsVariableArgs) ToEventOrchestrationGlobalSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsVariableOutput)
}

// EventOrchestrationGlobalSetRuleActionsVariableArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleActionsVariableArray and EventOrchestrationGlobalSetRuleActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleActionsVariableArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleActionsVariableArray{ EventOrchestrationGlobalSetRuleActionsVariableArgs{...} }
type EventOrchestrationGlobalSetRuleActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutput() EventOrchestrationGlobalSetRuleActionsVariableArrayOutput
	ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleActionsVariableArrayOutput
}

type EventOrchestrationGlobalSetRuleActionsVariableArray []EventOrchestrationGlobalSetRuleActionsVariableInput

func (EventOrchestrationGlobalSetRuleActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleActionsVariableArray) ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutput() EventOrchestrationGlobalSetRuleActionsVariableArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleActionsVariableArray) ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationGlobalSetRuleActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) ToEventOrchestrationGlobalSetRuleActionsVariableOutput() EventOrchestrationGlobalSetRuleActionsVariableOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) ToEventOrchestrationGlobalSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationGlobalSetRuleActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalSetRuleActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleActionsVariableArrayOutput) ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutput() EventOrchestrationGlobalSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsVariableArrayOutput) ToEventOrchestrationGlobalSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRuleActionsVariable {
		return vs[0].([]EventOrchestrationGlobalSetRuleActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleActionsVariableOutput)
}

type EventOrchestrationGlobalSetRuleCondition struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression string `pulumi:"expression"`
}

// EventOrchestrationGlobalSetRuleConditionInput is an input type that accepts EventOrchestrationGlobalSetRuleConditionArgs and EventOrchestrationGlobalSetRuleConditionOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleConditionInput` via:
//
//	EventOrchestrationGlobalSetRuleConditionArgs{...}
type EventOrchestrationGlobalSetRuleConditionInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleConditionOutput() EventOrchestrationGlobalSetRuleConditionOutput
	ToEventOrchestrationGlobalSetRuleConditionOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleConditionOutput
}

type EventOrchestrationGlobalSetRuleConditionArgs struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (EventOrchestrationGlobalSetRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleConditionArgs) ToEventOrchestrationGlobalSetRuleConditionOutput() EventOrchestrationGlobalSetRuleConditionOutput {
	return i.ToEventOrchestrationGlobalSetRuleConditionOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleConditionArgs) ToEventOrchestrationGlobalSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleConditionOutput)
}

// EventOrchestrationGlobalSetRuleConditionArrayInput is an input type that accepts EventOrchestrationGlobalSetRuleConditionArray and EventOrchestrationGlobalSetRuleConditionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationGlobalSetRuleConditionArrayInput` via:
//
//	EventOrchestrationGlobalSetRuleConditionArray{ EventOrchestrationGlobalSetRuleConditionArgs{...} }
type EventOrchestrationGlobalSetRuleConditionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationGlobalSetRuleConditionArrayOutput() EventOrchestrationGlobalSetRuleConditionArrayOutput
	ToEventOrchestrationGlobalSetRuleConditionArrayOutputWithContext(context.Context) EventOrchestrationGlobalSetRuleConditionArrayOutput
}

type EventOrchestrationGlobalSetRuleConditionArray []EventOrchestrationGlobalSetRuleConditionInput

func (EventOrchestrationGlobalSetRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationGlobalSetRuleConditionArray) ToEventOrchestrationGlobalSetRuleConditionArrayOutput() EventOrchestrationGlobalSetRuleConditionArrayOutput {
	return i.ToEventOrchestrationGlobalSetRuleConditionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationGlobalSetRuleConditionArray) ToEventOrchestrationGlobalSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationGlobalSetRuleConditionArrayOutput)
}

type EventOrchestrationGlobalSetRuleConditionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationGlobalSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleConditionOutput) ToEventOrchestrationGlobalSetRuleConditionOutput() EventOrchestrationGlobalSetRuleConditionOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleConditionOutput) ToEventOrchestrationGlobalSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleConditionOutput {
	return o
}

// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
func (o EventOrchestrationGlobalSetRuleConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationGlobalSetRuleCondition) string { return v.Expression }).(pulumi.StringOutput)
}

type EventOrchestrationGlobalSetRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationGlobalSetRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationGlobalSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationGlobalSetRuleConditionArrayOutput) ToEventOrchestrationGlobalSetRuleConditionArrayOutput() EventOrchestrationGlobalSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleConditionArrayOutput) ToEventOrchestrationGlobalSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationGlobalSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationGlobalSetRuleConditionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationGlobalSetRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationGlobalSetRuleCondition {
		return vs[0].([]EventOrchestrationGlobalSetRuleCondition)[vs[1].(int)]
	}).(EventOrchestrationGlobalSetRuleConditionOutput)
}

type EventOrchestrationIntegrationType struct {
	// ID of the integration
	Id         *string                                  `pulumi:"id"`
	Label      *string                                  `pulumi:"label"`
	Parameters []EventOrchestrationIntegrationParameter `pulumi:"parameters"`
}

// EventOrchestrationIntegrationTypeInput is an input type that accepts EventOrchestrationIntegrationTypeArgs and EventOrchestrationIntegrationTypeOutput values.
// You can construct a concrete instance of `EventOrchestrationIntegrationTypeInput` via:
//
//	EventOrchestrationIntegrationTypeArgs{...}
type EventOrchestrationIntegrationTypeInput interface {
	pulumi.Input

	ToEventOrchestrationIntegrationTypeOutput() EventOrchestrationIntegrationTypeOutput
	ToEventOrchestrationIntegrationTypeOutputWithContext(context.Context) EventOrchestrationIntegrationTypeOutput
}

type EventOrchestrationIntegrationTypeArgs struct {
	// ID of the integration
	Id         pulumi.StringPtrInput                            `pulumi:"id"`
	Label      pulumi.StringPtrInput                            `pulumi:"label"`
	Parameters EventOrchestrationIntegrationParameterArrayInput `pulumi:"parameters"`
}

func (EventOrchestrationIntegrationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationIntegrationType)(nil)).Elem()
}

func (i EventOrchestrationIntegrationTypeArgs) ToEventOrchestrationIntegrationTypeOutput() EventOrchestrationIntegrationTypeOutput {
	return i.ToEventOrchestrationIntegrationTypeOutputWithContext(context.Background())
}

func (i EventOrchestrationIntegrationTypeArgs) ToEventOrchestrationIntegrationTypeOutputWithContext(ctx context.Context) EventOrchestrationIntegrationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationIntegrationTypeOutput)
}

// EventOrchestrationIntegrationTypeArrayInput is an input type that accepts EventOrchestrationIntegrationTypeArray and EventOrchestrationIntegrationTypeArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationIntegrationTypeArrayInput` via:
//
//	EventOrchestrationIntegrationTypeArray{ EventOrchestrationIntegrationTypeArgs{...} }
type EventOrchestrationIntegrationTypeArrayInput interface {
	pulumi.Input

	ToEventOrchestrationIntegrationTypeArrayOutput() EventOrchestrationIntegrationTypeArrayOutput
	ToEventOrchestrationIntegrationTypeArrayOutputWithContext(context.Context) EventOrchestrationIntegrationTypeArrayOutput
}

type EventOrchestrationIntegrationTypeArray []EventOrchestrationIntegrationTypeInput

func (EventOrchestrationIntegrationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationIntegrationType)(nil)).Elem()
}

func (i EventOrchestrationIntegrationTypeArray) ToEventOrchestrationIntegrationTypeArrayOutput() EventOrchestrationIntegrationTypeArrayOutput {
	return i.ToEventOrchestrationIntegrationTypeArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationIntegrationTypeArray) ToEventOrchestrationIntegrationTypeArrayOutputWithContext(ctx context.Context) EventOrchestrationIntegrationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationIntegrationTypeArrayOutput)
}

type EventOrchestrationIntegrationTypeOutput struct{ *pulumi.OutputState }

func (EventOrchestrationIntegrationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationIntegrationType)(nil)).Elem()
}

func (o EventOrchestrationIntegrationTypeOutput) ToEventOrchestrationIntegrationTypeOutput() EventOrchestrationIntegrationTypeOutput {
	return o
}

func (o EventOrchestrationIntegrationTypeOutput) ToEventOrchestrationIntegrationTypeOutputWithContext(ctx context.Context) EventOrchestrationIntegrationTypeOutput {
	return o
}

// ID of the integration
func (o EventOrchestrationIntegrationTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationIntegrationType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o EventOrchestrationIntegrationTypeOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationIntegrationType) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o EventOrchestrationIntegrationTypeOutput) Parameters() EventOrchestrationIntegrationParameterArrayOutput {
	return o.ApplyT(func(v EventOrchestrationIntegrationType) []EventOrchestrationIntegrationParameter {
		return v.Parameters
	}).(EventOrchestrationIntegrationParameterArrayOutput)
}

type EventOrchestrationIntegrationTypeArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationIntegrationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationIntegrationType)(nil)).Elem()
}

func (o EventOrchestrationIntegrationTypeArrayOutput) ToEventOrchestrationIntegrationTypeArrayOutput() EventOrchestrationIntegrationTypeArrayOutput {
	return o
}

func (o EventOrchestrationIntegrationTypeArrayOutput) ToEventOrchestrationIntegrationTypeArrayOutputWithContext(ctx context.Context) EventOrchestrationIntegrationTypeArrayOutput {
	return o
}

func (o EventOrchestrationIntegrationTypeArrayOutput) Index(i pulumi.IntInput) EventOrchestrationIntegrationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationIntegrationType {
		return vs[0].([]EventOrchestrationIntegrationType)[vs[1].(int)]
	}).(EventOrchestrationIntegrationTypeOutput)
}

type EventOrchestrationIntegrationParameter struct {
	// Routing key that routes to this Orchestration.
	RoutingKey *string `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type *string `pulumi:"type"`
}

// EventOrchestrationIntegrationParameterInput is an input type that accepts EventOrchestrationIntegrationParameterArgs and EventOrchestrationIntegrationParameterOutput values.
// You can construct a concrete instance of `EventOrchestrationIntegrationParameterInput` via:
//
//	EventOrchestrationIntegrationParameterArgs{...}
type EventOrchestrationIntegrationParameterInput interface {
	pulumi.Input

	ToEventOrchestrationIntegrationParameterOutput() EventOrchestrationIntegrationParameterOutput
	ToEventOrchestrationIntegrationParameterOutputWithContext(context.Context) EventOrchestrationIntegrationParameterOutput
}

type EventOrchestrationIntegrationParameterArgs struct {
	// Routing key that routes to this Orchestration.
	RoutingKey pulumi.StringPtrInput `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventOrchestrationIntegrationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i EventOrchestrationIntegrationParameterArgs) ToEventOrchestrationIntegrationParameterOutput() EventOrchestrationIntegrationParameterOutput {
	return i.ToEventOrchestrationIntegrationParameterOutputWithContext(context.Background())
}

func (i EventOrchestrationIntegrationParameterArgs) ToEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) EventOrchestrationIntegrationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationIntegrationParameterOutput)
}

// EventOrchestrationIntegrationParameterArrayInput is an input type that accepts EventOrchestrationIntegrationParameterArray and EventOrchestrationIntegrationParameterArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationIntegrationParameterArrayInput` via:
//
//	EventOrchestrationIntegrationParameterArray{ EventOrchestrationIntegrationParameterArgs{...} }
type EventOrchestrationIntegrationParameterArrayInput interface {
	pulumi.Input

	ToEventOrchestrationIntegrationParameterArrayOutput() EventOrchestrationIntegrationParameterArrayOutput
	ToEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Context) EventOrchestrationIntegrationParameterArrayOutput
}

type EventOrchestrationIntegrationParameterArray []EventOrchestrationIntegrationParameterInput

func (EventOrchestrationIntegrationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i EventOrchestrationIntegrationParameterArray) ToEventOrchestrationIntegrationParameterArrayOutput() EventOrchestrationIntegrationParameterArrayOutput {
	return i.ToEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationIntegrationParameterArray) ToEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationIntegrationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationIntegrationParameterArrayOutput)
}

type EventOrchestrationIntegrationParameterOutput struct{ *pulumi.OutputState }

func (EventOrchestrationIntegrationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o EventOrchestrationIntegrationParameterOutput) ToEventOrchestrationIntegrationParameterOutput() EventOrchestrationIntegrationParameterOutput {
	return o
}

func (o EventOrchestrationIntegrationParameterOutput) ToEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) EventOrchestrationIntegrationParameterOutput {
	return o
}

// Routing key that routes to this Orchestration.
func (o EventOrchestrationIntegrationParameterOutput) RoutingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationIntegrationParameter) *string { return v.RoutingKey }).(pulumi.StringPtrOutput)
}

// Type of the routing key. `global` is the default type.
func (o EventOrchestrationIntegrationParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationIntegrationParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EventOrchestrationIntegrationParameterArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationIntegrationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o EventOrchestrationIntegrationParameterArrayOutput) ToEventOrchestrationIntegrationParameterArrayOutput() EventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o EventOrchestrationIntegrationParameterArrayOutput) ToEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o EventOrchestrationIntegrationParameterArrayOutput) Index(i pulumi.IntInput) EventOrchestrationIntegrationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationIntegrationParameter {
		return vs[0].([]EventOrchestrationIntegrationParameter)[vs[1].(int)]
	}).(EventOrchestrationIntegrationParameterOutput)
}

type EventOrchestrationRouterCatchAll struct {
	// These are the actions that will be taken to change the resulting alert and incident.
	Actions EventOrchestrationRouterCatchAllActions `pulumi:"actions"`
}

// EventOrchestrationRouterCatchAllInput is an input type that accepts EventOrchestrationRouterCatchAllArgs and EventOrchestrationRouterCatchAllOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterCatchAllInput` via:
//
//	EventOrchestrationRouterCatchAllArgs{...}
type EventOrchestrationRouterCatchAllInput interface {
	pulumi.Input

	ToEventOrchestrationRouterCatchAllOutput() EventOrchestrationRouterCatchAllOutput
	ToEventOrchestrationRouterCatchAllOutputWithContext(context.Context) EventOrchestrationRouterCatchAllOutput
}

type EventOrchestrationRouterCatchAllArgs struct {
	// These are the actions that will be taken to change the resulting alert and incident.
	Actions EventOrchestrationRouterCatchAllActionsInput `pulumi:"actions"`
}

func (EventOrchestrationRouterCatchAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterCatchAll)(nil)).Elem()
}

func (i EventOrchestrationRouterCatchAllArgs) ToEventOrchestrationRouterCatchAllOutput() EventOrchestrationRouterCatchAllOutput {
	return i.ToEventOrchestrationRouterCatchAllOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterCatchAllArgs) ToEventOrchestrationRouterCatchAllOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllOutput)
}

func (i EventOrchestrationRouterCatchAllArgs) ToEventOrchestrationRouterCatchAllPtrOutput() EventOrchestrationRouterCatchAllPtrOutput {
	return i.ToEventOrchestrationRouterCatchAllPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterCatchAllArgs) ToEventOrchestrationRouterCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllOutput).ToEventOrchestrationRouterCatchAllPtrOutputWithContext(ctx)
}

// EventOrchestrationRouterCatchAllPtrInput is an input type that accepts EventOrchestrationRouterCatchAllArgs, EventOrchestrationRouterCatchAllPtr and EventOrchestrationRouterCatchAllPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterCatchAllPtrInput` via:
//
//	        EventOrchestrationRouterCatchAllArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationRouterCatchAllPtrInput interface {
	pulumi.Input

	ToEventOrchestrationRouterCatchAllPtrOutput() EventOrchestrationRouterCatchAllPtrOutput
	ToEventOrchestrationRouterCatchAllPtrOutputWithContext(context.Context) EventOrchestrationRouterCatchAllPtrOutput
}

type eventOrchestrationRouterCatchAllPtrType EventOrchestrationRouterCatchAllArgs

func EventOrchestrationRouterCatchAllPtr(v *EventOrchestrationRouterCatchAllArgs) EventOrchestrationRouterCatchAllPtrInput {
	return (*eventOrchestrationRouterCatchAllPtrType)(v)
}

func (*eventOrchestrationRouterCatchAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterCatchAll)(nil)).Elem()
}

func (i *eventOrchestrationRouterCatchAllPtrType) ToEventOrchestrationRouterCatchAllPtrOutput() EventOrchestrationRouterCatchAllPtrOutput {
	return i.ToEventOrchestrationRouterCatchAllPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationRouterCatchAllPtrType) ToEventOrchestrationRouterCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllPtrOutput)
}

type EventOrchestrationRouterCatchAllOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterCatchAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterCatchAll)(nil)).Elem()
}

func (o EventOrchestrationRouterCatchAllOutput) ToEventOrchestrationRouterCatchAllOutput() EventOrchestrationRouterCatchAllOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllOutput) ToEventOrchestrationRouterCatchAllOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllOutput) ToEventOrchestrationRouterCatchAllPtrOutput() EventOrchestrationRouterCatchAllPtrOutput {
	return o.ToEventOrchestrationRouterCatchAllPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationRouterCatchAllOutput) ToEventOrchestrationRouterCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationRouterCatchAll) *EventOrchestrationRouterCatchAll {
		return &v
	}).(EventOrchestrationRouterCatchAllPtrOutput)
}

// These are the actions that will be taken to change the resulting alert and incident.
func (o EventOrchestrationRouterCatchAllOutput) Actions() EventOrchestrationRouterCatchAllActionsOutput {
	return o.ApplyT(func(v EventOrchestrationRouterCatchAll) EventOrchestrationRouterCatchAllActions { return v.Actions }).(EventOrchestrationRouterCatchAllActionsOutput)
}

type EventOrchestrationRouterCatchAllPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterCatchAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterCatchAll)(nil)).Elem()
}

func (o EventOrchestrationRouterCatchAllPtrOutput) ToEventOrchestrationRouterCatchAllPtrOutput() EventOrchestrationRouterCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllPtrOutput) ToEventOrchestrationRouterCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllPtrOutput) Elem() EventOrchestrationRouterCatchAllOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterCatchAll) EventOrchestrationRouterCatchAll {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationRouterCatchAll
		return ret
	}).(EventOrchestrationRouterCatchAllOutput)
}

// These are the actions that will be taken to change the resulting alert and incident.
func (o EventOrchestrationRouterCatchAllPtrOutput) Actions() EventOrchestrationRouterCatchAllActionsPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterCatchAll) *EventOrchestrationRouterCatchAllActions {
		if v == nil {
			return nil
		}
		return &v.Actions
	}).(EventOrchestrationRouterCatchAllActionsPtrOutput)
}

type EventOrchestrationRouterCatchAllActions struct {
	// The ID of the target Service for the resulting alert.
	RouteTo string `pulumi:"routeTo"`
}

// EventOrchestrationRouterCatchAllActionsInput is an input type that accepts EventOrchestrationRouterCatchAllActionsArgs and EventOrchestrationRouterCatchAllActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterCatchAllActionsInput` via:
//
//	EventOrchestrationRouterCatchAllActionsArgs{...}
type EventOrchestrationRouterCatchAllActionsInput interface {
	pulumi.Input

	ToEventOrchestrationRouterCatchAllActionsOutput() EventOrchestrationRouterCatchAllActionsOutput
	ToEventOrchestrationRouterCatchAllActionsOutputWithContext(context.Context) EventOrchestrationRouterCatchAllActionsOutput
}

type EventOrchestrationRouterCatchAllActionsArgs struct {
	// The ID of the target Service for the resulting alert.
	RouteTo pulumi.StringInput `pulumi:"routeTo"`
}

func (EventOrchestrationRouterCatchAllActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterCatchAllActions)(nil)).Elem()
}

func (i EventOrchestrationRouterCatchAllActionsArgs) ToEventOrchestrationRouterCatchAllActionsOutput() EventOrchestrationRouterCatchAllActionsOutput {
	return i.ToEventOrchestrationRouterCatchAllActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterCatchAllActionsArgs) ToEventOrchestrationRouterCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllActionsOutput)
}

func (i EventOrchestrationRouterCatchAllActionsArgs) ToEventOrchestrationRouterCatchAllActionsPtrOutput() EventOrchestrationRouterCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterCatchAllActionsArgs) ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllActionsOutput).ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(ctx)
}

// EventOrchestrationRouterCatchAllActionsPtrInput is an input type that accepts EventOrchestrationRouterCatchAllActionsArgs, EventOrchestrationRouterCatchAllActionsPtr and EventOrchestrationRouterCatchAllActionsPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterCatchAllActionsPtrInput` via:
//
//	        EventOrchestrationRouterCatchAllActionsArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationRouterCatchAllActionsPtrInput interface {
	pulumi.Input

	ToEventOrchestrationRouterCatchAllActionsPtrOutput() EventOrchestrationRouterCatchAllActionsPtrOutput
	ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(context.Context) EventOrchestrationRouterCatchAllActionsPtrOutput
}

type eventOrchestrationRouterCatchAllActionsPtrType EventOrchestrationRouterCatchAllActionsArgs

func EventOrchestrationRouterCatchAllActionsPtr(v *EventOrchestrationRouterCatchAllActionsArgs) EventOrchestrationRouterCatchAllActionsPtrInput {
	return (*eventOrchestrationRouterCatchAllActionsPtrType)(v)
}

func (*eventOrchestrationRouterCatchAllActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterCatchAllActions)(nil)).Elem()
}

func (i *eventOrchestrationRouterCatchAllActionsPtrType) ToEventOrchestrationRouterCatchAllActionsPtrOutput() EventOrchestrationRouterCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationRouterCatchAllActionsPtrType) ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterCatchAllActionsPtrOutput)
}

type EventOrchestrationRouterCatchAllActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterCatchAllActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationRouterCatchAllActionsOutput) ToEventOrchestrationRouterCatchAllActionsOutput() EventOrchestrationRouterCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllActionsOutput) ToEventOrchestrationRouterCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllActionsOutput) ToEventOrchestrationRouterCatchAllActionsPtrOutput() EventOrchestrationRouterCatchAllActionsPtrOutput {
	return o.ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationRouterCatchAllActionsOutput) ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationRouterCatchAllActions) *EventOrchestrationRouterCatchAllActions {
		return &v
	}).(EventOrchestrationRouterCatchAllActionsPtrOutput)
}

// The ID of the target Service for the resulting alert.
func (o EventOrchestrationRouterCatchAllActionsOutput) RouteTo() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationRouterCatchAllActions) string { return v.RouteTo }).(pulumi.StringOutput)
}

type EventOrchestrationRouterCatchAllActionsPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterCatchAllActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationRouterCatchAllActionsPtrOutput) ToEventOrchestrationRouterCatchAllActionsPtrOutput() EventOrchestrationRouterCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllActionsPtrOutput) ToEventOrchestrationRouterCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationRouterCatchAllActionsPtrOutput) Elem() EventOrchestrationRouterCatchAllActionsOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterCatchAllActions) EventOrchestrationRouterCatchAllActions {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationRouterCatchAllActions
		return ret
	}).(EventOrchestrationRouterCatchAllActionsOutput)
}

// The ID of the target Service for the resulting alert.
func (o EventOrchestrationRouterCatchAllActionsPtrOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return &v.RouteTo
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationRouterSet struct {
	// ID of the `start` set. Router supports only one set and it's id has to be `start`
	Id    string                            `pulumi:"id"`
	Rules []EventOrchestrationRouterSetRule `pulumi:"rules"`
}

// EventOrchestrationRouterSetInput is an input type that accepts EventOrchestrationRouterSetArgs and EventOrchestrationRouterSetOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetInput` via:
//
//	EventOrchestrationRouterSetArgs{...}
type EventOrchestrationRouterSetInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetOutput() EventOrchestrationRouterSetOutput
	ToEventOrchestrationRouterSetOutputWithContext(context.Context) EventOrchestrationRouterSetOutput
}

type EventOrchestrationRouterSetArgs struct {
	// ID of the `start` set. Router supports only one set and it's id has to be `start`
	Id    pulumi.StringInput                        `pulumi:"id"`
	Rules EventOrchestrationRouterSetRuleArrayInput `pulumi:"rules"`
}

func (EventOrchestrationRouterSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSet)(nil)).Elem()
}

func (i EventOrchestrationRouterSetArgs) ToEventOrchestrationRouterSetOutput() EventOrchestrationRouterSetOutput {
	return i.ToEventOrchestrationRouterSetOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetArgs) ToEventOrchestrationRouterSetOutputWithContext(ctx context.Context) EventOrchestrationRouterSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetOutput)
}

func (i EventOrchestrationRouterSetArgs) ToEventOrchestrationRouterSetPtrOutput() EventOrchestrationRouterSetPtrOutput {
	return i.ToEventOrchestrationRouterSetPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetArgs) ToEventOrchestrationRouterSetPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetOutput).ToEventOrchestrationRouterSetPtrOutputWithContext(ctx)
}

// EventOrchestrationRouterSetPtrInput is an input type that accepts EventOrchestrationRouterSetArgs, EventOrchestrationRouterSetPtr and EventOrchestrationRouterSetPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetPtrInput` via:
//
//	        EventOrchestrationRouterSetArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationRouterSetPtrInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetPtrOutput() EventOrchestrationRouterSetPtrOutput
	ToEventOrchestrationRouterSetPtrOutputWithContext(context.Context) EventOrchestrationRouterSetPtrOutput
}

type eventOrchestrationRouterSetPtrType EventOrchestrationRouterSetArgs

func EventOrchestrationRouterSetPtr(v *EventOrchestrationRouterSetArgs) EventOrchestrationRouterSetPtrInput {
	return (*eventOrchestrationRouterSetPtrType)(v)
}

func (*eventOrchestrationRouterSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterSet)(nil)).Elem()
}

func (i *eventOrchestrationRouterSetPtrType) ToEventOrchestrationRouterSetPtrOutput() EventOrchestrationRouterSetPtrOutput {
	return i.ToEventOrchestrationRouterSetPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationRouterSetPtrType) ToEventOrchestrationRouterSetPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetPtrOutput)
}

type EventOrchestrationRouterSetOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSet)(nil)).Elem()
}

func (o EventOrchestrationRouterSetOutput) ToEventOrchestrationRouterSetOutput() EventOrchestrationRouterSetOutput {
	return o
}

func (o EventOrchestrationRouterSetOutput) ToEventOrchestrationRouterSetOutputWithContext(ctx context.Context) EventOrchestrationRouterSetOutput {
	return o
}

func (o EventOrchestrationRouterSetOutput) ToEventOrchestrationRouterSetPtrOutput() EventOrchestrationRouterSetPtrOutput {
	return o.ToEventOrchestrationRouterSetPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationRouterSetOutput) ToEventOrchestrationRouterSetPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationRouterSet) *EventOrchestrationRouterSet {
		return &v
	}).(EventOrchestrationRouterSetPtrOutput)
}

// ID of the `start` set. Router supports only one set and it's id has to be `start`
func (o EventOrchestrationRouterSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSet) string { return v.Id }).(pulumi.StringOutput)
}

func (o EventOrchestrationRouterSetOutput) Rules() EventOrchestrationRouterSetRuleArrayOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSet) []EventOrchestrationRouterSetRule { return v.Rules }).(EventOrchestrationRouterSetRuleArrayOutput)
}

type EventOrchestrationRouterSetPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationRouterSet)(nil)).Elem()
}

func (o EventOrchestrationRouterSetPtrOutput) ToEventOrchestrationRouterSetPtrOutput() EventOrchestrationRouterSetPtrOutput {
	return o
}

func (o EventOrchestrationRouterSetPtrOutput) ToEventOrchestrationRouterSetPtrOutputWithContext(ctx context.Context) EventOrchestrationRouterSetPtrOutput {
	return o
}

func (o EventOrchestrationRouterSetPtrOutput) Elem() EventOrchestrationRouterSetOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterSet) EventOrchestrationRouterSet {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationRouterSet
		return ret
	}).(EventOrchestrationRouterSetOutput)
}

// ID of the `start` set. Router supports only one set and it's id has to be `start`
func (o EventOrchestrationRouterSetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterSet) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o EventOrchestrationRouterSetPtrOutput) Rules() EventOrchestrationRouterSetRuleArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationRouterSet) []EventOrchestrationRouterSetRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(EventOrchestrationRouterSetRuleArrayOutput)
}

type EventOrchestrationRouterSetRule struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationRouterSetRuleActions `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.
	Conditions []EventOrchestrationRouterSetRuleCondition `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// ID of the `start` set. Router supports only one set and it's id has to be `start`
	Id *string `pulumi:"id"`
	// A description of this rule's purpose.
	Label *string `pulumi:"label"`
}

// EventOrchestrationRouterSetRuleInput is an input type that accepts EventOrchestrationRouterSetRuleArgs and EventOrchestrationRouterSetRuleOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetRuleInput` via:
//
//	EventOrchestrationRouterSetRuleArgs{...}
type EventOrchestrationRouterSetRuleInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetRuleOutput() EventOrchestrationRouterSetRuleOutput
	ToEventOrchestrationRouterSetRuleOutputWithContext(context.Context) EventOrchestrationRouterSetRuleOutput
}

type EventOrchestrationRouterSetRuleArgs struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationRouterSetRuleActionsInput `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.
	Conditions EventOrchestrationRouterSetRuleConditionArrayInput `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// ID of the `start` set. Router supports only one set and it's id has to be `start`
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A description of this rule's purpose.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (EventOrchestrationRouterSetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRule)(nil)).Elem()
}

func (i EventOrchestrationRouterSetRuleArgs) ToEventOrchestrationRouterSetRuleOutput() EventOrchestrationRouterSetRuleOutput {
	return i.ToEventOrchestrationRouterSetRuleOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetRuleArgs) ToEventOrchestrationRouterSetRuleOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetRuleOutput)
}

// EventOrchestrationRouterSetRuleArrayInput is an input type that accepts EventOrchestrationRouterSetRuleArray and EventOrchestrationRouterSetRuleArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetRuleArrayInput` via:
//
//	EventOrchestrationRouterSetRuleArray{ EventOrchestrationRouterSetRuleArgs{...} }
type EventOrchestrationRouterSetRuleArrayInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetRuleArrayOutput() EventOrchestrationRouterSetRuleArrayOutput
	ToEventOrchestrationRouterSetRuleArrayOutputWithContext(context.Context) EventOrchestrationRouterSetRuleArrayOutput
}

type EventOrchestrationRouterSetRuleArray []EventOrchestrationRouterSetRuleInput

func (EventOrchestrationRouterSetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationRouterSetRule)(nil)).Elem()
}

func (i EventOrchestrationRouterSetRuleArray) ToEventOrchestrationRouterSetRuleArrayOutput() EventOrchestrationRouterSetRuleArrayOutput {
	return i.ToEventOrchestrationRouterSetRuleArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetRuleArray) ToEventOrchestrationRouterSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetRuleArrayOutput)
}

type EventOrchestrationRouterSetRuleOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRule)(nil)).Elem()
}

func (o EventOrchestrationRouterSetRuleOutput) ToEventOrchestrationRouterSetRuleOutput() EventOrchestrationRouterSetRuleOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleOutput) ToEventOrchestrationRouterSetRuleOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleOutput {
	return o
}

// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
func (o EventOrchestrationRouterSetRuleOutput) Actions() EventOrchestrationRouterSetRuleActionsOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRule) EventOrchestrationRouterSetRuleActions { return v.Actions }).(EventOrchestrationRouterSetRuleActionsOutput)
}

// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.
func (o EventOrchestrationRouterSetRuleOutput) Conditions() EventOrchestrationRouterSetRuleConditionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRule) []EventOrchestrationRouterSetRuleCondition {
		return v.Conditions
	}).(EventOrchestrationRouterSetRuleConditionArrayOutput)
}

// Indicates whether the rule is disabled and would therefore not be evaluated.
func (o EventOrchestrationRouterSetRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// ID of the `start` set. Router supports only one set and it's id has to be `start`
func (o EventOrchestrationRouterSetRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A description of this rule's purpose.
func (o EventOrchestrationRouterSetRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type EventOrchestrationRouterSetRuleArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationRouterSetRule)(nil)).Elem()
}

func (o EventOrchestrationRouterSetRuleArrayOutput) ToEventOrchestrationRouterSetRuleArrayOutput() EventOrchestrationRouterSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleArrayOutput) ToEventOrchestrationRouterSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleArrayOutput) Index(i pulumi.IntInput) EventOrchestrationRouterSetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationRouterSetRule {
		return vs[0].([]EventOrchestrationRouterSetRule)[vs[1].(int)]
	}).(EventOrchestrationRouterSetRuleOutput)
}

type EventOrchestrationRouterSetRuleActions struct {
	// The ID of the target Service for the resulting alert.
	RouteTo string `pulumi:"routeTo"`
}

// EventOrchestrationRouterSetRuleActionsInput is an input type that accepts EventOrchestrationRouterSetRuleActionsArgs and EventOrchestrationRouterSetRuleActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetRuleActionsInput` via:
//
//	EventOrchestrationRouterSetRuleActionsArgs{...}
type EventOrchestrationRouterSetRuleActionsInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetRuleActionsOutput() EventOrchestrationRouterSetRuleActionsOutput
	ToEventOrchestrationRouterSetRuleActionsOutputWithContext(context.Context) EventOrchestrationRouterSetRuleActionsOutput
}

type EventOrchestrationRouterSetRuleActionsArgs struct {
	// The ID of the target Service for the resulting alert.
	RouteTo pulumi.StringInput `pulumi:"routeTo"`
}

func (EventOrchestrationRouterSetRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRuleActions)(nil)).Elem()
}

func (i EventOrchestrationRouterSetRuleActionsArgs) ToEventOrchestrationRouterSetRuleActionsOutput() EventOrchestrationRouterSetRuleActionsOutput {
	return i.ToEventOrchestrationRouterSetRuleActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetRuleActionsArgs) ToEventOrchestrationRouterSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetRuleActionsOutput)
}

type EventOrchestrationRouterSetRuleActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRuleActions)(nil)).Elem()
}

func (o EventOrchestrationRouterSetRuleActionsOutput) ToEventOrchestrationRouterSetRuleActionsOutput() EventOrchestrationRouterSetRuleActionsOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleActionsOutput) ToEventOrchestrationRouterSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleActionsOutput {
	return o
}

// The ID of the target Service for the resulting alert.
func (o EventOrchestrationRouterSetRuleActionsOutput) RouteTo() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRuleActions) string { return v.RouteTo }).(pulumi.StringOutput)
}

type EventOrchestrationRouterSetRuleCondition struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression string `pulumi:"expression"`
}

// EventOrchestrationRouterSetRuleConditionInput is an input type that accepts EventOrchestrationRouterSetRuleConditionArgs and EventOrchestrationRouterSetRuleConditionOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetRuleConditionInput` via:
//
//	EventOrchestrationRouterSetRuleConditionArgs{...}
type EventOrchestrationRouterSetRuleConditionInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetRuleConditionOutput() EventOrchestrationRouterSetRuleConditionOutput
	ToEventOrchestrationRouterSetRuleConditionOutputWithContext(context.Context) EventOrchestrationRouterSetRuleConditionOutput
}

type EventOrchestrationRouterSetRuleConditionArgs struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (EventOrchestrationRouterSetRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationRouterSetRuleConditionArgs) ToEventOrchestrationRouterSetRuleConditionOutput() EventOrchestrationRouterSetRuleConditionOutput {
	return i.ToEventOrchestrationRouterSetRuleConditionOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetRuleConditionArgs) ToEventOrchestrationRouterSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetRuleConditionOutput)
}

// EventOrchestrationRouterSetRuleConditionArrayInput is an input type that accepts EventOrchestrationRouterSetRuleConditionArray and EventOrchestrationRouterSetRuleConditionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationRouterSetRuleConditionArrayInput` via:
//
//	EventOrchestrationRouterSetRuleConditionArray{ EventOrchestrationRouterSetRuleConditionArgs{...} }
type EventOrchestrationRouterSetRuleConditionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationRouterSetRuleConditionArrayOutput() EventOrchestrationRouterSetRuleConditionArrayOutput
	ToEventOrchestrationRouterSetRuleConditionArrayOutputWithContext(context.Context) EventOrchestrationRouterSetRuleConditionArrayOutput
}

type EventOrchestrationRouterSetRuleConditionArray []EventOrchestrationRouterSetRuleConditionInput

func (EventOrchestrationRouterSetRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationRouterSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationRouterSetRuleConditionArray) ToEventOrchestrationRouterSetRuleConditionArrayOutput() EventOrchestrationRouterSetRuleConditionArrayOutput {
	return i.ToEventOrchestrationRouterSetRuleConditionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationRouterSetRuleConditionArray) ToEventOrchestrationRouterSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationRouterSetRuleConditionArrayOutput)
}

type EventOrchestrationRouterSetRuleConditionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationRouterSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationRouterSetRuleConditionOutput) ToEventOrchestrationRouterSetRuleConditionOutput() EventOrchestrationRouterSetRuleConditionOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleConditionOutput) ToEventOrchestrationRouterSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleConditionOutput {
	return o
}

// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
func (o EventOrchestrationRouterSetRuleConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationRouterSetRuleCondition) string { return v.Expression }).(pulumi.StringOutput)
}

type EventOrchestrationRouterSetRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationRouterSetRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationRouterSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationRouterSetRuleConditionArrayOutput) ToEventOrchestrationRouterSetRuleConditionArrayOutput() EventOrchestrationRouterSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleConditionArrayOutput) ToEventOrchestrationRouterSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationRouterSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationRouterSetRuleConditionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationRouterSetRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationRouterSetRuleCondition {
		return vs[0].([]EventOrchestrationRouterSetRuleCondition)[vs[1].(int)]
	}).(EventOrchestrationRouterSetRuleConditionOutput)
}

type EventOrchestrationServiceCatchAll struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationServiceCatchAllActions `pulumi:"actions"`
}

// EventOrchestrationServiceCatchAllInput is an input type that accepts EventOrchestrationServiceCatchAllArgs and EventOrchestrationServiceCatchAllOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllInput` via:
//
//	EventOrchestrationServiceCatchAllArgs{...}
type EventOrchestrationServiceCatchAllInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllOutput() EventOrchestrationServiceCatchAllOutput
	ToEventOrchestrationServiceCatchAllOutputWithContext(context.Context) EventOrchestrationServiceCatchAllOutput
}

type EventOrchestrationServiceCatchAllArgs struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationServiceCatchAllActionsInput `pulumi:"actions"`
}

func (EventOrchestrationServiceCatchAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAll)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllArgs) ToEventOrchestrationServiceCatchAllOutput() EventOrchestrationServiceCatchAllOutput {
	return i.ToEventOrchestrationServiceCatchAllOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllArgs) ToEventOrchestrationServiceCatchAllOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllOutput)
}

func (i EventOrchestrationServiceCatchAllArgs) ToEventOrchestrationServiceCatchAllPtrOutput() EventOrchestrationServiceCatchAllPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllArgs) ToEventOrchestrationServiceCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllOutput).ToEventOrchestrationServiceCatchAllPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceCatchAllPtrInput is an input type that accepts EventOrchestrationServiceCatchAllArgs, EventOrchestrationServiceCatchAllPtr and EventOrchestrationServiceCatchAllPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllPtrInput` via:
//
//	        EventOrchestrationServiceCatchAllArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceCatchAllPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllPtrOutput() EventOrchestrationServiceCatchAllPtrOutput
	ToEventOrchestrationServiceCatchAllPtrOutputWithContext(context.Context) EventOrchestrationServiceCatchAllPtrOutput
}

type eventOrchestrationServiceCatchAllPtrType EventOrchestrationServiceCatchAllArgs

func EventOrchestrationServiceCatchAllPtr(v *EventOrchestrationServiceCatchAllArgs) EventOrchestrationServiceCatchAllPtrInput {
	return (*eventOrchestrationServiceCatchAllPtrType)(v)
}

func (*eventOrchestrationServiceCatchAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAll)(nil)).Elem()
}

func (i *eventOrchestrationServiceCatchAllPtrType) ToEventOrchestrationServiceCatchAllPtrOutput() EventOrchestrationServiceCatchAllPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceCatchAllPtrType) ToEventOrchestrationServiceCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllPtrOutput)
}

type EventOrchestrationServiceCatchAllOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAll)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllOutput) ToEventOrchestrationServiceCatchAllOutput() EventOrchestrationServiceCatchAllOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllOutput) ToEventOrchestrationServiceCatchAllOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllOutput) ToEventOrchestrationServiceCatchAllPtrOutput() EventOrchestrationServiceCatchAllPtrOutput {
	return o.ToEventOrchestrationServiceCatchAllPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceCatchAllOutput) ToEventOrchestrationServiceCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceCatchAll) *EventOrchestrationServiceCatchAll {
		return &v
	}).(EventOrchestrationServiceCatchAllPtrOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationServiceCatchAllOutput) Actions() EventOrchestrationServiceCatchAllActionsOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAll) EventOrchestrationServiceCatchAllActions { return v.Actions }).(EventOrchestrationServiceCatchAllActionsOutput)
}

type EventOrchestrationServiceCatchAllPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAll)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllPtrOutput) ToEventOrchestrationServiceCatchAllPtrOutput() EventOrchestrationServiceCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllPtrOutput) ToEventOrchestrationServiceCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllPtrOutput) Elem() EventOrchestrationServiceCatchAllOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAll) EventOrchestrationServiceCatchAll {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceCatchAll
		return ret
	}).(EventOrchestrationServiceCatchAllOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationServiceCatchAllPtrOutput) Actions() EventOrchestrationServiceCatchAllActionsPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAll) *EventOrchestrationServiceCatchAllActions {
		if v == nil {
			return nil
		}
		return &v.Actions
	}).(EventOrchestrationServiceCatchAllActionsPtrOutput)
}

type EventOrchestrationServiceCatchAllActions struct {
	// Add this text as a note on the resulting incident.
	Annotate *string `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction *EventOrchestrationServiceCatchAllActionsAutomationAction `pulumi:"automationAction"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationServiceCatchAllActionsExtraction `pulumi:"extractions"`
	// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
	PagerdutyAutomationAction *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction `pulumi:"pagerdutyAutomationAction"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority *string `pulumi:"priority"`
	// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
	RouteTo *string `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress *bool `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend *int `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationServiceCatchAllActionsVariable `pulumi:"variables"`
}

// EventOrchestrationServiceCatchAllActionsInput is an input type that accepts EventOrchestrationServiceCatchAllActionsArgs and EventOrchestrationServiceCatchAllActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsInput` via:
//
//	EventOrchestrationServiceCatchAllActionsArgs{...}
type EventOrchestrationServiceCatchAllActionsInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsOutput() EventOrchestrationServiceCatchAllActionsOutput
	ToEventOrchestrationServiceCatchAllActionsOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsOutput
}

type EventOrchestrationServiceCatchAllActionsArgs struct {
	// Add this text as a note on the resulting incident.
	Annotate pulumi.StringPtrInput `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput `pulumi:"automationAction"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationServiceCatchAllActionsExtractionArrayInput `pulumi:"extractions"`
	// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
	PagerdutyAutomationAction EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput `pulumi:"pagerdutyAutomationAction"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
	RouteTo pulumi.StringPtrInput `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress pulumi.BoolPtrInput `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend pulumi.IntPtrInput `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationServiceCatchAllActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationServiceCatchAllActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActions)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsArgs) ToEventOrchestrationServiceCatchAllActionsOutput() EventOrchestrationServiceCatchAllActionsOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsArgs) ToEventOrchestrationServiceCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsOutput)
}

func (i EventOrchestrationServiceCatchAllActionsArgs) ToEventOrchestrationServiceCatchAllActionsPtrOutput() EventOrchestrationServiceCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsArgs) ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsOutput).ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceCatchAllActionsPtrInput is an input type that accepts EventOrchestrationServiceCatchAllActionsArgs, EventOrchestrationServiceCatchAllActionsPtr and EventOrchestrationServiceCatchAllActionsPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsPtrInput` via:
//
//	        EventOrchestrationServiceCatchAllActionsArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceCatchAllActionsPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsPtrOutput() EventOrchestrationServiceCatchAllActionsPtrOutput
	ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsPtrOutput
}

type eventOrchestrationServiceCatchAllActionsPtrType EventOrchestrationServiceCatchAllActionsArgs

func EventOrchestrationServiceCatchAllActionsPtr(v *EventOrchestrationServiceCatchAllActionsArgs) EventOrchestrationServiceCatchAllActionsPtrInput {
	return (*eventOrchestrationServiceCatchAllActionsPtrType)(v)
}

func (*eventOrchestrationServiceCatchAllActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActions)(nil)).Elem()
}

func (i *eventOrchestrationServiceCatchAllActionsPtrType) ToEventOrchestrationServiceCatchAllActionsPtrOutput() EventOrchestrationServiceCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceCatchAllActionsPtrType) ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsOutput) ToEventOrchestrationServiceCatchAllActionsOutput() EventOrchestrationServiceCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsOutput) ToEventOrchestrationServiceCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsOutput) ToEventOrchestrationServiceCatchAllActionsPtrOutput() EventOrchestrationServiceCatchAllActionsPtrOutput {
	return o.ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceCatchAllActionsOutput) ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceCatchAllActions) *EventOrchestrationServiceCatchAllActions {
		return &v
	}).(EventOrchestrationServiceCatchAllActionsPtrOutput)
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *string { return v.Annotate }).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsOutput) AutomationAction() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *EventOrchestrationServiceCatchAllActionsAutomationAction {
		return v.AutomationAction
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationServiceCatchAllActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationServiceCatchAllActionsOutput) Extractions() EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) []EventOrchestrationServiceCatchAllActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationServiceCatchAllActionsExtractionArrayOutput)
}

// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsOutput) PagerdutyAutomationAction() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
		return v.PagerdutyAutomationAction
	}).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationServiceCatchAllActionsOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationServiceCatchAllActionsOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *string { return v.RouteTo }).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationServiceCatchAllActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationServiceCatchAllActionsOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *bool { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationServiceCatchAllActionsOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) *int { return v.Suspend }).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationServiceCatchAllActionsOutput) Variables() EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActions) []EventOrchestrationServiceCatchAllActionsVariable {
		return v.Variables
	}).(EventOrchestrationServiceCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsPtrOutput) ToEventOrchestrationServiceCatchAllActionsPtrOutput() EventOrchestrationServiceCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPtrOutput) ToEventOrchestrationServiceCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Elem() EventOrchestrationServiceCatchAllActionsOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) EventOrchestrationServiceCatchAllActions {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceCatchAllActions
		return ret
	}).(EventOrchestrationServiceCatchAllActionsOutput)
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Annotate
	}).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) AutomationAction() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *EventOrchestrationServiceCatchAllActionsAutomationAction {
		if v == nil {
			return nil
		}
		return v.AutomationAction
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.EventAction
	}).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Extractions() EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) []EventOrchestrationServiceCatchAllActionsExtraction {
		if v == nil {
			return nil
		}
		return v.Extractions
	}).(EventOrchestrationServiceCatchAllActionsExtractionArrayOutput)
}

// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) PagerdutyAutomationAction() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
		if v == nil {
			return nil
		}
		return v.PagerdutyAutomationAction
	}).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.RouteTo
	}).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *bool {
		if v == nil {
			return nil
		}
		return v.Suppress
	}).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) *int {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationServiceCatchAllActionsPtrOutput) Variables() EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActions) []EventOrchestrationServiceCatchAllActionsVariable {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(EventOrchestrationServiceCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationAction struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend *bool `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers []EventOrchestrationServiceCatchAllActionsAutomationActionHeader `pulumi:"headers"`
	// The name of the variable
	Name string `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters []EventOrchestrationServiceCatchAllActionsAutomationActionParameter `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url string `pulumi:"url"`
}

// EventOrchestrationServiceCatchAllActionsAutomationActionInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionArgs and EventOrchestrationServiceCatchAllActionsAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionInput` via:
//
//	EventOrchestrationServiceCatchAllActionsAutomationActionArgs{...}
type EventOrchestrationServiceCatchAllActionsAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionOutput() EventOrchestrationServiceCatchAllActionsAutomationActionOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionOutput
}

type EventOrchestrationServiceCatchAllActionsAutomationActionArgs struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend pulumi.BoolPtrInput `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayInput `pulumi:"headers"`
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayInput `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventOrchestrationServiceCatchAllActionsAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionOutput() EventOrchestrationServiceCatchAllActionsAutomationActionOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionOutput)
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionOutput).ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionArgs, EventOrchestrationServiceCatchAllActionsAutomationActionPtr and EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput` via:
//
//	        EventOrchestrationServiceCatchAllActionsAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput
}

type eventOrchestrationServiceCatchAllActionsAutomationActionPtrType EventOrchestrationServiceCatchAllActionsAutomationActionArgs

func EventOrchestrationServiceCatchAllActionsAutomationActionPtr(v *EventOrchestrationServiceCatchAllActionsAutomationActionArgs) EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput {
	return (*eventOrchestrationServiceCatchAllActionsAutomationActionPtrType)(v)
}

func (*eventOrchestrationServiceCatchAllActionsAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActionsAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationServiceCatchAllActionsAutomationActionPtrType) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceCatchAllActionsAutomationActionPtrType) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionOutput() EventOrchestrationServiceCatchAllActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o.ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceCatchAllActionsAutomationAction) *EventOrchestrationServiceCatchAllActionsAutomationAction {
		return &v
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationAction) *bool { return v.AutoSend }).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) Headers() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationAction) []EventOrchestrationServiceCatchAllActionsAutomationActionHeader {
		return v.Headers
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationAction) string { return v.Name }).(pulumi.StringOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) Parameters() EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationAction) []EventOrchestrationServiceCatchAllActionsAutomationActionParameter {
		return v.Parameters
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationAction) string { return v.Url }).(pulumi.StringOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) Elem() EventOrchestrationServiceCatchAllActionsAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) EventOrchestrationServiceCatchAllActionsAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceCatchAllActionsAutomationAction
		return ret
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) *bool {
		if v == nil {
			return nil
		}
		return v.AutoSend
	}).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) Headers() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) []EventOrchestrationServiceCatchAllActionsAutomationActionHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) Parameters() EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) []EventOrchestrationServiceCatchAllActionsAutomationActionParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionHeader struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceCatchAllActionsAutomationActionHeaderInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs and EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionHeaderInput` via:
//
//	EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs{...}
type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput
}

type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput)
}

// EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray and EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayInput` via:
//
//	EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray{ EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs{...} }
type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput
}

type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray []EventOrchestrationServiceCatchAllActionsAutomationActionHeaderInput

func (EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationActionHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationActionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceCatchAllActionsAutomationActionHeader {
		return vs[0].([]EventOrchestrationServiceCatchAllActionsAutomationActionHeader)[vs[1].(int)]
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionParameter struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceCatchAllActionsAutomationActionParameterInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs and EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionParameterInput` via:
//
//	EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs{...}
type EventOrchestrationServiceCatchAllActionsAutomationActionParameterInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput
}

type EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput)
}

// EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayInput is an input type that accepts EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray and EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayInput` via:
//
//	EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray{ EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs{...} }
type EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput
	ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput
}

type EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray []EventOrchestrationServiceCatchAllActionsAutomationActionParameterInput

func (EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationActionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsAutomationActionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput) ToEventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceCatchAllActionsAutomationActionParameter {
		return vs[0].([]EventOrchestrationServiceCatchAllActionsAutomationActionParameter)[vs[1].(int)]
	}).(EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput)
}

type EventOrchestrationServiceCatchAllActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationServiceCatchAllActionsExtractionInput is an input type that accepts EventOrchestrationServiceCatchAllActionsExtractionArgs and EventOrchestrationServiceCatchAllActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsExtractionInput` via:
//
//	EventOrchestrationServiceCatchAllActionsExtractionArgs{...}
type EventOrchestrationServiceCatchAllActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsExtractionOutput() EventOrchestrationServiceCatchAllActionsExtractionOutput
	ToEventOrchestrationServiceCatchAllActionsExtractionOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsExtractionOutput
}

type EventOrchestrationServiceCatchAllActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationServiceCatchAllActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsExtractionArgs) ToEventOrchestrationServiceCatchAllActionsExtractionOutput() EventOrchestrationServiceCatchAllActionsExtractionOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsExtractionArgs) ToEventOrchestrationServiceCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsExtractionOutput)
}

// EventOrchestrationServiceCatchAllActionsExtractionArrayInput is an input type that accepts EventOrchestrationServiceCatchAllActionsExtractionArray and EventOrchestrationServiceCatchAllActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsExtractionArrayInput` via:
//
//	EventOrchestrationServiceCatchAllActionsExtractionArray{ EventOrchestrationServiceCatchAllActionsExtractionArgs{...} }
type EventOrchestrationServiceCatchAllActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutput() EventOrchestrationServiceCatchAllActionsExtractionArrayOutput
	ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsExtractionArrayOutput
}

type EventOrchestrationServiceCatchAllActionsExtractionArray []EventOrchestrationServiceCatchAllActionsExtractionInput

func (EventOrchestrationServiceCatchAllActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsExtractionArray) ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutput() EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsExtractionArray) ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsExtractionArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) ToEventOrchestrationServiceCatchAllActionsExtractionOutput() EventOrchestrationServiceCatchAllActionsExtractionOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) ToEventOrchestrationServiceCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationServiceCatchAllActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsExtractionArrayOutput) ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutput() EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsExtractionArrayOutput) ToEventOrchestrationServiceCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceCatchAllActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceCatchAllActionsExtraction {
		return vs[0].([]EventOrchestrationServiceCatchAllActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationServiceCatchAllActionsExtractionOutput)
}

type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction struct {
	// Id of the Process Automation action to be triggered.
	ActionId string `pulumi:"actionId"`
}

// EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionInput is an input type that accepts EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs and EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionInput` via:
//
//	EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs{...}
type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput
	ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput
}

type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs struct {
	// Id of the Process Automation action to be triggered.
	ActionId pulumi.StringInput `pulumi:"actionId"`
}

func (EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput)
}

func (i EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput).ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput is an input type that accepts EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs, EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtr and EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput` via:
//
//	        EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput
	ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput
}

type eventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrType EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs

func EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtr(v *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput {
	return (*eventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrType)(v)
}

func (*eventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrType) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrType) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o.ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction) *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
		return &v
	}).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput)
}

// Id of the Process Automation action to be triggered.
func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction) string { return v.ActionId }).(pulumi.StringOutput)
}

type EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput) ToEventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput) Elem() EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction) EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction
		return ret
	}).(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput)
}

// Id of the Process Automation action to be triggered.
func (o EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput) ActionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.ActionId
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceCatchAllActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceCatchAllActionsVariableInput is an input type that accepts EventOrchestrationServiceCatchAllActionsVariableArgs and EventOrchestrationServiceCatchAllActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsVariableInput` via:
//
//	EventOrchestrationServiceCatchAllActionsVariableArgs{...}
type EventOrchestrationServiceCatchAllActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsVariableOutput() EventOrchestrationServiceCatchAllActionsVariableOutput
	ToEventOrchestrationServiceCatchAllActionsVariableOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsVariableOutput
}

type EventOrchestrationServiceCatchAllActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceCatchAllActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsVariableArgs) ToEventOrchestrationServiceCatchAllActionsVariableOutput() EventOrchestrationServiceCatchAllActionsVariableOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsVariableArgs) ToEventOrchestrationServiceCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsVariableOutput)
}

// EventOrchestrationServiceCatchAllActionsVariableArrayInput is an input type that accepts EventOrchestrationServiceCatchAllActionsVariableArray and EventOrchestrationServiceCatchAllActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceCatchAllActionsVariableArrayInput` via:
//
//	EventOrchestrationServiceCatchAllActionsVariableArray{ EventOrchestrationServiceCatchAllActionsVariableArgs{...} }
type EventOrchestrationServiceCatchAllActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceCatchAllActionsVariableArrayOutput() EventOrchestrationServiceCatchAllActionsVariableArrayOutput
	ToEventOrchestrationServiceCatchAllActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationServiceCatchAllActionsVariableArrayOutput
}

type EventOrchestrationServiceCatchAllActionsVariableArray []EventOrchestrationServiceCatchAllActionsVariableInput

func (EventOrchestrationServiceCatchAllActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationServiceCatchAllActionsVariableArray) ToEventOrchestrationServiceCatchAllActionsVariableArrayOutput() EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return i.ToEventOrchestrationServiceCatchAllActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceCatchAllActionsVariableArray) ToEventOrchestrationServiceCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationServiceCatchAllActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsVariableOutput) ToEventOrchestrationServiceCatchAllActionsVariableOutput() EventOrchestrationServiceCatchAllActionsVariableOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsVariableOutput) ToEventOrchestrationServiceCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationServiceCatchAllActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
func (o EventOrchestrationServiceCatchAllActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationServiceCatchAllActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceCatchAllActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceCatchAllActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceCatchAllActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceCatchAllActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationServiceCatchAllActionsVariableArrayOutput) ToEventOrchestrationServiceCatchAllActionsVariableArrayOutput() EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsVariableArrayOutput) ToEventOrchestrationServiceCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationServiceCatchAllActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceCatchAllActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceCatchAllActionsVariable {
		return vs[0].([]EventOrchestrationServiceCatchAllActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationServiceCatchAllActionsVariableOutput)
}

type EventOrchestrationServiceSet struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    string                             `pulumi:"id"`
	Rules []EventOrchestrationServiceSetRule `pulumi:"rules"`
}

// EventOrchestrationServiceSetInput is an input type that accepts EventOrchestrationServiceSetArgs and EventOrchestrationServiceSetOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetInput` via:
//
//	EventOrchestrationServiceSetArgs{...}
type EventOrchestrationServiceSetInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetOutput() EventOrchestrationServiceSetOutput
	ToEventOrchestrationServiceSetOutputWithContext(context.Context) EventOrchestrationServiceSetOutput
}

type EventOrchestrationServiceSetArgs struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    pulumi.StringInput                         `pulumi:"id"`
	Rules EventOrchestrationServiceSetRuleArrayInput `pulumi:"rules"`
}

func (EventOrchestrationServiceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSet)(nil)).Elem()
}

func (i EventOrchestrationServiceSetArgs) ToEventOrchestrationServiceSetOutput() EventOrchestrationServiceSetOutput {
	return i.ToEventOrchestrationServiceSetOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetArgs) ToEventOrchestrationServiceSetOutputWithContext(ctx context.Context) EventOrchestrationServiceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetOutput)
}

// EventOrchestrationServiceSetArrayInput is an input type that accepts EventOrchestrationServiceSetArray and EventOrchestrationServiceSetArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetArrayInput` via:
//
//	EventOrchestrationServiceSetArray{ EventOrchestrationServiceSetArgs{...} }
type EventOrchestrationServiceSetArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetArrayOutput() EventOrchestrationServiceSetArrayOutput
	ToEventOrchestrationServiceSetArrayOutputWithContext(context.Context) EventOrchestrationServiceSetArrayOutput
}

type EventOrchestrationServiceSetArray []EventOrchestrationServiceSetInput

func (EventOrchestrationServiceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSet)(nil)).Elem()
}

func (i EventOrchestrationServiceSetArray) ToEventOrchestrationServiceSetArrayOutput() EventOrchestrationServiceSetArrayOutput {
	return i.ToEventOrchestrationServiceSetArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetArray) ToEventOrchestrationServiceSetArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetArrayOutput)
}

type EventOrchestrationServiceSetOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSet)(nil)).Elem()
}

func (o EventOrchestrationServiceSetOutput) ToEventOrchestrationServiceSetOutput() EventOrchestrationServiceSetOutput {
	return o
}

func (o EventOrchestrationServiceSetOutput) ToEventOrchestrationServiceSetOutputWithContext(ctx context.Context) EventOrchestrationServiceSetOutput {
	return o
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationServiceSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSet) string { return v.Id }).(pulumi.StringOutput)
}

func (o EventOrchestrationServiceSetOutput) Rules() EventOrchestrationServiceSetRuleArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSet) []EventOrchestrationServiceSetRule { return v.Rules }).(EventOrchestrationServiceSetRuleArrayOutput)
}

type EventOrchestrationServiceSetArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSet)(nil)).Elem()
}

func (o EventOrchestrationServiceSetArrayOutput) ToEventOrchestrationServiceSetArrayOutput() EventOrchestrationServiceSetArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetArrayOutput) ToEventOrchestrationServiceSetArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSet {
		return vs[0].([]EventOrchestrationServiceSet)[vs[1].(int)]
	}).(EventOrchestrationServiceSetOutput)
}

type EventOrchestrationServiceSetRule struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationServiceSetRuleActions `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions []EventOrchestrationServiceSetRuleCondition `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id *string `pulumi:"id"`
	// A description of this rule's purpose.
	Label *string `pulumi:"label"`
}

// EventOrchestrationServiceSetRuleInput is an input type that accepts EventOrchestrationServiceSetRuleArgs and EventOrchestrationServiceSetRuleOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleInput` via:
//
//	EventOrchestrationServiceSetRuleArgs{...}
type EventOrchestrationServiceSetRuleInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleOutput() EventOrchestrationServiceSetRuleOutput
	ToEventOrchestrationServiceSetRuleOutputWithContext(context.Context) EventOrchestrationServiceSetRuleOutput
}

type EventOrchestrationServiceSetRuleArgs struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationServiceSetRuleActionsInput `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions EventOrchestrationServiceSetRuleConditionArrayInput `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A description of this rule's purpose.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (EventOrchestrationServiceSetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRule)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleArgs) ToEventOrchestrationServiceSetRuleOutput() EventOrchestrationServiceSetRuleOutput {
	return i.ToEventOrchestrationServiceSetRuleOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleArgs) ToEventOrchestrationServiceSetRuleOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleOutput)
}

// EventOrchestrationServiceSetRuleArrayInput is an input type that accepts EventOrchestrationServiceSetRuleArray and EventOrchestrationServiceSetRuleArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleArrayInput` via:
//
//	EventOrchestrationServiceSetRuleArray{ EventOrchestrationServiceSetRuleArgs{...} }
type EventOrchestrationServiceSetRuleArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleArrayOutput() EventOrchestrationServiceSetRuleArrayOutput
	ToEventOrchestrationServiceSetRuleArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleArrayOutput
}

type EventOrchestrationServiceSetRuleArray []EventOrchestrationServiceSetRuleInput

func (EventOrchestrationServiceSetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRule)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleArray) ToEventOrchestrationServiceSetRuleArrayOutput() EventOrchestrationServiceSetRuleArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleArray) ToEventOrchestrationServiceSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleArrayOutput)
}

type EventOrchestrationServiceSetRuleOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRule)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleOutput) ToEventOrchestrationServiceSetRuleOutput() EventOrchestrationServiceSetRuleOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleOutput) ToEventOrchestrationServiceSetRuleOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleOutput {
	return o
}

// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
func (o EventOrchestrationServiceSetRuleOutput) Actions() EventOrchestrationServiceSetRuleActionsOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRule) EventOrchestrationServiceSetRuleActions { return v.Actions }).(EventOrchestrationServiceSetRuleActionsOutput)
}

// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
func (o EventOrchestrationServiceSetRuleOutput) Conditions() EventOrchestrationServiceSetRuleConditionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRule) []EventOrchestrationServiceSetRuleCondition {
		return v.Conditions
	}).(EventOrchestrationServiceSetRuleConditionArrayOutput)
}

// Indicates whether the rule is disabled and would therefore not be evaluated.
func (o EventOrchestrationServiceSetRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationServiceSetRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A description of this rule's purpose.
func (o EventOrchestrationServiceSetRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceSetRuleArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRule)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleArrayOutput) ToEventOrchestrationServiceSetRuleArrayOutput() EventOrchestrationServiceSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleArrayOutput) ToEventOrchestrationServiceSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRule {
		return vs[0].([]EventOrchestrationServiceSetRule)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleOutput)
}

type EventOrchestrationServiceSetRuleActions struct {
	// Add this text as a note on the resulting incident.
	Annotate *string `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction *EventOrchestrationServiceSetRuleActionsAutomationAction `pulumi:"automationAction"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationServiceSetRuleActionsExtraction `pulumi:"extractions"`
	// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
	PagerdutyAutomationAction *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction `pulumi:"pagerdutyAutomationAction"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority *string `pulumi:"priority"`
	// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
	RouteTo *string `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress *bool `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend *int `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationServiceSetRuleActionsVariable `pulumi:"variables"`
}

// EventOrchestrationServiceSetRuleActionsInput is an input type that accepts EventOrchestrationServiceSetRuleActionsArgs and EventOrchestrationServiceSetRuleActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsInput` via:
//
//	EventOrchestrationServiceSetRuleActionsArgs{...}
type EventOrchestrationServiceSetRuleActionsInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsOutput() EventOrchestrationServiceSetRuleActionsOutput
	ToEventOrchestrationServiceSetRuleActionsOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsOutput
}

type EventOrchestrationServiceSetRuleActionsArgs struct {
	// Add this text as a note on the resulting incident.
	Annotate pulumi.StringPtrInput `pulumi:"annotate"`
	// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
	AutomationAction EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput `pulumi:"automationAction"`
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationServiceSetRuleActionsExtractionArrayInput `pulumi:"extractions"`
	// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
	PagerdutyAutomationAction EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput `pulumi:"pagerdutyAutomationAction"`
	// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
	RouteTo pulumi.StringPtrInput `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
	Suppress pulumi.BoolPtrInput `pulumi:"suppress"`
	// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
	Suspend pulumi.IntPtrInput `pulumi:"suspend"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationServiceSetRuleActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationServiceSetRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActions)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsArgs) ToEventOrchestrationServiceSetRuleActionsOutput() EventOrchestrationServiceSetRuleActionsOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsArgs) ToEventOrchestrationServiceSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsOutput)
}

type EventOrchestrationServiceSetRuleActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActions)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsOutput) ToEventOrchestrationServiceSetRuleActionsOutput() EventOrchestrationServiceSetRuleActionsOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsOutput) ToEventOrchestrationServiceSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsOutput {
	return o
}

// Add this text as a note on the resulting incident.
func (o EventOrchestrationServiceSetRuleActionsOutput) Annotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *string { return v.Annotate }).(pulumi.StringPtrOutput)
}

// Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
func (o EventOrchestrationServiceSetRuleActionsOutput) AutomationAction() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *EventOrchestrationServiceSetRuleActionsAutomationAction {
		return v.AutomationAction
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationServiceSetRuleActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationServiceSetRuleActionsOutput) Extractions() EventOrchestrationServiceSetRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) []EventOrchestrationServiceSetRuleActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationServiceSetRuleActionsExtractionArrayOutput)
}

// Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
func (o EventOrchestrationServiceSetRuleActionsOutput) PagerdutyAutomationAction() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction {
		return v.PagerdutyAutomationAction
	}).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput)
}

// The ID of the priority you want to set on resulting incident. Consider using the `getPriority` data source.
func (o EventOrchestrationServiceSetRuleActionsOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationServiceSetRuleActionsOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *string { return v.RouteTo }).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationServiceSetRuleActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
func (o EventOrchestrationServiceSetRuleActionsOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *bool { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
func (o EventOrchestrationServiceSetRuleActionsOutput) Suspend() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) *int { return v.Suspend }).(pulumi.IntPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationServiceSetRuleActionsOutput) Variables() EventOrchestrationServiceSetRuleActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActions) []EventOrchestrationServiceSetRuleActionsVariable {
		return v.Variables
	}).(EventOrchestrationServiceSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationAction struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend *bool `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers []EventOrchestrationServiceSetRuleActionsAutomationActionHeader `pulumi:"headers"`
	// The name of the variable
	Name string `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters []EventOrchestrationServiceSetRuleActionsAutomationActionParameter `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url string `pulumi:"url"`
}

// EventOrchestrationServiceSetRuleActionsAutomationActionInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionArgs and EventOrchestrationServiceSetRuleActionsAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionInput` via:
//
//	EventOrchestrationServiceSetRuleActionsAutomationActionArgs{...}
type EventOrchestrationServiceSetRuleActionsAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionOutput() EventOrchestrationServiceSetRuleActionsAutomationActionOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionOutput
}

type EventOrchestrationServiceSetRuleActionsAutomationActionArgs struct {
	// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
	AutoSend pulumi.BoolPtrInput `pulumi:"autoSend"`
	// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
	Headers EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayInput `pulumi:"headers"`
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
	Parameters EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayInput `pulumi:"parameters"`
	// The API endpoint where PagerDuty's servers will send the webhook request.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventOrchestrationServiceSetRuleActionsAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionOutput() EventOrchestrationServiceSetRuleActionsAutomationActionOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionOutput)
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionOutput).ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionArgs, EventOrchestrationServiceSetRuleActionsAutomationActionPtr and EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput` via:
//
//	        EventOrchestrationServiceSetRuleActionsAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput
}

type eventOrchestrationServiceSetRuleActionsAutomationActionPtrType EventOrchestrationServiceSetRuleActionsAutomationActionArgs

func EventOrchestrationServiceSetRuleActionsAutomationActionPtr(v *EventOrchestrationServiceSetRuleActionsAutomationActionArgs) EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput {
	return (*eventOrchestrationServiceSetRuleActionsAutomationActionPtrType)(v)
}

func (*eventOrchestrationServiceSetRuleActionsAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceSetRuleActionsAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationServiceSetRuleActionsAutomationActionPtrType) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceSetRuleActionsAutomationActionPtrType) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionOutput() EventOrchestrationServiceSetRuleActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return o.ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceSetRuleActionsAutomationAction) *EventOrchestrationServiceSetRuleActionsAutomationAction {
		return &v
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationAction) *bool { return v.AutoSend }).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) Headers() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationAction) []EventOrchestrationServiceSetRuleActionsAutomationActionHeader {
		return v.Headers
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationAction) string { return v.Name }).(pulumi.StringOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) Parameters() EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationAction) []EventOrchestrationServiceSetRuleActionsAutomationActionParameter {
		return v.Parameters
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationAction) string { return v.Url }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceSetRuleActionsAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) Elem() EventOrchestrationServiceSetRuleActionsAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) EventOrchestrationServiceSetRuleActionsAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceSetRuleActionsAutomationAction
		return ret
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionOutput)
}

// When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) AutoSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) *bool {
		if v == nil {
			return nil
		}
		return v.AutoSend
	}).(pulumi.BoolPtrOutput)
}

// Specify custom key/value pairs that'll be sent with the webhook request as request headers.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) Headers() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) []EventOrchestrationServiceSetRuleActionsAutomationActionHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput)
}

// The name of the variable
func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) Parameters() EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) []EventOrchestrationServiceSetRuleActionsAutomationActionParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput)
}

// The API endpoint where PagerDuty's servers will send the webhook request.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionHeader struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceSetRuleActionsAutomationActionHeaderInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs and EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionHeaderInput` via:
//
//	EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs{...}
type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput
}

type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput)
}

// EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray and EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayInput` via:
//
//	EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray{ EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs{...} }
type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput
}

type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray []EventOrchestrationServiceSetRuleActionsAutomationActionHeaderInput

func (EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationActionHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationActionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsAutomationActionHeader)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRuleActionsAutomationActionHeader {
		return vs[0].([]EventOrchestrationServiceSetRuleActionsAutomationActionHeader)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionParameter struct {
	// Name to identify the parameter
	Key string `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceSetRuleActionsAutomationActionParameterInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs and EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionParameterInput` via:
//
//	EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs{...}
type EventOrchestrationServiceSetRuleActionsAutomationActionParameterInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput
}

type EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs struct {
	// Name to identify the parameter
	Key pulumi.StringInput `pulumi:"key"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput)
}

// EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayInput is an input type that accepts EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray and EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayInput` via:
//
//	EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray{ EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs{...} }
type EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput
	ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput
}

type EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray []EventOrchestrationServiceSetRuleActionsAutomationActionParameterInput

func (EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput {
	return o
}

// Name to identify the parameter
func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationActionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsAutomationActionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsAutomationActionParameter)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput() EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput) ToEventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRuleActionsAutomationActionParameter {
		return vs[0].([]EventOrchestrationServiceSetRuleActionsAutomationActionParameter)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput)
}

type EventOrchestrationServiceSetRuleActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationServiceSetRuleActionsExtractionInput is an input type that accepts EventOrchestrationServiceSetRuleActionsExtractionArgs and EventOrchestrationServiceSetRuleActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsExtractionInput` via:
//
//	EventOrchestrationServiceSetRuleActionsExtractionArgs{...}
type EventOrchestrationServiceSetRuleActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsExtractionOutput() EventOrchestrationServiceSetRuleActionsExtractionOutput
	ToEventOrchestrationServiceSetRuleActionsExtractionOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsExtractionOutput
}

type EventOrchestrationServiceSetRuleActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationServiceSetRuleActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsExtractionArgs) ToEventOrchestrationServiceSetRuleActionsExtractionOutput() EventOrchestrationServiceSetRuleActionsExtractionOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsExtractionArgs) ToEventOrchestrationServiceSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsExtractionOutput)
}

// EventOrchestrationServiceSetRuleActionsExtractionArrayInput is an input type that accepts EventOrchestrationServiceSetRuleActionsExtractionArray and EventOrchestrationServiceSetRuleActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsExtractionArrayInput` via:
//
//	EventOrchestrationServiceSetRuleActionsExtractionArray{ EventOrchestrationServiceSetRuleActionsExtractionArgs{...} }
type EventOrchestrationServiceSetRuleActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutput() EventOrchestrationServiceSetRuleActionsExtractionArrayOutput
	ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsExtractionArrayOutput
}

type EventOrchestrationServiceSetRuleActionsExtractionArray []EventOrchestrationServiceSetRuleActionsExtractionInput

func (EventOrchestrationServiceSetRuleActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsExtractionArray) ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutput() EventOrchestrationServiceSetRuleActionsExtractionArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsExtractionArray) ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsExtractionArrayOutput)
}

type EventOrchestrationServiceSetRuleActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) ToEventOrchestrationServiceSetRuleActionsExtractionOutput() EventOrchestrationServiceSetRuleActionsExtractionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) ToEventOrchestrationServiceSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationServiceSetRuleActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceSetRuleActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsExtractionArrayOutput) ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutput() EventOrchestrationServiceSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsExtractionArrayOutput) ToEventOrchestrationServiceSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRuleActionsExtraction {
		return vs[0].([]EventOrchestrationServiceSetRuleActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleActionsExtractionOutput)
}

type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction struct {
	// Id of the Process Automation action to be triggered.
	ActionId string `pulumi:"actionId"`
}

// EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionInput is an input type that accepts EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs and EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionInput` via:
//
//	EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs{...}
type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput
	ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput
}

type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs struct {
	// Id of the Process Automation action to be triggered.
	ActionId pulumi.StringInput `pulumi:"actionId"`
}

func (EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput)
}

func (i EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput).ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(ctx)
}

// EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput is an input type that accepts EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs, EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtr and EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput` via:
//
//	        EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput
	ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput
}

type eventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrType EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs

func EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtr(v *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput {
	return (*eventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrType)(v)
}

func (*eventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (i *eventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrType) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrType) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput)
}

type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return o.ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction) *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction {
		return &v
	}).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput)
}

// Id of the Process Automation action to be triggered.
func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction) string { return v.ActionId }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput) ToEventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput) Elem() EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction) EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction
		return ret
	}).(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput)
}

// Id of the Process Automation action to be triggered.
func (o EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput) ActionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction) *string {
		if v == nil {
			return nil
		}
		return &v.ActionId
	}).(pulumi.StringPtrOutput)
}

type EventOrchestrationServiceSetRuleActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationServiceSetRuleActionsVariableInput is an input type that accepts EventOrchestrationServiceSetRuleActionsVariableArgs and EventOrchestrationServiceSetRuleActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsVariableInput` via:
//
//	EventOrchestrationServiceSetRuleActionsVariableArgs{...}
type EventOrchestrationServiceSetRuleActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsVariableOutput() EventOrchestrationServiceSetRuleActionsVariableOutput
	ToEventOrchestrationServiceSetRuleActionsVariableOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsVariableOutput
}

type EventOrchestrationServiceSetRuleActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationServiceSetRuleActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsVariableArgs) ToEventOrchestrationServiceSetRuleActionsVariableOutput() EventOrchestrationServiceSetRuleActionsVariableOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsVariableArgs) ToEventOrchestrationServiceSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsVariableOutput)
}

// EventOrchestrationServiceSetRuleActionsVariableArrayInput is an input type that accepts EventOrchestrationServiceSetRuleActionsVariableArray and EventOrchestrationServiceSetRuleActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleActionsVariableArrayInput` via:
//
//	EventOrchestrationServiceSetRuleActionsVariableArray{ EventOrchestrationServiceSetRuleActionsVariableArgs{...} }
type EventOrchestrationServiceSetRuleActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleActionsVariableArrayOutput() EventOrchestrationServiceSetRuleActionsVariableArrayOutput
	ToEventOrchestrationServiceSetRuleActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleActionsVariableArrayOutput
}

type EventOrchestrationServiceSetRuleActionsVariableArray []EventOrchestrationServiceSetRuleActionsVariableInput

func (EventOrchestrationServiceSetRuleActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleActionsVariableArray) ToEventOrchestrationServiceSetRuleActionsVariableArrayOutput() EventOrchestrationServiceSetRuleActionsVariableArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleActionsVariableArray) ToEventOrchestrationServiceSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationServiceSetRuleActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsVariableOutput) ToEventOrchestrationServiceSetRuleActionsVariableOutput() EventOrchestrationServiceSetRuleActionsVariableOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsVariableOutput) ToEventOrchestrationServiceSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationServiceSetRuleActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
func (o EventOrchestrationServiceSetRuleActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationServiceSetRuleActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationServiceSetRuleActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleActionsVariableArrayOutput) ToEventOrchestrationServiceSetRuleActionsVariableArrayOutput() EventOrchestrationServiceSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsVariableArrayOutput) ToEventOrchestrationServiceSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRuleActionsVariable {
		return vs[0].([]EventOrchestrationServiceSetRuleActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleActionsVariableOutput)
}

type EventOrchestrationServiceSetRuleCondition struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression string `pulumi:"expression"`
}

// EventOrchestrationServiceSetRuleConditionInput is an input type that accepts EventOrchestrationServiceSetRuleConditionArgs and EventOrchestrationServiceSetRuleConditionOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleConditionInput` via:
//
//	EventOrchestrationServiceSetRuleConditionArgs{...}
type EventOrchestrationServiceSetRuleConditionInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleConditionOutput() EventOrchestrationServiceSetRuleConditionOutput
	ToEventOrchestrationServiceSetRuleConditionOutputWithContext(context.Context) EventOrchestrationServiceSetRuleConditionOutput
}

type EventOrchestrationServiceSetRuleConditionArgs struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (EventOrchestrationServiceSetRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleConditionArgs) ToEventOrchestrationServiceSetRuleConditionOutput() EventOrchestrationServiceSetRuleConditionOutput {
	return i.ToEventOrchestrationServiceSetRuleConditionOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleConditionArgs) ToEventOrchestrationServiceSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleConditionOutput)
}

// EventOrchestrationServiceSetRuleConditionArrayInput is an input type that accepts EventOrchestrationServiceSetRuleConditionArray and EventOrchestrationServiceSetRuleConditionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationServiceSetRuleConditionArrayInput` via:
//
//	EventOrchestrationServiceSetRuleConditionArray{ EventOrchestrationServiceSetRuleConditionArgs{...} }
type EventOrchestrationServiceSetRuleConditionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationServiceSetRuleConditionArrayOutput() EventOrchestrationServiceSetRuleConditionArrayOutput
	ToEventOrchestrationServiceSetRuleConditionArrayOutputWithContext(context.Context) EventOrchestrationServiceSetRuleConditionArrayOutput
}

type EventOrchestrationServiceSetRuleConditionArray []EventOrchestrationServiceSetRuleConditionInput

func (EventOrchestrationServiceSetRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationServiceSetRuleConditionArray) ToEventOrchestrationServiceSetRuleConditionArrayOutput() EventOrchestrationServiceSetRuleConditionArrayOutput {
	return i.ToEventOrchestrationServiceSetRuleConditionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationServiceSetRuleConditionArray) ToEventOrchestrationServiceSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationServiceSetRuleConditionArrayOutput)
}

type EventOrchestrationServiceSetRuleConditionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationServiceSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleConditionOutput) ToEventOrchestrationServiceSetRuleConditionOutput() EventOrchestrationServiceSetRuleConditionOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleConditionOutput) ToEventOrchestrationServiceSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleConditionOutput {
	return o
}

// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
func (o EventOrchestrationServiceSetRuleConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationServiceSetRuleCondition) string { return v.Expression }).(pulumi.StringOutput)
}

type EventOrchestrationServiceSetRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationServiceSetRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationServiceSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationServiceSetRuleConditionArrayOutput) ToEventOrchestrationServiceSetRuleConditionArrayOutput() EventOrchestrationServiceSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleConditionArrayOutput) ToEventOrchestrationServiceSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationServiceSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationServiceSetRuleConditionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationServiceSetRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationServiceSetRuleCondition {
		return vs[0].([]EventOrchestrationServiceSetRuleCondition)[vs[1].(int)]
	}).(EventOrchestrationServiceSetRuleConditionOutput)
}

type EventOrchestrationUnroutedCatchAll struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationUnroutedCatchAllActions `pulumi:"actions"`
}

// EventOrchestrationUnroutedCatchAllInput is an input type that accepts EventOrchestrationUnroutedCatchAllArgs and EventOrchestrationUnroutedCatchAllOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllInput` via:
//
//	EventOrchestrationUnroutedCatchAllArgs{...}
type EventOrchestrationUnroutedCatchAllInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllOutput() EventOrchestrationUnroutedCatchAllOutput
	ToEventOrchestrationUnroutedCatchAllOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllOutput
}

type EventOrchestrationUnroutedCatchAllArgs struct {
	// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
	Actions EventOrchestrationUnroutedCatchAllActionsInput `pulumi:"actions"`
}

func (EventOrchestrationUnroutedCatchAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAll)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllArgs) ToEventOrchestrationUnroutedCatchAllOutput() EventOrchestrationUnroutedCatchAllOutput {
	return i.ToEventOrchestrationUnroutedCatchAllOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllArgs) ToEventOrchestrationUnroutedCatchAllOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllOutput)
}

func (i EventOrchestrationUnroutedCatchAllArgs) ToEventOrchestrationUnroutedCatchAllPtrOutput() EventOrchestrationUnroutedCatchAllPtrOutput {
	return i.ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllArgs) ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllOutput).ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(ctx)
}

// EventOrchestrationUnroutedCatchAllPtrInput is an input type that accepts EventOrchestrationUnroutedCatchAllArgs, EventOrchestrationUnroutedCatchAllPtr and EventOrchestrationUnroutedCatchAllPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllPtrInput` via:
//
//	        EventOrchestrationUnroutedCatchAllArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationUnroutedCatchAllPtrInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllPtrOutput() EventOrchestrationUnroutedCatchAllPtrOutput
	ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllPtrOutput
}

type eventOrchestrationUnroutedCatchAllPtrType EventOrchestrationUnroutedCatchAllArgs

func EventOrchestrationUnroutedCatchAllPtr(v *EventOrchestrationUnroutedCatchAllArgs) EventOrchestrationUnroutedCatchAllPtrInput {
	return (*eventOrchestrationUnroutedCatchAllPtrType)(v)
}

func (*eventOrchestrationUnroutedCatchAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationUnroutedCatchAll)(nil)).Elem()
}

func (i *eventOrchestrationUnroutedCatchAllPtrType) ToEventOrchestrationUnroutedCatchAllPtrOutput() EventOrchestrationUnroutedCatchAllPtrOutput {
	return i.ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationUnroutedCatchAllPtrType) ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllPtrOutput)
}

type EventOrchestrationUnroutedCatchAllOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAll)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllOutput) ToEventOrchestrationUnroutedCatchAllOutput() EventOrchestrationUnroutedCatchAllOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllOutput) ToEventOrchestrationUnroutedCatchAllOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllOutput) ToEventOrchestrationUnroutedCatchAllPtrOutput() EventOrchestrationUnroutedCatchAllPtrOutput {
	return o.ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationUnroutedCatchAllOutput) ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationUnroutedCatchAll) *EventOrchestrationUnroutedCatchAll {
		return &v
	}).(EventOrchestrationUnroutedCatchAllPtrOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationUnroutedCatchAllOutput) Actions() EventOrchestrationUnroutedCatchAllActionsOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAll) EventOrchestrationUnroutedCatchAllActions { return v.Actions }).(EventOrchestrationUnroutedCatchAllActionsOutput)
}

type EventOrchestrationUnroutedCatchAllPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationUnroutedCatchAll)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllPtrOutput) ToEventOrchestrationUnroutedCatchAllPtrOutput() EventOrchestrationUnroutedCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllPtrOutput) ToEventOrchestrationUnroutedCatchAllPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllPtrOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllPtrOutput) Elem() EventOrchestrationUnroutedCatchAllOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAll) EventOrchestrationUnroutedCatchAll {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationUnroutedCatchAll
		return ret
	}).(EventOrchestrationUnroutedCatchAllOutput)
}

// These are the actions that will be taken to change the resulting alert and incident. `catchAll` supports all actions described above for `rule` _except_ `routeTo` action.
func (o EventOrchestrationUnroutedCatchAllPtrOutput) Actions() EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAll) *EventOrchestrationUnroutedCatchAllActions {
		if v == nil {
			return nil
		}
		return &v.Actions
	}).(EventOrchestrationUnroutedCatchAllActionsPtrOutput)
}

type EventOrchestrationUnroutedCatchAllActions struct {
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationUnroutedCatchAllActionsExtraction `pulumi:"extractions"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	Suppress *bool   `pulumi:"suppress"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationUnroutedCatchAllActionsVariable `pulumi:"variables"`
}

// EventOrchestrationUnroutedCatchAllActionsInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsArgs and EventOrchestrationUnroutedCatchAllActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsInput` via:
//
//	EventOrchestrationUnroutedCatchAllActionsArgs{...}
type EventOrchestrationUnroutedCatchAllActionsInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsOutput() EventOrchestrationUnroutedCatchAllActionsOutput
	ToEventOrchestrationUnroutedCatchAllActionsOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsOutput
}

type EventOrchestrationUnroutedCatchAllActionsArgs struct {
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationUnroutedCatchAllActionsExtractionArrayInput `pulumi:"extractions"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	Suppress pulumi.BoolPtrInput   `pulumi:"suppress"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationUnroutedCatchAllActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationUnroutedCatchAllActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActions)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllActionsArgs) ToEventOrchestrationUnroutedCatchAllActionsOutput() EventOrchestrationUnroutedCatchAllActionsOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsArgs) ToEventOrchestrationUnroutedCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsOutput)
}

func (i EventOrchestrationUnroutedCatchAllActionsArgs) ToEventOrchestrationUnroutedCatchAllActionsPtrOutput() EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsArgs) ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsOutput).ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(ctx)
}

// EventOrchestrationUnroutedCatchAllActionsPtrInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsArgs, EventOrchestrationUnroutedCatchAllActionsPtr and EventOrchestrationUnroutedCatchAllActionsPtrOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsPtrInput` via:
//
//	        EventOrchestrationUnroutedCatchAllActionsArgs{...}
//
//	or:
//
//	        nil
type EventOrchestrationUnroutedCatchAllActionsPtrInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsPtrOutput() EventOrchestrationUnroutedCatchAllActionsPtrOutput
	ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsPtrOutput
}

type eventOrchestrationUnroutedCatchAllActionsPtrType EventOrchestrationUnroutedCatchAllActionsArgs

func EventOrchestrationUnroutedCatchAllActionsPtr(v *EventOrchestrationUnroutedCatchAllActionsArgs) EventOrchestrationUnroutedCatchAllActionsPtrInput {
	return (*eventOrchestrationUnroutedCatchAllActionsPtrType)(v)
}

func (*eventOrchestrationUnroutedCatchAllActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationUnroutedCatchAllActions)(nil)).Elem()
}

func (i *eventOrchestrationUnroutedCatchAllActionsPtrType) ToEventOrchestrationUnroutedCatchAllActionsPtrOutput() EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(context.Background())
}

func (i *eventOrchestrationUnroutedCatchAllActionsPtrType) ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsPtrOutput)
}

type EventOrchestrationUnroutedCatchAllActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsOutput) ToEventOrchestrationUnroutedCatchAllActionsOutput() EventOrchestrationUnroutedCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsOutput) ToEventOrchestrationUnroutedCatchAllActionsOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsOutput) ToEventOrchestrationUnroutedCatchAllActionsPtrOutput() EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return o.ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(context.Background())
}

func (o EventOrchestrationUnroutedCatchAllActionsOutput) ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventOrchestrationUnroutedCatchAllActions) *EventOrchestrationUnroutedCatchAllActions {
		return &v
	}).(EventOrchestrationUnroutedCatchAllActionsPtrOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationUnroutedCatchAllActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationUnroutedCatchAllActionsOutput) Extractions() EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActions) []EventOrchestrationUnroutedCatchAllActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationUnroutedCatchAllActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

func (o EventOrchestrationUnroutedCatchAllActionsOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActions) *bool { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationUnroutedCatchAllActionsOutput) Variables() EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActions) []EventOrchestrationUnroutedCatchAllActionsVariable {
		return v.Variables
	}).(EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationUnroutedCatchAllActionsPtrOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventOrchestrationUnroutedCatchAllActions)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) ToEventOrchestrationUnroutedCatchAllActionsPtrOutput() EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) ToEventOrchestrationUnroutedCatchAllActionsPtrOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsPtrOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) Elem() EventOrchestrationUnroutedCatchAllActionsOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) EventOrchestrationUnroutedCatchAllActions {
		if v != nil {
			return *v
		}
		var ret EventOrchestrationUnroutedCatchAllActions
		return ret
	}).(EventOrchestrationUnroutedCatchAllActionsOutput)
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.EventAction
	}).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) Extractions() EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) []EventOrchestrationUnroutedCatchAllActionsExtraction {
		if v == nil {
			return nil
		}
		return v.Extractions
	}).(EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) *bool {
		if v == nil {
			return nil
		}
		return v.Suppress
	}).(pulumi.BoolPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationUnroutedCatchAllActionsPtrOutput) Variables() EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return o.ApplyT(func(v *EventOrchestrationUnroutedCatchAllActions) []EventOrchestrationUnroutedCatchAllActionsVariable {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationUnroutedCatchAllActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationUnroutedCatchAllActionsExtractionInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsExtractionArgs and EventOrchestrationUnroutedCatchAllActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsExtractionInput` via:
//
//	EventOrchestrationUnroutedCatchAllActionsExtractionArgs{...}
type EventOrchestrationUnroutedCatchAllActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsExtractionOutput() EventOrchestrationUnroutedCatchAllActionsExtractionOutput
	ToEventOrchestrationUnroutedCatchAllActionsExtractionOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionOutput
}

type EventOrchestrationUnroutedCatchAllActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationUnroutedCatchAllActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllActionsExtractionArgs) ToEventOrchestrationUnroutedCatchAllActionsExtractionOutput() EventOrchestrationUnroutedCatchAllActionsExtractionOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsExtractionArgs) ToEventOrchestrationUnroutedCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsExtractionOutput)
}

// EventOrchestrationUnroutedCatchAllActionsExtractionArrayInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsExtractionArray and EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsExtractionArrayInput` via:
//
//	EventOrchestrationUnroutedCatchAllActionsExtractionArray{ EventOrchestrationUnroutedCatchAllActionsExtractionArgs{...} }
type EventOrchestrationUnroutedCatchAllActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput() EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput
	ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput
}

type EventOrchestrationUnroutedCatchAllActionsExtractionArray []EventOrchestrationUnroutedCatchAllActionsExtractionInput

func (EventOrchestrationUnroutedCatchAllActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedCatchAllActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllActionsExtractionArray) ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput() EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsExtractionArray) ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput)
}

type EventOrchestrationUnroutedCatchAllActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) ToEventOrchestrationUnroutedCatchAllActionsExtractionOutput() EventOrchestrationUnroutedCatchAllActionsExtractionOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) ToEventOrchestrationUnroutedCatchAllActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationUnroutedCatchAllActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedCatchAllActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput) ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput() EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput) ToEventOrchestrationUnroutedCatchAllActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedCatchAllActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedCatchAllActionsExtraction {
		return vs[0].([]EventOrchestrationUnroutedCatchAllActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationUnroutedCatchAllActionsExtractionOutput)
}

type EventOrchestrationUnroutedCatchAllActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationUnroutedCatchAllActionsVariableInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsVariableArgs and EventOrchestrationUnroutedCatchAllActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsVariableInput` via:
//
//	EventOrchestrationUnroutedCatchAllActionsVariableArgs{...}
type EventOrchestrationUnroutedCatchAllActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsVariableOutput() EventOrchestrationUnroutedCatchAllActionsVariableOutput
	ToEventOrchestrationUnroutedCatchAllActionsVariableOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsVariableOutput
}

type EventOrchestrationUnroutedCatchAllActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationUnroutedCatchAllActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllActionsVariableArgs) ToEventOrchestrationUnroutedCatchAllActionsVariableOutput() EventOrchestrationUnroutedCatchAllActionsVariableOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsVariableArgs) ToEventOrchestrationUnroutedCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsVariableOutput)
}

// EventOrchestrationUnroutedCatchAllActionsVariableArrayInput is an input type that accepts EventOrchestrationUnroutedCatchAllActionsVariableArray and EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedCatchAllActionsVariableArrayInput` via:
//
//	EventOrchestrationUnroutedCatchAllActionsVariableArray{ EventOrchestrationUnroutedCatchAllActionsVariableArgs{...} }
type EventOrchestrationUnroutedCatchAllActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutput() EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput
	ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput
}

type EventOrchestrationUnroutedCatchAllActionsVariableArray []EventOrchestrationUnroutedCatchAllActionsVariableInput

func (EventOrchestrationUnroutedCatchAllActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedCatchAllActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationUnroutedCatchAllActionsVariableArray) ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutput() EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return i.ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedCatchAllActionsVariableArray) ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput)
}

type EventOrchestrationUnroutedCatchAllActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) ToEventOrchestrationUnroutedCatchAllActionsVariableOutput() EventOrchestrationUnroutedCatchAllActionsVariableOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) ToEventOrchestrationUnroutedCatchAllActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationUnroutedCatchAllActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedCatchAllActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedCatchAllActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput) ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutput() EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput) ToEventOrchestrationUnroutedCatchAllActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedCatchAllActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedCatchAllActionsVariable {
		return vs[0].([]EventOrchestrationUnroutedCatchAllActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationUnroutedCatchAllActionsVariableOutput)
}

type EventOrchestrationUnroutedSet struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    string                              `pulumi:"id"`
	Rules []EventOrchestrationUnroutedSetRule `pulumi:"rules"`
}

// EventOrchestrationUnroutedSetInput is an input type that accepts EventOrchestrationUnroutedSetArgs and EventOrchestrationUnroutedSetOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetInput` via:
//
//	EventOrchestrationUnroutedSetArgs{...}
type EventOrchestrationUnroutedSetInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetOutput() EventOrchestrationUnroutedSetOutput
	ToEventOrchestrationUnroutedSetOutputWithContext(context.Context) EventOrchestrationUnroutedSetOutput
}

type EventOrchestrationUnroutedSetArgs struct {
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id    pulumi.StringInput                          `pulumi:"id"`
	Rules EventOrchestrationUnroutedSetRuleArrayInput `pulumi:"rules"`
}

func (EventOrchestrationUnroutedSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSet)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetArgs) ToEventOrchestrationUnroutedSetOutput() EventOrchestrationUnroutedSetOutput {
	return i.ToEventOrchestrationUnroutedSetOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetArgs) ToEventOrchestrationUnroutedSetOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetOutput)
}

// EventOrchestrationUnroutedSetArrayInput is an input type that accepts EventOrchestrationUnroutedSetArray and EventOrchestrationUnroutedSetArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetArrayInput` via:
//
//	EventOrchestrationUnroutedSetArray{ EventOrchestrationUnroutedSetArgs{...} }
type EventOrchestrationUnroutedSetArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetArrayOutput() EventOrchestrationUnroutedSetArrayOutput
	ToEventOrchestrationUnroutedSetArrayOutputWithContext(context.Context) EventOrchestrationUnroutedSetArrayOutput
}

type EventOrchestrationUnroutedSetArray []EventOrchestrationUnroutedSetInput

func (EventOrchestrationUnroutedSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSet)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetArray) ToEventOrchestrationUnroutedSetArrayOutput() EventOrchestrationUnroutedSetArrayOutput {
	return i.ToEventOrchestrationUnroutedSetArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetArray) ToEventOrchestrationUnroutedSetArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetArrayOutput)
}

type EventOrchestrationUnroutedSetOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSet)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetOutput) ToEventOrchestrationUnroutedSetOutput() EventOrchestrationUnroutedSetOutput {
	return o
}

func (o EventOrchestrationUnroutedSetOutput) ToEventOrchestrationUnroutedSetOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetOutput {
	return o
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationUnroutedSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSet) string { return v.Id }).(pulumi.StringOutput)
}

func (o EventOrchestrationUnroutedSetOutput) Rules() EventOrchestrationUnroutedSetRuleArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSet) []EventOrchestrationUnroutedSetRule { return v.Rules }).(EventOrchestrationUnroutedSetRuleArrayOutput)
}

type EventOrchestrationUnroutedSetArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSet)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetArrayOutput) ToEventOrchestrationUnroutedSetArrayOutput() EventOrchestrationUnroutedSetArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetArrayOutput) ToEventOrchestrationUnroutedSetArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedSet {
		return vs[0].([]EventOrchestrationUnroutedSet)[vs[1].(int)]
	}).(EventOrchestrationUnroutedSetOutput)
}

type EventOrchestrationUnroutedSetRule struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationUnroutedSetRuleActions `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions []EventOrchestrationUnroutedSetRuleCondition `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled *bool `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id *string `pulumi:"id"`
	// A description of this rule's purpose.
	Label *string `pulumi:"label"`
}

// EventOrchestrationUnroutedSetRuleInput is an input type that accepts EventOrchestrationUnroutedSetRuleArgs and EventOrchestrationUnroutedSetRuleOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleInput` via:
//
//	EventOrchestrationUnroutedSetRuleArgs{...}
type EventOrchestrationUnroutedSetRuleInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleOutput() EventOrchestrationUnroutedSetRuleOutput
	ToEventOrchestrationUnroutedSetRuleOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleOutput
}

type EventOrchestrationUnroutedSetRuleArgs struct {
	// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
	Actions EventOrchestrationUnroutedSetRuleActionsInput `pulumi:"actions"`
	// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
	Conditions EventOrchestrationUnroutedSetRuleConditionArrayInput `pulumi:"conditions"`
	// Indicates whether the rule is disabled and would therefore not be evaluated.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A description of this rule's purpose.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (EventOrchestrationUnroutedSetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRule)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleArgs) ToEventOrchestrationUnroutedSetRuleOutput() EventOrchestrationUnroutedSetRuleOutput {
	return i.ToEventOrchestrationUnroutedSetRuleOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleArgs) ToEventOrchestrationUnroutedSetRuleOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleOutput)
}

// EventOrchestrationUnroutedSetRuleArrayInput is an input type that accepts EventOrchestrationUnroutedSetRuleArray and EventOrchestrationUnroutedSetRuleArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleArrayInput` via:
//
//	EventOrchestrationUnroutedSetRuleArray{ EventOrchestrationUnroutedSetRuleArgs{...} }
type EventOrchestrationUnroutedSetRuleArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleArrayOutput() EventOrchestrationUnroutedSetRuleArrayOutput
	ToEventOrchestrationUnroutedSetRuleArrayOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleArrayOutput
}

type EventOrchestrationUnroutedSetRuleArray []EventOrchestrationUnroutedSetRuleInput

func (EventOrchestrationUnroutedSetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRule)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleArray) ToEventOrchestrationUnroutedSetRuleArrayOutput() EventOrchestrationUnroutedSetRuleArrayOutput {
	return i.ToEventOrchestrationUnroutedSetRuleArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleArray) ToEventOrchestrationUnroutedSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleArrayOutput)
}

type EventOrchestrationUnroutedSetRuleOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRule)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleOutput) ToEventOrchestrationUnroutedSetRuleOutput() EventOrchestrationUnroutedSetRuleOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleOutput) ToEventOrchestrationUnroutedSetRuleOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleOutput {
	return o
}

// Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
func (o EventOrchestrationUnroutedSetRuleOutput) Actions() EventOrchestrationUnroutedSetRuleActionsOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRule) EventOrchestrationUnroutedSetRuleActions { return v.Actions }).(EventOrchestrationUnroutedSetRuleActionsOutput)
}

// Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
func (o EventOrchestrationUnroutedSetRuleOutput) Conditions() EventOrchestrationUnroutedSetRuleConditionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRule) []EventOrchestrationUnroutedSetRuleCondition {
		return v.Conditions
	}).(EventOrchestrationUnroutedSetRuleConditionArrayOutput)
}

// Indicates whether the rule is disabled and would therefore not be evaluated.
func (o EventOrchestrationUnroutedSetRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The ID of this set of rules. Rules in other sets can route events into this set using the rule's `routeTo` property.
func (o EventOrchestrationUnroutedSetRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A description of this rule's purpose.
func (o EventOrchestrationUnroutedSetRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type EventOrchestrationUnroutedSetRuleArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRule)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleArrayOutput) ToEventOrchestrationUnroutedSetRuleArrayOutput() EventOrchestrationUnroutedSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleArrayOutput) ToEventOrchestrationUnroutedSetRuleArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedSetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedSetRule {
		return vs[0].([]EventOrchestrationUnroutedSetRule)[vs[1].(int)]
	}).(EventOrchestrationUnroutedSetRuleOutput)
}

type EventOrchestrationUnroutedSetRuleActions struct {
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction *string `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions []EventOrchestrationUnroutedSetRuleActionsExtraction `pulumi:"extractions"`
	// The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.
	RouteTo *string `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity *string `pulumi:"severity"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables []EventOrchestrationUnroutedSetRuleActionsVariable `pulumi:"variables"`
}

// EventOrchestrationUnroutedSetRuleActionsInput is an input type that accepts EventOrchestrationUnroutedSetRuleActionsArgs and EventOrchestrationUnroutedSetRuleActionsOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleActionsInput` via:
//
//	EventOrchestrationUnroutedSetRuleActionsArgs{...}
type EventOrchestrationUnroutedSetRuleActionsInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleActionsOutput() EventOrchestrationUnroutedSetRuleActionsOutput
	ToEventOrchestrationUnroutedSetRuleActionsOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleActionsOutput
}

type EventOrchestrationUnroutedSetRuleActionsArgs struct {
	// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
	EventAction pulumi.StringPtrInput `pulumi:"eventAction"`
	// Replace any CEF field or Custom Details object field using custom variables.
	Extractions EventOrchestrationUnroutedSetRuleActionsExtractionArrayInput `pulumi:"extractions"`
	// The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.
	RouteTo pulumi.StringPtrInput `pulumi:"routeTo"`
	// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Populate variables from event payloads and use those variables in other event actions.
	Variables EventOrchestrationUnroutedSetRuleActionsVariableArrayInput `pulumi:"variables"`
}

func (EventOrchestrationUnroutedSetRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActions)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleActionsArgs) ToEventOrchestrationUnroutedSetRuleActionsOutput() EventOrchestrationUnroutedSetRuleActionsOutput {
	return i.ToEventOrchestrationUnroutedSetRuleActionsOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleActionsArgs) ToEventOrchestrationUnroutedSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleActionsOutput)
}

type EventOrchestrationUnroutedSetRuleActionsOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActions)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleActionsOutput) ToEventOrchestrationUnroutedSetRuleActionsOutput() EventOrchestrationUnroutedSetRuleActionsOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsOutput) ToEventOrchestrationUnroutedSetRuleActionsOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsOutput {
	return o
}

// sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
func (o EventOrchestrationUnroutedSetRuleActionsOutput) EventAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActions) *string { return v.EventAction }).(pulumi.StringPtrOutput)
}

// Replace any CEF field or Custom Details object field using custom variables.
func (o EventOrchestrationUnroutedSetRuleActionsOutput) Extractions() EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActions) []EventOrchestrationUnroutedSetRuleActionsExtraction {
		return v.Extractions
	}).(EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput)
}

// The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.
func (o EventOrchestrationUnroutedSetRuleActionsOutput) RouteTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActions) *string { return v.RouteTo }).(pulumi.StringPtrOutput)
}

// sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
func (o EventOrchestrationUnroutedSetRuleActionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Populate variables from event payloads and use those variables in other event actions.
func (o EventOrchestrationUnroutedSetRuleActionsOutput) Variables() EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActions) []EventOrchestrationUnroutedSetRuleActionsVariable {
		return v.Variables
	}).(EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationUnroutedSetRuleActionsExtraction struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex *string `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source *string `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target string `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template *string `pulumi:"template"`
}

// EventOrchestrationUnroutedSetRuleActionsExtractionInput is an input type that accepts EventOrchestrationUnroutedSetRuleActionsExtractionArgs and EventOrchestrationUnroutedSetRuleActionsExtractionOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleActionsExtractionInput` via:
//
//	EventOrchestrationUnroutedSetRuleActionsExtractionArgs{...}
type EventOrchestrationUnroutedSetRuleActionsExtractionInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleActionsExtractionOutput() EventOrchestrationUnroutedSetRuleActionsExtractionOutput
	ToEventOrchestrationUnroutedSetRuleActionsExtractionOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionOutput
}

type EventOrchestrationUnroutedSetRuleActionsExtractionArgs struct {
	// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
	Target pulumi.StringInput `pulumi:"target"`
	// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
	// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
	// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (EventOrchestrationUnroutedSetRuleActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleActionsExtractionArgs) ToEventOrchestrationUnroutedSetRuleActionsExtractionOutput() EventOrchestrationUnroutedSetRuleActionsExtractionOutput {
	return i.ToEventOrchestrationUnroutedSetRuleActionsExtractionOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleActionsExtractionArgs) ToEventOrchestrationUnroutedSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleActionsExtractionOutput)
}

// EventOrchestrationUnroutedSetRuleActionsExtractionArrayInput is an input type that accepts EventOrchestrationUnroutedSetRuleActionsExtractionArray and EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleActionsExtractionArrayInput` via:
//
//	EventOrchestrationUnroutedSetRuleActionsExtractionArray{ EventOrchestrationUnroutedSetRuleActionsExtractionArgs{...} }
type EventOrchestrationUnroutedSetRuleActionsExtractionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput() EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput
	ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput
}

type EventOrchestrationUnroutedSetRuleActionsExtractionArray []EventOrchestrationUnroutedSetRuleActionsExtractionInput

func (EventOrchestrationUnroutedSetRuleActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleActionsExtraction)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleActionsExtractionArray) ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput() EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput {
	return i.ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleActionsExtractionArray) ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput)
}

type EventOrchestrationUnroutedSetRuleActionsExtractionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) ToEventOrchestrationUnroutedSetRuleActionsExtractionOutput() EventOrchestrationUnroutedSetRuleActionsExtractionOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) ToEventOrchestrationUnroutedSetRuleActionsExtractionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionOutput {
	return o
}

// A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsExtraction) string { return v.Target }).(pulumi.StringOutput)
}

// A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
// * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
// * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
func (o EventOrchestrationUnroutedSetRuleActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleActionsExtraction)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput) ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput() EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput) ToEventOrchestrationUnroutedSetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedSetRuleActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedSetRuleActionsExtraction {
		return vs[0].([]EventOrchestrationUnroutedSetRuleActionsExtraction)[vs[1].(int)]
	}).(EventOrchestrationUnroutedSetRuleActionsExtractionOutput)
}

type EventOrchestrationUnroutedSetRuleActionsVariable struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
	Path string `pulumi:"path"`
	// Only `regex` is supported
	Type string `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value string `pulumi:"value"`
}

// EventOrchestrationUnroutedSetRuleActionsVariableInput is an input type that accepts EventOrchestrationUnroutedSetRuleActionsVariableArgs and EventOrchestrationUnroutedSetRuleActionsVariableOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleActionsVariableInput` via:
//
//	EventOrchestrationUnroutedSetRuleActionsVariableArgs{...}
type EventOrchestrationUnroutedSetRuleActionsVariableInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleActionsVariableOutput() EventOrchestrationUnroutedSetRuleActionsVariableOutput
	ToEventOrchestrationUnroutedSetRuleActionsVariableOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleActionsVariableOutput
}

type EventOrchestrationUnroutedSetRuleActionsVariableArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
	Path pulumi.StringInput `pulumi:"path"`
	// Only `regex` is supported
	Type pulumi.StringInput `pulumi:"type"`
	// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventOrchestrationUnroutedSetRuleActionsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleActionsVariableArgs) ToEventOrchestrationUnroutedSetRuleActionsVariableOutput() EventOrchestrationUnroutedSetRuleActionsVariableOutput {
	return i.ToEventOrchestrationUnroutedSetRuleActionsVariableOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleActionsVariableArgs) ToEventOrchestrationUnroutedSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleActionsVariableOutput)
}

// EventOrchestrationUnroutedSetRuleActionsVariableArrayInput is an input type that accepts EventOrchestrationUnroutedSetRuleActionsVariableArray and EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleActionsVariableArrayInput` via:
//
//	EventOrchestrationUnroutedSetRuleActionsVariableArray{ EventOrchestrationUnroutedSetRuleActionsVariableArgs{...} }
type EventOrchestrationUnroutedSetRuleActionsVariableArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutput() EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput
	ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput
}

type EventOrchestrationUnroutedSetRuleActionsVariableArray []EventOrchestrationUnroutedSetRuleActionsVariableInput

func (EventOrchestrationUnroutedSetRuleActionsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleActionsVariable)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleActionsVariableArray) ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutput() EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput {
	return i.ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleActionsVariableArray) ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput)
}

type EventOrchestrationUnroutedSetRuleActionsVariableOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleActionsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) ToEventOrchestrationUnroutedSetRuleActionsVariableOutput() EventOrchestrationUnroutedSetRuleActionsVariableOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) ToEventOrchestrationUnroutedSetRuleActionsVariableOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsVariableOutput {
	return o
}

// The name of the variable
func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsVariable) string { return v.Path }).(pulumi.StringOutput)
}

// Only `regex` is supported
func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
func (o EventOrchestrationUnroutedSetRuleActionsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleActionsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleActionsVariable)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput) ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutput() EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput) ToEventOrchestrationUnroutedSetRuleActionsVariableArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedSetRuleActionsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedSetRuleActionsVariable {
		return vs[0].([]EventOrchestrationUnroutedSetRuleActionsVariable)[vs[1].(int)]
	}).(EventOrchestrationUnroutedSetRuleActionsVariableOutput)
}

type EventOrchestrationUnroutedSetRuleCondition struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression string `pulumi:"expression"`
}

// EventOrchestrationUnroutedSetRuleConditionInput is an input type that accepts EventOrchestrationUnroutedSetRuleConditionArgs and EventOrchestrationUnroutedSetRuleConditionOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleConditionInput` via:
//
//	EventOrchestrationUnroutedSetRuleConditionArgs{...}
type EventOrchestrationUnroutedSetRuleConditionInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleConditionOutput() EventOrchestrationUnroutedSetRuleConditionOutput
	ToEventOrchestrationUnroutedSetRuleConditionOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleConditionOutput
}

type EventOrchestrationUnroutedSetRuleConditionArgs struct {
	// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (EventOrchestrationUnroutedSetRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleConditionArgs) ToEventOrchestrationUnroutedSetRuleConditionOutput() EventOrchestrationUnroutedSetRuleConditionOutput {
	return i.ToEventOrchestrationUnroutedSetRuleConditionOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleConditionArgs) ToEventOrchestrationUnroutedSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleConditionOutput)
}

// EventOrchestrationUnroutedSetRuleConditionArrayInput is an input type that accepts EventOrchestrationUnroutedSetRuleConditionArray and EventOrchestrationUnroutedSetRuleConditionArrayOutput values.
// You can construct a concrete instance of `EventOrchestrationUnroutedSetRuleConditionArrayInput` via:
//
//	EventOrchestrationUnroutedSetRuleConditionArray{ EventOrchestrationUnroutedSetRuleConditionArgs{...} }
type EventOrchestrationUnroutedSetRuleConditionArrayInput interface {
	pulumi.Input

	ToEventOrchestrationUnroutedSetRuleConditionArrayOutput() EventOrchestrationUnroutedSetRuleConditionArrayOutput
	ToEventOrchestrationUnroutedSetRuleConditionArrayOutputWithContext(context.Context) EventOrchestrationUnroutedSetRuleConditionArrayOutput
}

type EventOrchestrationUnroutedSetRuleConditionArray []EventOrchestrationUnroutedSetRuleConditionInput

func (EventOrchestrationUnroutedSetRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleCondition)(nil)).Elem()
}

func (i EventOrchestrationUnroutedSetRuleConditionArray) ToEventOrchestrationUnroutedSetRuleConditionArrayOutput() EventOrchestrationUnroutedSetRuleConditionArrayOutput {
	return i.ToEventOrchestrationUnroutedSetRuleConditionArrayOutputWithContext(context.Background())
}

func (i EventOrchestrationUnroutedSetRuleConditionArray) ToEventOrchestrationUnroutedSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOrchestrationUnroutedSetRuleConditionArrayOutput)
}

type EventOrchestrationUnroutedSetRuleConditionOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventOrchestrationUnroutedSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleConditionOutput) ToEventOrchestrationUnroutedSetRuleConditionOutput() EventOrchestrationUnroutedSetRuleConditionOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleConditionOutput) ToEventOrchestrationUnroutedSetRuleConditionOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleConditionOutput {
	return o
}

// A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
func (o EventOrchestrationUnroutedSetRuleConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v EventOrchestrationUnroutedSetRuleCondition) string { return v.Expression }).(pulumi.StringOutput)
}

type EventOrchestrationUnroutedSetRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (EventOrchestrationUnroutedSetRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventOrchestrationUnroutedSetRuleCondition)(nil)).Elem()
}

func (o EventOrchestrationUnroutedSetRuleConditionArrayOutput) ToEventOrchestrationUnroutedSetRuleConditionArrayOutput() EventOrchestrationUnroutedSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleConditionArrayOutput) ToEventOrchestrationUnroutedSetRuleConditionArrayOutputWithContext(ctx context.Context) EventOrchestrationUnroutedSetRuleConditionArrayOutput {
	return o
}

func (o EventOrchestrationUnroutedSetRuleConditionArrayOutput) Index(i pulumi.IntInput) EventOrchestrationUnroutedSetRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventOrchestrationUnroutedSetRuleCondition {
		return vs[0].([]EventOrchestrationUnroutedSetRuleCondition)[vs[1].(int)]
	}).(EventOrchestrationUnroutedSetRuleConditionOutput)
}

type IncidentWorkflowStep struct {
	// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
	Action string `pulumi:"action"`
	// The ID of the incident workflow.
	Id *string `pulumi:"id"`
	// The list of inputs that contain a series of inline steps for the workflow action.
	InlineStepsInputs []IncidentWorkflowStepInlineStepsInput `pulumi:"inlineStepsInputs"`
	// The list of standard inputs for the workflow action.
	Inputs []IncidentWorkflowStepInputType `pulumi:"inputs"`
	// The name of the workflow step.
	Name string `pulumi:"name"`
}

// IncidentWorkflowStepInput is an input type that accepts IncidentWorkflowStepArgs and IncidentWorkflowStepOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInput` via:
//
//	IncidentWorkflowStepArgs{...}
type IncidentWorkflowStepInput interface {
	pulumi.Input

	ToIncidentWorkflowStepOutput() IncidentWorkflowStepOutput
	ToIncidentWorkflowStepOutputWithContext(context.Context) IncidentWorkflowStepOutput
}

type IncidentWorkflowStepArgs struct {
	// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
	Action pulumi.StringInput `pulumi:"action"`
	// The ID of the incident workflow.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The list of inputs that contain a series of inline steps for the workflow action.
	InlineStepsInputs IncidentWorkflowStepInlineStepsInputArrayInput `pulumi:"inlineStepsInputs"`
	// The list of standard inputs for the workflow action.
	Inputs IncidentWorkflowStepInputTypeArrayInput `pulumi:"inputs"`
	// The name of the workflow step.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IncidentWorkflowStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStep)(nil)).Elem()
}

func (i IncidentWorkflowStepArgs) ToIncidentWorkflowStepOutput() IncidentWorkflowStepOutput {
	return i.ToIncidentWorkflowStepOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepArgs) ToIncidentWorkflowStepOutputWithContext(ctx context.Context) IncidentWorkflowStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepOutput)
}

// IncidentWorkflowStepArrayInput is an input type that accepts IncidentWorkflowStepArray and IncidentWorkflowStepArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepArrayInput` via:
//
//	IncidentWorkflowStepArray{ IncidentWorkflowStepArgs{...} }
type IncidentWorkflowStepArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowStepArrayOutput() IncidentWorkflowStepArrayOutput
	ToIncidentWorkflowStepArrayOutputWithContext(context.Context) IncidentWorkflowStepArrayOutput
}

type IncidentWorkflowStepArray []IncidentWorkflowStepInput

func (IncidentWorkflowStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStep)(nil)).Elem()
}

func (i IncidentWorkflowStepArray) ToIncidentWorkflowStepArrayOutput() IncidentWorkflowStepArrayOutput {
	return i.ToIncidentWorkflowStepArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepArray) ToIncidentWorkflowStepArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepArrayOutput)
}

type IncidentWorkflowStepOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStep)(nil)).Elem()
}

func (o IncidentWorkflowStepOutput) ToIncidentWorkflowStepOutput() IncidentWorkflowStepOutput {
	return o
}

func (o IncidentWorkflowStepOutput) ToIncidentWorkflowStepOutputWithContext(ctx context.Context) IncidentWorkflowStepOutput {
	return o
}

// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
func (o IncidentWorkflowStepOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStep) string { return v.Action }).(pulumi.StringOutput)
}

// The ID of the incident workflow.
func (o IncidentWorkflowStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentWorkflowStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of inputs that contain a series of inline steps for the workflow action.
func (o IncidentWorkflowStepOutput) InlineStepsInputs() IncidentWorkflowStepInlineStepsInputArrayOutput {
	return o.ApplyT(func(v IncidentWorkflowStep) []IncidentWorkflowStepInlineStepsInput { return v.InlineStepsInputs }).(IncidentWorkflowStepInlineStepsInputArrayOutput)
}

// The list of standard inputs for the workflow action.
func (o IncidentWorkflowStepOutput) Inputs() IncidentWorkflowStepInputTypeArrayOutput {
	return o.ApplyT(func(v IncidentWorkflowStep) []IncidentWorkflowStepInputType { return v.Inputs }).(IncidentWorkflowStepInputTypeArrayOutput)
}

// The name of the workflow step.
func (o IncidentWorkflowStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStep) string { return v.Name }).(pulumi.StringOutput)
}

type IncidentWorkflowStepArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStep)(nil)).Elem()
}

func (o IncidentWorkflowStepArrayOutput) ToIncidentWorkflowStepArrayOutput() IncidentWorkflowStepArrayOutput {
	return o
}

func (o IncidentWorkflowStepArrayOutput) ToIncidentWorkflowStepArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepArrayOutput {
	return o
}

func (o IncidentWorkflowStepArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentWorkflowStep {
		return vs[0].([]IncidentWorkflowStep)[vs[1].(int)]
	}).(IncidentWorkflowStepOutput)
}

type IncidentWorkflowStepInlineStepsInput struct {
	// The name of the input.
	Name string `pulumi:"name"`
	// The inline steps of the input. An inline step adheres to the step schema described above.
	Steps []IncidentWorkflowStepInlineStepsInputStep `pulumi:"steps"`
}

// IncidentWorkflowStepInlineStepsInputInput is an input type that accepts IncidentWorkflowStepInlineStepsInputArgs and IncidentWorkflowStepInlineStepsInputOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputInput` via:
//
//	IncidentWorkflowStepInlineStepsInputArgs{...}
type IncidentWorkflowStepInlineStepsInputInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputOutput() IncidentWorkflowStepInlineStepsInputOutput
	ToIncidentWorkflowStepInlineStepsInputOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputOutput
}

type IncidentWorkflowStepInlineStepsInputArgs struct {
	// The name of the input.
	Name pulumi.StringInput `pulumi:"name"`
	// The inline steps of the input. An inline step adheres to the step schema described above.
	Steps IncidentWorkflowStepInlineStepsInputStepArrayInput `pulumi:"steps"`
}

func (IncidentWorkflowStepInlineStepsInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInput)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputArgs) ToIncidentWorkflowStepInlineStepsInputOutput() IncidentWorkflowStepInlineStepsInputOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputArgs) ToIncidentWorkflowStepInlineStepsInputOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputOutput)
}

// IncidentWorkflowStepInlineStepsInputArrayInput is an input type that accepts IncidentWorkflowStepInlineStepsInputArray and IncidentWorkflowStepInlineStepsInputArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputArrayInput` via:
//
//	IncidentWorkflowStepInlineStepsInputArray{ IncidentWorkflowStepInlineStepsInputArgs{...} }
type IncidentWorkflowStepInlineStepsInputArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputArrayOutput() IncidentWorkflowStepInlineStepsInputArrayOutput
	ToIncidentWorkflowStepInlineStepsInputArrayOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputArrayOutput
}

type IncidentWorkflowStepInlineStepsInputArray []IncidentWorkflowStepInlineStepsInputInput

func (IncidentWorkflowStepInlineStepsInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInput)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputArray) ToIncidentWorkflowStepInlineStepsInputArrayOutput() IncidentWorkflowStepInlineStepsInputArrayOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputArray) ToIncidentWorkflowStepInlineStepsInputArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputArrayOutput)
}

type IncidentWorkflowStepInlineStepsInputOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInput)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputOutput) ToIncidentWorkflowStepInlineStepsInputOutput() IncidentWorkflowStepInlineStepsInputOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputOutput) ToIncidentWorkflowStepInlineStepsInputOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputOutput {
	return o
}

// The name of the input.
func (o IncidentWorkflowStepInlineStepsInputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInput) string { return v.Name }).(pulumi.StringOutput)
}

// The inline steps of the input. An inline step adheres to the step schema described above.
func (o IncidentWorkflowStepInlineStepsInputOutput) Steps() IncidentWorkflowStepInlineStepsInputStepArrayOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInput) []IncidentWorkflowStepInlineStepsInputStep {
		return v.Steps
	}).(IncidentWorkflowStepInlineStepsInputStepArrayOutput)
}

type IncidentWorkflowStepInlineStepsInputArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInput)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputArrayOutput) ToIncidentWorkflowStepInlineStepsInputArrayOutput() IncidentWorkflowStepInlineStepsInputArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputArrayOutput) ToIncidentWorkflowStepInlineStepsInputArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowStepInlineStepsInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentWorkflowStepInlineStepsInput {
		return vs[0].([]IncidentWorkflowStepInlineStepsInput)[vs[1].(int)]
	}).(IncidentWorkflowStepInlineStepsInputOutput)
}

type IncidentWorkflowStepInlineStepsInputStep struct {
	// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
	Action string `pulumi:"action"`
	// The list of standard inputs for the workflow action.
	Inputs []IncidentWorkflowStepInlineStepsInputStepInputType `pulumi:"inputs"`
	// The name of the workflow step.
	Name string `pulumi:"name"`
}

// IncidentWorkflowStepInlineStepsInputStepInput is an input type that accepts IncidentWorkflowStepInlineStepsInputStepArgs and IncidentWorkflowStepInlineStepsInputStepOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputStepInput` via:
//
//	IncidentWorkflowStepInlineStepsInputStepArgs{...}
type IncidentWorkflowStepInlineStepsInputStepInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputStepOutput() IncidentWorkflowStepInlineStepsInputStepOutput
	ToIncidentWorkflowStepInlineStepsInputStepOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputStepOutput
}

type IncidentWorkflowStepInlineStepsInputStepArgs struct {
	// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
	Action pulumi.StringInput `pulumi:"action"`
	// The list of standard inputs for the workflow action.
	Inputs IncidentWorkflowStepInlineStepsInputStepInputTypeArrayInput `pulumi:"inputs"`
	// The name of the workflow step.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IncidentWorkflowStepInlineStepsInputStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStep)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputStepArgs) ToIncidentWorkflowStepInlineStepsInputStepOutput() IncidentWorkflowStepInlineStepsInputStepOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputStepOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputStepArgs) ToIncidentWorkflowStepInlineStepsInputStepOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputStepOutput)
}

// IncidentWorkflowStepInlineStepsInputStepArrayInput is an input type that accepts IncidentWorkflowStepInlineStepsInputStepArray and IncidentWorkflowStepInlineStepsInputStepArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputStepArrayInput` via:
//
//	IncidentWorkflowStepInlineStepsInputStepArray{ IncidentWorkflowStepInlineStepsInputStepArgs{...} }
type IncidentWorkflowStepInlineStepsInputStepArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputStepArrayOutput() IncidentWorkflowStepInlineStepsInputStepArrayOutput
	ToIncidentWorkflowStepInlineStepsInputStepArrayOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputStepArrayOutput
}

type IncidentWorkflowStepInlineStepsInputStepArray []IncidentWorkflowStepInlineStepsInputStepInput

func (IncidentWorkflowStepInlineStepsInputStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInputStep)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputStepArray) ToIncidentWorkflowStepInlineStepsInputStepArrayOutput() IncidentWorkflowStepInlineStepsInputStepArrayOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputStepArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputStepArray) ToIncidentWorkflowStepInlineStepsInputStepArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputStepArrayOutput)
}

type IncidentWorkflowStepInlineStepsInputStepOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStep)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputStepOutput) ToIncidentWorkflowStepInlineStepsInputStepOutput() IncidentWorkflowStepInlineStepsInputStepOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepOutput) ToIncidentWorkflowStepInlineStepsInputStepOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepOutput {
	return o
}

// The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
func (o IncidentWorkflowStepInlineStepsInputStepOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStep) string { return v.Action }).(pulumi.StringOutput)
}

// The list of standard inputs for the workflow action.
func (o IncidentWorkflowStepInlineStepsInputStepOutput) Inputs() IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStep) []IncidentWorkflowStepInlineStepsInputStepInputType {
		return v.Inputs
	}).(IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput)
}

// The name of the workflow step.
func (o IncidentWorkflowStepInlineStepsInputStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStep) string { return v.Name }).(pulumi.StringOutput)
}

type IncidentWorkflowStepInlineStepsInputStepArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInputStep)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputStepArrayOutput) ToIncidentWorkflowStepInlineStepsInputStepArrayOutput() IncidentWorkflowStepInlineStepsInputStepArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepArrayOutput) ToIncidentWorkflowStepInlineStepsInputStepArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowStepInlineStepsInputStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentWorkflowStepInlineStepsInputStep {
		return vs[0].([]IncidentWorkflowStepInlineStepsInputStep)[vs[1].(int)]
	}).(IncidentWorkflowStepInlineStepsInputStepOutput)
}

type IncidentWorkflowStepInlineStepsInputStepInputType struct {
	Generated *bool `pulumi:"generated"`
	// The name of the input.
	Name string `pulumi:"name"`
	// The value of the input.
	Value string `pulumi:"value"`
}

// IncidentWorkflowStepInlineStepsInputStepInputTypeInput is an input type that accepts IncidentWorkflowStepInlineStepsInputStepInputTypeArgs and IncidentWorkflowStepInlineStepsInputStepInputTypeOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputStepInputTypeInput` via:
//
//	IncidentWorkflowStepInlineStepsInputStepInputTypeArgs{...}
type IncidentWorkflowStepInlineStepsInputStepInputTypeInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeOutput
	ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeOutput
}

type IncidentWorkflowStepInlineStepsInputStepInputTypeArgs struct {
	Generated pulumi.BoolPtrInput `pulumi:"generated"`
	// The name of the input.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the input.
	Value pulumi.StringInput `pulumi:"value"`
}

func (IncidentWorkflowStepInlineStepsInputStepInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepInputType)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputStepInputTypeArgs) ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputStepInputTypeArgs) ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputStepInputTypeOutput)
}

// IncidentWorkflowStepInlineStepsInputStepInputTypeArrayInput is an input type that accepts IncidentWorkflowStepInlineStepsInputStepInputTypeArray and IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInlineStepsInputStepInputTypeArrayInput` via:
//
//	IncidentWorkflowStepInlineStepsInputStepInputTypeArray{ IncidentWorkflowStepInlineStepsInputStepInputTypeArgs{...} }
type IncidentWorkflowStepInlineStepsInputStepInputTypeArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput
	ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutputWithContext(context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput
}

type IncidentWorkflowStepInlineStepsInputStepInputTypeArray []IncidentWorkflowStepInlineStepsInputStepInputTypeInput

func (IncidentWorkflowStepInlineStepsInputStepInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInputStepInputType)(nil)).Elem()
}

func (i IncidentWorkflowStepInlineStepsInputStepInputTypeArray) ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput {
	return i.ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInlineStepsInputStepInputTypeArray) ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput)
}

type IncidentWorkflowStepInlineStepsInputStepInputTypeOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepInputType)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) ToIncidentWorkflowStepInlineStepsInputStepInputTypeOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) Generated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStepInputType) *bool { return v.Generated }).(pulumi.BoolPtrOutput)
}

// The name of the input.
func (o IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStepInputType) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the input.
func (o IncidentWorkflowStepInlineStepsInputStepInputTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInlineStepsInputStepInputType) string { return v.Value }).(pulumi.StringOutput)
}

type IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInlineStepsInputStepInputType)(nil)).Elem()
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput) ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput() IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput) ToIncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput {
	return o
}

func (o IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowStepInlineStepsInputStepInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentWorkflowStepInlineStepsInputStepInputType {
		return vs[0].([]IncidentWorkflowStepInlineStepsInputStepInputType)[vs[1].(int)]
	}).(IncidentWorkflowStepInlineStepsInputStepInputTypeOutput)
}

type IncidentWorkflowStepInputType struct {
	Generated *bool `pulumi:"generated"`
	// The name of the input.
	Name string `pulumi:"name"`
	// The value of the input.
	Value string `pulumi:"value"`
}

// IncidentWorkflowStepInputTypeInput is an input type that accepts IncidentWorkflowStepInputTypeArgs and IncidentWorkflowStepInputTypeOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInputTypeInput` via:
//
//	IncidentWorkflowStepInputTypeArgs{...}
type IncidentWorkflowStepInputTypeInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInputTypeOutput() IncidentWorkflowStepInputTypeOutput
	ToIncidentWorkflowStepInputTypeOutputWithContext(context.Context) IncidentWorkflowStepInputTypeOutput
}

type IncidentWorkflowStepInputTypeArgs struct {
	Generated pulumi.BoolPtrInput `pulumi:"generated"`
	// The name of the input.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the input.
	Value pulumi.StringInput `pulumi:"value"`
}

func (IncidentWorkflowStepInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInputType)(nil)).Elem()
}

func (i IncidentWorkflowStepInputTypeArgs) ToIncidentWorkflowStepInputTypeOutput() IncidentWorkflowStepInputTypeOutput {
	return i.ToIncidentWorkflowStepInputTypeOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInputTypeArgs) ToIncidentWorkflowStepInputTypeOutputWithContext(ctx context.Context) IncidentWorkflowStepInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInputTypeOutput)
}

// IncidentWorkflowStepInputTypeArrayInput is an input type that accepts IncidentWorkflowStepInputTypeArray and IncidentWorkflowStepInputTypeArrayOutput values.
// You can construct a concrete instance of `IncidentWorkflowStepInputTypeArrayInput` via:
//
//	IncidentWorkflowStepInputTypeArray{ IncidentWorkflowStepInputTypeArgs{...} }
type IncidentWorkflowStepInputTypeArrayInput interface {
	pulumi.Input

	ToIncidentWorkflowStepInputTypeArrayOutput() IncidentWorkflowStepInputTypeArrayOutput
	ToIncidentWorkflowStepInputTypeArrayOutputWithContext(context.Context) IncidentWorkflowStepInputTypeArrayOutput
}

type IncidentWorkflowStepInputTypeArray []IncidentWorkflowStepInputTypeInput

func (IncidentWorkflowStepInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInputType)(nil)).Elem()
}

func (i IncidentWorkflowStepInputTypeArray) ToIncidentWorkflowStepInputTypeArrayOutput() IncidentWorkflowStepInputTypeArrayOutput {
	return i.ToIncidentWorkflowStepInputTypeArrayOutputWithContext(context.Background())
}

func (i IncidentWorkflowStepInputTypeArray) ToIncidentWorkflowStepInputTypeArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentWorkflowStepInputTypeArrayOutput)
}

type IncidentWorkflowStepInputTypeOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentWorkflowStepInputType)(nil)).Elem()
}

func (o IncidentWorkflowStepInputTypeOutput) ToIncidentWorkflowStepInputTypeOutput() IncidentWorkflowStepInputTypeOutput {
	return o
}

func (o IncidentWorkflowStepInputTypeOutput) ToIncidentWorkflowStepInputTypeOutputWithContext(ctx context.Context) IncidentWorkflowStepInputTypeOutput {
	return o
}

func (o IncidentWorkflowStepInputTypeOutput) Generated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInputType) *bool { return v.Generated }).(pulumi.BoolPtrOutput)
}

// The name of the input.
func (o IncidentWorkflowStepInputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInputType) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the input.
func (o IncidentWorkflowStepInputTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentWorkflowStepInputType) string { return v.Value }).(pulumi.StringOutput)
}

type IncidentWorkflowStepInputTypeArrayOutput struct{ *pulumi.OutputState }

func (IncidentWorkflowStepInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentWorkflowStepInputType)(nil)).Elem()
}

func (o IncidentWorkflowStepInputTypeArrayOutput) ToIncidentWorkflowStepInputTypeArrayOutput() IncidentWorkflowStepInputTypeArrayOutput {
	return o
}

func (o IncidentWorkflowStepInputTypeArrayOutput) ToIncidentWorkflowStepInputTypeArrayOutputWithContext(ctx context.Context) IncidentWorkflowStepInputTypeArrayOutput {
	return o
}

func (o IncidentWorkflowStepInputTypeArrayOutput) Index(i pulumi.IntInput) IncidentWorkflowStepInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentWorkflowStepInputType {
		return vs[0].([]IncidentWorkflowStepInputType)[vs[1].(int)]
	}).(IncidentWorkflowStepInputTypeOutput)
}

type ProviderUseAppOauthScopedToken struct {
	PdClientId     string `pulumi:"pdClientId"`
	PdClientSecret string `pulumi:"pdClientSecret"`
	PdSubdomain    string `pulumi:"pdSubdomain"`
}

// ProviderUseAppOauthScopedTokenInput is an input type that accepts ProviderUseAppOauthScopedTokenArgs and ProviderUseAppOauthScopedTokenOutput values.
// You can construct a concrete instance of `ProviderUseAppOauthScopedTokenInput` via:
//
//	ProviderUseAppOauthScopedTokenArgs{...}
type ProviderUseAppOauthScopedTokenInput interface {
	pulumi.Input

	ToProviderUseAppOauthScopedTokenOutput() ProviderUseAppOauthScopedTokenOutput
	ToProviderUseAppOauthScopedTokenOutputWithContext(context.Context) ProviderUseAppOauthScopedTokenOutput
}

type ProviderUseAppOauthScopedTokenArgs struct {
	PdClientId     pulumi.StringInput `pulumi:"pdClientId"`
	PdClientSecret pulumi.StringInput `pulumi:"pdClientSecret"`
	PdSubdomain    pulumi.StringInput `pulumi:"pdSubdomain"`
}

func (ProviderUseAppOauthScopedTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderUseAppOauthScopedToken)(nil)).Elem()
}

func (i ProviderUseAppOauthScopedTokenArgs) ToProviderUseAppOauthScopedTokenOutput() ProviderUseAppOauthScopedTokenOutput {
	return i.ToProviderUseAppOauthScopedTokenOutputWithContext(context.Background())
}

func (i ProviderUseAppOauthScopedTokenArgs) ToProviderUseAppOauthScopedTokenOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderUseAppOauthScopedTokenOutput)
}

func (i ProviderUseAppOauthScopedTokenArgs) ToProviderUseAppOauthScopedTokenPtrOutput() ProviderUseAppOauthScopedTokenPtrOutput {
	return i.ToProviderUseAppOauthScopedTokenPtrOutputWithContext(context.Background())
}

func (i ProviderUseAppOauthScopedTokenArgs) ToProviderUseAppOauthScopedTokenPtrOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderUseAppOauthScopedTokenOutput).ToProviderUseAppOauthScopedTokenPtrOutputWithContext(ctx)
}

// ProviderUseAppOauthScopedTokenPtrInput is an input type that accepts ProviderUseAppOauthScopedTokenArgs, ProviderUseAppOauthScopedTokenPtr and ProviderUseAppOauthScopedTokenPtrOutput values.
// You can construct a concrete instance of `ProviderUseAppOauthScopedTokenPtrInput` via:
//
//	        ProviderUseAppOauthScopedTokenArgs{...}
//
//	or:
//
//	        nil
type ProviderUseAppOauthScopedTokenPtrInput interface {
	pulumi.Input

	ToProviderUseAppOauthScopedTokenPtrOutput() ProviderUseAppOauthScopedTokenPtrOutput
	ToProviderUseAppOauthScopedTokenPtrOutputWithContext(context.Context) ProviderUseAppOauthScopedTokenPtrOutput
}

type providerUseAppOauthScopedTokenPtrType ProviderUseAppOauthScopedTokenArgs

func ProviderUseAppOauthScopedTokenPtr(v *ProviderUseAppOauthScopedTokenArgs) ProviderUseAppOauthScopedTokenPtrInput {
	return (*providerUseAppOauthScopedTokenPtrType)(v)
}

func (*providerUseAppOauthScopedTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderUseAppOauthScopedToken)(nil)).Elem()
}

func (i *providerUseAppOauthScopedTokenPtrType) ToProviderUseAppOauthScopedTokenPtrOutput() ProviderUseAppOauthScopedTokenPtrOutput {
	return i.ToProviderUseAppOauthScopedTokenPtrOutputWithContext(context.Background())
}

func (i *providerUseAppOauthScopedTokenPtrType) ToProviderUseAppOauthScopedTokenPtrOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderUseAppOauthScopedTokenPtrOutput)
}

type ProviderUseAppOauthScopedTokenOutput struct{ *pulumi.OutputState }

func (ProviderUseAppOauthScopedTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderUseAppOauthScopedToken)(nil)).Elem()
}

func (o ProviderUseAppOauthScopedTokenOutput) ToProviderUseAppOauthScopedTokenOutput() ProviderUseAppOauthScopedTokenOutput {
	return o
}

func (o ProviderUseAppOauthScopedTokenOutput) ToProviderUseAppOauthScopedTokenOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenOutput {
	return o
}

func (o ProviderUseAppOauthScopedTokenOutput) ToProviderUseAppOauthScopedTokenPtrOutput() ProviderUseAppOauthScopedTokenPtrOutput {
	return o.ToProviderUseAppOauthScopedTokenPtrOutputWithContext(context.Background())
}

func (o ProviderUseAppOauthScopedTokenOutput) ToProviderUseAppOauthScopedTokenPtrOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderUseAppOauthScopedToken) *ProviderUseAppOauthScopedToken {
		return &v
	}).(ProviderUseAppOauthScopedTokenPtrOutput)
}

func (o ProviderUseAppOauthScopedTokenOutput) PdClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderUseAppOauthScopedToken) string { return v.PdClientId }).(pulumi.StringOutput)
}

func (o ProviderUseAppOauthScopedTokenOutput) PdClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderUseAppOauthScopedToken) string { return v.PdClientSecret }).(pulumi.StringOutput)
}

func (o ProviderUseAppOauthScopedTokenOutput) PdSubdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderUseAppOauthScopedToken) string { return v.PdSubdomain }).(pulumi.StringOutput)
}

type ProviderUseAppOauthScopedTokenPtrOutput struct{ *pulumi.OutputState }

func (ProviderUseAppOauthScopedTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderUseAppOauthScopedToken)(nil)).Elem()
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) ToProviderUseAppOauthScopedTokenPtrOutput() ProviderUseAppOauthScopedTokenPtrOutput {
	return o
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) ToProviderUseAppOauthScopedTokenPtrOutputWithContext(ctx context.Context) ProviderUseAppOauthScopedTokenPtrOutput {
	return o
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) Elem() ProviderUseAppOauthScopedTokenOutput {
	return o.ApplyT(func(v *ProviderUseAppOauthScopedToken) ProviderUseAppOauthScopedToken {
		if v != nil {
			return *v
		}
		var ret ProviderUseAppOauthScopedToken
		return ret
	}).(ProviderUseAppOauthScopedTokenOutput)
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) PdClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderUseAppOauthScopedToken) *string {
		if v == nil {
			return nil
		}
		return &v.PdClientId
	}).(pulumi.StringPtrOutput)
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) PdClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderUseAppOauthScopedToken) *string {
		if v == nil {
			return nil
		}
		return &v.PdClientSecret
	}).(pulumi.StringPtrOutput)
}

func (o ProviderUseAppOauthScopedTokenPtrOutput) PdSubdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderUseAppOauthScopedToken) *string {
		if v == nil {
			return nil
		}
		return &v.PdSubdomain
	}).(pulumi.StringPtrOutput)
}

type ResponsePlayResponder struct {
	// Description of escalation policy
	Description *string `pulumi:"description"`
	// The escalation rules
	EscalationRules []ResponsePlayResponderEscalationRule `pulumi:"escalationRules"`
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// Name of the escalation policy
	Name *string `pulumi:"name"`
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops *int `pulumi:"numLoops"`
	// Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "ifHasServices". Could be "ifHasServices", "always
	OnCallHandoffNotifications *string `pulumi:"onCallHandoffNotifications"`
	// There can be multiple services associated with a policy.
	Services []ResponsePlayResponderService `pulumi:"services"`
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
	Teams []ResponsePlayResponderTeam `pulumi:"teams"`
	// Type of object of the target. Supported types are `userReference`, `scheduleReference`.
	Type *string `pulumi:"type"`
}

// ResponsePlayResponderInput is an input type that accepts ResponsePlayResponderArgs and ResponsePlayResponderOutput values.
// You can construct a concrete instance of `ResponsePlayResponderInput` via:
//
//	ResponsePlayResponderArgs{...}
type ResponsePlayResponderInput interface {
	pulumi.Input

	ToResponsePlayResponderOutput() ResponsePlayResponderOutput
	ToResponsePlayResponderOutputWithContext(context.Context) ResponsePlayResponderOutput
}

type ResponsePlayResponderArgs struct {
	// Description of escalation policy
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The escalation rules
	EscalationRules ResponsePlayResponderEscalationRuleArrayInput `pulumi:"escalationRules"`
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the escalation policy
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of times the escalation policy will repeat after reaching the end of its escalation.
	NumLoops pulumi.IntPtrInput `pulumi:"numLoops"`
	// Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "ifHasServices". Could be "ifHasServices", "always
	OnCallHandoffNotifications pulumi.StringPtrInput `pulumi:"onCallHandoffNotifications"`
	// There can be multiple services associated with a policy.
	Services ResponsePlayResponderServiceArrayInput `pulumi:"services"`
	// Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
	Teams ResponsePlayResponderTeamArrayInput `pulumi:"teams"`
	// Type of object of the target. Supported types are `userReference`, `scheduleReference`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResponsePlayResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponder)(nil)).Elem()
}

func (i ResponsePlayResponderArgs) ToResponsePlayResponderOutput() ResponsePlayResponderOutput {
	return i.ToResponsePlayResponderOutputWithContext(context.Background())
}

func (i ResponsePlayResponderArgs) ToResponsePlayResponderOutputWithContext(ctx context.Context) ResponsePlayResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderOutput)
}

// ResponsePlayResponderArrayInput is an input type that accepts ResponsePlayResponderArray and ResponsePlayResponderArrayOutput values.
// You can construct a concrete instance of `ResponsePlayResponderArrayInput` via:
//
//	ResponsePlayResponderArray{ ResponsePlayResponderArgs{...} }
type ResponsePlayResponderArrayInput interface {
	pulumi.Input

	ToResponsePlayResponderArrayOutput() ResponsePlayResponderArrayOutput
	ToResponsePlayResponderArrayOutputWithContext(context.Context) ResponsePlayResponderArrayOutput
}

type ResponsePlayResponderArray []ResponsePlayResponderInput

func (ResponsePlayResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponder)(nil)).Elem()
}

func (i ResponsePlayResponderArray) ToResponsePlayResponderArrayOutput() ResponsePlayResponderArrayOutput {
	return i.ToResponsePlayResponderArrayOutputWithContext(context.Background())
}

func (i ResponsePlayResponderArray) ToResponsePlayResponderArrayOutputWithContext(ctx context.Context) ResponsePlayResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderArrayOutput)
}

type ResponsePlayResponderOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponder)(nil)).Elem()
}

func (o ResponsePlayResponderOutput) ToResponsePlayResponderOutput() ResponsePlayResponderOutput {
	return o
}

func (o ResponsePlayResponderOutput) ToResponsePlayResponderOutputWithContext(ctx context.Context) ResponsePlayResponderOutput {
	return o
}

// Description of escalation policy
func (o ResponsePlayResponderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The escalation rules
func (o ResponsePlayResponderOutput) EscalationRules() ResponsePlayResponderEscalationRuleArrayOutput {
	return o.ApplyT(func(v ResponsePlayResponder) []ResponsePlayResponderEscalationRule { return v.EscalationRules }).(ResponsePlayResponderEscalationRuleArrayOutput)
}

// ID of the user defined as the responder
func (o ResponsePlayResponderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the escalation policy
func (o ResponsePlayResponderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of times the escalation policy will repeat after reaching the end of its escalation.
func (o ResponsePlayResponderOutput) NumLoops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *int { return v.NumLoops }).(pulumi.IntPtrOutput)
}

// Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "ifHasServices". Could be "ifHasServices", "always
func (o ResponsePlayResponderOutput) OnCallHandoffNotifications() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *string { return v.OnCallHandoffNotifications }).(pulumi.StringPtrOutput)
}

// There can be multiple services associated with a policy.
func (o ResponsePlayResponderOutput) Services() ResponsePlayResponderServiceArrayOutput {
	return o.ApplyT(func(v ResponsePlayResponder) []ResponsePlayResponderService { return v.Services }).(ResponsePlayResponderServiceArrayOutput)
}

// Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
func (o ResponsePlayResponderOutput) Teams() ResponsePlayResponderTeamArrayOutput {
	return o.ApplyT(func(v ResponsePlayResponder) []ResponsePlayResponderTeam { return v.Teams }).(ResponsePlayResponderTeamArrayOutput)
}

// Type of object of the target. Supported types are `userReference`, `scheduleReference`.
func (o ResponsePlayResponderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponder) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResponsePlayResponderArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponder)(nil)).Elem()
}

func (o ResponsePlayResponderArrayOutput) ToResponsePlayResponderArrayOutput() ResponsePlayResponderArrayOutput {
	return o
}

func (o ResponsePlayResponderArrayOutput) ToResponsePlayResponderArrayOutputWithContext(ctx context.Context) ResponsePlayResponderArrayOutput {
	return o
}

func (o ResponsePlayResponderArrayOutput) Index(i pulumi.IntInput) ResponsePlayResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlayResponder {
		return vs[0].([]ResponsePlayResponder)[vs[1].(int)]
	}).(ResponsePlayResponderOutput)
}

type ResponsePlayResponderEscalationRule struct {
	// The number of minutes before an unacknowledged incident escalates away from this rule.
	EscalationDelayInMinutes *int `pulumi:"escalationDelayInMinutes"`
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// The targets an incident should be assigned to upon reaching this rule.
	Targets []ResponsePlayResponderEscalationRuleTarget `pulumi:"targets"`
}

// ResponsePlayResponderEscalationRuleInput is an input type that accepts ResponsePlayResponderEscalationRuleArgs and ResponsePlayResponderEscalationRuleOutput values.
// You can construct a concrete instance of `ResponsePlayResponderEscalationRuleInput` via:
//
//	ResponsePlayResponderEscalationRuleArgs{...}
type ResponsePlayResponderEscalationRuleInput interface {
	pulumi.Input

	ToResponsePlayResponderEscalationRuleOutput() ResponsePlayResponderEscalationRuleOutput
	ToResponsePlayResponderEscalationRuleOutputWithContext(context.Context) ResponsePlayResponderEscalationRuleOutput
}

type ResponsePlayResponderEscalationRuleArgs struct {
	// The number of minutes before an unacknowledged incident escalates away from this rule.
	EscalationDelayInMinutes pulumi.IntPtrInput `pulumi:"escalationDelayInMinutes"`
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The targets an incident should be assigned to upon reaching this rule.
	Targets ResponsePlayResponderEscalationRuleTargetArrayInput `pulumi:"targets"`
}

func (ResponsePlayResponderEscalationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderEscalationRule)(nil)).Elem()
}

func (i ResponsePlayResponderEscalationRuleArgs) ToResponsePlayResponderEscalationRuleOutput() ResponsePlayResponderEscalationRuleOutput {
	return i.ToResponsePlayResponderEscalationRuleOutputWithContext(context.Background())
}

func (i ResponsePlayResponderEscalationRuleArgs) ToResponsePlayResponderEscalationRuleOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderEscalationRuleOutput)
}

// ResponsePlayResponderEscalationRuleArrayInput is an input type that accepts ResponsePlayResponderEscalationRuleArray and ResponsePlayResponderEscalationRuleArrayOutput values.
// You can construct a concrete instance of `ResponsePlayResponderEscalationRuleArrayInput` via:
//
//	ResponsePlayResponderEscalationRuleArray{ ResponsePlayResponderEscalationRuleArgs{...} }
type ResponsePlayResponderEscalationRuleArrayInput interface {
	pulumi.Input

	ToResponsePlayResponderEscalationRuleArrayOutput() ResponsePlayResponderEscalationRuleArrayOutput
	ToResponsePlayResponderEscalationRuleArrayOutputWithContext(context.Context) ResponsePlayResponderEscalationRuleArrayOutput
}

type ResponsePlayResponderEscalationRuleArray []ResponsePlayResponderEscalationRuleInput

func (ResponsePlayResponderEscalationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderEscalationRule)(nil)).Elem()
}

func (i ResponsePlayResponderEscalationRuleArray) ToResponsePlayResponderEscalationRuleArrayOutput() ResponsePlayResponderEscalationRuleArrayOutput {
	return i.ToResponsePlayResponderEscalationRuleArrayOutputWithContext(context.Background())
}

func (i ResponsePlayResponderEscalationRuleArray) ToResponsePlayResponderEscalationRuleArrayOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderEscalationRuleArrayOutput)
}

type ResponsePlayResponderEscalationRuleOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderEscalationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderEscalationRule)(nil)).Elem()
}

func (o ResponsePlayResponderEscalationRuleOutput) ToResponsePlayResponderEscalationRuleOutput() ResponsePlayResponderEscalationRuleOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleOutput) ToResponsePlayResponderEscalationRuleOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleOutput {
	return o
}

// The number of minutes before an unacknowledged incident escalates away from this rule.
func (o ResponsePlayResponderEscalationRuleOutput) EscalationDelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderEscalationRule) *int { return v.EscalationDelayInMinutes }).(pulumi.IntPtrOutput)
}

// ID of the user defined as the responder
func (o ResponsePlayResponderEscalationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderEscalationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The targets an incident should be assigned to upon reaching this rule.
func (o ResponsePlayResponderEscalationRuleOutput) Targets() ResponsePlayResponderEscalationRuleTargetArrayOutput {
	return o.ApplyT(func(v ResponsePlayResponderEscalationRule) []ResponsePlayResponderEscalationRuleTarget {
		return v.Targets
	}).(ResponsePlayResponderEscalationRuleTargetArrayOutput)
}

type ResponsePlayResponderEscalationRuleArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderEscalationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderEscalationRule)(nil)).Elem()
}

func (o ResponsePlayResponderEscalationRuleArrayOutput) ToResponsePlayResponderEscalationRuleArrayOutput() ResponsePlayResponderEscalationRuleArrayOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleArrayOutput) ToResponsePlayResponderEscalationRuleArrayOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleArrayOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleArrayOutput) Index(i pulumi.IntInput) ResponsePlayResponderEscalationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlayResponderEscalationRule {
		return vs[0].([]ResponsePlayResponderEscalationRule)[vs[1].(int)]
	}).(ResponsePlayResponderEscalationRuleOutput)
}

type ResponsePlayResponderEscalationRuleTarget struct {
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type *string `pulumi:"type"`
}

// ResponsePlayResponderEscalationRuleTargetInput is an input type that accepts ResponsePlayResponderEscalationRuleTargetArgs and ResponsePlayResponderEscalationRuleTargetOutput values.
// You can construct a concrete instance of `ResponsePlayResponderEscalationRuleTargetInput` via:
//
//	ResponsePlayResponderEscalationRuleTargetArgs{...}
type ResponsePlayResponderEscalationRuleTargetInput interface {
	pulumi.Input

	ToResponsePlayResponderEscalationRuleTargetOutput() ResponsePlayResponderEscalationRuleTargetOutput
	ToResponsePlayResponderEscalationRuleTargetOutputWithContext(context.Context) ResponsePlayResponderEscalationRuleTargetOutput
}

type ResponsePlayResponderEscalationRuleTargetArgs struct {
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResponsePlayResponderEscalationRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderEscalationRuleTarget)(nil)).Elem()
}

func (i ResponsePlayResponderEscalationRuleTargetArgs) ToResponsePlayResponderEscalationRuleTargetOutput() ResponsePlayResponderEscalationRuleTargetOutput {
	return i.ToResponsePlayResponderEscalationRuleTargetOutputWithContext(context.Background())
}

func (i ResponsePlayResponderEscalationRuleTargetArgs) ToResponsePlayResponderEscalationRuleTargetOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderEscalationRuleTargetOutput)
}

// ResponsePlayResponderEscalationRuleTargetArrayInput is an input type that accepts ResponsePlayResponderEscalationRuleTargetArray and ResponsePlayResponderEscalationRuleTargetArrayOutput values.
// You can construct a concrete instance of `ResponsePlayResponderEscalationRuleTargetArrayInput` via:
//
//	ResponsePlayResponderEscalationRuleTargetArray{ ResponsePlayResponderEscalationRuleTargetArgs{...} }
type ResponsePlayResponderEscalationRuleTargetArrayInput interface {
	pulumi.Input

	ToResponsePlayResponderEscalationRuleTargetArrayOutput() ResponsePlayResponderEscalationRuleTargetArrayOutput
	ToResponsePlayResponderEscalationRuleTargetArrayOutputWithContext(context.Context) ResponsePlayResponderEscalationRuleTargetArrayOutput
}

type ResponsePlayResponderEscalationRuleTargetArray []ResponsePlayResponderEscalationRuleTargetInput

func (ResponsePlayResponderEscalationRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderEscalationRuleTarget)(nil)).Elem()
}

func (i ResponsePlayResponderEscalationRuleTargetArray) ToResponsePlayResponderEscalationRuleTargetArrayOutput() ResponsePlayResponderEscalationRuleTargetArrayOutput {
	return i.ToResponsePlayResponderEscalationRuleTargetArrayOutputWithContext(context.Background())
}

func (i ResponsePlayResponderEscalationRuleTargetArray) ToResponsePlayResponderEscalationRuleTargetArrayOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderEscalationRuleTargetArrayOutput)
}

type ResponsePlayResponderEscalationRuleTargetOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderEscalationRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderEscalationRuleTarget)(nil)).Elem()
}

func (o ResponsePlayResponderEscalationRuleTargetOutput) ToResponsePlayResponderEscalationRuleTargetOutput() ResponsePlayResponderEscalationRuleTargetOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleTargetOutput) ToResponsePlayResponderEscalationRuleTargetOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleTargetOutput {
	return o
}

// ID of the user defined as the responder
func (o ResponsePlayResponderEscalationRuleTargetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderEscalationRuleTarget) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that determines the schema of the object. If not set, the default value is "responsePlay".
func (o ResponsePlayResponderEscalationRuleTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderEscalationRuleTarget) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResponsePlayResponderEscalationRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderEscalationRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderEscalationRuleTarget)(nil)).Elem()
}

func (o ResponsePlayResponderEscalationRuleTargetArrayOutput) ToResponsePlayResponderEscalationRuleTargetArrayOutput() ResponsePlayResponderEscalationRuleTargetArrayOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleTargetArrayOutput) ToResponsePlayResponderEscalationRuleTargetArrayOutputWithContext(ctx context.Context) ResponsePlayResponderEscalationRuleTargetArrayOutput {
	return o
}

func (o ResponsePlayResponderEscalationRuleTargetArrayOutput) Index(i pulumi.IntInput) ResponsePlayResponderEscalationRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlayResponderEscalationRuleTarget {
		return vs[0].([]ResponsePlayResponderEscalationRuleTarget)[vs[1].(int)]
	}).(ResponsePlayResponderEscalationRuleTargetOutput)
}

type ResponsePlayResponderService struct {
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type *string `pulumi:"type"`
}

// ResponsePlayResponderServiceInput is an input type that accepts ResponsePlayResponderServiceArgs and ResponsePlayResponderServiceOutput values.
// You can construct a concrete instance of `ResponsePlayResponderServiceInput` via:
//
//	ResponsePlayResponderServiceArgs{...}
type ResponsePlayResponderServiceInput interface {
	pulumi.Input

	ToResponsePlayResponderServiceOutput() ResponsePlayResponderServiceOutput
	ToResponsePlayResponderServiceOutputWithContext(context.Context) ResponsePlayResponderServiceOutput
}

type ResponsePlayResponderServiceArgs struct {
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResponsePlayResponderServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderService)(nil)).Elem()
}

func (i ResponsePlayResponderServiceArgs) ToResponsePlayResponderServiceOutput() ResponsePlayResponderServiceOutput {
	return i.ToResponsePlayResponderServiceOutputWithContext(context.Background())
}

func (i ResponsePlayResponderServiceArgs) ToResponsePlayResponderServiceOutputWithContext(ctx context.Context) ResponsePlayResponderServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderServiceOutput)
}

// ResponsePlayResponderServiceArrayInput is an input type that accepts ResponsePlayResponderServiceArray and ResponsePlayResponderServiceArrayOutput values.
// You can construct a concrete instance of `ResponsePlayResponderServiceArrayInput` via:
//
//	ResponsePlayResponderServiceArray{ ResponsePlayResponderServiceArgs{...} }
type ResponsePlayResponderServiceArrayInput interface {
	pulumi.Input

	ToResponsePlayResponderServiceArrayOutput() ResponsePlayResponderServiceArrayOutput
	ToResponsePlayResponderServiceArrayOutputWithContext(context.Context) ResponsePlayResponderServiceArrayOutput
}

type ResponsePlayResponderServiceArray []ResponsePlayResponderServiceInput

func (ResponsePlayResponderServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderService)(nil)).Elem()
}

func (i ResponsePlayResponderServiceArray) ToResponsePlayResponderServiceArrayOutput() ResponsePlayResponderServiceArrayOutput {
	return i.ToResponsePlayResponderServiceArrayOutputWithContext(context.Background())
}

func (i ResponsePlayResponderServiceArray) ToResponsePlayResponderServiceArrayOutputWithContext(ctx context.Context) ResponsePlayResponderServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderServiceArrayOutput)
}

type ResponsePlayResponderServiceOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderService)(nil)).Elem()
}

func (o ResponsePlayResponderServiceOutput) ToResponsePlayResponderServiceOutput() ResponsePlayResponderServiceOutput {
	return o
}

func (o ResponsePlayResponderServiceOutput) ToResponsePlayResponderServiceOutputWithContext(ctx context.Context) ResponsePlayResponderServiceOutput {
	return o
}

// ID of the user defined as the responder
func (o ResponsePlayResponderServiceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderService) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that determines the schema of the object. If not set, the default value is "responsePlay".
func (o ResponsePlayResponderServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResponsePlayResponderServiceArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderService)(nil)).Elem()
}

func (o ResponsePlayResponderServiceArrayOutput) ToResponsePlayResponderServiceArrayOutput() ResponsePlayResponderServiceArrayOutput {
	return o
}

func (o ResponsePlayResponderServiceArrayOutput) ToResponsePlayResponderServiceArrayOutputWithContext(ctx context.Context) ResponsePlayResponderServiceArrayOutput {
	return o
}

func (o ResponsePlayResponderServiceArrayOutput) Index(i pulumi.IntInput) ResponsePlayResponderServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlayResponderService {
		return vs[0].([]ResponsePlayResponderService)[vs[1].(int)]
	}).(ResponsePlayResponderServiceOutput)
}

type ResponsePlayResponderTeam struct {
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type string `pulumi:"type"`
}

// ResponsePlayResponderTeamInput is an input type that accepts ResponsePlayResponderTeamArgs and ResponsePlayResponderTeamOutput values.
// You can construct a concrete instance of `ResponsePlayResponderTeamInput` via:
//
//	ResponsePlayResponderTeamArgs{...}
type ResponsePlayResponderTeamInput interface {
	pulumi.Input

	ToResponsePlayResponderTeamOutput() ResponsePlayResponderTeamOutput
	ToResponsePlayResponderTeamOutputWithContext(context.Context) ResponsePlayResponderTeamOutput
}

type ResponsePlayResponderTeamArgs struct {
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsePlayResponderTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderTeam)(nil)).Elem()
}

func (i ResponsePlayResponderTeamArgs) ToResponsePlayResponderTeamOutput() ResponsePlayResponderTeamOutput {
	return i.ToResponsePlayResponderTeamOutputWithContext(context.Background())
}

func (i ResponsePlayResponderTeamArgs) ToResponsePlayResponderTeamOutputWithContext(ctx context.Context) ResponsePlayResponderTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderTeamOutput)
}

// ResponsePlayResponderTeamArrayInput is an input type that accepts ResponsePlayResponderTeamArray and ResponsePlayResponderTeamArrayOutput values.
// You can construct a concrete instance of `ResponsePlayResponderTeamArrayInput` via:
//
//	ResponsePlayResponderTeamArray{ ResponsePlayResponderTeamArgs{...} }
type ResponsePlayResponderTeamArrayInput interface {
	pulumi.Input

	ToResponsePlayResponderTeamArrayOutput() ResponsePlayResponderTeamArrayOutput
	ToResponsePlayResponderTeamArrayOutputWithContext(context.Context) ResponsePlayResponderTeamArrayOutput
}

type ResponsePlayResponderTeamArray []ResponsePlayResponderTeamInput

func (ResponsePlayResponderTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderTeam)(nil)).Elem()
}

func (i ResponsePlayResponderTeamArray) ToResponsePlayResponderTeamArrayOutput() ResponsePlayResponderTeamArrayOutput {
	return i.ToResponsePlayResponderTeamArrayOutputWithContext(context.Background())
}

func (i ResponsePlayResponderTeamArray) ToResponsePlayResponderTeamArrayOutputWithContext(ctx context.Context) ResponsePlayResponderTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlayResponderTeamArrayOutput)
}

type ResponsePlayResponderTeamOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlayResponderTeam)(nil)).Elem()
}

func (o ResponsePlayResponderTeamOutput) ToResponsePlayResponderTeamOutput() ResponsePlayResponderTeamOutput {
	return o
}

func (o ResponsePlayResponderTeamOutput) ToResponsePlayResponderTeamOutputWithContext(ctx context.Context) ResponsePlayResponderTeamOutput {
	return o
}

// ID of the user defined as the responder
func (o ResponsePlayResponderTeamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlayResponderTeam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that determines the schema of the object. If not set, the default value is "responsePlay".
func (o ResponsePlayResponderTeamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePlayResponderTeam) string { return v.Type }).(pulumi.StringOutput)
}

type ResponsePlayResponderTeamArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlayResponderTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlayResponderTeam)(nil)).Elem()
}

func (o ResponsePlayResponderTeamArrayOutput) ToResponsePlayResponderTeamArrayOutput() ResponsePlayResponderTeamArrayOutput {
	return o
}

func (o ResponsePlayResponderTeamArrayOutput) ToResponsePlayResponderTeamArrayOutputWithContext(ctx context.Context) ResponsePlayResponderTeamArrayOutput {
	return o
}

func (o ResponsePlayResponderTeamArrayOutput) Index(i pulumi.IntInput) ResponsePlayResponderTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlayResponderTeam {
		return vs[0].([]ResponsePlayResponderTeam)[vs[1].(int)]
	}).(ResponsePlayResponderTeamOutput)
}

type ResponsePlaySubscriber struct {
	// ID of the user defined as the responder
	Id *string `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type *string `pulumi:"type"`
}

// ResponsePlaySubscriberInput is an input type that accepts ResponsePlaySubscriberArgs and ResponsePlaySubscriberOutput values.
// You can construct a concrete instance of `ResponsePlaySubscriberInput` via:
//
//	ResponsePlaySubscriberArgs{...}
type ResponsePlaySubscriberInput interface {
	pulumi.Input

	ToResponsePlaySubscriberOutput() ResponsePlaySubscriberOutput
	ToResponsePlaySubscriberOutputWithContext(context.Context) ResponsePlaySubscriberOutput
}

type ResponsePlaySubscriberArgs struct {
	// ID of the user defined as the responder
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A string that determines the schema of the object. If not set, the default value is "responsePlay".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResponsePlaySubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlaySubscriber)(nil)).Elem()
}

func (i ResponsePlaySubscriberArgs) ToResponsePlaySubscriberOutput() ResponsePlaySubscriberOutput {
	return i.ToResponsePlaySubscriberOutputWithContext(context.Background())
}

func (i ResponsePlaySubscriberArgs) ToResponsePlaySubscriberOutputWithContext(ctx context.Context) ResponsePlaySubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlaySubscriberOutput)
}

// ResponsePlaySubscriberArrayInput is an input type that accepts ResponsePlaySubscriberArray and ResponsePlaySubscriberArrayOutput values.
// You can construct a concrete instance of `ResponsePlaySubscriberArrayInput` via:
//
//	ResponsePlaySubscriberArray{ ResponsePlaySubscriberArgs{...} }
type ResponsePlaySubscriberArrayInput interface {
	pulumi.Input

	ToResponsePlaySubscriberArrayOutput() ResponsePlaySubscriberArrayOutput
	ToResponsePlaySubscriberArrayOutputWithContext(context.Context) ResponsePlaySubscriberArrayOutput
}

type ResponsePlaySubscriberArray []ResponsePlaySubscriberInput

func (ResponsePlaySubscriberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlaySubscriber)(nil)).Elem()
}

func (i ResponsePlaySubscriberArray) ToResponsePlaySubscriberArrayOutput() ResponsePlaySubscriberArrayOutput {
	return i.ToResponsePlaySubscriberArrayOutputWithContext(context.Background())
}

func (i ResponsePlaySubscriberArray) ToResponsePlaySubscriberArrayOutputWithContext(ctx context.Context) ResponsePlaySubscriberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlaySubscriberArrayOutput)
}

type ResponsePlaySubscriberOutput struct{ *pulumi.OutputState }

func (ResponsePlaySubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlaySubscriber)(nil)).Elem()
}

func (o ResponsePlaySubscriberOutput) ToResponsePlaySubscriberOutput() ResponsePlaySubscriberOutput {
	return o
}

func (o ResponsePlaySubscriberOutput) ToResponsePlaySubscriberOutputWithContext(ctx context.Context) ResponsePlaySubscriberOutput {
	return o
}

// ID of the user defined as the responder
func (o ResponsePlaySubscriberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlaySubscriber) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A string that determines the schema of the object. If not set, the default value is "responsePlay".
func (o ResponsePlaySubscriberOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePlaySubscriber) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResponsePlaySubscriberArrayOutput struct{ *pulumi.OutputState }

func (ResponsePlaySubscriberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePlaySubscriber)(nil)).Elem()
}

func (o ResponsePlaySubscriberArrayOutput) ToResponsePlaySubscriberArrayOutput() ResponsePlaySubscriberArrayOutput {
	return o
}

func (o ResponsePlaySubscriberArrayOutput) ToResponsePlaySubscriberArrayOutputWithContext(ctx context.Context) ResponsePlaySubscriberArrayOutput {
	return o
}

func (o ResponsePlaySubscriberArrayOutput) Index(i pulumi.IntInput) ResponsePlaySubscriberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePlaySubscriber {
		return vs[0].([]ResponsePlaySubscriber)[vs[1].(int)]
	}).(ResponsePlaySubscriberOutput)
}

type RulesetRuleActions struct {
	// Note added to the event.
	Annotates []RulesetRuleActionsAnnotate `pulumi:"annotates"`
	// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
	EventActions []RulesetRuleActionsEventAction `pulumi:"eventActions"`
	// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
	Extractions []RulesetRuleActionsExtraction `pulumi:"extractions"`
	// The ID of the priority applied to the event.
	Priorities []RulesetRuleActionsPriority `pulumi:"priorities"`
	// The ID of the service where the event will be routed.
	Routes []RulesetRuleActionsRoute `pulumi:"routes"`
	// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
	Severities []RulesetRuleActionsSeverity `pulumi:"severities"`
	// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
	Suppresses []RulesetRuleActionsSuppress `pulumi:"suppresses"`
	// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
	Suspends []RulesetRuleActionsSuspend `pulumi:"suspends"`
}

// RulesetRuleActionsInput is an input type that accepts RulesetRuleActionsArgs and RulesetRuleActionsOutput values.
// You can construct a concrete instance of `RulesetRuleActionsInput` via:
//
//	RulesetRuleActionsArgs{...}
type RulesetRuleActionsInput interface {
	pulumi.Input

	ToRulesetRuleActionsOutput() RulesetRuleActionsOutput
	ToRulesetRuleActionsOutputWithContext(context.Context) RulesetRuleActionsOutput
}

type RulesetRuleActionsArgs struct {
	// Note added to the event.
	Annotates RulesetRuleActionsAnnotateArrayInput `pulumi:"annotates"`
	// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
	EventActions RulesetRuleActionsEventActionArrayInput `pulumi:"eventActions"`
	// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
	Extractions RulesetRuleActionsExtractionArrayInput `pulumi:"extractions"`
	// The ID of the priority applied to the event.
	Priorities RulesetRuleActionsPriorityArrayInput `pulumi:"priorities"`
	// The ID of the service where the event will be routed.
	Routes RulesetRuleActionsRouteArrayInput `pulumi:"routes"`
	// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
	Severities RulesetRuleActionsSeverityArrayInput `pulumi:"severities"`
	// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
	Suppresses RulesetRuleActionsSuppressArrayInput `pulumi:"suppresses"`
	// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
	Suspends RulesetRuleActionsSuspendArrayInput `pulumi:"suspends"`
}

func (RulesetRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActions)(nil)).Elem()
}

func (i RulesetRuleActionsArgs) ToRulesetRuleActionsOutput() RulesetRuleActionsOutput {
	return i.ToRulesetRuleActionsOutputWithContext(context.Background())
}

func (i RulesetRuleActionsArgs) ToRulesetRuleActionsOutputWithContext(ctx context.Context) RulesetRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsOutput)
}

func (i RulesetRuleActionsArgs) ToRulesetRuleActionsPtrOutput() RulesetRuleActionsPtrOutput {
	return i.ToRulesetRuleActionsPtrOutputWithContext(context.Background())
}

func (i RulesetRuleActionsArgs) ToRulesetRuleActionsPtrOutputWithContext(ctx context.Context) RulesetRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsOutput).ToRulesetRuleActionsPtrOutputWithContext(ctx)
}

// RulesetRuleActionsPtrInput is an input type that accepts RulesetRuleActionsArgs, RulesetRuleActionsPtr and RulesetRuleActionsPtrOutput values.
// You can construct a concrete instance of `RulesetRuleActionsPtrInput` via:
//
//	        RulesetRuleActionsArgs{...}
//
//	or:
//
//	        nil
type RulesetRuleActionsPtrInput interface {
	pulumi.Input

	ToRulesetRuleActionsPtrOutput() RulesetRuleActionsPtrOutput
	ToRulesetRuleActionsPtrOutputWithContext(context.Context) RulesetRuleActionsPtrOutput
}

type rulesetRuleActionsPtrType RulesetRuleActionsArgs

func RulesetRuleActionsPtr(v *RulesetRuleActionsArgs) RulesetRuleActionsPtrInput {
	return (*rulesetRuleActionsPtrType)(v)
}

func (*rulesetRuleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleActions)(nil)).Elem()
}

func (i *rulesetRuleActionsPtrType) ToRulesetRuleActionsPtrOutput() RulesetRuleActionsPtrOutput {
	return i.ToRulesetRuleActionsPtrOutputWithContext(context.Background())
}

func (i *rulesetRuleActionsPtrType) ToRulesetRuleActionsPtrOutputWithContext(ctx context.Context) RulesetRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsPtrOutput)
}

type RulesetRuleActionsOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActions)(nil)).Elem()
}

func (o RulesetRuleActionsOutput) ToRulesetRuleActionsOutput() RulesetRuleActionsOutput {
	return o
}

func (o RulesetRuleActionsOutput) ToRulesetRuleActionsOutputWithContext(ctx context.Context) RulesetRuleActionsOutput {
	return o
}

func (o RulesetRuleActionsOutput) ToRulesetRuleActionsPtrOutput() RulesetRuleActionsPtrOutput {
	return o.ToRulesetRuleActionsPtrOutputWithContext(context.Background())
}

func (o RulesetRuleActionsOutput) ToRulesetRuleActionsPtrOutputWithContext(ctx context.Context) RulesetRuleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesetRuleActions) *RulesetRuleActions {
		return &v
	}).(RulesetRuleActionsPtrOutput)
}

// Note added to the event.
func (o RulesetRuleActionsOutput) Annotates() RulesetRuleActionsAnnotateArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsAnnotate { return v.Annotates }).(RulesetRuleActionsAnnotateArrayOutput)
}

// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
func (o RulesetRuleActionsOutput) EventActions() RulesetRuleActionsEventActionArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsEventAction { return v.EventActions }).(RulesetRuleActionsEventActionArrayOutput)
}

// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
func (o RulesetRuleActionsOutput) Extractions() RulesetRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsExtraction { return v.Extractions }).(RulesetRuleActionsExtractionArrayOutput)
}

// The ID of the priority applied to the event.
func (o RulesetRuleActionsOutput) Priorities() RulesetRuleActionsPriorityArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsPriority { return v.Priorities }).(RulesetRuleActionsPriorityArrayOutput)
}

// The ID of the service where the event will be routed.
func (o RulesetRuleActionsOutput) Routes() RulesetRuleActionsRouteArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsRoute { return v.Routes }).(RulesetRuleActionsRouteArrayOutput)
}

// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
func (o RulesetRuleActionsOutput) Severities() RulesetRuleActionsSeverityArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsSeverity { return v.Severities }).(RulesetRuleActionsSeverityArrayOutput)
}

// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
func (o RulesetRuleActionsOutput) Suppresses() RulesetRuleActionsSuppressArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsSuppress { return v.Suppresses }).(RulesetRuleActionsSuppressArrayOutput)
}

// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
func (o RulesetRuleActionsOutput) Suspends() RulesetRuleActionsSuspendArrayOutput {
	return o.ApplyT(func(v RulesetRuleActions) []RulesetRuleActionsSuspend { return v.Suspends }).(RulesetRuleActionsSuspendArrayOutput)
}

type RulesetRuleActionsPtrOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleActions)(nil)).Elem()
}

func (o RulesetRuleActionsPtrOutput) ToRulesetRuleActionsPtrOutput() RulesetRuleActionsPtrOutput {
	return o
}

func (o RulesetRuleActionsPtrOutput) ToRulesetRuleActionsPtrOutputWithContext(ctx context.Context) RulesetRuleActionsPtrOutput {
	return o
}

func (o RulesetRuleActionsPtrOutput) Elem() RulesetRuleActionsOutput {
	return o.ApplyT(func(v *RulesetRuleActions) RulesetRuleActions {
		if v != nil {
			return *v
		}
		var ret RulesetRuleActions
		return ret
	}).(RulesetRuleActionsOutput)
}

// Note added to the event.
func (o RulesetRuleActionsPtrOutput) Annotates() RulesetRuleActionsAnnotateArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsAnnotate {
		if v == nil {
			return nil
		}
		return v.Annotates
	}).(RulesetRuleActionsAnnotateArrayOutput)
}

// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
func (o RulesetRuleActionsPtrOutput) EventActions() RulesetRuleActionsEventActionArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsEventAction {
		if v == nil {
			return nil
		}
		return v.EventActions
	}).(RulesetRuleActionsEventActionArrayOutput)
}

// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
func (o RulesetRuleActionsPtrOutput) Extractions() RulesetRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsExtraction {
		if v == nil {
			return nil
		}
		return v.Extractions
	}).(RulesetRuleActionsExtractionArrayOutput)
}

// The ID of the priority applied to the event.
func (o RulesetRuleActionsPtrOutput) Priorities() RulesetRuleActionsPriorityArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsPriority {
		if v == nil {
			return nil
		}
		return v.Priorities
	}).(RulesetRuleActionsPriorityArrayOutput)
}

// The ID of the service where the event will be routed.
func (o RulesetRuleActionsPtrOutput) Routes() RulesetRuleActionsRouteArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsRoute {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(RulesetRuleActionsRouteArrayOutput)
}

// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
func (o RulesetRuleActionsPtrOutput) Severities() RulesetRuleActionsSeverityArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsSeverity {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(RulesetRuleActionsSeverityArrayOutput)
}

// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
func (o RulesetRuleActionsPtrOutput) Suppresses() RulesetRuleActionsSuppressArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsSuppress {
		if v == nil {
			return nil
		}
		return v.Suppresses
	}).(RulesetRuleActionsSuppressArrayOutput)
}

// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
func (o RulesetRuleActionsPtrOutput) Suspends() RulesetRuleActionsSuspendArrayOutput {
	return o.ApplyT(func(v *RulesetRuleActions) []RulesetRuleActionsSuspend {
		if v == nil {
			return nil
		}
		return v.Suspends
	}).(RulesetRuleActionsSuspendArrayOutput)
}

type RulesetRuleActionsAnnotate struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleActionsAnnotateInput is an input type that accepts RulesetRuleActionsAnnotateArgs and RulesetRuleActionsAnnotateOutput values.
// You can construct a concrete instance of `RulesetRuleActionsAnnotateInput` via:
//
//	RulesetRuleActionsAnnotateArgs{...}
type RulesetRuleActionsAnnotateInput interface {
	pulumi.Input

	ToRulesetRuleActionsAnnotateOutput() RulesetRuleActionsAnnotateOutput
	ToRulesetRuleActionsAnnotateOutputWithContext(context.Context) RulesetRuleActionsAnnotateOutput
}

type RulesetRuleActionsAnnotateArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsAnnotateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsAnnotate)(nil)).Elem()
}

func (i RulesetRuleActionsAnnotateArgs) ToRulesetRuleActionsAnnotateOutput() RulesetRuleActionsAnnotateOutput {
	return i.ToRulesetRuleActionsAnnotateOutputWithContext(context.Background())
}

func (i RulesetRuleActionsAnnotateArgs) ToRulesetRuleActionsAnnotateOutputWithContext(ctx context.Context) RulesetRuleActionsAnnotateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsAnnotateOutput)
}

// RulesetRuleActionsAnnotateArrayInput is an input type that accepts RulesetRuleActionsAnnotateArray and RulesetRuleActionsAnnotateArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsAnnotateArrayInput` via:
//
//	RulesetRuleActionsAnnotateArray{ RulesetRuleActionsAnnotateArgs{...} }
type RulesetRuleActionsAnnotateArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsAnnotateArrayOutput() RulesetRuleActionsAnnotateArrayOutput
	ToRulesetRuleActionsAnnotateArrayOutputWithContext(context.Context) RulesetRuleActionsAnnotateArrayOutput
}

type RulesetRuleActionsAnnotateArray []RulesetRuleActionsAnnotateInput

func (RulesetRuleActionsAnnotateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsAnnotate)(nil)).Elem()
}

func (i RulesetRuleActionsAnnotateArray) ToRulesetRuleActionsAnnotateArrayOutput() RulesetRuleActionsAnnotateArrayOutput {
	return i.ToRulesetRuleActionsAnnotateArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsAnnotateArray) ToRulesetRuleActionsAnnotateArrayOutputWithContext(ctx context.Context) RulesetRuleActionsAnnotateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsAnnotateArrayOutput)
}

type RulesetRuleActionsAnnotateOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsAnnotateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsAnnotate)(nil)).Elem()
}

func (o RulesetRuleActionsAnnotateOutput) ToRulesetRuleActionsAnnotateOutput() RulesetRuleActionsAnnotateOutput {
	return o
}

func (o RulesetRuleActionsAnnotateOutput) ToRulesetRuleActionsAnnotateOutputWithContext(ctx context.Context) RulesetRuleActionsAnnotateOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsAnnotateOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsAnnotate) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsAnnotateArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsAnnotateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsAnnotate)(nil)).Elem()
}

func (o RulesetRuleActionsAnnotateArrayOutput) ToRulesetRuleActionsAnnotateArrayOutput() RulesetRuleActionsAnnotateArrayOutput {
	return o
}

func (o RulesetRuleActionsAnnotateArrayOutput) ToRulesetRuleActionsAnnotateArrayOutputWithContext(ctx context.Context) RulesetRuleActionsAnnotateArrayOutput {
	return o
}

func (o RulesetRuleActionsAnnotateArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsAnnotateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsAnnotate {
		return vs[0].([]RulesetRuleActionsAnnotate)[vs[1].(int)]
	}).(RulesetRuleActionsAnnotateOutput)
}

type RulesetRuleActionsEventAction struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleActionsEventActionInput is an input type that accepts RulesetRuleActionsEventActionArgs and RulesetRuleActionsEventActionOutput values.
// You can construct a concrete instance of `RulesetRuleActionsEventActionInput` via:
//
//	RulesetRuleActionsEventActionArgs{...}
type RulesetRuleActionsEventActionInput interface {
	pulumi.Input

	ToRulesetRuleActionsEventActionOutput() RulesetRuleActionsEventActionOutput
	ToRulesetRuleActionsEventActionOutputWithContext(context.Context) RulesetRuleActionsEventActionOutput
}

type RulesetRuleActionsEventActionArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsEventActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsEventAction)(nil)).Elem()
}

func (i RulesetRuleActionsEventActionArgs) ToRulesetRuleActionsEventActionOutput() RulesetRuleActionsEventActionOutput {
	return i.ToRulesetRuleActionsEventActionOutputWithContext(context.Background())
}

func (i RulesetRuleActionsEventActionArgs) ToRulesetRuleActionsEventActionOutputWithContext(ctx context.Context) RulesetRuleActionsEventActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsEventActionOutput)
}

// RulesetRuleActionsEventActionArrayInput is an input type that accepts RulesetRuleActionsEventActionArray and RulesetRuleActionsEventActionArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsEventActionArrayInput` via:
//
//	RulesetRuleActionsEventActionArray{ RulesetRuleActionsEventActionArgs{...} }
type RulesetRuleActionsEventActionArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsEventActionArrayOutput() RulesetRuleActionsEventActionArrayOutput
	ToRulesetRuleActionsEventActionArrayOutputWithContext(context.Context) RulesetRuleActionsEventActionArrayOutput
}

type RulesetRuleActionsEventActionArray []RulesetRuleActionsEventActionInput

func (RulesetRuleActionsEventActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsEventAction)(nil)).Elem()
}

func (i RulesetRuleActionsEventActionArray) ToRulesetRuleActionsEventActionArrayOutput() RulesetRuleActionsEventActionArrayOutput {
	return i.ToRulesetRuleActionsEventActionArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsEventActionArray) ToRulesetRuleActionsEventActionArrayOutputWithContext(ctx context.Context) RulesetRuleActionsEventActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsEventActionArrayOutput)
}

type RulesetRuleActionsEventActionOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsEventActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsEventAction)(nil)).Elem()
}

func (o RulesetRuleActionsEventActionOutput) ToRulesetRuleActionsEventActionOutput() RulesetRuleActionsEventActionOutput {
	return o
}

func (o RulesetRuleActionsEventActionOutput) ToRulesetRuleActionsEventActionOutputWithContext(ctx context.Context) RulesetRuleActionsEventActionOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsEventActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsEventAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsEventActionArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsEventActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsEventAction)(nil)).Elem()
}

func (o RulesetRuleActionsEventActionArrayOutput) ToRulesetRuleActionsEventActionArrayOutput() RulesetRuleActionsEventActionArrayOutput {
	return o
}

func (o RulesetRuleActionsEventActionArrayOutput) ToRulesetRuleActionsEventActionArrayOutputWithContext(ctx context.Context) RulesetRuleActionsEventActionArrayOutput {
	return o
}

func (o RulesetRuleActionsEventActionArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsEventActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsEventAction {
		return vs[0].([]RulesetRuleActionsEventAction)[vs[1].(int)]
	}).(RulesetRuleActionsEventActionOutput)
}

type RulesetRuleActionsExtraction struct {
	// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
	//
	// *- **OR** -*
	Regex *string `pulumi:"regex"`
	// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Source *string `pulumi:"source"`
	// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	//
	// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
	Target *string `pulumi:"target"`
	// A customized field message. This can also include variables extracted from the payload by using string interpolation.
	Template *string `pulumi:"template"`
}

// RulesetRuleActionsExtractionInput is an input type that accepts RulesetRuleActionsExtractionArgs and RulesetRuleActionsExtractionOutput values.
// You can construct a concrete instance of `RulesetRuleActionsExtractionInput` via:
//
//	RulesetRuleActionsExtractionArgs{...}
type RulesetRuleActionsExtractionInput interface {
	pulumi.Input

	ToRulesetRuleActionsExtractionOutput() RulesetRuleActionsExtractionOutput
	ToRulesetRuleActionsExtractionOutputWithContext(context.Context) RulesetRuleActionsExtractionOutput
}

type RulesetRuleActionsExtractionArgs struct {
	// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
	//
	// *- **OR** -*
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	//
	// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
	Target pulumi.StringPtrInput `pulumi:"target"`
	// A customized field message. This can also include variables extracted from the payload by using string interpolation.
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (RulesetRuleActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsExtraction)(nil)).Elem()
}

func (i RulesetRuleActionsExtractionArgs) ToRulesetRuleActionsExtractionOutput() RulesetRuleActionsExtractionOutput {
	return i.ToRulesetRuleActionsExtractionOutputWithContext(context.Background())
}

func (i RulesetRuleActionsExtractionArgs) ToRulesetRuleActionsExtractionOutputWithContext(ctx context.Context) RulesetRuleActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsExtractionOutput)
}

// RulesetRuleActionsExtractionArrayInput is an input type that accepts RulesetRuleActionsExtractionArray and RulesetRuleActionsExtractionArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsExtractionArrayInput` via:
//
//	RulesetRuleActionsExtractionArray{ RulesetRuleActionsExtractionArgs{...} }
type RulesetRuleActionsExtractionArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsExtractionArrayOutput() RulesetRuleActionsExtractionArrayOutput
	ToRulesetRuleActionsExtractionArrayOutputWithContext(context.Context) RulesetRuleActionsExtractionArrayOutput
}

type RulesetRuleActionsExtractionArray []RulesetRuleActionsExtractionInput

func (RulesetRuleActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsExtraction)(nil)).Elem()
}

func (i RulesetRuleActionsExtractionArray) ToRulesetRuleActionsExtractionArrayOutput() RulesetRuleActionsExtractionArrayOutput {
	return i.ToRulesetRuleActionsExtractionArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsExtractionArray) ToRulesetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) RulesetRuleActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsExtractionArrayOutput)
}

type RulesetRuleActionsExtractionOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsExtraction)(nil)).Elem()
}

func (o RulesetRuleActionsExtractionOutput) ToRulesetRuleActionsExtractionOutput() RulesetRuleActionsExtractionOutput {
	return o
}

func (o RulesetRuleActionsExtractionOutput) ToRulesetRuleActionsExtractionOutputWithContext(ctx context.Context) RulesetRuleActionsExtractionOutput {
	return o
}

// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
//
// *- **OR** -*
func (o RulesetRuleActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
func (o RulesetRuleActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
//
// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
func (o RulesetRuleActionsExtractionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsExtraction) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// A customized field message. This can also include variables extracted from the payload by using string interpolation.
func (o RulesetRuleActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsExtraction)(nil)).Elem()
}

func (o RulesetRuleActionsExtractionArrayOutput) ToRulesetRuleActionsExtractionArrayOutput() RulesetRuleActionsExtractionArrayOutput {
	return o
}

func (o RulesetRuleActionsExtractionArrayOutput) ToRulesetRuleActionsExtractionArrayOutputWithContext(ctx context.Context) RulesetRuleActionsExtractionArrayOutput {
	return o
}

func (o RulesetRuleActionsExtractionArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsExtraction {
		return vs[0].([]RulesetRuleActionsExtraction)[vs[1].(int)]
	}).(RulesetRuleActionsExtractionOutput)
}

type RulesetRuleActionsPriority struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleActionsPriorityInput is an input type that accepts RulesetRuleActionsPriorityArgs and RulesetRuleActionsPriorityOutput values.
// You can construct a concrete instance of `RulesetRuleActionsPriorityInput` via:
//
//	RulesetRuleActionsPriorityArgs{...}
type RulesetRuleActionsPriorityInput interface {
	pulumi.Input

	ToRulesetRuleActionsPriorityOutput() RulesetRuleActionsPriorityOutput
	ToRulesetRuleActionsPriorityOutputWithContext(context.Context) RulesetRuleActionsPriorityOutput
}

type RulesetRuleActionsPriorityArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsPriorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsPriority)(nil)).Elem()
}

func (i RulesetRuleActionsPriorityArgs) ToRulesetRuleActionsPriorityOutput() RulesetRuleActionsPriorityOutput {
	return i.ToRulesetRuleActionsPriorityOutputWithContext(context.Background())
}

func (i RulesetRuleActionsPriorityArgs) ToRulesetRuleActionsPriorityOutputWithContext(ctx context.Context) RulesetRuleActionsPriorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsPriorityOutput)
}

// RulesetRuleActionsPriorityArrayInput is an input type that accepts RulesetRuleActionsPriorityArray and RulesetRuleActionsPriorityArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsPriorityArrayInput` via:
//
//	RulesetRuleActionsPriorityArray{ RulesetRuleActionsPriorityArgs{...} }
type RulesetRuleActionsPriorityArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsPriorityArrayOutput() RulesetRuleActionsPriorityArrayOutput
	ToRulesetRuleActionsPriorityArrayOutputWithContext(context.Context) RulesetRuleActionsPriorityArrayOutput
}

type RulesetRuleActionsPriorityArray []RulesetRuleActionsPriorityInput

func (RulesetRuleActionsPriorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsPriority)(nil)).Elem()
}

func (i RulesetRuleActionsPriorityArray) ToRulesetRuleActionsPriorityArrayOutput() RulesetRuleActionsPriorityArrayOutput {
	return i.ToRulesetRuleActionsPriorityArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsPriorityArray) ToRulesetRuleActionsPriorityArrayOutputWithContext(ctx context.Context) RulesetRuleActionsPriorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsPriorityArrayOutput)
}

type RulesetRuleActionsPriorityOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsPriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsPriority)(nil)).Elem()
}

func (o RulesetRuleActionsPriorityOutput) ToRulesetRuleActionsPriorityOutput() RulesetRuleActionsPriorityOutput {
	return o
}

func (o RulesetRuleActionsPriorityOutput) ToRulesetRuleActionsPriorityOutputWithContext(ctx context.Context) RulesetRuleActionsPriorityOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsPriorityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsPriority) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsPriorityArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsPriorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsPriority)(nil)).Elem()
}

func (o RulesetRuleActionsPriorityArrayOutput) ToRulesetRuleActionsPriorityArrayOutput() RulesetRuleActionsPriorityArrayOutput {
	return o
}

func (o RulesetRuleActionsPriorityArrayOutput) ToRulesetRuleActionsPriorityArrayOutputWithContext(ctx context.Context) RulesetRuleActionsPriorityArrayOutput {
	return o
}

func (o RulesetRuleActionsPriorityArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsPriorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsPriority {
		return vs[0].([]RulesetRuleActionsPriority)[vs[1].(int)]
	}).(RulesetRuleActionsPriorityOutput)
}

type RulesetRuleActionsRoute struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleActionsRouteInput is an input type that accepts RulesetRuleActionsRouteArgs and RulesetRuleActionsRouteOutput values.
// You can construct a concrete instance of `RulesetRuleActionsRouteInput` via:
//
//	RulesetRuleActionsRouteArgs{...}
type RulesetRuleActionsRouteInput interface {
	pulumi.Input

	ToRulesetRuleActionsRouteOutput() RulesetRuleActionsRouteOutput
	ToRulesetRuleActionsRouteOutputWithContext(context.Context) RulesetRuleActionsRouteOutput
}

type RulesetRuleActionsRouteArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsRoute)(nil)).Elem()
}

func (i RulesetRuleActionsRouteArgs) ToRulesetRuleActionsRouteOutput() RulesetRuleActionsRouteOutput {
	return i.ToRulesetRuleActionsRouteOutputWithContext(context.Background())
}

func (i RulesetRuleActionsRouteArgs) ToRulesetRuleActionsRouteOutputWithContext(ctx context.Context) RulesetRuleActionsRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsRouteOutput)
}

// RulesetRuleActionsRouteArrayInput is an input type that accepts RulesetRuleActionsRouteArray and RulesetRuleActionsRouteArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsRouteArrayInput` via:
//
//	RulesetRuleActionsRouteArray{ RulesetRuleActionsRouteArgs{...} }
type RulesetRuleActionsRouteArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsRouteArrayOutput() RulesetRuleActionsRouteArrayOutput
	ToRulesetRuleActionsRouteArrayOutputWithContext(context.Context) RulesetRuleActionsRouteArrayOutput
}

type RulesetRuleActionsRouteArray []RulesetRuleActionsRouteInput

func (RulesetRuleActionsRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsRoute)(nil)).Elem()
}

func (i RulesetRuleActionsRouteArray) ToRulesetRuleActionsRouteArrayOutput() RulesetRuleActionsRouteArrayOutput {
	return i.ToRulesetRuleActionsRouteArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsRouteArray) ToRulesetRuleActionsRouteArrayOutputWithContext(ctx context.Context) RulesetRuleActionsRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsRouteArrayOutput)
}

type RulesetRuleActionsRouteOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsRoute)(nil)).Elem()
}

func (o RulesetRuleActionsRouteOutput) ToRulesetRuleActionsRouteOutput() RulesetRuleActionsRouteOutput {
	return o
}

func (o RulesetRuleActionsRouteOutput) ToRulesetRuleActionsRouteOutputWithContext(ctx context.Context) RulesetRuleActionsRouteOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsRouteOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsRoute) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsRouteArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsRoute)(nil)).Elem()
}

func (o RulesetRuleActionsRouteArrayOutput) ToRulesetRuleActionsRouteArrayOutput() RulesetRuleActionsRouteArrayOutput {
	return o
}

func (o RulesetRuleActionsRouteArrayOutput) ToRulesetRuleActionsRouteArrayOutputWithContext(ctx context.Context) RulesetRuleActionsRouteArrayOutput {
	return o
}

func (o RulesetRuleActionsRouteArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsRoute {
		return vs[0].([]RulesetRuleActionsRoute)[vs[1].(int)]
	}).(RulesetRuleActionsRouteOutput)
}

type RulesetRuleActionsSeverity struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleActionsSeverityInput is an input type that accepts RulesetRuleActionsSeverityArgs and RulesetRuleActionsSeverityOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSeverityInput` via:
//
//	RulesetRuleActionsSeverityArgs{...}
type RulesetRuleActionsSeverityInput interface {
	pulumi.Input

	ToRulesetRuleActionsSeverityOutput() RulesetRuleActionsSeverityOutput
	ToRulesetRuleActionsSeverityOutputWithContext(context.Context) RulesetRuleActionsSeverityOutput
}

type RulesetRuleActionsSeverityArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSeverity)(nil)).Elem()
}

func (i RulesetRuleActionsSeverityArgs) ToRulesetRuleActionsSeverityOutput() RulesetRuleActionsSeverityOutput {
	return i.ToRulesetRuleActionsSeverityOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSeverityArgs) ToRulesetRuleActionsSeverityOutputWithContext(ctx context.Context) RulesetRuleActionsSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSeverityOutput)
}

// RulesetRuleActionsSeverityArrayInput is an input type that accepts RulesetRuleActionsSeverityArray and RulesetRuleActionsSeverityArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSeverityArrayInput` via:
//
//	RulesetRuleActionsSeverityArray{ RulesetRuleActionsSeverityArgs{...} }
type RulesetRuleActionsSeverityArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsSeverityArrayOutput() RulesetRuleActionsSeverityArrayOutput
	ToRulesetRuleActionsSeverityArrayOutputWithContext(context.Context) RulesetRuleActionsSeverityArrayOutput
}

type RulesetRuleActionsSeverityArray []RulesetRuleActionsSeverityInput

func (RulesetRuleActionsSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSeverity)(nil)).Elem()
}

func (i RulesetRuleActionsSeverityArray) ToRulesetRuleActionsSeverityArrayOutput() RulesetRuleActionsSeverityArrayOutput {
	return i.ToRulesetRuleActionsSeverityArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSeverityArray) ToRulesetRuleActionsSeverityArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSeverityArrayOutput)
}

type RulesetRuleActionsSeverityOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSeverity)(nil)).Elem()
}

func (o RulesetRuleActionsSeverityOutput) ToRulesetRuleActionsSeverityOutput() RulesetRuleActionsSeverityOutput {
	return o
}

func (o RulesetRuleActionsSeverityOutput) ToRulesetRuleActionsSeverityOutputWithContext(ctx context.Context) RulesetRuleActionsSeverityOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsSeverityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSeverity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleActionsSeverityArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSeverity)(nil)).Elem()
}

func (o RulesetRuleActionsSeverityArrayOutput) ToRulesetRuleActionsSeverityArrayOutput() RulesetRuleActionsSeverityArrayOutput {
	return o
}

func (o RulesetRuleActionsSeverityArrayOutput) ToRulesetRuleActionsSeverityArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSeverityArrayOutput {
	return o
}

func (o RulesetRuleActionsSeverityArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsSeverity {
		return vs[0].([]RulesetRuleActionsSeverity)[vs[1].(int)]
	}).(RulesetRuleActionsSeverityOutput)
}

type RulesetRuleActionsSuppress struct {
	// The number value of the `thresholdTimeUnit` before an incident is created. Must be greater than 0.
	ThresholdTimeAmount *int `pulumi:"thresholdTimeAmount"`
	// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
	ThresholdTimeUnit *string `pulumi:"thresholdTimeUnit"`
	// The number of alerts that should be suppressed. Must be greater than 0.
	ThresholdValue *int `pulumi:"thresholdValue"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *bool `pulumi:"value"`
}

// RulesetRuleActionsSuppressInput is an input type that accepts RulesetRuleActionsSuppressArgs and RulesetRuleActionsSuppressOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSuppressInput` via:
//
//	RulesetRuleActionsSuppressArgs{...}
type RulesetRuleActionsSuppressInput interface {
	pulumi.Input

	ToRulesetRuleActionsSuppressOutput() RulesetRuleActionsSuppressOutput
	ToRulesetRuleActionsSuppressOutputWithContext(context.Context) RulesetRuleActionsSuppressOutput
}

type RulesetRuleActionsSuppressArgs struct {
	// The number value of the `thresholdTimeUnit` before an incident is created. Must be greater than 0.
	ThresholdTimeAmount pulumi.IntPtrInput `pulumi:"thresholdTimeAmount"`
	// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
	ThresholdTimeUnit pulumi.StringPtrInput `pulumi:"thresholdTimeUnit"`
	// The number of alerts that should be suppressed. Must be greater than 0.
	ThresholdValue pulumi.IntPtrInput `pulumi:"thresholdValue"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.BoolPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsSuppressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSuppress)(nil)).Elem()
}

func (i RulesetRuleActionsSuppressArgs) ToRulesetRuleActionsSuppressOutput() RulesetRuleActionsSuppressOutput {
	return i.ToRulesetRuleActionsSuppressOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSuppressArgs) ToRulesetRuleActionsSuppressOutputWithContext(ctx context.Context) RulesetRuleActionsSuppressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSuppressOutput)
}

// RulesetRuleActionsSuppressArrayInput is an input type that accepts RulesetRuleActionsSuppressArray and RulesetRuleActionsSuppressArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSuppressArrayInput` via:
//
//	RulesetRuleActionsSuppressArray{ RulesetRuleActionsSuppressArgs{...} }
type RulesetRuleActionsSuppressArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsSuppressArrayOutput() RulesetRuleActionsSuppressArrayOutput
	ToRulesetRuleActionsSuppressArrayOutputWithContext(context.Context) RulesetRuleActionsSuppressArrayOutput
}

type RulesetRuleActionsSuppressArray []RulesetRuleActionsSuppressInput

func (RulesetRuleActionsSuppressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSuppress)(nil)).Elem()
}

func (i RulesetRuleActionsSuppressArray) ToRulesetRuleActionsSuppressArrayOutput() RulesetRuleActionsSuppressArrayOutput {
	return i.ToRulesetRuleActionsSuppressArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSuppressArray) ToRulesetRuleActionsSuppressArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSuppressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSuppressArrayOutput)
}

type RulesetRuleActionsSuppressOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSuppressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSuppress)(nil)).Elem()
}

func (o RulesetRuleActionsSuppressOutput) ToRulesetRuleActionsSuppressOutput() RulesetRuleActionsSuppressOutput {
	return o
}

func (o RulesetRuleActionsSuppressOutput) ToRulesetRuleActionsSuppressOutputWithContext(ctx context.Context) RulesetRuleActionsSuppressOutput {
	return o
}

// The number value of the `thresholdTimeUnit` before an incident is created. Must be greater than 0.
func (o RulesetRuleActionsSuppressOutput) ThresholdTimeAmount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSuppress) *int { return v.ThresholdTimeAmount }).(pulumi.IntPtrOutput)
}

// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
func (o RulesetRuleActionsSuppressOutput) ThresholdTimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSuppress) *string { return v.ThresholdTimeUnit }).(pulumi.StringPtrOutput)
}

// The number of alerts that should be suppressed. Must be greater than 0.
func (o RulesetRuleActionsSuppressOutput) ThresholdValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSuppress) *int { return v.ThresholdValue }).(pulumi.IntPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsSuppressOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSuppress) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

type RulesetRuleActionsSuppressArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSuppressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSuppress)(nil)).Elem()
}

func (o RulesetRuleActionsSuppressArrayOutput) ToRulesetRuleActionsSuppressArrayOutput() RulesetRuleActionsSuppressArrayOutput {
	return o
}

func (o RulesetRuleActionsSuppressArrayOutput) ToRulesetRuleActionsSuppressArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSuppressArrayOutput {
	return o
}

func (o RulesetRuleActionsSuppressArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsSuppressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsSuppress {
		return vs[0].([]RulesetRuleActionsSuppress)[vs[1].(int)]
	}).(RulesetRuleActionsSuppressOutput)
}

type RulesetRuleActionsSuspend struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *int `pulumi:"value"`
}

// RulesetRuleActionsSuspendInput is an input type that accepts RulesetRuleActionsSuspendArgs and RulesetRuleActionsSuspendOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSuspendInput` via:
//
//	RulesetRuleActionsSuspendArgs{...}
type RulesetRuleActionsSuspendInput interface {
	pulumi.Input

	ToRulesetRuleActionsSuspendOutput() RulesetRuleActionsSuspendOutput
	ToRulesetRuleActionsSuspendOutputWithContext(context.Context) RulesetRuleActionsSuspendOutput
}

type RulesetRuleActionsSuspendArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.IntPtrInput `pulumi:"value"`
}

func (RulesetRuleActionsSuspendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSuspend)(nil)).Elem()
}

func (i RulesetRuleActionsSuspendArgs) ToRulesetRuleActionsSuspendOutput() RulesetRuleActionsSuspendOutput {
	return i.ToRulesetRuleActionsSuspendOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSuspendArgs) ToRulesetRuleActionsSuspendOutputWithContext(ctx context.Context) RulesetRuleActionsSuspendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSuspendOutput)
}

// RulesetRuleActionsSuspendArrayInput is an input type that accepts RulesetRuleActionsSuspendArray and RulesetRuleActionsSuspendArrayOutput values.
// You can construct a concrete instance of `RulesetRuleActionsSuspendArrayInput` via:
//
//	RulesetRuleActionsSuspendArray{ RulesetRuleActionsSuspendArgs{...} }
type RulesetRuleActionsSuspendArrayInput interface {
	pulumi.Input

	ToRulesetRuleActionsSuspendArrayOutput() RulesetRuleActionsSuspendArrayOutput
	ToRulesetRuleActionsSuspendArrayOutputWithContext(context.Context) RulesetRuleActionsSuspendArrayOutput
}

type RulesetRuleActionsSuspendArray []RulesetRuleActionsSuspendInput

func (RulesetRuleActionsSuspendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSuspend)(nil)).Elem()
}

func (i RulesetRuleActionsSuspendArray) ToRulesetRuleActionsSuspendArrayOutput() RulesetRuleActionsSuspendArrayOutput {
	return i.ToRulesetRuleActionsSuspendArrayOutputWithContext(context.Background())
}

func (i RulesetRuleActionsSuspendArray) ToRulesetRuleActionsSuspendArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSuspendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleActionsSuspendArrayOutput)
}

type RulesetRuleActionsSuspendOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSuspendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleActionsSuspend)(nil)).Elem()
}

func (o RulesetRuleActionsSuspendOutput) ToRulesetRuleActionsSuspendOutput() RulesetRuleActionsSuspendOutput {
	return o
}

func (o RulesetRuleActionsSuspendOutput) ToRulesetRuleActionsSuspendOutputWithContext(ctx context.Context) RulesetRuleActionsSuspendOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleActionsSuspendOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleActionsSuspend) *int { return v.Value }).(pulumi.IntPtrOutput)
}

type RulesetRuleActionsSuspendArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleActionsSuspendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleActionsSuspend)(nil)).Elem()
}

func (o RulesetRuleActionsSuspendArrayOutput) ToRulesetRuleActionsSuspendArrayOutput() RulesetRuleActionsSuspendArrayOutput {
	return o
}

func (o RulesetRuleActionsSuspendArrayOutput) ToRulesetRuleActionsSuspendArrayOutputWithContext(ctx context.Context) RulesetRuleActionsSuspendArrayOutput {
	return o
}

func (o RulesetRuleActionsSuspendArrayOutput) Index(i pulumi.IntInput) RulesetRuleActionsSuspendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleActionsSuspend {
		return vs[0].([]RulesetRuleActionsSuspend)[vs[1].(int)]
	}).(RulesetRuleActionsSuspendOutput)
}

type RulesetRuleConditions struct {
	// Operator to combine sub-conditions. Can be `and` or `or`.
	Operator *string `pulumi:"operator"`
	// List of sub-conditions that define the condition.
	Subconditions []RulesetRuleConditionsSubcondition `pulumi:"subconditions"`
}

// RulesetRuleConditionsInput is an input type that accepts RulesetRuleConditionsArgs and RulesetRuleConditionsOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsInput` via:
//
//	RulesetRuleConditionsArgs{...}
type RulesetRuleConditionsInput interface {
	pulumi.Input

	ToRulesetRuleConditionsOutput() RulesetRuleConditionsOutput
	ToRulesetRuleConditionsOutputWithContext(context.Context) RulesetRuleConditionsOutput
}

type RulesetRuleConditionsArgs struct {
	// Operator to combine sub-conditions. Can be `and` or `or`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// List of sub-conditions that define the condition.
	Subconditions RulesetRuleConditionsSubconditionArrayInput `pulumi:"subconditions"`
}

func (RulesetRuleConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditions)(nil)).Elem()
}

func (i RulesetRuleConditionsArgs) ToRulesetRuleConditionsOutput() RulesetRuleConditionsOutput {
	return i.ToRulesetRuleConditionsOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsArgs) ToRulesetRuleConditionsOutputWithContext(ctx context.Context) RulesetRuleConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsOutput)
}

func (i RulesetRuleConditionsArgs) ToRulesetRuleConditionsPtrOutput() RulesetRuleConditionsPtrOutput {
	return i.ToRulesetRuleConditionsPtrOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsArgs) ToRulesetRuleConditionsPtrOutputWithContext(ctx context.Context) RulesetRuleConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsOutput).ToRulesetRuleConditionsPtrOutputWithContext(ctx)
}

// RulesetRuleConditionsPtrInput is an input type that accepts RulesetRuleConditionsArgs, RulesetRuleConditionsPtr and RulesetRuleConditionsPtrOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsPtrInput` via:
//
//	        RulesetRuleConditionsArgs{...}
//
//	or:
//
//	        nil
type RulesetRuleConditionsPtrInput interface {
	pulumi.Input

	ToRulesetRuleConditionsPtrOutput() RulesetRuleConditionsPtrOutput
	ToRulesetRuleConditionsPtrOutputWithContext(context.Context) RulesetRuleConditionsPtrOutput
}

type rulesetRuleConditionsPtrType RulesetRuleConditionsArgs

func RulesetRuleConditionsPtr(v *RulesetRuleConditionsArgs) RulesetRuleConditionsPtrInput {
	return (*rulesetRuleConditionsPtrType)(v)
}

func (*rulesetRuleConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleConditions)(nil)).Elem()
}

func (i *rulesetRuleConditionsPtrType) ToRulesetRuleConditionsPtrOutput() RulesetRuleConditionsPtrOutput {
	return i.ToRulesetRuleConditionsPtrOutputWithContext(context.Background())
}

func (i *rulesetRuleConditionsPtrType) ToRulesetRuleConditionsPtrOutputWithContext(ctx context.Context) RulesetRuleConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsPtrOutput)
}

type RulesetRuleConditionsOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditions)(nil)).Elem()
}

func (o RulesetRuleConditionsOutput) ToRulesetRuleConditionsOutput() RulesetRuleConditionsOutput {
	return o
}

func (o RulesetRuleConditionsOutput) ToRulesetRuleConditionsOutputWithContext(ctx context.Context) RulesetRuleConditionsOutput {
	return o
}

func (o RulesetRuleConditionsOutput) ToRulesetRuleConditionsPtrOutput() RulesetRuleConditionsPtrOutput {
	return o.ToRulesetRuleConditionsPtrOutputWithContext(context.Background())
}

func (o RulesetRuleConditionsOutput) ToRulesetRuleConditionsPtrOutputWithContext(ctx context.Context) RulesetRuleConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesetRuleConditions) *RulesetRuleConditions {
		return &v
	}).(RulesetRuleConditionsPtrOutput)
}

// Operator to combine sub-conditions. Can be `and` or `or`.
func (o RulesetRuleConditionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleConditions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// List of sub-conditions that define the condition.
func (o RulesetRuleConditionsOutput) Subconditions() RulesetRuleConditionsSubconditionArrayOutput {
	return o.ApplyT(func(v RulesetRuleConditions) []RulesetRuleConditionsSubcondition { return v.Subconditions }).(RulesetRuleConditionsSubconditionArrayOutput)
}

type RulesetRuleConditionsPtrOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleConditions)(nil)).Elem()
}

func (o RulesetRuleConditionsPtrOutput) ToRulesetRuleConditionsPtrOutput() RulesetRuleConditionsPtrOutput {
	return o
}

func (o RulesetRuleConditionsPtrOutput) ToRulesetRuleConditionsPtrOutputWithContext(ctx context.Context) RulesetRuleConditionsPtrOutput {
	return o
}

func (o RulesetRuleConditionsPtrOutput) Elem() RulesetRuleConditionsOutput {
	return o.ApplyT(func(v *RulesetRuleConditions) RulesetRuleConditions {
		if v != nil {
			return *v
		}
		var ret RulesetRuleConditions
		return ret
	}).(RulesetRuleConditionsOutput)
}

// Operator to combine sub-conditions. Can be `and` or `or`.
func (o RulesetRuleConditionsPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulesetRuleConditions) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// List of sub-conditions that define the condition.
func (o RulesetRuleConditionsPtrOutput) Subconditions() RulesetRuleConditionsSubconditionArrayOutput {
	return o.ApplyT(func(v *RulesetRuleConditions) []RulesetRuleConditionsSubcondition {
		if v == nil {
			return nil
		}
		return v.Subconditions
	}).(RulesetRuleConditionsSubconditionArrayOutput)
}

type RulesetRuleConditionsSubcondition struct {
	// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
	Operator *string `pulumi:"operator"`
	// Parameter for the sub-condition. It requires both a `path` and `value` to be set.
	Parameters []RulesetRuleConditionsSubconditionParameter `pulumi:"parameters"`
}

// RulesetRuleConditionsSubconditionInput is an input type that accepts RulesetRuleConditionsSubconditionArgs and RulesetRuleConditionsSubconditionOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsSubconditionInput` via:
//
//	RulesetRuleConditionsSubconditionArgs{...}
type RulesetRuleConditionsSubconditionInput interface {
	pulumi.Input

	ToRulesetRuleConditionsSubconditionOutput() RulesetRuleConditionsSubconditionOutput
	ToRulesetRuleConditionsSubconditionOutputWithContext(context.Context) RulesetRuleConditionsSubconditionOutput
}

type RulesetRuleConditionsSubconditionArgs struct {
	// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Parameter for the sub-condition. It requires both a `path` and `value` to be set.
	Parameters RulesetRuleConditionsSubconditionParameterArrayInput `pulumi:"parameters"`
}

func (RulesetRuleConditionsSubconditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditionsSubcondition)(nil)).Elem()
}

func (i RulesetRuleConditionsSubconditionArgs) ToRulesetRuleConditionsSubconditionOutput() RulesetRuleConditionsSubconditionOutput {
	return i.ToRulesetRuleConditionsSubconditionOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsSubconditionArgs) ToRulesetRuleConditionsSubconditionOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsSubconditionOutput)
}

// RulesetRuleConditionsSubconditionArrayInput is an input type that accepts RulesetRuleConditionsSubconditionArray and RulesetRuleConditionsSubconditionArrayOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsSubconditionArrayInput` via:
//
//	RulesetRuleConditionsSubconditionArray{ RulesetRuleConditionsSubconditionArgs{...} }
type RulesetRuleConditionsSubconditionArrayInput interface {
	pulumi.Input

	ToRulesetRuleConditionsSubconditionArrayOutput() RulesetRuleConditionsSubconditionArrayOutput
	ToRulesetRuleConditionsSubconditionArrayOutputWithContext(context.Context) RulesetRuleConditionsSubconditionArrayOutput
}

type RulesetRuleConditionsSubconditionArray []RulesetRuleConditionsSubconditionInput

func (RulesetRuleConditionsSubconditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleConditionsSubcondition)(nil)).Elem()
}

func (i RulesetRuleConditionsSubconditionArray) ToRulesetRuleConditionsSubconditionArrayOutput() RulesetRuleConditionsSubconditionArrayOutput {
	return i.ToRulesetRuleConditionsSubconditionArrayOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsSubconditionArray) ToRulesetRuleConditionsSubconditionArrayOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsSubconditionArrayOutput)
}

type RulesetRuleConditionsSubconditionOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsSubconditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditionsSubcondition)(nil)).Elem()
}

func (o RulesetRuleConditionsSubconditionOutput) ToRulesetRuleConditionsSubconditionOutput() RulesetRuleConditionsSubconditionOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionOutput) ToRulesetRuleConditionsSubconditionOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionOutput {
	return o
}

// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
func (o RulesetRuleConditionsSubconditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleConditionsSubcondition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Parameter for the sub-condition. It requires both a `path` and `value` to be set.
func (o RulesetRuleConditionsSubconditionOutput) Parameters() RulesetRuleConditionsSubconditionParameterArrayOutput {
	return o.ApplyT(func(v RulesetRuleConditionsSubcondition) []RulesetRuleConditionsSubconditionParameter {
		return v.Parameters
	}).(RulesetRuleConditionsSubconditionParameterArrayOutput)
}

type RulesetRuleConditionsSubconditionArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsSubconditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleConditionsSubcondition)(nil)).Elem()
}

func (o RulesetRuleConditionsSubconditionArrayOutput) ToRulesetRuleConditionsSubconditionArrayOutput() RulesetRuleConditionsSubconditionArrayOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionArrayOutput) ToRulesetRuleConditionsSubconditionArrayOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionArrayOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionArrayOutput) Index(i pulumi.IntInput) RulesetRuleConditionsSubconditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleConditionsSubcondition {
		return vs[0].([]RulesetRuleConditionsSubcondition)[vs[1].(int)]
	}).(RulesetRuleConditionsSubconditionOutput)
}

type RulesetRuleConditionsSubconditionParameter struct {
	Path *string `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleConditionsSubconditionParameterInput is an input type that accepts RulesetRuleConditionsSubconditionParameterArgs and RulesetRuleConditionsSubconditionParameterOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsSubconditionParameterInput` via:
//
//	RulesetRuleConditionsSubconditionParameterArgs{...}
type RulesetRuleConditionsSubconditionParameterInput interface {
	pulumi.Input

	ToRulesetRuleConditionsSubconditionParameterOutput() RulesetRuleConditionsSubconditionParameterOutput
	ToRulesetRuleConditionsSubconditionParameterOutputWithContext(context.Context) RulesetRuleConditionsSubconditionParameterOutput
}

type RulesetRuleConditionsSubconditionParameterArgs struct {
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleConditionsSubconditionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (i RulesetRuleConditionsSubconditionParameterArgs) ToRulesetRuleConditionsSubconditionParameterOutput() RulesetRuleConditionsSubconditionParameterOutput {
	return i.ToRulesetRuleConditionsSubconditionParameterOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsSubconditionParameterArgs) ToRulesetRuleConditionsSubconditionParameterOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsSubconditionParameterOutput)
}

// RulesetRuleConditionsSubconditionParameterArrayInput is an input type that accepts RulesetRuleConditionsSubconditionParameterArray and RulesetRuleConditionsSubconditionParameterArrayOutput values.
// You can construct a concrete instance of `RulesetRuleConditionsSubconditionParameterArrayInput` via:
//
//	RulesetRuleConditionsSubconditionParameterArray{ RulesetRuleConditionsSubconditionParameterArgs{...} }
type RulesetRuleConditionsSubconditionParameterArrayInput interface {
	pulumi.Input

	ToRulesetRuleConditionsSubconditionParameterArrayOutput() RulesetRuleConditionsSubconditionParameterArrayOutput
	ToRulesetRuleConditionsSubconditionParameterArrayOutputWithContext(context.Context) RulesetRuleConditionsSubconditionParameterArrayOutput
}

type RulesetRuleConditionsSubconditionParameterArray []RulesetRuleConditionsSubconditionParameterInput

func (RulesetRuleConditionsSubconditionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (i RulesetRuleConditionsSubconditionParameterArray) ToRulesetRuleConditionsSubconditionParameterArrayOutput() RulesetRuleConditionsSubconditionParameterArrayOutput {
	return i.ToRulesetRuleConditionsSubconditionParameterArrayOutputWithContext(context.Background())
}

func (i RulesetRuleConditionsSubconditionParameterArray) ToRulesetRuleConditionsSubconditionParameterArrayOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleConditionsSubconditionParameterArrayOutput)
}

type RulesetRuleConditionsSubconditionParameterOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsSubconditionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (o RulesetRuleConditionsSubconditionParameterOutput) ToRulesetRuleConditionsSubconditionParameterOutput() RulesetRuleConditionsSubconditionParameterOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionParameterOutput) ToRulesetRuleConditionsSubconditionParameterOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionParameterOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionParameterOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleConditionsSubconditionParameter) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleConditionsSubconditionParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleConditionsSubconditionParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleConditionsSubconditionParameterArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleConditionsSubconditionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (o RulesetRuleConditionsSubconditionParameterArrayOutput) ToRulesetRuleConditionsSubconditionParameterArrayOutput() RulesetRuleConditionsSubconditionParameterArrayOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionParameterArrayOutput) ToRulesetRuleConditionsSubconditionParameterArrayOutputWithContext(ctx context.Context) RulesetRuleConditionsSubconditionParameterArrayOutput {
	return o
}

func (o RulesetRuleConditionsSubconditionParameterArrayOutput) Index(i pulumi.IntInput) RulesetRuleConditionsSubconditionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleConditionsSubconditionParameter {
		return vs[0].([]RulesetRuleConditionsSubconditionParameter)[vs[1].(int)]
	}).(RulesetRuleConditionsSubconditionParameterOutput)
}

type RulesetRuleTimeFrame struct {
	// Values for executing the rule during a specific time period.
	ActiveBetweens []RulesetRuleTimeFrameActiveBetween `pulumi:"activeBetweens"`
	// Values for executing the rule on a recurring schedule.
	ScheduledWeeklies []RulesetRuleTimeFrameScheduledWeekly `pulumi:"scheduledWeeklies"`
}

// RulesetRuleTimeFrameInput is an input type that accepts RulesetRuleTimeFrameArgs and RulesetRuleTimeFrameOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFrameInput` via:
//
//	RulesetRuleTimeFrameArgs{...}
type RulesetRuleTimeFrameInput interface {
	pulumi.Input

	ToRulesetRuleTimeFrameOutput() RulesetRuleTimeFrameOutput
	ToRulesetRuleTimeFrameOutputWithContext(context.Context) RulesetRuleTimeFrameOutput
}

type RulesetRuleTimeFrameArgs struct {
	// Values for executing the rule during a specific time period.
	ActiveBetweens RulesetRuleTimeFrameActiveBetweenArrayInput `pulumi:"activeBetweens"`
	// Values for executing the rule on a recurring schedule.
	ScheduledWeeklies RulesetRuleTimeFrameScheduledWeeklyArrayInput `pulumi:"scheduledWeeklies"`
}

func (RulesetRuleTimeFrameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrame)(nil)).Elem()
}

func (i RulesetRuleTimeFrameArgs) ToRulesetRuleTimeFrameOutput() RulesetRuleTimeFrameOutput {
	return i.ToRulesetRuleTimeFrameOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameArgs) ToRulesetRuleTimeFrameOutputWithContext(ctx context.Context) RulesetRuleTimeFrameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameOutput)
}

func (i RulesetRuleTimeFrameArgs) ToRulesetRuleTimeFramePtrOutput() RulesetRuleTimeFramePtrOutput {
	return i.ToRulesetRuleTimeFramePtrOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameArgs) ToRulesetRuleTimeFramePtrOutputWithContext(ctx context.Context) RulesetRuleTimeFramePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameOutput).ToRulesetRuleTimeFramePtrOutputWithContext(ctx)
}

// RulesetRuleTimeFramePtrInput is an input type that accepts RulesetRuleTimeFrameArgs, RulesetRuleTimeFramePtr and RulesetRuleTimeFramePtrOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFramePtrInput` via:
//
//	        RulesetRuleTimeFrameArgs{...}
//
//	or:
//
//	        nil
type RulesetRuleTimeFramePtrInput interface {
	pulumi.Input

	ToRulesetRuleTimeFramePtrOutput() RulesetRuleTimeFramePtrOutput
	ToRulesetRuleTimeFramePtrOutputWithContext(context.Context) RulesetRuleTimeFramePtrOutput
}

type rulesetRuleTimeFramePtrType RulesetRuleTimeFrameArgs

func RulesetRuleTimeFramePtr(v *RulesetRuleTimeFrameArgs) RulesetRuleTimeFramePtrInput {
	return (*rulesetRuleTimeFramePtrType)(v)
}

func (*rulesetRuleTimeFramePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleTimeFrame)(nil)).Elem()
}

func (i *rulesetRuleTimeFramePtrType) ToRulesetRuleTimeFramePtrOutput() RulesetRuleTimeFramePtrOutput {
	return i.ToRulesetRuleTimeFramePtrOutputWithContext(context.Background())
}

func (i *rulesetRuleTimeFramePtrType) ToRulesetRuleTimeFramePtrOutputWithContext(ctx context.Context) RulesetRuleTimeFramePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFramePtrOutput)
}

type RulesetRuleTimeFrameOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFrameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrame)(nil)).Elem()
}

func (o RulesetRuleTimeFrameOutput) ToRulesetRuleTimeFrameOutput() RulesetRuleTimeFrameOutput {
	return o
}

func (o RulesetRuleTimeFrameOutput) ToRulesetRuleTimeFrameOutputWithContext(ctx context.Context) RulesetRuleTimeFrameOutput {
	return o
}

func (o RulesetRuleTimeFrameOutput) ToRulesetRuleTimeFramePtrOutput() RulesetRuleTimeFramePtrOutput {
	return o.ToRulesetRuleTimeFramePtrOutputWithContext(context.Background())
}

func (o RulesetRuleTimeFrameOutput) ToRulesetRuleTimeFramePtrOutputWithContext(ctx context.Context) RulesetRuleTimeFramePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesetRuleTimeFrame) *RulesetRuleTimeFrame {
		return &v
	}).(RulesetRuleTimeFramePtrOutput)
}

// Values for executing the rule during a specific time period.
func (o RulesetRuleTimeFrameOutput) ActiveBetweens() RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrame) []RulesetRuleTimeFrameActiveBetween { return v.ActiveBetweens }).(RulesetRuleTimeFrameActiveBetweenArrayOutput)
}

// Values for executing the rule on a recurring schedule.
func (o RulesetRuleTimeFrameOutput) ScheduledWeeklies() RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrame) []RulesetRuleTimeFrameScheduledWeekly { return v.ScheduledWeeklies }).(RulesetRuleTimeFrameScheduledWeeklyArrayOutput)
}

type RulesetRuleTimeFramePtrOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFramePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetRuleTimeFrame)(nil)).Elem()
}

func (o RulesetRuleTimeFramePtrOutput) ToRulesetRuleTimeFramePtrOutput() RulesetRuleTimeFramePtrOutput {
	return o
}

func (o RulesetRuleTimeFramePtrOutput) ToRulesetRuleTimeFramePtrOutputWithContext(ctx context.Context) RulesetRuleTimeFramePtrOutput {
	return o
}

func (o RulesetRuleTimeFramePtrOutput) Elem() RulesetRuleTimeFrameOutput {
	return o.ApplyT(func(v *RulesetRuleTimeFrame) RulesetRuleTimeFrame {
		if v != nil {
			return *v
		}
		var ret RulesetRuleTimeFrame
		return ret
	}).(RulesetRuleTimeFrameOutput)
}

// Values for executing the rule during a specific time period.
func (o RulesetRuleTimeFramePtrOutput) ActiveBetweens() RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return o.ApplyT(func(v *RulesetRuleTimeFrame) []RulesetRuleTimeFrameActiveBetween {
		if v == nil {
			return nil
		}
		return v.ActiveBetweens
	}).(RulesetRuleTimeFrameActiveBetweenArrayOutput)
}

// Values for executing the rule on a recurring schedule.
func (o RulesetRuleTimeFramePtrOutput) ScheduledWeeklies() RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return o.ApplyT(func(v *RulesetRuleTimeFrame) []RulesetRuleTimeFrameScheduledWeekly {
		if v == nil {
			return nil
		}
		return v.ScheduledWeeklies
	}).(RulesetRuleTimeFrameScheduledWeeklyArrayOutput)
}

type RulesetRuleTimeFrameActiveBetween struct {
	EndTime *int `pulumi:"endTime"`
	// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
	StartTime *int `pulumi:"startTime"`
}

// RulesetRuleTimeFrameActiveBetweenInput is an input type that accepts RulesetRuleTimeFrameActiveBetweenArgs and RulesetRuleTimeFrameActiveBetweenOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFrameActiveBetweenInput` via:
//
//	RulesetRuleTimeFrameActiveBetweenArgs{...}
type RulesetRuleTimeFrameActiveBetweenInput interface {
	pulumi.Input

	ToRulesetRuleTimeFrameActiveBetweenOutput() RulesetRuleTimeFrameActiveBetweenOutput
	ToRulesetRuleTimeFrameActiveBetweenOutputWithContext(context.Context) RulesetRuleTimeFrameActiveBetweenOutput
}

type RulesetRuleTimeFrameActiveBetweenArgs struct {
	EndTime pulumi.IntPtrInput `pulumi:"endTime"`
	// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
	StartTime pulumi.IntPtrInput `pulumi:"startTime"`
}

func (RulesetRuleTimeFrameActiveBetweenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (i RulesetRuleTimeFrameActiveBetweenArgs) ToRulesetRuleTimeFrameActiveBetweenOutput() RulesetRuleTimeFrameActiveBetweenOutput {
	return i.ToRulesetRuleTimeFrameActiveBetweenOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameActiveBetweenArgs) ToRulesetRuleTimeFrameActiveBetweenOutputWithContext(ctx context.Context) RulesetRuleTimeFrameActiveBetweenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameActiveBetweenOutput)
}

// RulesetRuleTimeFrameActiveBetweenArrayInput is an input type that accepts RulesetRuleTimeFrameActiveBetweenArray and RulesetRuleTimeFrameActiveBetweenArrayOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFrameActiveBetweenArrayInput` via:
//
//	RulesetRuleTimeFrameActiveBetweenArray{ RulesetRuleTimeFrameActiveBetweenArgs{...} }
type RulesetRuleTimeFrameActiveBetweenArrayInput interface {
	pulumi.Input

	ToRulesetRuleTimeFrameActiveBetweenArrayOutput() RulesetRuleTimeFrameActiveBetweenArrayOutput
	ToRulesetRuleTimeFrameActiveBetweenArrayOutputWithContext(context.Context) RulesetRuleTimeFrameActiveBetweenArrayOutput
}

type RulesetRuleTimeFrameActiveBetweenArray []RulesetRuleTimeFrameActiveBetweenInput

func (RulesetRuleTimeFrameActiveBetweenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (i RulesetRuleTimeFrameActiveBetweenArray) ToRulesetRuleTimeFrameActiveBetweenArrayOutput() RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return i.ToRulesetRuleTimeFrameActiveBetweenArrayOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameActiveBetweenArray) ToRulesetRuleTimeFrameActiveBetweenArrayOutputWithContext(ctx context.Context) RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameActiveBetweenArrayOutput)
}

type RulesetRuleTimeFrameActiveBetweenOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFrameActiveBetweenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (o RulesetRuleTimeFrameActiveBetweenOutput) ToRulesetRuleTimeFrameActiveBetweenOutput() RulesetRuleTimeFrameActiveBetweenOutput {
	return o
}

func (o RulesetRuleTimeFrameActiveBetweenOutput) ToRulesetRuleTimeFrameActiveBetweenOutputWithContext(ctx context.Context) RulesetRuleTimeFrameActiveBetweenOutput {
	return o
}

func (o RulesetRuleTimeFrameActiveBetweenOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameActiveBetween) *int { return v.EndTime }).(pulumi.IntPtrOutput)
}

// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
func (o RulesetRuleTimeFrameActiveBetweenOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameActiveBetween) *int { return v.StartTime }).(pulumi.IntPtrOutput)
}

type RulesetRuleTimeFrameActiveBetweenArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFrameActiveBetweenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (o RulesetRuleTimeFrameActiveBetweenArrayOutput) ToRulesetRuleTimeFrameActiveBetweenArrayOutput() RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return o
}

func (o RulesetRuleTimeFrameActiveBetweenArrayOutput) ToRulesetRuleTimeFrameActiveBetweenArrayOutputWithContext(ctx context.Context) RulesetRuleTimeFrameActiveBetweenArrayOutput {
	return o
}

func (o RulesetRuleTimeFrameActiveBetweenArrayOutput) Index(i pulumi.IntInput) RulesetRuleTimeFrameActiveBetweenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleTimeFrameActiveBetween {
		return vs[0].([]RulesetRuleTimeFrameActiveBetween)[vs[1].(int)]
	}).(RulesetRuleTimeFrameActiveBetweenOutput)
}

type RulesetRuleTimeFrameScheduledWeekly struct {
	// Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `startTime`.
	Duration *int `pulumi:"duration"`
	// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
	StartTime *int `pulumi:"startTime"`
	// [The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = "America/Toronto"`
	Timezone *string `pulumi:"timezone"`
	// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
	Weekdays []int `pulumi:"weekdays"`
}

// RulesetRuleTimeFrameScheduledWeeklyInput is an input type that accepts RulesetRuleTimeFrameScheduledWeeklyArgs and RulesetRuleTimeFrameScheduledWeeklyOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFrameScheduledWeeklyInput` via:
//
//	RulesetRuleTimeFrameScheduledWeeklyArgs{...}
type RulesetRuleTimeFrameScheduledWeeklyInput interface {
	pulumi.Input

	ToRulesetRuleTimeFrameScheduledWeeklyOutput() RulesetRuleTimeFrameScheduledWeeklyOutput
	ToRulesetRuleTimeFrameScheduledWeeklyOutputWithContext(context.Context) RulesetRuleTimeFrameScheduledWeeklyOutput
}

type RulesetRuleTimeFrameScheduledWeeklyArgs struct {
	// Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `startTime`.
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
	StartTime pulumi.IntPtrInput `pulumi:"startTime"`
	// [The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = "America/Toronto"`
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
	Weekdays pulumi.IntArrayInput `pulumi:"weekdays"`
}

func (RulesetRuleTimeFrameScheduledWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (i RulesetRuleTimeFrameScheduledWeeklyArgs) ToRulesetRuleTimeFrameScheduledWeeklyOutput() RulesetRuleTimeFrameScheduledWeeklyOutput {
	return i.ToRulesetRuleTimeFrameScheduledWeeklyOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameScheduledWeeklyArgs) ToRulesetRuleTimeFrameScheduledWeeklyOutputWithContext(ctx context.Context) RulesetRuleTimeFrameScheduledWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameScheduledWeeklyOutput)
}

// RulesetRuleTimeFrameScheduledWeeklyArrayInput is an input type that accepts RulesetRuleTimeFrameScheduledWeeklyArray and RulesetRuleTimeFrameScheduledWeeklyArrayOutput values.
// You can construct a concrete instance of `RulesetRuleTimeFrameScheduledWeeklyArrayInput` via:
//
//	RulesetRuleTimeFrameScheduledWeeklyArray{ RulesetRuleTimeFrameScheduledWeeklyArgs{...} }
type RulesetRuleTimeFrameScheduledWeeklyArrayInput interface {
	pulumi.Input

	ToRulesetRuleTimeFrameScheduledWeeklyArrayOutput() RulesetRuleTimeFrameScheduledWeeklyArrayOutput
	ToRulesetRuleTimeFrameScheduledWeeklyArrayOutputWithContext(context.Context) RulesetRuleTimeFrameScheduledWeeklyArrayOutput
}

type RulesetRuleTimeFrameScheduledWeeklyArray []RulesetRuleTimeFrameScheduledWeeklyInput

func (RulesetRuleTimeFrameScheduledWeeklyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (i RulesetRuleTimeFrameScheduledWeeklyArray) ToRulesetRuleTimeFrameScheduledWeeklyArrayOutput() RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return i.ToRulesetRuleTimeFrameScheduledWeeklyArrayOutputWithContext(context.Background())
}

func (i RulesetRuleTimeFrameScheduledWeeklyArray) ToRulesetRuleTimeFrameScheduledWeeklyArrayOutputWithContext(ctx context.Context) RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleTimeFrameScheduledWeeklyArrayOutput)
}

type RulesetRuleTimeFrameScheduledWeeklyOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFrameScheduledWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (o RulesetRuleTimeFrameScheduledWeeklyOutput) ToRulesetRuleTimeFrameScheduledWeeklyOutput() RulesetRuleTimeFrameScheduledWeeklyOutput {
	return o
}

func (o RulesetRuleTimeFrameScheduledWeeklyOutput) ToRulesetRuleTimeFrameScheduledWeeklyOutputWithContext(ctx context.Context) RulesetRuleTimeFrameScheduledWeeklyOutput {
	return o
}

// Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `startTime`.
func (o RulesetRuleTimeFrameScheduledWeeklyOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameScheduledWeekly) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `timeStatic` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
func (o RulesetRuleTimeFrameScheduledWeeklyOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameScheduledWeekly) *int { return v.StartTime }).(pulumi.IntPtrOutput)
}

// [The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = "America/Toronto"`
func (o RulesetRuleTimeFrameScheduledWeeklyOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameScheduledWeekly) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
func (o RulesetRuleTimeFrameScheduledWeeklyOutput) Weekdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RulesetRuleTimeFrameScheduledWeekly) []int { return v.Weekdays }).(pulumi.IntArrayOutput)
}

type RulesetRuleTimeFrameScheduledWeeklyArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleTimeFrameScheduledWeeklyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (o RulesetRuleTimeFrameScheduledWeeklyArrayOutput) ToRulesetRuleTimeFrameScheduledWeeklyArrayOutput() RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return o
}

func (o RulesetRuleTimeFrameScheduledWeeklyArrayOutput) ToRulesetRuleTimeFrameScheduledWeeklyArrayOutputWithContext(ctx context.Context) RulesetRuleTimeFrameScheduledWeeklyArrayOutput {
	return o
}

func (o RulesetRuleTimeFrameScheduledWeeklyArrayOutput) Index(i pulumi.IntInput) RulesetRuleTimeFrameScheduledWeeklyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleTimeFrameScheduledWeekly {
		return vs[0].([]RulesetRuleTimeFrameScheduledWeekly)[vs[1].(int)]
	}).(RulesetRuleTimeFrameScheduledWeeklyOutput)
}

type RulesetRuleVariable struct {
	Name       *string                        `pulumi:"name"`
	Parameters []RulesetRuleVariableParameter `pulumi:"parameters"`
	Type       *string                        `pulumi:"type"`
}

// RulesetRuleVariableInput is an input type that accepts RulesetRuleVariableArgs and RulesetRuleVariableOutput values.
// You can construct a concrete instance of `RulesetRuleVariableInput` via:
//
//	RulesetRuleVariableArgs{...}
type RulesetRuleVariableInput interface {
	pulumi.Input

	ToRulesetRuleVariableOutput() RulesetRuleVariableOutput
	ToRulesetRuleVariableOutputWithContext(context.Context) RulesetRuleVariableOutput
}

type RulesetRuleVariableArgs struct {
	Name       pulumi.StringPtrInput                  `pulumi:"name"`
	Parameters RulesetRuleVariableParameterArrayInput `pulumi:"parameters"`
	Type       pulumi.StringPtrInput                  `pulumi:"type"`
}

func (RulesetRuleVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleVariable)(nil)).Elem()
}

func (i RulesetRuleVariableArgs) ToRulesetRuleVariableOutput() RulesetRuleVariableOutput {
	return i.ToRulesetRuleVariableOutputWithContext(context.Background())
}

func (i RulesetRuleVariableArgs) ToRulesetRuleVariableOutputWithContext(ctx context.Context) RulesetRuleVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleVariableOutput)
}

// RulesetRuleVariableArrayInput is an input type that accepts RulesetRuleVariableArray and RulesetRuleVariableArrayOutput values.
// You can construct a concrete instance of `RulesetRuleVariableArrayInput` via:
//
//	RulesetRuleVariableArray{ RulesetRuleVariableArgs{...} }
type RulesetRuleVariableArrayInput interface {
	pulumi.Input

	ToRulesetRuleVariableArrayOutput() RulesetRuleVariableArrayOutput
	ToRulesetRuleVariableArrayOutputWithContext(context.Context) RulesetRuleVariableArrayOutput
}

type RulesetRuleVariableArray []RulesetRuleVariableInput

func (RulesetRuleVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleVariable)(nil)).Elem()
}

func (i RulesetRuleVariableArray) ToRulesetRuleVariableArrayOutput() RulesetRuleVariableArrayOutput {
	return i.ToRulesetRuleVariableArrayOutputWithContext(context.Background())
}

func (i RulesetRuleVariableArray) ToRulesetRuleVariableArrayOutputWithContext(ctx context.Context) RulesetRuleVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleVariableArrayOutput)
}

type RulesetRuleVariableOutput struct{ *pulumi.OutputState }

func (RulesetRuleVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleVariable)(nil)).Elem()
}

func (o RulesetRuleVariableOutput) ToRulesetRuleVariableOutput() RulesetRuleVariableOutput {
	return o
}

func (o RulesetRuleVariableOutput) ToRulesetRuleVariableOutputWithContext(ctx context.Context) RulesetRuleVariableOutput {
	return o
}

func (o RulesetRuleVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o RulesetRuleVariableOutput) Parameters() RulesetRuleVariableParameterArrayOutput {
	return o.ApplyT(func(v RulesetRuleVariable) []RulesetRuleVariableParameter { return v.Parameters }).(RulesetRuleVariableParameterArrayOutput)
}

func (o RulesetRuleVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RulesetRuleVariableArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleVariable)(nil)).Elem()
}

func (o RulesetRuleVariableArrayOutput) ToRulesetRuleVariableArrayOutput() RulesetRuleVariableArrayOutput {
	return o
}

func (o RulesetRuleVariableArrayOutput) ToRulesetRuleVariableArrayOutputWithContext(ctx context.Context) RulesetRuleVariableArrayOutput {
	return o
}

func (o RulesetRuleVariableArrayOutput) Index(i pulumi.IntInput) RulesetRuleVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleVariable {
		return vs[0].([]RulesetRuleVariable)[vs[1].(int)]
	}).(RulesetRuleVariableOutput)
}

type RulesetRuleVariableParameter struct {
	Path *string `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// RulesetRuleVariableParameterInput is an input type that accepts RulesetRuleVariableParameterArgs and RulesetRuleVariableParameterOutput values.
// You can construct a concrete instance of `RulesetRuleVariableParameterInput` via:
//
//	RulesetRuleVariableParameterArgs{...}
type RulesetRuleVariableParameterInput interface {
	pulumi.Input

	ToRulesetRuleVariableParameterOutput() RulesetRuleVariableParameterOutput
	ToRulesetRuleVariableParameterOutputWithContext(context.Context) RulesetRuleVariableParameterOutput
}

type RulesetRuleVariableParameterArgs struct {
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesetRuleVariableParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleVariableParameter)(nil)).Elem()
}

func (i RulesetRuleVariableParameterArgs) ToRulesetRuleVariableParameterOutput() RulesetRuleVariableParameterOutput {
	return i.ToRulesetRuleVariableParameterOutputWithContext(context.Background())
}

func (i RulesetRuleVariableParameterArgs) ToRulesetRuleVariableParameterOutputWithContext(ctx context.Context) RulesetRuleVariableParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleVariableParameterOutput)
}

// RulesetRuleVariableParameterArrayInput is an input type that accepts RulesetRuleVariableParameterArray and RulesetRuleVariableParameterArrayOutput values.
// You can construct a concrete instance of `RulesetRuleVariableParameterArrayInput` via:
//
//	RulesetRuleVariableParameterArray{ RulesetRuleVariableParameterArgs{...} }
type RulesetRuleVariableParameterArrayInput interface {
	pulumi.Input

	ToRulesetRuleVariableParameterArrayOutput() RulesetRuleVariableParameterArrayOutput
	ToRulesetRuleVariableParameterArrayOutputWithContext(context.Context) RulesetRuleVariableParameterArrayOutput
}

type RulesetRuleVariableParameterArray []RulesetRuleVariableParameterInput

func (RulesetRuleVariableParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleVariableParameter)(nil)).Elem()
}

func (i RulesetRuleVariableParameterArray) ToRulesetRuleVariableParameterArrayOutput() RulesetRuleVariableParameterArrayOutput {
	return i.ToRulesetRuleVariableParameterArrayOutputWithContext(context.Background())
}

func (i RulesetRuleVariableParameterArray) ToRulesetRuleVariableParameterArrayOutputWithContext(ctx context.Context) RulesetRuleVariableParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetRuleVariableParameterArrayOutput)
}

type RulesetRuleVariableParameterOutput struct{ *pulumi.OutputState }

func (RulesetRuleVariableParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetRuleVariableParameter)(nil)).Elem()
}

func (o RulesetRuleVariableParameterOutput) ToRulesetRuleVariableParameterOutput() RulesetRuleVariableParameterOutput {
	return o
}

func (o RulesetRuleVariableParameterOutput) ToRulesetRuleVariableParameterOutputWithContext(ctx context.Context) RulesetRuleVariableParameterOutput {
	return o
}

func (o RulesetRuleVariableParameterOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleVariableParameter) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o RulesetRuleVariableParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesetRuleVariableParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesetRuleVariableParameterArrayOutput struct{ *pulumi.OutputState }

func (RulesetRuleVariableParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesetRuleVariableParameter)(nil)).Elem()
}

func (o RulesetRuleVariableParameterArrayOutput) ToRulesetRuleVariableParameterArrayOutput() RulesetRuleVariableParameterArrayOutput {
	return o
}

func (o RulesetRuleVariableParameterArrayOutput) ToRulesetRuleVariableParameterArrayOutputWithContext(ctx context.Context) RulesetRuleVariableParameterArrayOutput {
	return o
}

func (o RulesetRuleVariableParameterArrayOutput) Index(i pulumi.IntInput) RulesetRuleVariableParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesetRuleVariableParameter {
		return vs[0].([]RulesetRuleVariableParameter)[vs[1].(int)]
	}).(RulesetRuleVariableParameterOutput)
}

type RulesetTeam struct {
	// The ID of the ruleset.
	Id string `pulumi:"id"`
}

// RulesetTeamInput is an input type that accepts RulesetTeamArgs and RulesetTeamOutput values.
// You can construct a concrete instance of `RulesetTeamInput` via:
//
//	RulesetTeamArgs{...}
type RulesetTeamInput interface {
	pulumi.Input

	ToRulesetTeamOutput() RulesetTeamOutput
	ToRulesetTeamOutputWithContext(context.Context) RulesetTeamOutput
}

type RulesetTeamArgs struct {
	// The ID of the ruleset.
	Id pulumi.StringInput `pulumi:"id"`
}

func (RulesetTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetTeam)(nil)).Elem()
}

func (i RulesetTeamArgs) ToRulesetTeamOutput() RulesetTeamOutput {
	return i.ToRulesetTeamOutputWithContext(context.Background())
}

func (i RulesetTeamArgs) ToRulesetTeamOutputWithContext(ctx context.Context) RulesetTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetTeamOutput)
}

func (i RulesetTeamArgs) ToRulesetTeamPtrOutput() RulesetTeamPtrOutput {
	return i.ToRulesetTeamPtrOutputWithContext(context.Background())
}

func (i RulesetTeamArgs) ToRulesetTeamPtrOutputWithContext(ctx context.Context) RulesetTeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetTeamOutput).ToRulesetTeamPtrOutputWithContext(ctx)
}

// RulesetTeamPtrInput is an input type that accepts RulesetTeamArgs, RulesetTeamPtr and RulesetTeamPtrOutput values.
// You can construct a concrete instance of `RulesetTeamPtrInput` via:
//
//	        RulesetTeamArgs{...}
//
//	or:
//
//	        nil
type RulesetTeamPtrInput interface {
	pulumi.Input

	ToRulesetTeamPtrOutput() RulesetTeamPtrOutput
	ToRulesetTeamPtrOutputWithContext(context.Context) RulesetTeamPtrOutput
}

type rulesetTeamPtrType RulesetTeamArgs

func RulesetTeamPtr(v *RulesetTeamArgs) RulesetTeamPtrInput {
	return (*rulesetTeamPtrType)(v)
}

func (*rulesetTeamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetTeam)(nil)).Elem()
}

func (i *rulesetTeamPtrType) ToRulesetTeamPtrOutput() RulesetTeamPtrOutput {
	return i.ToRulesetTeamPtrOutputWithContext(context.Background())
}

func (i *rulesetTeamPtrType) ToRulesetTeamPtrOutputWithContext(ctx context.Context) RulesetTeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetTeamPtrOutput)
}

type RulesetTeamOutput struct{ *pulumi.OutputState }

func (RulesetTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesetTeam)(nil)).Elem()
}

func (o RulesetTeamOutput) ToRulesetTeamOutput() RulesetTeamOutput {
	return o
}

func (o RulesetTeamOutput) ToRulesetTeamOutputWithContext(ctx context.Context) RulesetTeamOutput {
	return o
}

func (o RulesetTeamOutput) ToRulesetTeamPtrOutput() RulesetTeamPtrOutput {
	return o.ToRulesetTeamPtrOutputWithContext(context.Background())
}

func (o RulesetTeamOutput) ToRulesetTeamPtrOutputWithContext(ctx context.Context) RulesetTeamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesetTeam) *RulesetTeam {
		return &v
	}).(RulesetTeamPtrOutput)
}

// The ID of the ruleset.
func (o RulesetTeamOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RulesetTeam) string { return v.Id }).(pulumi.StringOutput)
}

type RulesetTeamPtrOutput struct{ *pulumi.OutputState }

func (RulesetTeamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesetTeam)(nil)).Elem()
}

func (o RulesetTeamPtrOutput) ToRulesetTeamPtrOutput() RulesetTeamPtrOutput {
	return o
}

func (o RulesetTeamPtrOutput) ToRulesetTeamPtrOutputWithContext(ctx context.Context) RulesetTeamPtrOutput {
	return o
}

func (o RulesetTeamPtrOutput) Elem() RulesetTeamOutput {
	return o.ApplyT(func(v *RulesetTeam) RulesetTeam {
		if v != nil {
			return *v
		}
		var ret RulesetTeam
		return ret
	}).(RulesetTeamOutput)
}

// The ID of the ruleset.
func (o RulesetTeamPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulesetTeam) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type ScheduleFinalSchedule struct {
	// The name of the schedule.
	Name                       *string `pulumi:"name"`
	RenderedCoveragePercentage *string `pulumi:"renderedCoveragePercentage"`
}

// ScheduleFinalScheduleInput is an input type that accepts ScheduleFinalScheduleArgs and ScheduleFinalScheduleOutput values.
// You can construct a concrete instance of `ScheduleFinalScheduleInput` via:
//
//	ScheduleFinalScheduleArgs{...}
type ScheduleFinalScheduleInput interface {
	pulumi.Input

	ToScheduleFinalScheduleOutput() ScheduleFinalScheduleOutput
	ToScheduleFinalScheduleOutputWithContext(context.Context) ScheduleFinalScheduleOutput
}

type ScheduleFinalScheduleArgs struct {
	// The name of the schedule.
	Name                       pulumi.StringPtrInput `pulumi:"name"`
	RenderedCoveragePercentage pulumi.StringPtrInput `pulumi:"renderedCoveragePercentage"`
}

func (ScheduleFinalScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFinalSchedule)(nil)).Elem()
}

func (i ScheduleFinalScheduleArgs) ToScheduleFinalScheduleOutput() ScheduleFinalScheduleOutput {
	return i.ToScheduleFinalScheduleOutputWithContext(context.Background())
}

func (i ScheduleFinalScheduleArgs) ToScheduleFinalScheduleOutputWithContext(ctx context.Context) ScheduleFinalScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleFinalScheduleOutput)
}

// ScheduleFinalScheduleArrayInput is an input type that accepts ScheduleFinalScheduleArray and ScheduleFinalScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleFinalScheduleArrayInput` via:
//
//	ScheduleFinalScheduleArray{ ScheduleFinalScheduleArgs{...} }
type ScheduleFinalScheduleArrayInput interface {
	pulumi.Input

	ToScheduleFinalScheduleArrayOutput() ScheduleFinalScheduleArrayOutput
	ToScheduleFinalScheduleArrayOutputWithContext(context.Context) ScheduleFinalScheduleArrayOutput
}

type ScheduleFinalScheduleArray []ScheduleFinalScheduleInput

func (ScheduleFinalScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleFinalSchedule)(nil)).Elem()
}

func (i ScheduleFinalScheduleArray) ToScheduleFinalScheduleArrayOutput() ScheduleFinalScheduleArrayOutput {
	return i.ToScheduleFinalScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleFinalScheduleArray) ToScheduleFinalScheduleArrayOutputWithContext(ctx context.Context) ScheduleFinalScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleFinalScheduleArrayOutput)
}

type ScheduleFinalScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleFinalScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFinalSchedule)(nil)).Elem()
}

func (o ScheduleFinalScheduleOutput) ToScheduleFinalScheduleOutput() ScheduleFinalScheduleOutput {
	return o
}

func (o ScheduleFinalScheduleOutput) ToScheduleFinalScheduleOutputWithContext(ctx context.Context) ScheduleFinalScheduleOutput {
	return o
}

// The name of the schedule.
func (o ScheduleFinalScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleFinalSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ScheduleFinalScheduleOutput) RenderedCoveragePercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleFinalSchedule) *string { return v.RenderedCoveragePercentage }).(pulumi.StringPtrOutput)
}

type ScheduleFinalScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleFinalScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleFinalSchedule)(nil)).Elem()
}

func (o ScheduleFinalScheduleArrayOutput) ToScheduleFinalScheduleArrayOutput() ScheduleFinalScheduleArrayOutput {
	return o
}

func (o ScheduleFinalScheduleArrayOutput) ToScheduleFinalScheduleArrayOutputWithContext(ctx context.Context) ScheduleFinalScheduleArrayOutput {
	return o
}

func (o ScheduleFinalScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleFinalScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleFinalSchedule {
		return vs[0].([]ScheduleFinalSchedule)[vs[1].(int)]
	}).(ScheduleFinalScheduleOutput)
}

type ScheduleLayer struct {
	// The end time of the schedule layer. If not specified, the layer does not end.
	End *string `pulumi:"end"`
	// The ID of the schedule.
	Id *string `pulumi:"id"`
	// The name of the schedule layer.
	Name                       *string `pulumi:"name"`
	RenderedCoveragePercentage *string `pulumi:"renderedCoveragePercentage"`
	// A schedule layer restriction block. Restriction blocks documented below.
	Restrictions []ScheduleLayerRestriction `pulumi:"restrictions"`
	// The duration of each on-call shift in `seconds`.
	RotationTurnLengthSeconds int `pulumi:"rotationTurnLengthSeconds"`
	// The effective start time of the schedule layer. This can be before the start time of the schedule.
	RotationVirtualStart string `pulumi:"rotationVirtualStart"`
	// The start time of the schedule layer.
	Start string `pulumi:"start"`
	// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
	Users []string `pulumi:"users"`
}

// ScheduleLayerInput is an input type that accepts ScheduleLayerArgs and ScheduleLayerOutput values.
// You can construct a concrete instance of `ScheduleLayerInput` via:
//
//	ScheduleLayerArgs{...}
type ScheduleLayerInput interface {
	pulumi.Input

	ToScheduleLayerOutput() ScheduleLayerOutput
	ToScheduleLayerOutputWithContext(context.Context) ScheduleLayerOutput
}

type ScheduleLayerArgs struct {
	// The end time of the schedule layer. If not specified, the layer does not end.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The ID of the schedule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the schedule layer.
	Name                       pulumi.StringPtrInput `pulumi:"name"`
	RenderedCoveragePercentage pulumi.StringPtrInput `pulumi:"renderedCoveragePercentage"`
	// A schedule layer restriction block. Restriction blocks documented below.
	Restrictions ScheduleLayerRestrictionArrayInput `pulumi:"restrictions"`
	// The duration of each on-call shift in `seconds`.
	RotationTurnLengthSeconds pulumi.IntInput `pulumi:"rotationTurnLengthSeconds"`
	// The effective start time of the schedule layer. This can be before the start time of the schedule.
	RotationVirtualStart pulumi.StringInput `pulumi:"rotationVirtualStart"`
	// The start time of the schedule layer.
	Start pulumi.StringInput `pulumi:"start"`
	// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (ScheduleLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLayer)(nil)).Elem()
}

func (i ScheduleLayerArgs) ToScheduleLayerOutput() ScheduleLayerOutput {
	return i.ToScheduleLayerOutputWithContext(context.Background())
}

func (i ScheduleLayerArgs) ToScheduleLayerOutputWithContext(ctx context.Context) ScheduleLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleLayerOutput)
}

// ScheduleLayerArrayInput is an input type that accepts ScheduleLayerArray and ScheduleLayerArrayOutput values.
// You can construct a concrete instance of `ScheduleLayerArrayInput` via:
//
//	ScheduleLayerArray{ ScheduleLayerArgs{...} }
type ScheduleLayerArrayInput interface {
	pulumi.Input

	ToScheduleLayerArrayOutput() ScheduleLayerArrayOutput
	ToScheduleLayerArrayOutputWithContext(context.Context) ScheduleLayerArrayOutput
}

type ScheduleLayerArray []ScheduleLayerInput

func (ScheduleLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleLayer)(nil)).Elem()
}

func (i ScheduleLayerArray) ToScheduleLayerArrayOutput() ScheduleLayerArrayOutput {
	return i.ToScheduleLayerArrayOutputWithContext(context.Background())
}

func (i ScheduleLayerArray) ToScheduleLayerArrayOutputWithContext(ctx context.Context) ScheduleLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleLayerArrayOutput)
}

type ScheduleLayerOutput struct{ *pulumi.OutputState }

func (ScheduleLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLayer)(nil)).Elem()
}

func (o ScheduleLayerOutput) ToScheduleLayerOutput() ScheduleLayerOutput {
	return o
}

func (o ScheduleLayerOutput) ToScheduleLayerOutputWithContext(ctx context.Context) ScheduleLayerOutput {
	return o
}

// The end time of the schedule layer. If not specified, the layer does not end.
func (o ScheduleLayerOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleLayer) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The ID of the schedule.
func (o ScheduleLayerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleLayer) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the schedule layer.
func (o ScheduleLayerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleLayer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ScheduleLayerOutput) RenderedCoveragePercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleLayer) *string { return v.RenderedCoveragePercentage }).(pulumi.StringPtrOutput)
}

// A schedule layer restriction block. Restriction blocks documented below.
func (o ScheduleLayerOutput) Restrictions() ScheduleLayerRestrictionArrayOutput {
	return o.ApplyT(func(v ScheduleLayer) []ScheduleLayerRestriction { return v.Restrictions }).(ScheduleLayerRestrictionArrayOutput)
}

// The duration of each on-call shift in `seconds`.
func (o ScheduleLayerOutput) RotationTurnLengthSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleLayer) int { return v.RotationTurnLengthSeconds }).(pulumi.IntOutput)
}

// The effective start time of the schedule layer. This can be before the start time of the schedule.
func (o ScheduleLayerOutput) RotationVirtualStart() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleLayer) string { return v.RotationVirtualStart }).(pulumi.StringOutput)
}

// The start time of the schedule layer.
func (o ScheduleLayerOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleLayer) string { return v.Start }).(pulumi.StringOutput)
}

// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
func (o ScheduleLayerOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleLayer) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type ScheduleLayerArrayOutput struct{ *pulumi.OutputState }

func (ScheduleLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleLayer)(nil)).Elem()
}

func (o ScheduleLayerArrayOutput) ToScheduleLayerArrayOutput() ScheduleLayerArrayOutput {
	return o
}

func (o ScheduleLayerArrayOutput) ToScheduleLayerArrayOutputWithContext(ctx context.Context) ScheduleLayerArrayOutput {
	return o
}

func (o ScheduleLayerArrayOutput) Index(i pulumi.IntInput) ScheduleLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleLayer {
		return vs[0].([]ScheduleLayer)[vs[1].(int)]
	}).(ScheduleLayerOutput)
}

type ScheduleLayerRestriction struct {
	// The duration of the restriction in `seconds`.
	DurationSeconds int `pulumi:"durationSeconds"`
	// Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
	StartDayOfWeek *int `pulumi:"startDayOfWeek"`
	// The start time in `HH:mm:ss` format.
	StartTimeOfDay string `pulumi:"startTimeOfDay"`
	// Can be `dailyRestriction` or `weeklyRestriction`.
	Type string `pulumi:"type"`
}

// ScheduleLayerRestrictionInput is an input type that accepts ScheduleLayerRestrictionArgs and ScheduleLayerRestrictionOutput values.
// You can construct a concrete instance of `ScheduleLayerRestrictionInput` via:
//
//	ScheduleLayerRestrictionArgs{...}
type ScheduleLayerRestrictionInput interface {
	pulumi.Input

	ToScheduleLayerRestrictionOutput() ScheduleLayerRestrictionOutput
	ToScheduleLayerRestrictionOutputWithContext(context.Context) ScheduleLayerRestrictionOutput
}

type ScheduleLayerRestrictionArgs struct {
	// The duration of the restriction in `seconds`.
	DurationSeconds pulumi.IntInput `pulumi:"durationSeconds"`
	// Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
	StartDayOfWeek pulumi.IntPtrInput `pulumi:"startDayOfWeek"`
	// The start time in `HH:mm:ss` format.
	StartTimeOfDay pulumi.StringInput `pulumi:"startTimeOfDay"`
	// Can be `dailyRestriction` or `weeklyRestriction`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleLayerRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLayerRestriction)(nil)).Elem()
}

func (i ScheduleLayerRestrictionArgs) ToScheduleLayerRestrictionOutput() ScheduleLayerRestrictionOutput {
	return i.ToScheduleLayerRestrictionOutputWithContext(context.Background())
}

func (i ScheduleLayerRestrictionArgs) ToScheduleLayerRestrictionOutputWithContext(ctx context.Context) ScheduleLayerRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleLayerRestrictionOutput)
}

// ScheduleLayerRestrictionArrayInput is an input type that accepts ScheduleLayerRestrictionArray and ScheduleLayerRestrictionArrayOutput values.
// You can construct a concrete instance of `ScheduleLayerRestrictionArrayInput` via:
//
//	ScheduleLayerRestrictionArray{ ScheduleLayerRestrictionArgs{...} }
type ScheduleLayerRestrictionArrayInput interface {
	pulumi.Input

	ToScheduleLayerRestrictionArrayOutput() ScheduleLayerRestrictionArrayOutput
	ToScheduleLayerRestrictionArrayOutputWithContext(context.Context) ScheduleLayerRestrictionArrayOutput
}

type ScheduleLayerRestrictionArray []ScheduleLayerRestrictionInput

func (ScheduleLayerRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleLayerRestriction)(nil)).Elem()
}

func (i ScheduleLayerRestrictionArray) ToScheduleLayerRestrictionArrayOutput() ScheduleLayerRestrictionArrayOutput {
	return i.ToScheduleLayerRestrictionArrayOutputWithContext(context.Background())
}

func (i ScheduleLayerRestrictionArray) ToScheduleLayerRestrictionArrayOutputWithContext(ctx context.Context) ScheduleLayerRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleLayerRestrictionArrayOutput)
}

type ScheduleLayerRestrictionOutput struct{ *pulumi.OutputState }

func (ScheduleLayerRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLayerRestriction)(nil)).Elem()
}

func (o ScheduleLayerRestrictionOutput) ToScheduleLayerRestrictionOutput() ScheduleLayerRestrictionOutput {
	return o
}

func (o ScheduleLayerRestrictionOutput) ToScheduleLayerRestrictionOutputWithContext(ctx context.Context) ScheduleLayerRestrictionOutput {
	return o
}

// The duration of the restriction in `seconds`.
func (o ScheduleLayerRestrictionOutput) DurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleLayerRestriction) int { return v.DurationSeconds }).(pulumi.IntOutput)
}

// Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
func (o ScheduleLayerRestrictionOutput) StartDayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleLayerRestriction) *int { return v.StartDayOfWeek }).(pulumi.IntPtrOutput)
}

// The start time in `HH:mm:ss` format.
func (o ScheduleLayerRestrictionOutput) StartTimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleLayerRestriction) string { return v.StartTimeOfDay }).(pulumi.StringOutput)
}

// Can be `dailyRestriction` or `weeklyRestriction`.
func (o ScheduleLayerRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleLayerRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type ScheduleLayerRestrictionArrayOutput struct{ *pulumi.OutputState }

func (ScheduleLayerRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleLayerRestriction)(nil)).Elem()
}

func (o ScheduleLayerRestrictionArrayOutput) ToScheduleLayerRestrictionArrayOutput() ScheduleLayerRestrictionArrayOutput {
	return o
}

func (o ScheduleLayerRestrictionArrayOutput) ToScheduleLayerRestrictionArrayOutputWithContext(ctx context.Context) ScheduleLayerRestrictionArrayOutput {
	return o
}

func (o ScheduleLayerRestrictionArrayOutput) Index(i pulumi.IntInput) ScheduleLayerRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleLayerRestriction {
		return vs[0].([]ScheduleLayerRestriction)[vs[1].(int)]
	}).(ScheduleLayerRestrictionOutput)
}

type ServiceAlertGroupingParameters struct {
	// Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
	Config *ServiceAlertGroupingParametersConfig `pulumi:"config"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type *string `pulumi:"type"`
}

// ServiceAlertGroupingParametersInput is an input type that accepts ServiceAlertGroupingParametersArgs and ServiceAlertGroupingParametersOutput values.
// You can construct a concrete instance of `ServiceAlertGroupingParametersInput` via:
//
//	ServiceAlertGroupingParametersArgs{...}
type ServiceAlertGroupingParametersInput interface {
	pulumi.Input

	ToServiceAlertGroupingParametersOutput() ServiceAlertGroupingParametersOutput
	ToServiceAlertGroupingParametersOutputWithContext(context.Context) ServiceAlertGroupingParametersOutput
}

type ServiceAlertGroupingParametersArgs struct {
	// Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
	Config ServiceAlertGroupingParametersConfigPtrInput `pulumi:"config"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceAlertGroupingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlertGroupingParameters)(nil)).Elem()
}

func (i ServiceAlertGroupingParametersArgs) ToServiceAlertGroupingParametersOutput() ServiceAlertGroupingParametersOutput {
	return i.ToServiceAlertGroupingParametersOutputWithContext(context.Background())
}

func (i ServiceAlertGroupingParametersArgs) ToServiceAlertGroupingParametersOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersOutput)
}

func (i ServiceAlertGroupingParametersArgs) ToServiceAlertGroupingParametersPtrOutput() ServiceAlertGroupingParametersPtrOutput {
	return i.ToServiceAlertGroupingParametersPtrOutputWithContext(context.Background())
}

func (i ServiceAlertGroupingParametersArgs) ToServiceAlertGroupingParametersPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersOutput).ToServiceAlertGroupingParametersPtrOutputWithContext(ctx)
}

// ServiceAlertGroupingParametersPtrInput is an input type that accepts ServiceAlertGroupingParametersArgs, ServiceAlertGroupingParametersPtr and ServiceAlertGroupingParametersPtrOutput values.
// You can construct a concrete instance of `ServiceAlertGroupingParametersPtrInput` via:
//
//	        ServiceAlertGroupingParametersArgs{...}
//
//	or:
//
//	        nil
type ServiceAlertGroupingParametersPtrInput interface {
	pulumi.Input

	ToServiceAlertGroupingParametersPtrOutput() ServiceAlertGroupingParametersPtrOutput
	ToServiceAlertGroupingParametersPtrOutputWithContext(context.Context) ServiceAlertGroupingParametersPtrOutput
}

type serviceAlertGroupingParametersPtrType ServiceAlertGroupingParametersArgs

func ServiceAlertGroupingParametersPtr(v *ServiceAlertGroupingParametersArgs) ServiceAlertGroupingParametersPtrInput {
	return (*serviceAlertGroupingParametersPtrType)(v)
}

func (*serviceAlertGroupingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlertGroupingParameters)(nil)).Elem()
}

func (i *serviceAlertGroupingParametersPtrType) ToServiceAlertGroupingParametersPtrOutput() ServiceAlertGroupingParametersPtrOutput {
	return i.ToServiceAlertGroupingParametersPtrOutputWithContext(context.Background())
}

func (i *serviceAlertGroupingParametersPtrType) ToServiceAlertGroupingParametersPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersPtrOutput)
}

type ServiceAlertGroupingParametersOutput struct{ *pulumi.OutputState }

func (ServiceAlertGroupingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlertGroupingParameters)(nil)).Elem()
}

func (o ServiceAlertGroupingParametersOutput) ToServiceAlertGroupingParametersOutput() ServiceAlertGroupingParametersOutput {
	return o
}

func (o ServiceAlertGroupingParametersOutput) ToServiceAlertGroupingParametersOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersOutput {
	return o
}

func (o ServiceAlertGroupingParametersOutput) ToServiceAlertGroupingParametersPtrOutput() ServiceAlertGroupingParametersPtrOutput {
	return o.ToServiceAlertGroupingParametersPtrOutputWithContext(context.Background())
}

func (o ServiceAlertGroupingParametersOutput) ToServiceAlertGroupingParametersPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAlertGroupingParameters) *ServiceAlertGroupingParameters {
		return &v
	}).(ServiceAlertGroupingParametersPtrOutput)
}

// Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
func (o ServiceAlertGroupingParametersOutput) Config() ServiceAlertGroupingParametersConfigPtrOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParameters) *ServiceAlertGroupingParametersConfig { return v.Config }).(ServiceAlertGroupingParametersConfigPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceAlertGroupingParametersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParameters) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceAlertGroupingParametersPtrOutput struct{ *pulumi.OutputState }

func (ServiceAlertGroupingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlertGroupingParameters)(nil)).Elem()
}

func (o ServiceAlertGroupingParametersPtrOutput) ToServiceAlertGroupingParametersPtrOutput() ServiceAlertGroupingParametersPtrOutput {
	return o
}

func (o ServiceAlertGroupingParametersPtrOutput) ToServiceAlertGroupingParametersPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersPtrOutput {
	return o
}

func (o ServiceAlertGroupingParametersPtrOutput) Elem() ServiceAlertGroupingParametersOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParameters) ServiceAlertGroupingParameters {
		if v != nil {
			return *v
		}
		var ret ServiceAlertGroupingParameters
		return ret
	}).(ServiceAlertGroupingParametersOutput)
}

// Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
func (o ServiceAlertGroupingParametersPtrOutput) Config() ServiceAlertGroupingParametersConfigPtrOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParameters) *ServiceAlertGroupingParametersConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(ServiceAlertGroupingParametersConfigPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceAlertGroupingParametersPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParameters) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceAlertGroupingParametersConfig struct {
	// One of `any` or `all`. This setting applies only when `type` is set to `contentBased`. Group alerts based on one or all of `fields` value(s).
	Aggregate *string `pulumi:"aggregate"`
	// Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `contentBased`.
	Fields []string `pulumi:"fields"`
	// The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
	TimeWindow *int `pulumi:"timeWindow"`
	// The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
	Timeout *int `pulumi:"timeout"`
}

// ServiceAlertGroupingParametersConfigInput is an input type that accepts ServiceAlertGroupingParametersConfigArgs and ServiceAlertGroupingParametersConfigOutput values.
// You can construct a concrete instance of `ServiceAlertGroupingParametersConfigInput` via:
//
//	ServiceAlertGroupingParametersConfigArgs{...}
type ServiceAlertGroupingParametersConfigInput interface {
	pulumi.Input

	ToServiceAlertGroupingParametersConfigOutput() ServiceAlertGroupingParametersConfigOutput
	ToServiceAlertGroupingParametersConfigOutputWithContext(context.Context) ServiceAlertGroupingParametersConfigOutput
}

type ServiceAlertGroupingParametersConfigArgs struct {
	// One of `any` or `all`. This setting applies only when `type` is set to `contentBased`. Group alerts based on one or all of `fields` value(s).
	Aggregate pulumi.StringPtrInput `pulumi:"aggregate"`
	// Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `contentBased`.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
	TimeWindow pulumi.IntPtrInput `pulumi:"timeWindow"`
	// The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (ServiceAlertGroupingParametersConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlertGroupingParametersConfig)(nil)).Elem()
}

func (i ServiceAlertGroupingParametersConfigArgs) ToServiceAlertGroupingParametersConfigOutput() ServiceAlertGroupingParametersConfigOutput {
	return i.ToServiceAlertGroupingParametersConfigOutputWithContext(context.Background())
}

func (i ServiceAlertGroupingParametersConfigArgs) ToServiceAlertGroupingParametersConfigOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersConfigOutput)
}

func (i ServiceAlertGroupingParametersConfigArgs) ToServiceAlertGroupingParametersConfigPtrOutput() ServiceAlertGroupingParametersConfigPtrOutput {
	return i.ToServiceAlertGroupingParametersConfigPtrOutputWithContext(context.Background())
}

func (i ServiceAlertGroupingParametersConfigArgs) ToServiceAlertGroupingParametersConfigPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersConfigOutput).ToServiceAlertGroupingParametersConfigPtrOutputWithContext(ctx)
}

// ServiceAlertGroupingParametersConfigPtrInput is an input type that accepts ServiceAlertGroupingParametersConfigArgs, ServiceAlertGroupingParametersConfigPtr and ServiceAlertGroupingParametersConfigPtrOutput values.
// You can construct a concrete instance of `ServiceAlertGroupingParametersConfigPtrInput` via:
//
//	        ServiceAlertGroupingParametersConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceAlertGroupingParametersConfigPtrInput interface {
	pulumi.Input

	ToServiceAlertGroupingParametersConfigPtrOutput() ServiceAlertGroupingParametersConfigPtrOutput
	ToServiceAlertGroupingParametersConfigPtrOutputWithContext(context.Context) ServiceAlertGroupingParametersConfigPtrOutput
}

type serviceAlertGroupingParametersConfigPtrType ServiceAlertGroupingParametersConfigArgs

func ServiceAlertGroupingParametersConfigPtr(v *ServiceAlertGroupingParametersConfigArgs) ServiceAlertGroupingParametersConfigPtrInput {
	return (*serviceAlertGroupingParametersConfigPtrType)(v)
}

func (*serviceAlertGroupingParametersConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlertGroupingParametersConfig)(nil)).Elem()
}

func (i *serviceAlertGroupingParametersConfigPtrType) ToServiceAlertGroupingParametersConfigPtrOutput() ServiceAlertGroupingParametersConfigPtrOutput {
	return i.ToServiceAlertGroupingParametersConfigPtrOutputWithContext(context.Background())
}

func (i *serviceAlertGroupingParametersConfigPtrType) ToServiceAlertGroupingParametersConfigPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlertGroupingParametersConfigPtrOutput)
}

type ServiceAlertGroupingParametersConfigOutput struct{ *pulumi.OutputState }

func (ServiceAlertGroupingParametersConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlertGroupingParametersConfig)(nil)).Elem()
}

func (o ServiceAlertGroupingParametersConfigOutput) ToServiceAlertGroupingParametersConfigOutput() ServiceAlertGroupingParametersConfigOutput {
	return o
}

func (o ServiceAlertGroupingParametersConfigOutput) ToServiceAlertGroupingParametersConfigOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigOutput {
	return o
}

func (o ServiceAlertGroupingParametersConfigOutput) ToServiceAlertGroupingParametersConfigPtrOutput() ServiceAlertGroupingParametersConfigPtrOutput {
	return o.ToServiceAlertGroupingParametersConfigPtrOutputWithContext(context.Background())
}

func (o ServiceAlertGroupingParametersConfigOutput) ToServiceAlertGroupingParametersConfigPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAlertGroupingParametersConfig) *ServiceAlertGroupingParametersConfig {
		return &v
	}).(ServiceAlertGroupingParametersConfigPtrOutput)
}

// One of `any` or `all`. This setting applies only when `type` is set to `contentBased`. Group alerts based on one or all of `fields` value(s).
func (o ServiceAlertGroupingParametersConfigOutput) Aggregate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParametersConfig) *string { return v.Aggregate }).(pulumi.StringPtrOutput)
}

// Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `contentBased`.
func (o ServiceAlertGroupingParametersConfigOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParametersConfig) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
func (o ServiceAlertGroupingParametersConfigOutput) TimeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParametersConfig) *int { return v.TimeWindow }).(pulumi.IntPtrOutput)
}

// The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
func (o ServiceAlertGroupingParametersConfigOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAlertGroupingParametersConfig) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type ServiceAlertGroupingParametersConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceAlertGroupingParametersConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAlertGroupingParametersConfig)(nil)).Elem()
}

func (o ServiceAlertGroupingParametersConfigPtrOutput) ToServiceAlertGroupingParametersConfigPtrOutput() ServiceAlertGroupingParametersConfigPtrOutput {
	return o
}

func (o ServiceAlertGroupingParametersConfigPtrOutput) ToServiceAlertGroupingParametersConfigPtrOutputWithContext(ctx context.Context) ServiceAlertGroupingParametersConfigPtrOutput {
	return o
}

func (o ServiceAlertGroupingParametersConfigPtrOutput) Elem() ServiceAlertGroupingParametersConfigOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParametersConfig) ServiceAlertGroupingParametersConfig {
		if v != nil {
			return *v
		}
		var ret ServiceAlertGroupingParametersConfig
		return ret
	}).(ServiceAlertGroupingParametersConfigOutput)
}

// One of `any` or `all`. This setting applies only when `type` is set to `contentBased`. Group alerts based on one or all of `fields` value(s).
func (o ServiceAlertGroupingParametersConfigPtrOutput) Aggregate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParametersConfig) *string {
		if v == nil {
			return nil
		}
		return v.Aggregate
	}).(pulumi.StringPtrOutput)
}

// Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `contentBased`.
func (o ServiceAlertGroupingParametersConfigPtrOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParametersConfig) []string {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(pulumi.StringArrayOutput)
}

// The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
func (o ServiceAlertGroupingParametersConfigPtrOutput) TimeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParametersConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeWindow
	}).(pulumi.IntPtrOutput)
}

// The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
func (o ServiceAlertGroupingParametersConfigPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAlertGroupingParametersConfig) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type ServiceAutoPauseNotificationsParameters struct {
	// Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
	Enabled *bool `pulumi:"enabled"`
	// Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
	//
	// You may specify one optional `incidentUrgencyRule` block configuring what urgencies to use.
	// Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
	// The block contains the following arguments:
	Timeout *int `pulumi:"timeout"`
}

// ServiceAutoPauseNotificationsParametersInput is an input type that accepts ServiceAutoPauseNotificationsParametersArgs and ServiceAutoPauseNotificationsParametersOutput values.
// You can construct a concrete instance of `ServiceAutoPauseNotificationsParametersInput` via:
//
//	ServiceAutoPauseNotificationsParametersArgs{...}
type ServiceAutoPauseNotificationsParametersInput interface {
	pulumi.Input

	ToServiceAutoPauseNotificationsParametersOutput() ServiceAutoPauseNotificationsParametersOutput
	ToServiceAutoPauseNotificationsParametersOutputWithContext(context.Context) ServiceAutoPauseNotificationsParametersOutput
}

type ServiceAutoPauseNotificationsParametersArgs struct {
	// Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
	//
	// You may specify one optional `incidentUrgencyRule` block configuring what urgencies to use.
	// Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
	// The block contains the following arguments:
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (ServiceAutoPauseNotificationsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAutoPauseNotificationsParameters)(nil)).Elem()
}

func (i ServiceAutoPauseNotificationsParametersArgs) ToServiceAutoPauseNotificationsParametersOutput() ServiceAutoPauseNotificationsParametersOutput {
	return i.ToServiceAutoPauseNotificationsParametersOutputWithContext(context.Background())
}

func (i ServiceAutoPauseNotificationsParametersArgs) ToServiceAutoPauseNotificationsParametersOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAutoPauseNotificationsParametersOutput)
}

func (i ServiceAutoPauseNotificationsParametersArgs) ToServiceAutoPauseNotificationsParametersPtrOutput() ServiceAutoPauseNotificationsParametersPtrOutput {
	return i.ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(context.Background())
}

func (i ServiceAutoPauseNotificationsParametersArgs) ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAutoPauseNotificationsParametersOutput).ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(ctx)
}

// ServiceAutoPauseNotificationsParametersPtrInput is an input type that accepts ServiceAutoPauseNotificationsParametersArgs, ServiceAutoPauseNotificationsParametersPtr and ServiceAutoPauseNotificationsParametersPtrOutput values.
// You can construct a concrete instance of `ServiceAutoPauseNotificationsParametersPtrInput` via:
//
//	        ServiceAutoPauseNotificationsParametersArgs{...}
//
//	or:
//
//	        nil
type ServiceAutoPauseNotificationsParametersPtrInput interface {
	pulumi.Input

	ToServiceAutoPauseNotificationsParametersPtrOutput() ServiceAutoPauseNotificationsParametersPtrOutput
	ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(context.Context) ServiceAutoPauseNotificationsParametersPtrOutput
}

type serviceAutoPauseNotificationsParametersPtrType ServiceAutoPauseNotificationsParametersArgs

func ServiceAutoPauseNotificationsParametersPtr(v *ServiceAutoPauseNotificationsParametersArgs) ServiceAutoPauseNotificationsParametersPtrInput {
	return (*serviceAutoPauseNotificationsParametersPtrType)(v)
}

func (*serviceAutoPauseNotificationsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAutoPauseNotificationsParameters)(nil)).Elem()
}

func (i *serviceAutoPauseNotificationsParametersPtrType) ToServiceAutoPauseNotificationsParametersPtrOutput() ServiceAutoPauseNotificationsParametersPtrOutput {
	return i.ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(context.Background())
}

func (i *serviceAutoPauseNotificationsParametersPtrType) ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAutoPauseNotificationsParametersPtrOutput)
}

type ServiceAutoPauseNotificationsParametersOutput struct{ *pulumi.OutputState }

func (ServiceAutoPauseNotificationsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAutoPauseNotificationsParameters)(nil)).Elem()
}

func (o ServiceAutoPauseNotificationsParametersOutput) ToServiceAutoPauseNotificationsParametersOutput() ServiceAutoPauseNotificationsParametersOutput {
	return o
}

func (o ServiceAutoPauseNotificationsParametersOutput) ToServiceAutoPauseNotificationsParametersOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersOutput {
	return o
}

func (o ServiceAutoPauseNotificationsParametersOutput) ToServiceAutoPauseNotificationsParametersPtrOutput() ServiceAutoPauseNotificationsParametersPtrOutput {
	return o.ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(context.Background())
}

func (o ServiceAutoPauseNotificationsParametersOutput) ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAutoPauseNotificationsParameters) *ServiceAutoPauseNotificationsParameters {
		return &v
	}).(ServiceAutoPauseNotificationsParametersPtrOutput)
}

// Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
func (o ServiceAutoPauseNotificationsParametersOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAutoPauseNotificationsParameters) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
//
// You may specify one optional `incidentUrgencyRule` block configuring what urgencies to use.
// Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
// The block contains the following arguments:
func (o ServiceAutoPauseNotificationsParametersOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAutoPauseNotificationsParameters) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type ServiceAutoPauseNotificationsParametersPtrOutput struct{ *pulumi.OutputState }

func (ServiceAutoPauseNotificationsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAutoPauseNotificationsParameters)(nil)).Elem()
}

func (o ServiceAutoPauseNotificationsParametersPtrOutput) ToServiceAutoPauseNotificationsParametersPtrOutput() ServiceAutoPauseNotificationsParametersPtrOutput {
	return o
}

func (o ServiceAutoPauseNotificationsParametersPtrOutput) ToServiceAutoPauseNotificationsParametersPtrOutputWithContext(ctx context.Context) ServiceAutoPauseNotificationsParametersPtrOutput {
	return o
}

func (o ServiceAutoPauseNotificationsParametersPtrOutput) Elem() ServiceAutoPauseNotificationsParametersOutput {
	return o.ApplyT(func(v *ServiceAutoPauseNotificationsParameters) ServiceAutoPauseNotificationsParameters {
		if v != nil {
			return *v
		}
		var ret ServiceAutoPauseNotificationsParameters
		return ret
	}).(ServiceAutoPauseNotificationsParametersOutput)
}

// Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
func (o ServiceAutoPauseNotificationsParametersPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAutoPauseNotificationsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
//
// You may specify one optional `incidentUrgencyRule` block configuring what urgencies to use.
// Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
// The block contains the following arguments:
func (o ServiceAutoPauseNotificationsParametersPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAutoPauseNotificationsParameters) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type ServiceDependencyDependency struct {
	// The service that dependents on the supporting service. Dependency dependent service documented below.
	DependentServices []ServiceDependencyDependencyDependentService `pulumi:"dependentServices"`
	// The service that supports the dependent service. Dependency supporting service documented below.
	SupportingServices []ServiceDependencyDependencySupportingService `pulumi:"supportingServices"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type *string `pulumi:"type"`
}

// ServiceDependencyDependencyInput is an input type that accepts ServiceDependencyDependencyArgs and ServiceDependencyDependencyOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencyInput` via:
//
//	ServiceDependencyDependencyArgs{...}
type ServiceDependencyDependencyInput interface {
	pulumi.Input

	ToServiceDependencyDependencyOutput() ServiceDependencyDependencyOutput
	ToServiceDependencyDependencyOutputWithContext(context.Context) ServiceDependencyDependencyOutput
}

type ServiceDependencyDependencyArgs struct {
	// The service that dependents on the supporting service. Dependency dependent service documented below.
	DependentServices ServiceDependencyDependencyDependentServiceArrayInput `pulumi:"dependentServices"`
	// The service that supports the dependent service. Dependency supporting service documented below.
	SupportingServices ServiceDependencyDependencySupportingServiceArrayInput `pulumi:"supportingServices"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceDependencyDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependency)(nil)).Elem()
}

func (i ServiceDependencyDependencyArgs) ToServiceDependencyDependencyOutput() ServiceDependencyDependencyOutput {
	return i.ToServiceDependencyDependencyOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencyArgs) ToServiceDependencyDependencyOutputWithContext(ctx context.Context) ServiceDependencyDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencyOutput)
}

func (i ServiceDependencyDependencyArgs) ToServiceDependencyDependencyPtrOutput() ServiceDependencyDependencyPtrOutput {
	return i.ToServiceDependencyDependencyPtrOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencyArgs) ToServiceDependencyDependencyPtrOutputWithContext(ctx context.Context) ServiceDependencyDependencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencyOutput).ToServiceDependencyDependencyPtrOutputWithContext(ctx)
}

// ServiceDependencyDependencyPtrInput is an input type that accepts ServiceDependencyDependencyArgs, ServiceDependencyDependencyPtr and ServiceDependencyDependencyPtrOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencyPtrInput` via:
//
//	        ServiceDependencyDependencyArgs{...}
//
//	or:
//
//	        nil
type ServiceDependencyDependencyPtrInput interface {
	pulumi.Input

	ToServiceDependencyDependencyPtrOutput() ServiceDependencyDependencyPtrOutput
	ToServiceDependencyDependencyPtrOutputWithContext(context.Context) ServiceDependencyDependencyPtrOutput
}

type serviceDependencyDependencyPtrType ServiceDependencyDependencyArgs

func ServiceDependencyDependencyPtr(v *ServiceDependencyDependencyArgs) ServiceDependencyDependencyPtrInput {
	return (*serviceDependencyDependencyPtrType)(v)
}

func (*serviceDependencyDependencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDependencyDependency)(nil)).Elem()
}

func (i *serviceDependencyDependencyPtrType) ToServiceDependencyDependencyPtrOutput() ServiceDependencyDependencyPtrOutput {
	return i.ToServiceDependencyDependencyPtrOutputWithContext(context.Background())
}

func (i *serviceDependencyDependencyPtrType) ToServiceDependencyDependencyPtrOutputWithContext(ctx context.Context) ServiceDependencyDependencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencyPtrOutput)
}

type ServiceDependencyDependencyOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependency)(nil)).Elem()
}

func (o ServiceDependencyDependencyOutput) ToServiceDependencyDependencyOutput() ServiceDependencyDependencyOutput {
	return o
}

func (o ServiceDependencyDependencyOutput) ToServiceDependencyDependencyOutputWithContext(ctx context.Context) ServiceDependencyDependencyOutput {
	return o
}

func (o ServiceDependencyDependencyOutput) ToServiceDependencyDependencyPtrOutput() ServiceDependencyDependencyPtrOutput {
	return o.ToServiceDependencyDependencyPtrOutputWithContext(context.Background())
}

func (o ServiceDependencyDependencyOutput) ToServiceDependencyDependencyPtrOutputWithContext(ctx context.Context) ServiceDependencyDependencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDependencyDependency) *ServiceDependencyDependency {
		return &v
	}).(ServiceDependencyDependencyPtrOutput)
}

// The service that dependents on the supporting service. Dependency dependent service documented below.
func (o ServiceDependencyDependencyOutput) DependentServices() ServiceDependencyDependencyDependentServiceArrayOutput {
	return o.ApplyT(func(v ServiceDependencyDependency) []ServiceDependencyDependencyDependentService {
		return v.DependentServices
	}).(ServiceDependencyDependencyDependentServiceArrayOutput)
}

// The service that supports the dependent service. Dependency supporting service documented below.
func (o ServiceDependencyDependencyOutput) SupportingServices() ServiceDependencyDependencySupportingServiceArrayOutput {
	return o.ApplyT(func(v ServiceDependencyDependency) []ServiceDependencyDependencySupportingService {
		return v.SupportingServices
	}).(ServiceDependencyDependencySupportingServiceArrayOutput)
}

// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
func (o ServiceDependencyDependencyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDependencyDependency) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceDependencyDependencyPtrOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDependencyDependency)(nil)).Elem()
}

func (o ServiceDependencyDependencyPtrOutput) ToServiceDependencyDependencyPtrOutput() ServiceDependencyDependencyPtrOutput {
	return o
}

func (o ServiceDependencyDependencyPtrOutput) ToServiceDependencyDependencyPtrOutputWithContext(ctx context.Context) ServiceDependencyDependencyPtrOutput {
	return o
}

func (o ServiceDependencyDependencyPtrOutput) Elem() ServiceDependencyDependencyOutput {
	return o.ApplyT(func(v *ServiceDependencyDependency) ServiceDependencyDependency {
		if v != nil {
			return *v
		}
		var ret ServiceDependencyDependency
		return ret
	}).(ServiceDependencyDependencyOutput)
}

// The service that dependents on the supporting service. Dependency dependent service documented below.
func (o ServiceDependencyDependencyPtrOutput) DependentServices() ServiceDependencyDependencyDependentServiceArrayOutput {
	return o.ApplyT(func(v *ServiceDependencyDependency) []ServiceDependencyDependencyDependentService {
		if v == nil {
			return nil
		}
		return v.DependentServices
	}).(ServiceDependencyDependencyDependentServiceArrayOutput)
}

// The service that supports the dependent service. Dependency supporting service documented below.
func (o ServiceDependencyDependencyPtrOutput) SupportingServices() ServiceDependencyDependencySupportingServiceArrayOutput {
	return o.ApplyT(func(v *ServiceDependencyDependency) []ServiceDependencyDependencySupportingService {
		if v == nil {
			return nil
		}
		return v.SupportingServices
	}).(ServiceDependencyDependencySupportingServiceArrayOutput)
}

// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
func (o ServiceDependencyDependencyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDependencyDependency) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceDependencyDependencyDependentService struct {
	// The ID of the service dependency.
	Id string `pulumi:"id"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type string `pulumi:"type"`
}

// ServiceDependencyDependencyDependentServiceInput is an input type that accepts ServiceDependencyDependencyDependentServiceArgs and ServiceDependencyDependencyDependentServiceOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencyDependentServiceInput` via:
//
//	ServiceDependencyDependencyDependentServiceArgs{...}
type ServiceDependencyDependencyDependentServiceInput interface {
	pulumi.Input

	ToServiceDependencyDependencyDependentServiceOutput() ServiceDependencyDependencyDependentServiceOutput
	ToServiceDependencyDependencyDependentServiceOutputWithContext(context.Context) ServiceDependencyDependencyDependentServiceOutput
}

type ServiceDependencyDependencyDependentServiceArgs struct {
	// The ID of the service dependency.
	Id pulumi.StringInput `pulumi:"id"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceDependencyDependencyDependentServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependencyDependentService)(nil)).Elem()
}

func (i ServiceDependencyDependencyDependentServiceArgs) ToServiceDependencyDependencyDependentServiceOutput() ServiceDependencyDependencyDependentServiceOutput {
	return i.ToServiceDependencyDependencyDependentServiceOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencyDependentServiceArgs) ToServiceDependencyDependencyDependentServiceOutputWithContext(ctx context.Context) ServiceDependencyDependencyDependentServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencyDependentServiceOutput)
}

// ServiceDependencyDependencyDependentServiceArrayInput is an input type that accepts ServiceDependencyDependencyDependentServiceArray and ServiceDependencyDependencyDependentServiceArrayOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencyDependentServiceArrayInput` via:
//
//	ServiceDependencyDependencyDependentServiceArray{ ServiceDependencyDependencyDependentServiceArgs{...} }
type ServiceDependencyDependencyDependentServiceArrayInput interface {
	pulumi.Input

	ToServiceDependencyDependencyDependentServiceArrayOutput() ServiceDependencyDependencyDependentServiceArrayOutput
	ToServiceDependencyDependencyDependentServiceArrayOutputWithContext(context.Context) ServiceDependencyDependencyDependentServiceArrayOutput
}

type ServiceDependencyDependencyDependentServiceArray []ServiceDependencyDependencyDependentServiceInput

func (ServiceDependencyDependencyDependentServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDependencyDependencyDependentService)(nil)).Elem()
}

func (i ServiceDependencyDependencyDependentServiceArray) ToServiceDependencyDependencyDependentServiceArrayOutput() ServiceDependencyDependencyDependentServiceArrayOutput {
	return i.ToServiceDependencyDependencyDependentServiceArrayOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencyDependentServiceArray) ToServiceDependencyDependencyDependentServiceArrayOutputWithContext(ctx context.Context) ServiceDependencyDependencyDependentServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencyDependentServiceArrayOutput)
}

type ServiceDependencyDependencyDependentServiceOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencyDependentServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependencyDependentService)(nil)).Elem()
}

func (o ServiceDependencyDependencyDependentServiceOutput) ToServiceDependencyDependencyDependentServiceOutput() ServiceDependencyDependencyDependentServiceOutput {
	return o
}

func (o ServiceDependencyDependencyDependentServiceOutput) ToServiceDependencyDependencyDependentServiceOutputWithContext(ctx context.Context) ServiceDependencyDependencyDependentServiceOutput {
	return o
}

// The ID of the service dependency.
func (o ServiceDependencyDependencyDependentServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDependencyDependencyDependentService) string { return v.Id }).(pulumi.StringOutput)
}

// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
func (o ServiceDependencyDependencyDependentServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDependencyDependencyDependentService) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceDependencyDependencyDependentServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencyDependentServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDependencyDependencyDependentService)(nil)).Elem()
}

func (o ServiceDependencyDependencyDependentServiceArrayOutput) ToServiceDependencyDependencyDependentServiceArrayOutput() ServiceDependencyDependencyDependentServiceArrayOutput {
	return o
}

func (o ServiceDependencyDependencyDependentServiceArrayOutput) ToServiceDependencyDependencyDependentServiceArrayOutputWithContext(ctx context.Context) ServiceDependencyDependencyDependentServiceArrayOutput {
	return o
}

func (o ServiceDependencyDependencyDependentServiceArrayOutput) Index(i pulumi.IntInput) ServiceDependencyDependencyDependentServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDependencyDependencyDependentService {
		return vs[0].([]ServiceDependencyDependencyDependentService)[vs[1].(int)]
	}).(ServiceDependencyDependencyDependentServiceOutput)
}

type ServiceDependencyDependencySupportingService struct {
	// The ID of the service dependency.
	Id string `pulumi:"id"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type string `pulumi:"type"`
}

// ServiceDependencyDependencySupportingServiceInput is an input type that accepts ServiceDependencyDependencySupportingServiceArgs and ServiceDependencyDependencySupportingServiceOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencySupportingServiceInput` via:
//
//	ServiceDependencyDependencySupportingServiceArgs{...}
type ServiceDependencyDependencySupportingServiceInput interface {
	pulumi.Input

	ToServiceDependencyDependencySupportingServiceOutput() ServiceDependencyDependencySupportingServiceOutput
	ToServiceDependencyDependencySupportingServiceOutputWithContext(context.Context) ServiceDependencyDependencySupportingServiceOutput
}

type ServiceDependencyDependencySupportingServiceArgs struct {
	// The ID of the service dependency.
	Id pulumi.StringInput `pulumi:"id"`
	// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceDependencyDependencySupportingServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependencySupportingService)(nil)).Elem()
}

func (i ServiceDependencyDependencySupportingServiceArgs) ToServiceDependencyDependencySupportingServiceOutput() ServiceDependencyDependencySupportingServiceOutput {
	return i.ToServiceDependencyDependencySupportingServiceOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencySupportingServiceArgs) ToServiceDependencyDependencySupportingServiceOutputWithContext(ctx context.Context) ServiceDependencyDependencySupportingServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencySupportingServiceOutput)
}

// ServiceDependencyDependencySupportingServiceArrayInput is an input type that accepts ServiceDependencyDependencySupportingServiceArray and ServiceDependencyDependencySupportingServiceArrayOutput values.
// You can construct a concrete instance of `ServiceDependencyDependencySupportingServiceArrayInput` via:
//
//	ServiceDependencyDependencySupportingServiceArray{ ServiceDependencyDependencySupportingServiceArgs{...} }
type ServiceDependencyDependencySupportingServiceArrayInput interface {
	pulumi.Input

	ToServiceDependencyDependencySupportingServiceArrayOutput() ServiceDependencyDependencySupportingServiceArrayOutput
	ToServiceDependencyDependencySupportingServiceArrayOutputWithContext(context.Context) ServiceDependencyDependencySupportingServiceArrayOutput
}

type ServiceDependencyDependencySupportingServiceArray []ServiceDependencyDependencySupportingServiceInput

func (ServiceDependencyDependencySupportingServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDependencyDependencySupportingService)(nil)).Elem()
}

func (i ServiceDependencyDependencySupportingServiceArray) ToServiceDependencyDependencySupportingServiceArrayOutput() ServiceDependencyDependencySupportingServiceArrayOutput {
	return i.ToServiceDependencyDependencySupportingServiceArrayOutputWithContext(context.Background())
}

func (i ServiceDependencyDependencySupportingServiceArray) ToServiceDependencyDependencySupportingServiceArrayOutputWithContext(ctx context.Context) ServiceDependencyDependencySupportingServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDependencyDependencySupportingServiceArrayOutput)
}

type ServiceDependencyDependencySupportingServiceOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencySupportingServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDependencyDependencySupportingService)(nil)).Elem()
}

func (o ServiceDependencyDependencySupportingServiceOutput) ToServiceDependencyDependencySupportingServiceOutput() ServiceDependencyDependencySupportingServiceOutput {
	return o
}

func (o ServiceDependencyDependencySupportingServiceOutput) ToServiceDependencyDependencySupportingServiceOutputWithContext(ctx context.Context) ServiceDependencyDependencySupportingServiceOutput {
	return o
}

// The ID of the service dependency.
func (o ServiceDependencyDependencySupportingServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDependencyDependencySupportingService) string { return v.Id }).(pulumi.StringOutput)
}

// Can be `businessService`,  `service`, `businessServiceReference` or `technicalServiceReference`.
func (o ServiceDependencyDependencySupportingServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDependencyDependencySupportingService) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceDependencyDependencySupportingServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceDependencyDependencySupportingServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDependencyDependencySupportingService)(nil)).Elem()
}

func (o ServiceDependencyDependencySupportingServiceArrayOutput) ToServiceDependencyDependencySupportingServiceArrayOutput() ServiceDependencyDependencySupportingServiceArrayOutput {
	return o
}

func (o ServiceDependencyDependencySupportingServiceArrayOutput) ToServiceDependencyDependencySupportingServiceArrayOutputWithContext(ctx context.Context) ServiceDependencyDependencySupportingServiceArrayOutput {
	return o
}

func (o ServiceDependencyDependencySupportingServiceArrayOutput) Index(i pulumi.IntInput) ServiceDependencyDependencySupportingServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDependencyDependencySupportingService {
		return vs[0].([]ServiceDependencyDependencySupportingService)[vs[1].(int)]
	}).(ServiceDependencyDependencySupportingServiceOutput)
}

type ServiceEventRuleActions struct {
	// Note added to the event.
	Annotates []ServiceEventRuleActionsAnnotate `pulumi:"annotates"`
	// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
	EventActions []ServiceEventRuleActionsEventAction `pulumi:"eventActions"`
	// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
	Extractions []ServiceEventRuleActionsExtraction `pulumi:"extractions"`
	// The ID of the priority applied to the event.
	Priorities []ServiceEventRuleActionsPriority `pulumi:"priorities"`
	// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
	Severities []ServiceEventRuleActionsSeverity `pulumi:"severities"`
	// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
	Suppresses []ServiceEventRuleActionsSuppress `pulumi:"suppresses"`
	// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
	Suspends []ServiceEventRuleActionsSuspend `pulumi:"suspends"`
}

// ServiceEventRuleActionsInput is an input type that accepts ServiceEventRuleActionsArgs and ServiceEventRuleActionsOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsInput` via:
//
//	ServiceEventRuleActionsArgs{...}
type ServiceEventRuleActionsInput interface {
	pulumi.Input

	ToServiceEventRuleActionsOutput() ServiceEventRuleActionsOutput
	ToServiceEventRuleActionsOutputWithContext(context.Context) ServiceEventRuleActionsOutput
}

type ServiceEventRuleActionsArgs struct {
	// Note added to the event.
	Annotates ServiceEventRuleActionsAnnotateArrayInput `pulumi:"annotates"`
	// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
	EventActions ServiceEventRuleActionsEventActionArrayInput `pulumi:"eventActions"`
	// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
	Extractions ServiceEventRuleActionsExtractionArrayInput `pulumi:"extractions"`
	// The ID of the priority applied to the event.
	Priorities ServiceEventRuleActionsPriorityArrayInput `pulumi:"priorities"`
	// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
	Severities ServiceEventRuleActionsSeverityArrayInput `pulumi:"severities"`
	// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
	Suppresses ServiceEventRuleActionsSuppressArrayInput `pulumi:"suppresses"`
	// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
	Suspends ServiceEventRuleActionsSuspendArrayInput `pulumi:"suspends"`
}

func (ServiceEventRuleActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActions)(nil)).Elem()
}

func (i ServiceEventRuleActionsArgs) ToServiceEventRuleActionsOutput() ServiceEventRuleActionsOutput {
	return i.ToServiceEventRuleActionsOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsArgs) ToServiceEventRuleActionsOutputWithContext(ctx context.Context) ServiceEventRuleActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsOutput)
}

func (i ServiceEventRuleActionsArgs) ToServiceEventRuleActionsPtrOutput() ServiceEventRuleActionsPtrOutput {
	return i.ToServiceEventRuleActionsPtrOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsArgs) ToServiceEventRuleActionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsOutput).ToServiceEventRuleActionsPtrOutputWithContext(ctx)
}

// ServiceEventRuleActionsPtrInput is an input type that accepts ServiceEventRuleActionsArgs, ServiceEventRuleActionsPtr and ServiceEventRuleActionsPtrOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsPtrInput` via:
//
//	        ServiceEventRuleActionsArgs{...}
//
//	or:
//
//	        nil
type ServiceEventRuleActionsPtrInput interface {
	pulumi.Input

	ToServiceEventRuleActionsPtrOutput() ServiceEventRuleActionsPtrOutput
	ToServiceEventRuleActionsPtrOutputWithContext(context.Context) ServiceEventRuleActionsPtrOutput
}

type serviceEventRuleActionsPtrType ServiceEventRuleActionsArgs

func ServiceEventRuleActionsPtr(v *ServiceEventRuleActionsArgs) ServiceEventRuleActionsPtrInput {
	return (*serviceEventRuleActionsPtrType)(v)
}

func (*serviceEventRuleActionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleActions)(nil)).Elem()
}

func (i *serviceEventRuleActionsPtrType) ToServiceEventRuleActionsPtrOutput() ServiceEventRuleActionsPtrOutput {
	return i.ToServiceEventRuleActionsPtrOutputWithContext(context.Background())
}

func (i *serviceEventRuleActionsPtrType) ToServiceEventRuleActionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsPtrOutput)
}

type ServiceEventRuleActionsOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActions)(nil)).Elem()
}

func (o ServiceEventRuleActionsOutput) ToServiceEventRuleActionsOutput() ServiceEventRuleActionsOutput {
	return o
}

func (o ServiceEventRuleActionsOutput) ToServiceEventRuleActionsOutputWithContext(ctx context.Context) ServiceEventRuleActionsOutput {
	return o
}

func (o ServiceEventRuleActionsOutput) ToServiceEventRuleActionsPtrOutput() ServiceEventRuleActionsPtrOutput {
	return o.ToServiceEventRuleActionsPtrOutputWithContext(context.Background())
}

func (o ServiceEventRuleActionsOutput) ToServiceEventRuleActionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEventRuleActions) *ServiceEventRuleActions {
		return &v
	}).(ServiceEventRuleActionsPtrOutput)
}

// Note added to the event.
func (o ServiceEventRuleActionsOutput) Annotates() ServiceEventRuleActionsAnnotateArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsAnnotate { return v.Annotates }).(ServiceEventRuleActionsAnnotateArrayOutput)
}

// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
func (o ServiceEventRuleActionsOutput) EventActions() ServiceEventRuleActionsEventActionArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsEventAction { return v.EventActions }).(ServiceEventRuleActionsEventActionArrayOutput)
}

// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
func (o ServiceEventRuleActionsOutput) Extractions() ServiceEventRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsExtraction { return v.Extractions }).(ServiceEventRuleActionsExtractionArrayOutput)
}

// The ID of the priority applied to the event.
func (o ServiceEventRuleActionsOutput) Priorities() ServiceEventRuleActionsPriorityArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsPriority { return v.Priorities }).(ServiceEventRuleActionsPriorityArrayOutput)
}

// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
func (o ServiceEventRuleActionsOutput) Severities() ServiceEventRuleActionsSeverityArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsSeverity { return v.Severities }).(ServiceEventRuleActionsSeverityArrayOutput)
}

// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
func (o ServiceEventRuleActionsOutput) Suppresses() ServiceEventRuleActionsSuppressArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsSuppress { return v.Suppresses }).(ServiceEventRuleActionsSuppressArrayOutput)
}

// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
func (o ServiceEventRuleActionsOutput) Suspends() ServiceEventRuleActionsSuspendArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleActions) []ServiceEventRuleActionsSuspend { return v.Suspends }).(ServiceEventRuleActionsSuspendArrayOutput)
}

type ServiceEventRuleActionsPtrOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleActions)(nil)).Elem()
}

func (o ServiceEventRuleActionsPtrOutput) ToServiceEventRuleActionsPtrOutput() ServiceEventRuleActionsPtrOutput {
	return o
}

func (o ServiceEventRuleActionsPtrOutput) ToServiceEventRuleActionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleActionsPtrOutput {
	return o
}

func (o ServiceEventRuleActionsPtrOutput) Elem() ServiceEventRuleActionsOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) ServiceEventRuleActions {
		if v != nil {
			return *v
		}
		var ret ServiceEventRuleActions
		return ret
	}).(ServiceEventRuleActionsOutput)
}

// Note added to the event.
func (o ServiceEventRuleActionsPtrOutput) Annotates() ServiceEventRuleActionsAnnotateArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsAnnotate {
		if v == nil {
			return nil
		}
		return v.Annotates
	}).(ServiceEventRuleActionsAnnotateArrayOutput)
}

// An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
func (o ServiceEventRuleActionsPtrOutput) EventActions() ServiceEventRuleActionsEventActionArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsEventAction {
		if v == nil {
			return nil
		}
		return v.EventActions
	}).(ServiceEventRuleActionsEventActionArrayOutput)
}

// Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
func (o ServiceEventRuleActionsPtrOutput) Extractions() ServiceEventRuleActionsExtractionArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsExtraction {
		if v == nil {
			return nil
		}
		return v.Extractions
	}).(ServiceEventRuleActionsExtractionArrayOutput)
}

// The ID of the priority applied to the event.
func (o ServiceEventRuleActionsPtrOutput) Priorities() ServiceEventRuleActionsPriorityArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsPriority {
		if v == nil {
			return nil
		}
		return v.Priorities
	}).(ServiceEventRuleActionsPriorityArrayOutput)
}

// The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
func (o ServiceEventRuleActionsPtrOutput) Severities() ServiceEventRuleActionsSeverityArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsSeverity {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(ServiceEventRuleActionsSeverityArrayOutput)
}

// Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
func (o ServiceEventRuleActionsPtrOutput) Suppresses() ServiceEventRuleActionsSuppressArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsSuppress {
		if v == nil {
			return nil
		}
		return v.Suppresses
	}).(ServiceEventRuleActionsSuppressArrayOutput)
}

// An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
func (o ServiceEventRuleActionsPtrOutput) Suspends() ServiceEventRuleActionsSuspendArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleActions) []ServiceEventRuleActionsSuspend {
		if v == nil {
			return nil
		}
		return v.Suspends
	}).(ServiceEventRuleActionsSuspendArrayOutput)
}

type ServiceEventRuleActionsAnnotate struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleActionsAnnotateInput is an input type that accepts ServiceEventRuleActionsAnnotateArgs and ServiceEventRuleActionsAnnotateOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsAnnotateInput` via:
//
//	ServiceEventRuleActionsAnnotateArgs{...}
type ServiceEventRuleActionsAnnotateInput interface {
	pulumi.Input

	ToServiceEventRuleActionsAnnotateOutput() ServiceEventRuleActionsAnnotateOutput
	ToServiceEventRuleActionsAnnotateOutputWithContext(context.Context) ServiceEventRuleActionsAnnotateOutput
}

type ServiceEventRuleActionsAnnotateArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsAnnotateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsAnnotate)(nil)).Elem()
}

func (i ServiceEventRuleActionsAnnotateArgs) ToServiceEventRuleActionsAnnotateOutput() ServiceEventRuleActionsAnnotateOutput {
	return i.ToServiceEventRuleActionsAnnotateOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsAnnotateArgs) ToServiceEventRuleActionsAnnotateOutputWithContext(ctx context.Context) ServiceEventRuleActionsAnnotateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsAnnotateOutput)
}

// ServiceEventRuleActionsAnnotateArrayInput is an input type that accepts ServiceEventRuleActionsAnnotateArray and ServiceEventRuleActionsAnnotateArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsAnnotateArrayInput` via:
//
//	ServiceEventRuleActionsAnnotateArray{ ServiceEventRuleActionsAnnotateArgs{...} }
type ServiceEventRuleActionsAnnotateArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsAnnotateArrayOutput() ServiceEventRuleActionsAnnotateArrayOutput
	ToServiceEventRuleActionsAnnotateArrayOutputWithContext(context.Context) ServiceEventRuleActionsAnnotateArrayOutput
}

type ServiceEventRuleActionsAnnotateArray []ServiceEventRuleActionsAnnotateInput

func (ServiceEventRuleActionsAnnotateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsAnnotate)(nil)).Elem()
}

func (i ServiceEventRuleActionsAnnotateArray) ToServiceEventRuleActionsAnnotateArrayOutput() ServiceEventRuleActionsAnnotateArrayOutput {
	return i.ToServiceEventRuleActionsAnnotateArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsAnnotateArray) ToServiceEventRuleActionsAnnotateArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsAnnotateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsAnnotateArrayOutput)
}

type ServiceEventRuleActionsAnnotateOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsAnnotateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsAnnotate)(nil)).Elem()
}

func (o ServiceEventRuleActionsAnnotateOutput) ToServiceEventRuleActionsAnnotateOutput() ServiceEventRuleActionsAnnotateOutput {
	return o
}

func (o ServiceEventRuleActionsAnnotateOutput) ToServiceEventRuleActionsAnnotateOutputWithContext(ctx context.Context) ServiceEventRuleActionsAnnotateOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsAnnotateOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsAnnotate) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleActionsAnnotateArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsAnnotateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsAnnotate)(nil)).Elem()
}

func (o ServiceEventRuleActionsAnnotateArrayOutput) ToServiceEventRuleActionsAnnotateArrayOutput() ServiceEventRuleActionsAnnotateArrayOutput {
	return o
}

func (o ServiceEventRuleActionsAnnotateArrayOutput) ToServiceEventRuleActionsAnnotateArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsAnnotateArrayOutput {
	return o
}

func (o ServiceEventRuleActionsAnnotateArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsAnnotateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsAnnotate {
		return vs[0].([]ServiceEventRuleActionsAnnotate)[vs[1].(int)]
	}).(ServiceEventRuleActionsAnnotateOutput)
}

type ServiceEventRuleActionsEventAction struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleActionsEventActionInput is an input type that accepts ServiceEventRuleActionsEventActionArgs and ServiceEventRuleActionsEventActionOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsEventActionInput` via:
//
//	ServiceEventRuleActionsEventActionArgs{...}
type ServiceEventRuleActionsEventActionInput interface {
	pulumi.Input

	ToServiceEventRuleActionsEventActionOutput() ServiceEventRuleActionsEventActionOutput
	ToServiceEventRuleActionsEventActionOutputWithContext(context.Context) ServiceEventRuleActionsEventActionOutput
}

type ServiceEventRuleActionsEventActionArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsEventActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsEventAction)(nil)).Elem()
}

func (i ServiceEventRuleActionsEventActionArgs) ToServiceEventRuleActionsEventActionOutput() ServiceEventRuleActionsEventActionOutput {
	return i.ToServiceEventRuleActionsEventActionOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsEventActionArgs) ToServiceEventRuleActionsEventActionOutputWithContext(ctx context.Context) ServiceEventRuleActionsEventActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsEventActionOutput)
}

// ServiceEventRuleActionsEventActionArrayInput is an input type that accepts ServiceEventRuleActionsEventActionArray and ServiceEventRuleActionsEventActionArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsEventActionArrayInput` via:
//
//	ServiceEventRuleActionsEventActionArray{ ServiceEventRuleActionsEventActionArgs{...} }
type ServiceEventRuleActionsEventActionArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsEventActionArrayOutput() ServiceEventRuleActionsEventActionArrayOutput
	ToServiceEventRuleActionsEventActionArrayOutputWithContext(context.Context) ServiceEventRuleActionsEventActionArrayOutput
}

type ServiceEventRuleActionsEventActionArray []ServiceEventRuleActionsEventActionInput

func (ServiceEventRuleActionsEventActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsEventAction)(nil)).Elem()
}

func (i ServiceEventRuleActionsEventActionArray) ToServiceEventRuleActionsEventActionArrayOutput() ServiceEventRuleActionsEventActionArrayOutput {
	return i.ToServiceEventRuleActionsEventActionArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsEventActionArray) ToServiceEventRuleActionsEventActionArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsEventActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsEventActionArrayOutput)
}

type ServiceEventRuleActionsEventActionOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsEventActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsEventAction)(nil)).Elem()
}

func (o ServiceEventRuleActionsEventActionOutput) ToServiceEventRuleActionsEventActionOutput() ServiceEventRuleActionsEventActionOutput {
	return o
}

func (o ServiceEventRuleActionsEventActionOutput) ToServiceEventRuleActionsEventActionOutputWithContext(ctx context.Context) ServiceEventRuleActionsEventActionOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsEventActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsEventAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleActionsEventActionArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsEventActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsEventAction)(nil)).Elem()
}

func (o ServiceEventRuleActionsEventActionArrayOutput) ToServiceEventRuleActionsEventActionArrayOutput() ServiceEventRuleActionsEventActionArrayOutput {
	return o
}

func (o ServiceEventRuleActionsEventActionArrayOutput) ToServiceEventRuleActionsEventActionArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsEventActionArrayOutput {
	return o
}

func (o ServiceEventRuleActionsEventActionArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsEventActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsEventAction {
		return vs[0].([]ServiceEventRuleActionsEventAction)[vs[1].(int)]
	}).(ServiceEventRuleActionsEventActionOutput)
}

type ServiceEventRuleActionsExtraction struct {
	// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
	//
	// *- **OR** -*
	Regex *string `pulumi:"regex"`
	// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Source *string `pulumi:"source"`
	// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	//
	// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
	Target *string `pulumi:"target"`
	// A customized field message. This can also include variables extracted from the payload by using string interpolation.
	Template *string `pulumi:"template"`
}

// ServiceEventRuleActionsExtractionInput is an input type that accepts ServiceEventRuleActionsExtractionArgs and ServiceEventRuleActionsExtractionOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsExtractionInput` via:
//
//	ServiceEventRuleActionsExtractionArgs{...}
type ServiceEventRuleActionsExtractionInput interface {
	pulumi.Input

	ToServiceEventRuleActionsExtractionOutput() ServiceEventRuleActionsExtractionOutput
	ToServiceEventRuleActionsExtractionOutputWithContext(context.Context) ServiceEventRuleActionsExtractionOutput
}

type ServiceEventRuleActionsExtractionArgs struct {
	// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
	//
	// *- **OR** -*
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	//
	// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
	Target pulumi.StringPtrInput `pulumi:"target"`
	// A customized field message. This can also include variables extracted from the payload by using string interpolation.
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (ServiceEventRuleActionsExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsExtraction)(nil)).Elem()
}

func (i ServiceEventRuleActionsExtractionArgs) ToServiceEventRuleActionsExtractionOutput() ServiceEventRuleActionsExtractionOutput {
	return i.ToServiceEventRuleActionsExtractionOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsExtractionArgs) ToServiceEventRuleActionsExtractionOutputWithContext(ctx context.Context) ServiceEventRuleActionsExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsExtractionOutput)
}

// ServiceEventRuleActionsExtractionArrayInput is an input type that accepts ServiceEventRuleActionsExtractionArray and ServiceEventRuleActionsExtractionArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsExtractionArrayInput` via:
//
//	ServiceEventRuleActionsExtractionArray{ ServiceEventRuleActionsExtractionArgs{...} }
type ServiceEventRuleActionsExtractionArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsExtractionArrayOutput() ServiceEventRuleActionsExtractionArrayOutput
	ToServiceEventRuleActionsExtractionArrayOutputWithContext(context.Context) ServiceEventRuleActionsExtractionArrayOutput
}

type ServiceEventRuleActionsExtractionArray []ServiceEventRuleActionsExtractionInput

func (ServiceEventRuleActionsExtractionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsExtraction)(nil)).Elem()
}

func (i ServiceEventRuleActionsExtractionArray) ToServiceEventRuleActionsExtractionArrayOutput() ServiceEventRuleActionsExtractionArrayOutput {
	return i.ToServiceEventRuleActionsExtractionArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsExtractionArray) ToServiceEventRuleActionsExtractionArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsExtractionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsExtractionArrayOutput)
}

type ServiceEventRuleActionsExtractionOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsExtraction)(nil)).Elem()
}

func (o ServiceEventRuleActionsExtractionOutput) ToServiceEventRuleActionsExtractionOutput() ServiceEventRuleActionsExtractionOutput {
	return o
}

func (o ServiceEventRuleActionsExtractionOutput) ToServiceEventRuleActionsExtractionOutputWithContext(ctx context.Context) ServiceEventRuleActionsExtractionOutput {
	return o
}

// The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
//
// *- **OR** -*
func (o ServiceEventRuleActionsExtractionOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsExtraction) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
func (o ServiceEventRuleActionsExtractionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsExtraction) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
//
// *NOTE: A rule can have multiple `extraction` objects attributed to it.*
func (o ServiceEventRuleActionsExtractionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsExtraction) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// A customized field message. This can also include variables extracted from the payload by using string interpolation.
func (o ServiceEventRuleActionsExtractionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsExtraction) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleActionsExtractionArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsExtractionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsExtraction)(nil)).Elem()
}

func (o ServiceEventRuleActionsExtractionArrayOutput) ToServiceEventRuleActionsExtractionArrayOutput() ServiceEventRuleActionsExtractionArrayOutput {
	return o
}

func (o ServiceEventRuleActionsExtractionArrayOutput) ToServiceEventRuleActionsExtractionArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsExtractionArrayOutput {
	return o
}

func (o ServiceEventRuleActionsExtractionArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsExtractionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsExtraction {
		return vs[0].([]ServiceEventRuleActionsExtraction)[vs[1].(int)]
	}).(ServiceEventRuleActionsExtractionOutput)
}

type ServiceEventRuleActionsPriority struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleActionsPriorityInput is an input type that accepts ServiceEventRuleActionsPriorityArgs and ServiceEventRuleActionsPriorityOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsPriorityInput` via:
//
//	ServiceEventRuleActionsPriorityArgs{...}
type ServiceEventRuleActionsPriorityInput interface {
	pulumi.Input

	ToServiceEventRuleActionsPriorityOutput() ServiceEventRuleActionsPriorityOutput
	ToServiceEventRuleActionsPriorityOutputWithContext(context.Context) ServiceEventRuleActionsPriorityOutput
}

type ServiceEventRuleActionsPriorityArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsPriorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsPriority)(nil)).Elem()
}

func (i ServiceEventRuleActionsPriorityArgs) ToServiceEventRuleActionsPriorityOutput() ServiceEventRuleActionsPriorityOutput {
	return i.ToServiceEventRuleActionsPriorityOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsPriorityArgs) ToServiceEventRuleActionsPriorityOutputWithContext(ctx context.Context) ServiceEventRuleActionsPriorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsPriorityOutput)
}

// ServiceEventRuleActionsPriorityArrayInput is an input type that accepts ServiceEventRuleActionsPriorityArray and ServiceEventRuleActionsPriorityArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsPriorityArrayInput` via:
//
//	ServiceEventRuleActionsPriorityArray{ ServiceEventRuleActionsPriorityArgs{...} }
type ServiceEventRuleActionsPriorityArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsPriorityArrayOutput() ServiceEventRuleActionsPriorityArrayOutput
	ToServiceEventRuleActionsPriorityArrayOutputWithContext(context.Context) ServiceEventRuleActionsPriorityArrayOutput
}

type ServiceEventRuleActionsPriorityArray []ServiceEventRuleActionsPriorityInput

func (ServiceEventRuleActionsPriorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsPriority)(nil)).Elem()
}

func (i ServiceEventRuleActionsPriorityArray) ToServiceEventRuleActionsPriorityArrayOutput() ServiceEventRuleActionsPriorityArrayOutput {
	return i.ToServiceEventRuleActionsPriorityArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsPriorityArray) ToServiceEventRuleActionsPriorityArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsPriorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsPriorityArrayOutput)
}

type ServiceEventRuleActionsPriorityOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsPriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsPriority)(nil)).Elem()
}

func (o ServiceEventRuleActionsPriorityOutput) ToServiceEventRuleActionsPriorityOutput() ServiceEventRuleActionsPriorityOutput {
	return o
}

func (o ServiceEventRuleActionsPriorityOutput) ToServiceEventRuleActionsPriorityOutputWithContext(ctx context.Context) ServiceEventRuleActionsPriorityOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsPriorityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsPriority) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleActionsPriorityArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsPriorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsPriority)(nil)).Elem()
}

func (o ServiceEventRuleActionsPriorityArrayOutput) ToServiceEventRuleActionsPriorityArrayOutput() ServiceEventRuleActionsPriorityArrayOutput {
	return o
}

func (o ServiceEventRuleActionsPriorityArrayOutput) ToServiceEventRuleActionsPriorityArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsPriorityArrayOutput {
	return o
}

func (o ServiceEventRuleActionsPriorityArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsPriorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsPriority {
		return vs[0].([]ServiceEventRuleActionsPriority)[vs[1].(int)]
	}).(ServiceEventRuleActionsPriorityOutput)
}

type ServiceEventRuleActionsSeverity struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleActionsSeverityInput is an input type that accepts ServiceEventRuleActionsSeverityArgs and ServiceEventRuleActionsSeverityOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSeverityInput` via:
//
//	ServiceEventRuleActionsSeverityArgs{...}
type ServiceEventRuleActionsSeverityInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSeverityOutput() ServiceEventRuleActionsSeverityOutput
	ToServiceEventRuleActionsSeverityOutputWithContext(context.Context) ServiceEventRuleActionsSeverityOutput
}

type ServiceEventRuleActionsSeverityArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSeverity)(nil)).Elem()
}

func (i ServiceEventRuleActionsSeverityArgs) ToServiceEventRuleActionsSeverityOutput() ServiceEventRuleActionsSeverityOutput {
	return i.ToServiceEventRuleActionsSeverityOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSeverityArgs) ToServiceEventRuleActionsSeverityOutputWithContext(ctx context.Context) ServiceEventRuleActionsSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSeverityOutput)
}

// ServiceEventRuleActionsSeverityArrayInput is an input type that accepts ServiceEventRuleActionsSeverityArray and ServiceEventRuleActionsSeverityArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSeverityArrayInput` via:
//
//	ServiceEventRuleActionsSeverityArray{ ServiceEventRuleActionsSeverityArgs{...} }
type ServiceEventRuleActionsSeverityArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSeverityArrayOutput() ServiceEventRuleActionsSeverityArrayOutput
	ToServiceEventRuleActionsSeverityArrayOutputWithContext(context.Context) ServiceEventRuleActionsSeverityArrayOutput
}

type ServiceEventRuleActionsSeverityArray []ServiceEventRuleActionsSeverityInput

func (ServiceEventRuleActionsSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSeverity)(nil)).Elem()
}

func (i ServiceEventRuleActionsSeverityArray) ToServiceEventRuleActionsSeverityArrayOutput() ServiceEventRuleActionsSeverityArrayOutput {
	return i.ToServiceEventRuleActionsSeverityArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSeverityArray) ToServiceEventRuleActionsSeverityArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSeverityArrayOutput)
}

type ServiceEventRuleActionsSeverityOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSeverity)(nil)).Elem()
}

func (o ServiceEventRuleActionsSeverityOutput) ToServiceEventRuleActionsSeverityOutput() ServiceEventRuleActionsSeverityOutput {
	return o
}

func (o ServiceEventRuleActionsSeverityOutput) ToServiceEventRuleActionsSeverityOutputWithContext(ctx context.Context) ServiceEventRuleActionsSeverityOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsSeverityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSeverity) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleActionsSeverityArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSeverity)(nil)).Elem()
}

func (o ServiceEventRuleActionsSeverityArrayOutput) ToServiceEventRuleActionsSeverityArrayOutput() ServiceEventRuleActionsSeverityArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSeverityArrayOutput) ToServiceEventRuleActionsSeverityArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSeverityArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSeverityArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsSeverity {
		return vs[0].([]ServiceEventRuleActionsSeverity)[vs[1].(int)]
	}).(ServiceEventRuleActionsSeverityOutput)
}

type ServiceEventRuleActionsSuppress struct {
	// The number value of the `thresholdTimeUnit` before an incident is created.
	ThresholdTimeAmount *int `pulumi:"thresholdTimeAmount"`
	// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
	ThresholdTimeUnit *string `pulumi:"thresholdTimeUnit"`
	// The number of alerts that should be suppressed.
	ThresholdValue *int `pulumi:"thresholdValue"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *bool `pulumi:"value"`
}

// ServiceEventRuleActionsSuppressInput is an input type that accepts ServiceEventRuleActionsSuppressArgs and ServiceEventRuleActionsSuppressOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSuppressInput` via:
//
//	ServiceEventRuleActionsSuppressArgs{...}
type ServiceEventRuleActionsSuppressInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSuppressOutput() ServiceEventRuleActionsSuppressOutput
	ToServiceEventRuleActionsSuppressOutputWithContext(context.Context) ServiceEventRuleActionsSuppressOutput
}

type ServiceEventRuleActionsSuppressArgs struct {
	// The number value of the `thresholdTimeUnit` before an incident is created.
	ThresholdTimeAmount pulumi.IntPtrInput `pulumi:"thresholdTimeAmount"`
	// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
	ThresholdTimeUnit pulumi.StringPtrInput `pulumi:"thresholdTimeUnit"`
	// The number of alerts that should be suppressed.
	ThresholdValue pulumi.IntPtrInput `pulumi:"thresholdValue"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.BoolPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsSuppressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSuppress)(nil)).Elem()
}

func (i ServiceEventRuleActionsSuppressArgs) ToServiceEventRuleActionsSuppressOutput() ServiceEventRuleActionsSuppressOutput {
	return i.ToServiceEventRuleActionsSuppressOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSuppressArgs) ToServiceEventRuleActionsSuppressOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuppressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSuppressOutput)
}

// ServiceEventRuleActionsSuppressArrayInput is an input type that accepts ServiceEventRuleActionsSuppressArray and ServiceEventRuleActionsSuppressArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSuppressArrayInput` via:
//
//	ServiceEventRuleActionsSuppressArray{ ServiceEventRuleActionsSuppressArgs{...} }
type ServiceEventRuleActionsSuppressArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSuppressArrayOutput() ServiceEventRuleActionsSuppressArrayOutput
	ToServiceEventRuleActionsSuppressArrayOutputWithContext(context.Context) ServiceEventRuleActionsSuppressArrayOutput
}

type ServiceEventRuleActionsSuppressArray []ServiceEventRuleActionsSuppressInput

func (ServiceEventRuleActionsSuppressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSuppress)(nil)).Elem()
}

func (i ServiceEventRuleActionsSuppressArray) ToServiceEventRuleActionsSuppressArrayOutput() ServiceEventRuleActionsSuppressArrayOutput {
	return i.ToServiceEventRuleActionsSuppressArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSuppressArray) ToServiceEventRuleActionsSuppressArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuppressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSuppressArrayOutput)
}

type ServiceEventRuleActionsSuppressOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSuppressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSuppress)(nil)).Elem()
}

func (o ServiceEventRuleActionsSuppressOutput) ToServiceEventRuleActionsSuppressOutput() ServiceEventRuleActionsSuppressOutput {
	return o
}

func (o ServiceEventRuleActionsSuppressOutput) ToServiceEventRuleActionsSuppressOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuppressOutput {
	return o
}

// The number value of the `thresholdTimeUnit` before an incident is created.
func (o ServiceEventRuleActionsSuppressOutput) ThresholdTimeAmount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSuppress) *int { return v.ThresholdTimeAmount }).(pulumi.IntPtrOutput)
}

// The `seconds`,`minutes`, or `hours` the `thresholdTimeAmount` should be measured.
func (o ServiceEventRuleActionsSuppressOutput) ThresholdTimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSuppress) *string { return v.ThresholdTimeUnit }).(pulumi.StringPtrOutput)
}

// The number of alerts that should be suppressed.
func (o ServiceEventRuleActionsSuppressOutput) ThresholdValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSuppress) *int { return v.ThresholdValue }).(pulumi.IntPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsSuppressOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSuppress) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

type ServiceEventRuleActionsSuppressArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSuppressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSuppress)(nil)).Elem()
}

func (o ServiceEventRuleActionsSuppressArrayOutput) ToServiceEventRuleActionsSuppressArrayOutput() ServiceEventRuleActionsSuppressArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSuppressArrayOutput) ToServiceEventRuleActionsSuppressArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuppressArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSuppressArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsSuppressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsSuppress {
		return vs[0].([]ServiceEventRuleActionsSuppress)[vs[1].(int)]
	}).(ServiceEventRuleActionsSuppressOutput)
}

type ServiceEventRuleActionsSuspend struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *int `pulumi:"value"`
}

// ServiceEventRuleActionsSuspendInput is an input type that accepts ServiceEventRuleActionsSuspendArgs and ServiceEventRuleActionsSuspendOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSuspendInput` via:
//
//	ServiceEventRuleActionsSuspendArgs{...}
type ServiceEventRuleActionsSuspendInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSuspendOutput() ServiceEventRuleActionsSuspendOutput
	ToServiceEventRuleActionsSuspendOutputWithContext(context.Context) ServiceEventRuleActionsSuspendOutput
}

type ServiceEventRuleActionsSuspendArgs struct {
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.IntPtrInput `pulumi:"value"`
}

func (ServiceEventRuleActionsSuspendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSuspend)(nil)).Elem()
}

func (i ServiceEventRuleActionsSuspendArgs) ToServiceEventRuleActionsSuspendOutput() ServiceEventRuleActionsSuspendOutput {
	return i.ToServiceEventRuleActionsSuspendOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSuspendArgs) ToServiceEventRuleActionsSuspendOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuspendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSuspendOutput)
}

// ServiceEventRuleActionsSuspendArrayInput is an input type that accepts ServiceEventRuleActionsSuspendArray and ServiceEventRuleActionsSuspendArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleActionsSuspendArrayInput` via:
//
//	ServiceEventRuleActionsSuspendArray{ ServiceEventRuleActionsSuspendArgs{...} }
type ServiceEventRuleActionsSuspendArrayInput interface {
	pulumi.Input

	ToServiceEventRuleActionsSuspendArrayOutput() ServiceEventRuleActionsSuspendArrayOutput
	ToServiceEventRuleActionsSuspendArrayOutputWithContext(context.Context) ServiceEventRuleActionsSuspendArrayOutput
}

type ServiceEventRuleActionsSuspendArray []ServiceEventRuleActionsSuspendInput

func (ServiceEventRuleActionsSuspendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSuspend)(nil)).Elem()
}

func (i ServiceEventRuleActionsSuspendArray) ToServiceEventRuleActionsSuspendArrayOutput() ServiceEventRuleActionsSuspendArrayOutput {
	return i.ToServiceEventRuleActionsSuspendArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleActionsSuspendArray) ToServiceEventRuleActionsSuspendArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuspendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleActionsSuspendArrayOutput)
}

type ServiceEventRuleActionsSuspendOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSuspendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleActionsSuspend)(nil)).Elem()
}

func (o ServiceEventRuleActionsSuspendOutput) ToServiceEventRuleActionsSuspendOutput() ServiceEventRuleActionsSuspendOutput {
	return o
}

func (o ServiceEventRuleActionsSuspendOutput) ToServiceEventRuleActionsSuspendOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuspendOutput {
	return o
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleActionsSuspendOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleActionsSuspend) *int { return v.Value }).(pulumi.IntPtrOutput)
}

type ServiceEventRuleActionsSuspendArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleActionsSuspendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleActionsSuspend)(nil)).Elem()
}

func (o ServiceEventRuleActionsSuspendArrayOutput) ToServiceEventRuleActionsSuspendArrayOutput() ServiceEventRuleActionsSuspendArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSuspendArrayOutput) ToServiceEventRuleActionsSuspendArrayOutputWithContext(ctx context.Context) ServiceEventRuleActionsSuspendArrayOutput {
	return o
}

func (o ServiceEventRuleActionsSuspendArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleActionsSuspendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleActionsSuspend {
		return vs[0].([]ServiceEventRuleActionsSuspend)[vs[1].(int)]
	}).(ServiceEventRuleActionsSuspendOutput)
}

type ServiceEventRuleConditions struct {
	// Operator to combine sub-conditions. Can be `and` or `or`.
	Operator *string `pulumi:"operator"`
	// List of sub-conditions that define the condition.
	Subconditions []ServiceEventRuleConditionsSubcondition `pulumi:"subconditions"`
}

// ServiceEventRuleConditionsInput is an input type that accepts ServiceEventRuleConditionsArgs and ServiceEventRuleConditionsOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsInput` via:
//
//	ServiceEventRuleConditionsArgs{...}
type ServiceEventRuleConditionsInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsOutput() ServiceEventRuleConditionsOutput
	ToServiceEventRuleConditionsOutputWithContext(context.Context) ServiceEventRuleConditionsOutput
}

type ServiceEventRuleConditionsArgs struct {
	// Operator to combine sub-conditions. Can be `and` or `or`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// List of sub-conditions that define the condition.
	Subconditions ServiceEventRuleConditionsSubconditionArrayInput `pulumi:"subconditions"`
}

func (ServiceEventRuleConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditions)(nil)).Elem()
}

func (i ServiceEventRuleConditionsArgs) ToServiceEventRuleConditionsOutput() ServiceEventRuleConditionsOutput {
	return i.ToServiceEventRuleConditionsOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsArgs) ToServiceEventRuleConditionsOutputWithContext(ctx context.Context) ServiceEventRuleConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsOutput)
}

func (i ServiceEventRuleConditionsArgs) ToServiceEventRuleConditionsPtrOutput() ServiceEventRuleConditionsPtrOutput {
	return i.ToServiceEventRuleConditionsPtrOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsArgs) ToServiceEventRuleConditionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsOutput).ToServiceEventRuleConditionsPtrOutputWithContext(ctx)
}

// ServiceEventRuleConditionsPtrInput is an input type that accepts ServiceEventRuleConditionsArgs, ServiceEventRuleConditionsPtr and ServiceEventRuleConditionsPtrOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsPtrInput` via:
//
//	        ServiceEventRuleConditionsArgs{...}
//
//	or:
//
//	        nil
type ServiceEventRuleConditionsPtrInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsPtrOutput() ServiceEventRuleConditionsPtrOutput
	ToServiceEventRuleConditionsPtrOutputWithContext(context.Context) ServiceEventRuleConditionsPtrOutput
}

type serviceEventRuleConditionsPtrType ServiceEventRuleConditionsArgs

func ServiceEventRuleConditionsPtr(v *ServiceEventRuleConditionsArgs) ServiceEventRuleConditionsPtrInput {
	return (*serviceEventRuleConditionsPtrType)(v)
}

func (*serviceEventRuleConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleConditions)(nil)).Elem()
}

func (i *serviceEventRuleConditionsPtrType) ToServiceEventRuleConditionsPtrOutput() ServiceEventRuleConditionsPtrOutput {
	return i.ToServiceEventRuleConditionsPtrOutputWithContext(context.Background())
}

func (i *serviceEventRuleConditionsPtrType) ToServiceEventRuleConditionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsPtrOutput)
}

type ServiceEventRuleConditionsOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditions)(nil)).Elem()
}

func (o ServiceEventRuleConditionsOutput) ToServiceEventRuleConditionsOutput() ServiceEventRuleConditionsOutput {
	return o
}

func (o ServiceEventRuleConditionsOutput) ToServiceEventRuleConditionsOutputWithContext(ctx context.Context) ServiceEventRuleConditionsOutput {
	return o
}

func (o ServiceEventRuleConditionsOutput) ToServiceEventRuleConditionsPtrOutput() ServiceEventRuleConditionsPtrOutput {
	return o.ToServiceEventRuleConditionsPtrOutputWithContext(context.Background())
}

func (o ServiceEventRuleConditionsOutput) ToServiceEventRuleConditionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEventRuleConditions) *ServiceEventRuleConditions {
		return &v
	}).(ServiceEventRuleConditionsPtrOutput)
}

// Operator to combine sub-conditions. Can be `and` or `or`.
func (o ServiceEventRuleConditionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleConditions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// List of sub-conditions that define the condition.
func (o ServiceEventRuleConditionsOutput) Subconditions() ServiceEventRuleConditionsSubconditionArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleConditions) []ServiceEventRuleConditionsSubcondition { return v.Subconditions }).(ServiceEventRuleConditionsSubconditionArrayOutput)
}

type ServiceEventRuleConditionsPtrOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleConditions)(nil)).Elem()
}

func (o ServiceEventRuleConditionsPtrOutput) ToServiceEventRuleConditionsPtrOutput() ServiceEventRuleConditionsPtrOutput {
	return o
}

func (o ServiceEventRuleConditionsPtrOutput) ToServiceEventRuleConditionsPtrOutputWithContext(ctx context.Context) ServiceEventRuleConditionsPtrOutput {
	return o
}

func (o ServiceEventRuleConditionsPtrOutput) Elem() ServiceEventRuleConditionsOutput {
	return o.ApplyT(func(v *ServiceEventRuleConditions) ServiceEventRuleConditions {
		if v != nil {
			return *v
		}
		var ret ServiceEventRuleConditions
		return ret
	}).(ServiceEventRuleConditionsOutput)
}

// Operator to combine sub-conditions. Can be `and` or `or`.
func (o ServiceEventRuleConditionsPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEventRuleConditions) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// List of sub-conditions that define the condition.
func (o ServiceEventRuleConditionsPtrOutput) Subconditions() ServiceEventRuleConditionsSubconditionArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleConditions) []ServiceEventRuleConditionsSubcondition {
		if v == nil {
			return nil
		}
		return v.Subconditions
	}).(ServiceEventRuleConditionsSubconditionArrayOutput)
}

type ServiceEventRuleConditionsSubcondition struct {
	// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
	Operator *string `pulumi:"operator"`
	// Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Parameters []ServiceEventRuleConditionsSubconditionParameter `pulumi:"parameters"`
}

// ServiceEventRuleConditionsSubconditionInput is an input type that accepts ServiceEventRuleConditionsSubconditionArgs and ServiceEventRuleConditionsSubconditionOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsSubconditionInput` via:
//
//	ServiceEventRuleConditionsSubconditionArgs{...}
type ServiceEventRuleConditionsSubconditionInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsSubconditionOutput() ServiceEventRuleConditionsSubconditionOutput
	ToServiceEventRuleConditionsSubconditionOutputWithContext(context.Context) ServiceEventRuleConditionsSubconditionOutput
}

type ServiceEventRuleConditionsSubconditionArgs struct {
	// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
	Parameters ServiceEventRuleConditionsSubconditionParameterArrayInput `pulumi:"parameters"`
}

func (ServiceEventRuleConditionsSubconditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditionsSubcondition)(nil)).Elem()
}

func (i ServiceEventRuleConditionsSubconditionArgs) ToServiceEventRuleConditionsSubconditionOutput() ServiceEventRuleConditionsSubconditionOutput {
	return i.ToServiceEventRuleConditionsSubconditionOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsSubconditionArgs) ToServiceEventRuleConditionsSubconditionOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsSubconditionOutput)
}

// ServiceEventRuleConditionsSubconditionArrayInput is an input type that accepts ServiceEventRuleConditionsSubconditionArray and ServiceEventRuleConditionsSubconditionArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsSubconditionArrayInput` via:
//
//	ServiceEventRuleConditionsSubconditionArray{ ServiceEventRuleConditionsSubconditionArgs{...} }
type ServiceEventRuleConditionsSubconditionArrayInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsSubconditionArrayOutput() ServiceEventRuleConditionsSubconditionArrayOutput
	ToServiceEventRuleConditionsSubconditionArrayOutputWithContext(context.Context) ServiceEventRuleConditionsSubconditionArrayOutput
}

type ServiceEventRuleConditionsSubconditionArray []ServiceEventRuleConditionsSubconditionInput

func (ServiceEventRuleConditionsSubconditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleConditionsSubcondition)(nil)).Elem()
}

func (i ServiceEventRuleConditionsSubconditionArray) ToServiceEventRuleConditionsSubconditionArrayOutput() ServiceEventRuleConditionsSubconditionArrayOutput {
	return i.ToServiceEventRuleConditionsSubconditionArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsSubconditionArray) ToServiceEventRuleConditionsSubconditionArrayOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsSubconditionArrayOutput)
}

type ServiceEventRuleConditionsSubconditionOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsSubconditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditionsSubcondition)(nil)).Elem()
}

func (o ServiceEventRuleConditionsSubconditionOutput) ToServiceEventRuleConditionsSubconditionOutput() ServiceEventRuleConditionsSubconditionOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionOutput) ToServiceEventRuleConditionsSubconditionOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionOutput {
	return o
}

// Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
func (o ServiceEventRuleConditionsSubconditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleConditionsSubcondition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
func (o ServiceEventRuleConditionsSubconditionOutput) Parameters() ServiceEventRuleConditionsSubconditionParameterArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleConditionsSubcondition) []ServiceEventRuleConditionsSubconditionParameter {
		return v.Parameters
	}).(ServiceEventRuleConditionsSubconditionParameterArrayOutput)
}

type ServiceEventRuleConditionsSubconditionArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsSubconditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleConditionsSubcondition)(nil)).Elem()
}

func (o ServiceEventRuleConditionsSubconditionArrayOutput) ToServiceEventRuleConditionsSubconditionArrayOutput() ServiceEventRuleConditionsSubconditionArrayOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionArrayOutput) ToServiceEventRuleConditionsSubconditionArrayOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionArrayOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleConditionsSubconditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleConditionsSubcondition {
		return vs[0].([]ServiceEventRuleConditionsSubcondition)[vs[1].(int)]
	}).(ServiceEventRuleConditionsSubconditionOutput)
}

type ServiceEventRuleConditionsSubconditionParameter struct {
	// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
	Path *string `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleConditionsSubconditionParameterInput is an input type that accepts ServiceEventRuleConditionsSubconditionParameterArgs and ServiceEventRuleConditionsSubconditionParameterOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsSubconditionParameterInput` via:
//
//	ServiceEventRuleConditionsSubconditionParameterArgs{...}
type ServiceEventRuleConditionsSubconditionParameterInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsSubconditionParameterOutput() ServiceEventRuleConditionsSubconditionParameterOutput
	ToServiceEventRuleConditionsSubconditionParameterOutputWithContext(context.Context) ServiceEventRuleConditionsSubconditionParameterOutput
}

type ServiceEventRuleConditionsSubconditionParameterArgs struct {
	// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleConditionsSubconditionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (i ServiceEventRuleConditionsSubconditionParameterArgs) ToServiceEventRuleConditionsSubconditionParameterOutput() ServiceEventRuleConditionsSubconditionParameterOutput {
	return i.ToServiceEventRuleConditionsSubconditionParameterOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsSubconditionParameterArgs) ToServiceEventRuleConditionsSubconditionParameterOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsSubconditionParameterOutput)
}

// ServiceEventRuleConditionsSubconditionParameterArrayInput is an input type that accepts ServiceEventRuleConditionsSubconditionParameterArray and ServiceEventRuleConditionsSubconditionParameterArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleConditionsSubconditionParameterArrayInput` via:
//
//	ServiceEventRuleConditionsSubconditionParameterArray{ ServiceEventRuleConditionsSubconditionParameterArgs{...} }
type ServiceEventRuleConditionsSubconditionParameterArrayInput interface {
	pulumi.Input

	ToServiceEventRuleConditionsSubconditionParameterArrayOutput() ServiceEventRuleConditionsSubconditionParameterArrayOutput
	ToServiceEventRuleConditionsSubconditionParameterArrayOutputWithContext(context.Context) ServiceEventRuleConditionsSubconditionParameterArrayOutput
}

type ServiceEventRuleConditionsSubconditionParameterArray []ServiceEventRuleConditionsSubconditionParameterInput

func (ServiceEventRuleConditionsSubconditionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (i ServiceEventRuleConditionsSubconditionParameterArray) ToServiceEventRuleConditionsSubconditionParameterArrayOutput() ServiceEventRuleConditionsSubconditionParameterArrayOutput {
	return i.ToServiceEventRuleConditionsSubconditionParameterArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleConditionsSubconditionParameterArray) ToServiceEventRuleConditionsSubconditionParameterArrayOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleConditionsSubconditionParameterArrayOutput)
}

type ServiceEventRuleConditionsSubconditionParameterOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsSubconditionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (o ServiceEventRuleConditionsSubconditionParameterOutput) ToServiceEventRuleConditionsSubconditionParameterOutput() ServiceEventRuleConditionsSubconditionParameterOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionParameterOutput) ToServiceEventRuleConditionsSubconditionParameterOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionParameterOutput {
	return o
}

// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
func (o ServiceEventRuleConditionsSubconditionParameterOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleConditionsSubconditionParameter) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleConditionsSubconditionParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleConditionsSubconditionParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleConditionsSubconditionParameterArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleConditionsSubconditionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleConditionsSubconditionParameter)(nil)).Elem()
}

func (o ServiceEventRuleConditionsSubconditionParameterArrayOutput) ToServiceEventRuleConditionsSubconditionParameterArrayOutput() ServiceEventRuleConditionsSubconditionParameterArrayOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionParameterArrayOutput) ToServiceEventRuleConditionsSubconditionParameterArrayOutputWithContext(ctx context.Context) ServiceEventRuleConditionsSubconditionParameterArrayOutput {
	return o
}

func (o ServiceEventRuleConditionsSubconditionParameterArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleConditionsSubconditionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleConditionsSubconditionParameter {
		return vs[0].([]ServiceEventRuleConditionsSubconditionParameter)[vs[1].(int)]
	}).(ServiceEventRuleConditionsSubconditionParameterOutput)
}

type ServiceEventRuleTimeFrame struct {
	// Values for executing the rule during a specific time period.
	ActiveBetweens []ServiceEventRuleTimeFrameActiveBetween `pulumi:"activeBetweens"`
	// Values for executing the rule on a recurring schedule.
	ScheduledWeeklies []ServiceEventRuleTimeFrameScheduledWeekly `pulumi:"scheduledWeeklies"`
}

// ServiceEventRuleTimeFrameInput is an input type that accepts ServiceEventRuleTimeFrameArgs and ServiceEventRuleTimeFrameOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFrameInput` via:
//
//	ServiceEventRuleTimeFrameArgs{...}
type ServiceEventRuleTimeFrameInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFrameOutput() ServiceEventRuleTimeFrameOutput
	ToServiceEventRuleTimeFrameOutputWithContext(context.Context) ServiceEventRuleTimeFrameOutput
}

type ServiceEventRuleTimeFrameArgs struct {
	// Values for executing the rule during a specific time period.
	ActiveBetweens ServiceEventRuleTimeFrameActiveBetweenArrayInput `pulumi:"activeBetweens"`
	// Values for executing the rule on a recurring schedule.
	ScheduledWeeklies ServiceEventRuleTimeFrameScheduledWeeklyArrayInput `pulumi:"scheduledWeeklies"`
}

func (ServiceEventRuleTimeFrameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrame)(nil)).Elem()
}

func (i ServiceEventRuleTimeFrameArgs) ToServiceEventRuleTimeFrameOutput() ServiceEventRuleTimeFrameOutput {
	return i.ToServiceEventRuleTimeFrameOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameArgs) ToServiceEventRuleTimeFrameOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameOutput)
}

func (i ServiceEventRuleTimeFrameArgs) ToServiceEventRuleTimeFramePtrOutput() ServiceEventRuleTimeFramePtrOutput {
	return i.ToServiceEventRuleTimeFramePtrOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameArgs) ToServiceEventRuleTimeFramePtrOutputWithContext(ctx context.Context) ServiceEventRuleTimeFramePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameOutput).ToServiceEventRuleTimeFramePtrOutputWithContext(ctx)
}

// ServiceEventRuleTimeFramePtrInput is an input type that accepts ServiceEventRuleTimeFrameArgs, ServiceEventRuleTimeFramePtr and ServiceEventRuleTimeFramePtrOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFramePtrInput` via:
//
//	        ServiceEventRuleTimeFrameArgs{...}
//
//	or:
//
//	        nil
type ServiceEventRuleTimeFramePtrInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFramePtrOutput() ServiceEventRuleTimeFramePtrOutput
	ToServiceEventRuleTimeFramePtrOutputWithContext(context.Context) ServiceEventRuleTimeFramePtrOutput
}

type serviceEventRuleTimeFramePtrType ServiceEventRuleTimeFrameArgs

func ServiceEventRuleTimeFramePtr(v *ServiceEventRuleTimeFrameArgs) ServiceEventRuleTimeFramePtrInput {
	return (*serviceEventRuleTimeFramePtrType)(v)
}

func (*serviceEventRuleTimeFramePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleTimeFrame)(nil)).Elem()
}

func (i *serviceEventRuleTimeFramePtrType) ToServiceEventRuleTimeFramePtrOutput() ServiceEventRuleTimeFramePtrOutput {
	return i.ToServiceEventRuleTimeFramePtrOutputWithContext(context.Background())
}

func (i *serviceEventRuleTimeFramePtrType) ToServiceEventRuleTimeFramePtrOutputWithContext(ctx context.Context) ServiceEventRuleTimeFramePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFramePtrOutput)
}

type ServiceEventRuleTimeFrameOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFrameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrame)(nil)).Elem()
}

func (o ServiceEventRuleTimeFrameOutput) ToServiceEventRuleTimeFrameOutput() ServiceEventRuleTimeFrameOutput {
	return o
}

func (o ServiceEventRuleTimeFrameOutput) ToServiceEventRuleTimeFrameOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameOutput {
	return o
}

func (o ServiceEventRuleTimeFrameOutput) ToServiceEventRuleTimeFramePtrOutput() ServiceEventRuleTimeFramePtrOutput {
	return o.ToServiceEventRuleTimeFramePtrOutputWithContext(context.Background())
}

func (o ServiceEventRuleTimeFrameOutput) ToServiceEventRuleTimeFramePtrOutputWithContext(ctx context.Context) ServiceEventRuleTimeFramePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEventRuleTimeFrame) *ServiceEventRuleTimeFrame {
		return &v
	}).(ServiceEventRuleTimeFramePtrOutput)
}

// Values for executing the rule during a specific time period.
func (o ServiceEventRuleTimeFrameOutput) ActiveBetweens() ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrame) []ServiceEventRuleTimeFrameActiveBetween { return v.ActiveBetweens }).(ServiceEventRuleTimeFrameActiveBetweenArrayOutput)
}

// Values for executing the rule on a recurring schedule.
func (o ServiceEventRuleTimeFrameOutput) ScheduledWeeklies() ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrame) []ServiceEventRuleTimeFrameScheduledWeekly {
		return v.ScheduledWeeklies
	}).(ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput)
}

type ServiceEventRuleTimeFramePtrOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFramePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleTimeFrame)(nil)).Elem()
}

func (o ServiceEventRuleTimeFramePtrOutput) ToServiceEventRuleTimeFramePtrOutput() ServiceEventRuleTimeFramePtrOutput {
	return o
}

func (o ServiceEventRuleTimeFramePtrOutput) ToServiceEventRuleTimeFramePtrOutputWithContext(ctx context.Context) ServiceEventRuleTimeFramePtrOutput {
	return o
}

func (o ServiceEventRuleTimeFramePtrOutput) Elem() ServiceEventRuleTimeFrameOutput {
	return o.ApplyT(func(v *ServiceEventRuleTimeFrame) ServiceEventRuleTimeFrame {
		if v != nil {
			return *v
		}
		var ret ServiceEventRuleTimeFrame
		return ret
	}).(ServiceEventRuleTimeFrameOutput)
}

// Values for executing the rule during a specific time period.
func (o ServiceEventRuleTimeFramePtrOutput) ActiveBetweens() ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleTimeFrame) []ServiceEventRuleTimeFrameActiveBetween {
		if v == nil {
			return nil
		}
		return v.ActiveBetweens
	}).(ServiceEventRuleTimeFrameActiveBetweenArrayOutput)
}

// Values for executing the rule on a recurring schedule.
func (o ServiceEventRuleTimeFramePtrOutput) ScheduledWeeklies() ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return o.ApplyT(func(v *ServiceEventRuleTimeFrame) []ServiceEventRuleTimeFrameScheduledWeekly {
		if v == nil {
			return nil
		}
		return v.ScheduledWeeklies
	}).(ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput)
}

type ServiceEventRuleTimeFrameActiveBetween struct {
	// Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	EndTime *int `pulumi:"endTime"`
	// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	StartTime *int `pulumi:"startTime"`
}

// ServiceEventRuleTimeFrameActiveBetweenInput is an input type that accepts ServiceEventRuleTimeFrameActiveBetweenArgs and ServiceEventRuleTimeFrameActiveBetweenOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFrameActiveBetweenInput` via:
//
//	ServiceEventRuleTimeFrameActiveBetweenArgs{...}
type ServiceEventRuleTimeFrameActiveBetweenInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFrameActiveBetweenOutput() ServiceEventRuleTimeFrameActiveBetweenOutput
	ToServiceEventRuleTimeFrameActiveBetweenOutputWithContext(context.Context) ServiceEventRuleTimeFrameActiveBetweenOutput
}

type ServiceEventRuleTimeFrameActiveBetweenArgs struct {
	// Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	EndTime pulumi.IntPtrInput `pulumi:"endTime"`
	// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	StartTime pulumi.IntPtrInput `pulumi:"startTime"`
}

func (ServiceEventRuleTimeFrameActiveBetweenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (i ServiceEventRuleTimeFrameActiveBetweenArgs) ToServiceEventRuleTimeFrameActiveBetweenOutput() ServiceEventRuleTimeFrameActiveBetweenOutput {
	return i.ToServiceEventRuleTimeFrameActiveBetweenOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameActiveBetweenArgs) ToServiceEventRuleTimeFrameActiveBetweenOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameActiveBetweenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameActiveBetweenOutput)
}

// ServiceEventRuleTimeFrameActiveBetweenArrayInput is an input type that accepts ServiceEventRuleTimeFrameActiveBetweenArray and ServiceEventRuleTimeFrameActiveBetweenArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFrameActiveBetweenArrayInput` via:
//
//	ServiceEventRuleTimeFrameActiveBetweenArray{ ServiceEventRuleTimeFrameActiveBetweenArgs{...} }
type ServiceEventRuleTimeFrameActiveBetweenArrayInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFrameActiveBetweenArrayOutput() ServiceEventRuleTimeFrameActiveBetweenArrayOutput
	ToServiceEventRuleTimeFrameActiveBetweenArrayOutputWithContext(context.Context) ServiceEventRuleTimeFrameActiveBetweenArrayOutput
}

type ServiceEventRuleTimeFrameActiveBetweenArray []ServiceEventRuleTimeFrameActiveBetweenInput

func (ServiceEventRuleTimeFrameActiveBetweenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (i ServiceEventRuleTimeFrameActiveBetweenArray) ToServiceEventRuleTimeFrameActiveBetweenArrayOutput() ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return i.ToServiceEventRuleTimeFrameActiveBetweenArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameActiveBetweenArray) ToServiceEventRuleTimeFrameActiveBetweenArrayOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameActiveBetweenArrayOutput)
}

type ServiceEventRuleTimeFrameActiveBetweenOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFrameActiveBetweenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (o ServiceEventRuleTimeFrameActiveBetweenOutput) ToServiceEventRuleTimeFrameActiveBetweenOutput() ServiceEventRuleTimeFrameActiveBetweenOutput {
	return o
}

func (o ServiceEventRuleTimeFrameActiveBetweenOutput) ToServiceEventRuleTimeFrameActiveBetweenOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameActiveBetweenOutput {
	return o
}

// Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
func (o ServiceEventRuleTimeFrameActiveBetweenOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameActiveBetween) *int { return v.EndTime }).(pulumi.IntPtrOutput)
}

// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
func (o ServiceEventRuleTimeFrameActiveBetweenOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameActiveBetween) *int { return v.StartTime }).(pulumi.IntPtrOutput)
}

type ServiceEventRuleTimeFrameActiveBetweenArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFrameActiveBetweenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleTimeFrameActiveBetween)(nil)).Elem()
}

func (o ServiceEventRuleTimeFrameActiveBetweenArrayOutput) ToServiceEventRuleTimeFrameActiveBetweenArrayOutput() ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return o
}

func (o ServiceEventRuleTimeFrameActiveBetweenArrayOutput) ToServiceEventRuleTimeFrameActiveBetweenArrayOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameActiveBetweenArrayOutput {
	return o
}

func (o ServiceEventRuleTimeFrameActiveBetweenArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleTimeFrameActiveBetweenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleTimeFrameActiveBetween {
		return vs[0].([]ServiceEventRuleTimeFrameActiveBetween)[vs[1].(int)]
	}).(ServiceEventRuleTimeFrameActiveBetweenOutput)
}

type ServiceEventRuleTimeFrameScheduledWeekly struct {
	// Length of time the schedule will be active.  Unix timestamp in milliseconds.
	Duration *int `pulumi:"duration"`
	// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	StartTime *int `pulumi:"startTime"`
	// Timezone for the given schedule.
	Timezone *string `pulumi:"timezone"`
	// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
	Weekdays []int `pulumi:"weekdays"`
}

// ServiceEventRuleTimeFrameScheduledWeeklyInput is an input type that accepts ServiceEventRuleTimeFrameScheduledWeeklyArgs and ServiceEventRuleTimeFrameScheduledWeeklyOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFrameScheduledWeeklyInput` via:
//
//	ServiceEventRuleTimeFrameScheduledWeeklyArgs{...}
type ServiceEventRuleTimeFrameScheduledWeeklyInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFrameScheduledWeeklyOutput() ServiceEventRuleTimeFrameScheduledWeeklyOutput
	ToServiceEventRuleTimeFrameScheduledWeeklyOutputWithContext(context.Context) ServiceEventRuleTimeFrameScheduledWeeklyOutput
}

type ServiceEventRuleTimeFrameScheduledWeeklyArgs struct {
	// Length of time the schedule will be active.  Unix timestamp in milliseconds.
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
	StartTime pulumi.IntPtrInput `pulumi:"startTime"`
	// Timezone for the given schedule.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
	Weekdays pulumi.IntArrayInput `pulumi:"weekdays"`
}

func (ServiceEventRuleTimeFrameScheduledWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (i ServiceEventRuleTimeFrameScheduledWeeklyArgs) ToServiceEventRuleTimeFrameScheduledWeeklyOutput() ServiceEventRuleTimeFrameScheduledWeeklyOutput {
	return i.ToServiceEventRuleTimeFrameScheduledWeeklyOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameScheduledWeeklyArgs) ToServiceEventRuleTimeFrameScheduledWeeklyOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameScheduledWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameScheduledWeeklyOutput)
}

// ServiceEventRuleTimeFrameScheduledWeeklyArrayInput is an input type that accepts ServiceEventRuleTimeFrameScheduledWeeklyArray and ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleTimeFrameScheduledWeeklyArrayInput` via:
//
//	ServiceEventRuleTimeFrameScheduledWeeklyArray{ ServiceEventRuleTimeFrameScheduledWeeklyArgs{...} }
type ServiceEventRuleTimeFrameScheduledWeeklyArrayInput interface {
	pulumi.Input

	ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutput() ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput
	ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutputWithContext(context.Context) ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput
}

type ServiceEventRuleTimeFrameScheduledWeeklyArray []ServiceEventRuleTimeFrameScheduledWeeklyInput

func (ServiceEventRuleTimeFrameScheduledWeeklyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (i ServiceEventRuleTimeFrameScheduledWeeklyArray) ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutput() ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return i.ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleTimeFrameScheduledWeeklyArray) ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput)
}

type ServiceEventRuleTimeFrameScheduledWeeklyOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFrameScheduledWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) ToServiceEventRuleTimeFrameScheduledWeeklyOutput() ServiceEventRuleTimeFrameScheduledWeeklyOutput {
	return o
}

func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) ToServiceEventRuleTimeFrameScheduledWeeklyOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameScheduledWeeklyOutput {
	return o
}

// Length of time the schedule will be active.  Unix timestamp in milliseconds.
func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameScheduledWeekly) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameScheduledWeekly) *int { return v.StartTime }).(pulumi.IntPtrOutput)
}

// Timezone for the given schedule.
func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameScheduledWeekly) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
func (o ServiceEventRuleTimeFrameScheduledWeeklyOutput) Weekdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleTimeFrameScheduledWeekly) []int { return v.Weekdays }).(pulumi.IntArrayOutput)
}

type ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleTimeFrameScheduledWeekly)(nil)).Elem()
}

func (o ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput) ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutput() ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return o
}

func (o ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput) ToServiceEventRuleTimeFrameScheduledWeeklyArrayOutputWithContext(ctx context.Context) ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput {
	return o
}

func (o ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleTimeFrameScheduledWeeklyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleTimeFrameScheduledWeekly {
		return vs[0].([]ServiceEventRuleTimeFrameScheduledWeekly)[vs[1].(int)]
	}).(ServiceEventRuleTimeFrameScheduledWeeklyOutput)
}

type ServiceEventRuleVariable struct {
	// The name of the variable.
	Name *string `pulumi:"name"`
	// The parameters for performing the operation to populate the variable.
	Parameters []ServiceEventRuleVariableParameter `pulumi:"parameters"`
	// Type of operation to populate the variable. Usually `regex`.
	Type *string `pulumi:"type"`
}

// ServiceEventRuleVariableInput is an input type that accepts ServiceEventRuleVariableArgs and ServiceEventRuleVariableOutput values.
// You can construct a concrete instance of `ServiceEventRuleVariableInput` via:
//
//	ServiceEventRuleVariableArgs{...}
type ServiceEventRuleVariableInput interface {
	pulumi.Input

	ToServiceEventRuleVariableOutput() ServiceEventRuleVariableOutput
	ToServiceEventRuleVariableOutputWithContext(context.Context) ServiceEventRuleVariableOutput
}

type ServiceEventRuleVariableArgs struct {
	// The name of the variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The parameters for performing the operation to populate the variable.
	Parameters ServiceEventRuleVariableParameterArrayInput `pulumi:"parameters"`
	// Type of operation to populate the variable. Usually `regex`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceEventRuleVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleVariable)(nil)).Elem()
}

func (i ServiceEventRuleVariableArgs) ToServiceEventRuleVariableOutput() ServiceEventRuleVariableOutput {
	return i.ToServiceEventRuleVariableOutputWithContext(context.Background())
}

func (i ServiceEventRuleVariableArgs) ToServiceEventRuleVariableOutputWithContext(ctx context.Context) ServiceEventRuleVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleVariableOutput)
}

// ServiceEventRuleVariableArrayInput is an input type that accepts ServiceEventRuleVariableArray and ServiceEventRuleVariableArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleVariableArrayInput` via:
//
//	ServiceEventRuleVariableArray{ ServiceEventRuleVariableArgs{...} }
type ServiceEventRuleVariableArrayInput interface {
	pulumi.Input

	ToServiceEventRuleVariableArrayOutput() ServiceEventRuleVariableArrayOutput
	ToServiceEventRuleVariableArrayOutputWithContext(context.Context) ServiceEventRuleVariableArrayOutput
}

type ServiceEventRuleVariableArray []ServiceEventRuleVariableInput

func (ServiceEventRuleVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleVariable)(nil)).Elem()
}

func (i ServiceEventRuleVariableArray) ToServiceEventRuleVariableArrayOutput() ServiceEventRuleVariableArrayOutput {
	return i.ToServiceEventRuleVariableArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleVariableArray) ToServiceEventRuleVariableArrayOutputWithContext(ctx context.Context) ServiceEventRuleVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleVariableArrayOutput)
}

type ServiceEventRuleVariableOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleVariable)(nil)).Elem()
}

func (o ServiceEventRuleVariableOutput) ToServiceEventRuleVariableOutput() ServiceEventRuleVariableOutput {
	return o
}

func (o ServiceEventRuleVariableOutput) ToServiceEventRuleVariableOutputWithContext(ctx context.Context) ServiceEventRuleVariableOutput {
	return o
}

// The name of the variable.
func (o ServiceEventRuleVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The parameters for performing the operation to populate the variable.
func (o ServiceEventRuleVariableOutput) Parameters() ServiceEventRuleVariableParameterArrayOutput {
	return o.ApplyT(func(v ServiceEventRuleVariable) []ServiceEventRuleVariableParameter { return v.Parameters }).(ServiceEventRuleVariableParameterArrayOutput)
}

// Type of operation to populate the variable. Usually `regex`.
func (o ServiceEventRuleVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleVariableArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleVariable)(nil)).Elem()
}

func (o ServiceEventRuleVariableArrayOutput) ToServiceEventRuleVariableArrayOutput() ServiceEventRuleVariableArrayOutput {
	return o
}

func (o ServiceEventRuleVariableArrayOutput) ToServiceEventRuleVariableArrayOutputWithContext(ctx context.Context) ServiceEventRuleVariableArrayOutput {
	return o
}

func (o ServiceEventRuleVariableArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleVariable {
		return vs[0].([]ServiceEventRuleVariable)[vs[1].(int)]
	}).(ServiceEventRuleVariableOutput)
}

type ServiceEventRuleVariableParameter struct {
	// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
	Path *string `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value *string `pulumi:"value"`
}

// ServiceEventRuleVariableParameterInput is an input type that accepts ServiceEventRuleVariableParameterArgs and ServiceEventRuleVariableParameterOutput values.
// You can construct a concrete instance of `ServiceEventRuleVariableParameterInput` via:
//
//	ServiceEventRuleVariableParameterArgs{...}
type ServiceEventRuleVariableParameterInput interface {
	pulumi.Input

	ToServiceEventRuleVariableParameterOutput() ServiceEventRuleVariableParameterOutput
	ToServiceEventRuleVariableParameterOutputWithContext(context.Context) ServiceEventRuleVariableParameterOutput
}

type ServiceEventRuleVariableParameterArgs struct {
	// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceEventRuleVariableParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleVariableParameter)(nil)).Elem()
}

func (i ServiceEventRuleVariableParameterArgs) ToServiceEventRuleVariableParameterOutput() ServiceEventRuleVariableParameterOutput {
	return i.ToServiceEventRuleVariableParameterOutputWithContext(context.Background())
}

func (i ServiceEventRuleVariableParameterArgs) ToServiceEventRuleVariableParameterOutputWithContext(ctx context.Context) ServiceEventRuleVariableParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleVariableParameterOutput)
}

// ServiceEventRuleVariableParameterArrayInput is an input type that accepts ServiceEventRuleVariableParameterArray and ServiceEventRuleVariableParameterArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleVariableParameterArrayInput` via:
//
//	ServiceEventRuleVariableParameterArray{ ServiceEventRuleVariableParameterArgs{...} }
type ServiceEventRuleVariableParameterArrayInput interface {
	pulumi.Input

	ToServiceEventRuleVariableParameterArrayOutput() ServiceEventRuleVariableParameterArrayOutput
	ToServiceEventRuleVariableParameterArrayOutputWithContext(context.Context) ServiceEventRuleVariableParameterArrayOutput
}

type ServiceEventRuleVariableParameterArray []ServiceEventRuleVariableParameterInput

func (ServiceEventRuleVariableParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleVariableParameter)(nil)).Elem()
}

func (i ServiceEventRuleVariableParameterArray) ToServiceEventRuleVariableParameterArrayOutput() ServiceEventRuleVariableParameterArrayOutput {
	return i.ToServiceEventRuleVariableParameterArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleVariableParameterArray) ToServiceEventRuleVariableParameterArrayOutputWithContext(ctx context.Context) ServiceEventRuleVariableParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleVariableParameterArrayOutput)
}

type ServiceEventRuleVariableParameterOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleVariableParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleVariableParameter)(nil)).Elem()
}

func (o ServiceEventRuleVariableParameterOutput) ToServiceEventRuleVariableParameterOutput() ServiceEventRuleVariableParameterOutput {
	return o
}

func (o ServiceEventRuleVariableParameterOutput) ToServiceEventRuleVariableParameterOutputWithContext(ctx context.Context) ServiceEventRuleVariableParameterOutput {
	return o
}

// Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
func (o ServiceEventRuleVariableParameterOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleVariableParameter) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
func (o ServiceEventRuleVariableParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleVariableParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleVariableParameterArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleVariableParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleVariableParameter)(nil)).Elem()
}

func (o ServiceEventRuleVariableParameterArrayOutput) ToServiceEventRuleVariableParameterArrayOutput() ServiceEventRuleVariableParameterArrayOutput {
	return o
}

func (o ServiceEventRuleVariableParameterArrayOutput) ToServiceEventRuleVariableParameterArrayOutputWithContext(ctx context.Context) ServiceEventRuleVariableParameterArrayOutput {
	return o
}

func (o ServiceEventRuleVariableParameterArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleVariableParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleVariableParameter {
		return vs[0].([]ServiceEventRuleVariableParameter)[vs[1].(int)]
	}).(ServiceEventRuleVariableParameterOutput)
}

type ServiceIncidentUrgencyRule struct {
	// Incidents' urgency during support hours.
	DuringSupportHours *ServiceIncidentUrgencyRuleDuringSupportHours `pulumi:"duringSupportHours"`
	// Incidents' urgency outside support hours.
	//
	// When using `type = "useSupportHours"` in `incidentUrgencyRule` you must specify exactly one (otherwise optional) `supportHours` block.
	// Your PagerDuty account must have the `serviceSupportHours` ability to assign support hours.
	// The block contains the following arguments:
	OutsideSupportHours *ServiceIncidentUrgencyRuleOutsideSupportHours `pulumi:"outsideSupportHours"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type string `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency *string `pulumi:"urgency"`
}

// ServiceIncidentUrgencyRuleInput is an input type that accepts ServiceIncidentUrgencyRuleArgs and ServiceIncidentUrgencyRuleOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRuleInput` via:
//
//	ServiceIncidentUrgencyRuleArgs{...}
type ServiceIncidentUrgencyRuleInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRuleOutput() ServiceIncidentUrgencyRuleOutput
	ToServiceIncidentUrgencyRuleOutputWithContext(context.Context) ServiceIncidentUrgencyRuleOutput
}

type ServiceIncidentUrgencyRuleArgs struct {
	// Incidents' urgency during support hours.
	DuringSupportHours ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput `pulumi:"duringSupportHours"`
	// Incidents' urgency outside support hours.
	//
	// When using `type = "useSupportHours"` in `incidentUrgencyRule` you must specify exactly one (otherwise optional) `supportHours` block.
	// Your PagerDuty account must have the `serviceSupportHours` ability to assign support hours.
	// The block contains the following arguments:
	OutsideSupportHours ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput `pulumi:"outsideSupportHours"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringInput `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency pulumi.StringPtrInput `pulumi:"urgency"`
}

func (ServiceIncidentUrgencyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRule)(nil)).Elem()
}

func (i ServiceIncidentUrgencyRuleArgs) ToServiceIncidentUrgencyRuleOutput() ServiceIncidentUrgencyRuleOutput {
	return i.ToServiceIncidentUrgencyRuleOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleArgs) ToServiceIncidentUrgencyRuleOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleOutput)
}

func (i ServiceIncidentUrgencyRuleArgs) ToServiceIncidentUrgencyRulePtrOutput() ServiceIncidentUrgencyRulePtrOutput {
	return i.ToServiceIncidentUrgencyRulePtrOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleArgs) ToServiceIncidentUrgencyRulePtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleOutput).ToServiceIncidentUrgencyRulePtrOutputWithContext(ctx)
}

// ServiceIncidentUrgencyRulePtrInput is an input type that accepts ServiceIncidentUrgencyRuleArgs, ServiceIncidentUrgencyRulePtr and ServiceIncidentUrgencyRulePtrOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRulePtrInput` via:
//
//	        ServiceIncidentUrgencyRuleArgs{...}
//
//	or:
//
//	        nil
type ServiceIncidentUrgencyRulePtrInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRulePtrOutput() ServiceIncidentUrgencyRulePtrOutput
	ToServiceIncidentUrgencyRulePtrOutputWithContext(context.Context) ServiceIncidentUrgencyRulePtrOutput
}

type serviceIncidentUrgencyRulePtrType ServiceIncidentUrgencyRuleArgs

func ServiceIncidentUrgencyRulePtr(v *ServiceIncidentUrgencyRuleArgs) ServiceIncidentUrgencyRulePtrInput {
	return (*serviceIncidentUrgencyRulePtrType)(v)
}

func (*serviceIncidentUrgencyRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRule)(nil)).Elem()
}

func (i *serviceIncidentUrgencyRulePtrType) ToServiceIncidentUrgencyRulePtrOutput() ServiceIncidentUrgencyRulePtrOutput {
	return i.ToServiceIncidentUrgencyRulePtrOutputWithContext(context.Background())
}

func (i *serviceIncidentUrgencyRulePtrType) ToServiceIncidentUrgencyRulePtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRulePtrOutput)
}

type ServiceIncidentUrgencyRuleOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRule)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRuleOutput) ToServiceIncidentUrgencyRuleOutput() ServiceIncidentUrgencyRuleOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutput) ToServiceIncidentUrgencyRuleOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutput) ToServiceIncidentUrgencyRulePtrOutput() ServiceIncidentUrgencyRulePtrOutput {
	return o.ToServiceIncidentUrgencyRulePtrOutputWithContext(context.Background())
}

func (o ServiceIncidentUrgencyRuleOutput) ToServiceIncidentUrgencyRulePtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceIncidentUrgencyRule) *ServiceIncidentUrgencyRule {
		return &v
	}).(ServiceIncidentUrgencyRulePtrOutput)
}

// Incidents' urgency during support hours.
func (o ServiceIncidentUrgencyRuleOutput) DuringSupportHours() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRule) *ServiceIncidentUrgencyRuleDuringSupportHours {
		return v.DuringSupportHours
	}).(ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput)
}

// Incidents' urgency outside support hours.
//
// When using `type = "useSupportHours"` in `incidentUrgencyRule` you must specify exactly one (otherwise optional) `supportHours` block.
// Your PagerDuty account must have the `serviceSupportHours` ability to assign support hours.
// The block contains the following arguments:
func (o ServiceIncidentUrgencyRuleOutput) OutsideSupportHours() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRule) *ServiceIncidentUrgencyRuleOutsideSupportHours {
		return v.OutsideSupportHours
	}).(ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRule) string { return v.Type }).(pulumi.StringOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRuleOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRule) *string { return v.Urgency }).(pulumi.StringPtrOutput)
}

type ServiceIncidentUrgencyRulePtrOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRule)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRulePtrOutput) ToServiceIncidentUrgencyRulePtrOutput() ServiceIncidentUrgencyRulePtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRulePtrOutput) ToServiceIncidentUrgencyRulePtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRulePtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRulePtrOutput) Elem() ServiceIncidentUrgencyRuleOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRule) ServiceIncidentUrgencyRule {
		if v != nil {
			return *v
		}
		var ret ServiceIncidentUrgencyRule
		return ret
	}).(ServiceIncidentUrgencyRuleOutput)
}

// Incidents' urgency during support hours.
func (o ServiceIncidentUrgencyRulePtrOutput) DuringSupportHours() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRule) *ServiceIncidentUrgencyRuleDuringSupportHours {
		if v == nil {
			return nil
		}
		return v.DuringSupportHours
	}).(ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput)
}

// Incidents' urgency outside support hours.
//
// When using `type = "useSupportHours"` in `incidentUrgencyRule` you must specify exactly one (otherwise optional) `supportHours` block.
// Your PagerDuty account must have the `serviceSupportHours` ability to assign support hours.
// The block contains the following arguments:
func (o ServiceIncidentUrgencyRulePtrOutput) OutsideSupportHours() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRule) *ServiceIncidentUrgencyRuleOutsideSupportHours {
		if v == nil {
			return nil
		}
		return v.OutsideSupportHours
	}).(ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRulePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRule) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRulePtrOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRule) *string {
		if v == nil {
			return nil
		}
		return v.Urgency
	}).(pulumi.StringPtrOutput)
}

type ServiceIncidentUrgencyRuleDuringSupportHours struct {
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type *string `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency *string `pulumi:"urgency"`
}

// ServiceIncidentUrgencyRuleDuringSupportHoursInput is an input type that accepts ServiceIncidentUrgencyRuleDuringSupportHoursArgs and ServiceIncidentUrgencyRuleDuringSupportHoursOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRuleDuringSupportHoursInput` via:
//
//	ServiceIncidentUrgencyRuleDuringSupportHoursArgs{...}
type ServiceIncidentUrgencyRuleDuringSupportHoursInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRuleDuringSupportHoursOutput() ServiceIncidentUrgencyRuleDuringSupportHoursOutput
	ToServiceIncidentUrgencyRuleDuringSupportHoursOutputWithContext(context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursOutput
}

type ServiceIncidentUrgencyRuleDuringSupportHoursArgs struct {
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency pulumi.StringPtrInput `pulumi:"urgency"`
}

func (ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRuleDuringSupportHours)(nil)).Elem()
}

func (i ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ToServiceIncidentUrgencyRuleDuringSupportHoursOutput() ServiceIncidentUrgencyRuleDuringSupportHoursOutput {
	return i.ToServiceIncidentUrgencyRuleDuringSupportHoursOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ToServiceIncidentUrgencyRuleDuringSupportHoursOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleDuringSupportHoursOutput)
}

func (i ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return i.ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleDuringSupportHoursOutput).ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(ctx)
}

// ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput is an input type that accepts ServiceIncidentUrgencyRuleDuringSupportHoursArgs, ServiceIncidentUrgencyRuleDuringSupportHoursPtr and ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput` via:
//
//	        ServiceIncidentUrgencyRuleDuringSupportHoursArgs{...}
//
//	or:
//
//	        nil
type ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput
	ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput
}

type serviceIncidentUrgencyRuleDuringSupportHoursPtrType ServiceIncidentUrgencyRuleDuringSupportHoursArgs

func ServiceIncidentUrgencyRuleDuringSupportHoursPtr(v *ServiceIncidentUrgencyRuleDuringSupportHoursArgs) ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput {
	return (*serviceIncidentUrgencyRuleDuringSupportHoursPtrType)(v)
}

func (*serviceIncidentUrgencyRuleDuringSupportHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRuleDuringSupportHours)(nil)).Elem()
}

func (i *serviceIncidentUrgencyRuleDuringSupportHoursPtrType) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return i.ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(context.Background())
}

func (i *serviceIncidentUrgencyRuleDuringSupportHoursPtrType) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput)
}

type ServiceIncidentUrgencyRuleDuringSupportHoursOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRuleDuringSupportHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRuleDuringSupportHours)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursOutput() ServiceIncidentUrgencyRuleDuringSupportHoursOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o.ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(context.Background())
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceIncidentUrgencyRuleDuringSupportHours) *ServiceIncidentUrgencyRuleDuringSupportHours {
		return &v
	}).(ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRuleDuringSupportHours) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRuleDuringSupportHoursOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRuleDuringSupportHours) *string { return v.Urgency }).(pulumi.StringPtrOutput)
}

type ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRuleDuringSupportHours)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput() ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) ToServiceIncidentUrgencyRuleDuringSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) Elem() ServiceIncidentUrgencyRuleDuringSupportHoursOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleDuringSupportHours) ServiceIncidentUrgencyRuleDuringSupportHours {
		if v != nil {
			return *v
		}
		var ret ServiceIncidentUrgencyRuleDuringSupportHours
		return ret
	}).(ServiceIncidentUrgencyRuleDuringSupportHoursOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleDuringSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleDuringSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.Urgency
	}).(pulumi.StringPtrOutput)
}

type ServiceIncidentUrgencyRuleOutsideSupportHours struct {
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type *string `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency *string `pulumi:"urgency"`
}

// ServiceIncidentUrgencyRuleOutsideSupportHoursInput is an input type that accepts ServiceIncidentUrgencyRuleOutsideSupportHoursArgs and ServiceIncidentUrgencyRuleOutsideSupportHoursOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRuleOutsideSupportHoursInput` via:
//
//	ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{...}
type ServiceIncidentUrgencyRuleOutsideSupportHoursInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRuleOutsideSupportHoursOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursOutput
	ToServiceIncidentUrgencyRuleOutsideSupportHoursOutputWithContext(context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursOutput
}

type ServiceIncidentUrgencyRuleOutsideSupportHoursArgs struct {
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	Urgency pulumi.StringPtrInput `pulumi:"urgency"`
}

func (ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRuleOutsideSupportHours)(nil)).Elem()
}

func (i ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ToServiceIncidentUrgencyRuleOutsideSupportHoursOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursOutput {
	return i.ToServiceIncidentUrgencyRuleOutsideSupportHoursOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ToServiceIncidentUrgencyRuleOutsideSupportHoursOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleOutsideSupportHoursOutput)
}

func (i ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return i.ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(context.Background())
}

func (i ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleOutsideSupportHoursOutput).ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(ctx)
}

// ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput is an input type that accepts ServiceIncidentUrgencyRuleOutsideSupportHoursArgs, ServiceIncidentUrgencyRuleOutsideSupportHoursPtr and ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput values.
// You can construct a concrete instance of `ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput` via:
//
//	        ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{...}
//
//	or:
//
//	        nil
type ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput interface {
	pulumi.Input

	ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput
	ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput
}

type serviceIncidentUrgencyRuleOutsideSupportHoursPtrType ServiceIncidentUrgencyRuleOutsideSupportHoursArgs

func ServiceIncidentUrgencyRuleOutsideSupportHoursPtr(v *ServiceIncidentUrgencyRuleOutsideSupportHoursArgs) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput {
	return (*serviceIncidentUrgencyRuleOutsideSupportHoursPtrType)(v)
}

func (*serviceIncidentUrgencyRuleOutsideSupportHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRuleOutsideSupportHours)(nil)).Elem()
}

func (i *serviceIncidentUrgencyRuleOutsideSupportHoursPtrType) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return i.ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(context.Background())
}

func (i *serviceIncidentUrgencyRuleOutsideSupportHoursPtrType) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput)
}

type ServiceIncidentUrgencyRuleOutsideSupportHoursOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentUrgencyRuleOutsideSupportHours)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o.ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(context.Background())
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceIncidentUrgencyRuleOutsideSupportHours) *ServiceIncidentUrgencyRuleOutsideSupportHours {
		return &v
	}).(ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRuleOutsideSupportHours) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRuleOutsideSupportHoursOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentUrgencyRuleOutsideSupportHours) *string { return v.Urgency }).(pulumi.StringPtrOutput)
}

type ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput struct{ *pulumi.OutputState }

func (ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIncidentUrgencyRuleOutsideSupportHours)(nil)).Elem()
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput() ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) ToServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutputWithContext(ctx context.Context) ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput {
	return o
}

func (o ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) Elem() ServiceIncidentUrgencyRuleOutsideSupportHoursOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleOutsideSupportHours) ServiceIncidentUrgencyRuleOutsideSupportHours {
		if v != nil {
			return *v
		}
		var ret ServiceIncidentUrgencyRuleOutsideSupportHours
		return ret
	}).(ServiceIncidentUrgencyRuleOutsideSupportHoursOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleOutsideSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severityBased` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
func (o ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIncidentUrgencyRuleOutsideSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.Urgency
	}).(pulumi.StringPtrOutput)
}

type ServiceIntegrationEmailFilter struct {
	// Can be `always` or `match`.
	BodyMode *string `pulumi:"bodyMode"`
	// Should be a valid regex or `null`
	BodyRegex *string `pulumi:"bodyRegex"`
	// Can be `always` or `match`.
	FromEmailMode *string `pulumi:"fromEmailMode"`
	// Should be a valid regex or `null`
	FromEmailRegex *string `pulumi:"fromEmailRegex"`
	// The ID of the service integration.
	Id *string `pulumi:"id"`
	// Can be `always` or `match`.
	SubjectMode *string `pulumi:"subjectMode"`
	// Should be a valid regex or `null`
	SubjectRegex *string `pulumi:"subjectRegex"`
}

// ServiceIntegrationEmailFilterInput is an input type that accepts ServiceIntegrationEmailFilterArgs and ServiceIntegrationEmailFilterOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailFilterInput` via:
//
//	ServiceIntegrationEmailFilterArgs{...}
type ServiceIntegrationEmailFilterInput interface {
	pulumi.Input

	ToServiceIntegrationEmailFilterOutput() ServiceIntegrationEmailFilterOutput
	ToServiceIntegrationEmailFilterOutputWithContext(context.Context) ServiceIntegrationEmailFilterOutput
}

type ServiceIntegrationEmailFilterArgs struct {
	// Can be `always` or `match`.
	BodyMode pulumi.StringPtrInput `pulumi:"bodyMode"`
	// Should be a valid regex or `null`
	BodyRegex pulumi.StringPtrInput `pulumi:"bodyRegex"`
	// Can be `always` or `match`.
	FromEmailMode pulumi.StringPtrInput `pulumi:"fromEmailMode"`
	// Should be a valid regex or `null`
	FromEmailRegex pulumi.StringPtrInput `pulumi:"fromEmailRegex"`
	// The ID of the service integration.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Can be `always` or `match`.
	SubjectMode pulumi.StringPtrInput `pulumi:"subjectMode"`
	// Should be a valid regex or `null`
	SubjectRegex pulumi.StringPtrInput `pulumi:"subjectRegex"`
}

func (ServiceIntegrationEmailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailFilter)(nil)).Elem()
}

func (i ServiceIntegrationEmailFilterArgs) ToServiceIntegrationEmailFilterOutput() ServiceIntegrationEmailFilterOutput {
	return i.ToServiceIntegrationEmailFilterOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailFilterArgs) ToServiceIntegrationEmailFilterOutputWithContext(ctx context.Context) ServiceIntegrationEmailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailFilterOutput)
}

// ServiceIntegrationEmailFilterArrayInput is an input type that accepts ServiceIntegrationEmailFilterArray and ServiceIntegrationEmailFilterArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailFilterArrayInput` via:
//
//	ServiceIntegrationEmailFilterArray{ ServiceIntegrationEmailFilterArgs{...} }
type ServiceIntegrationEmailFilterArrayInput interface {
	pulumi.Input

	ToServiceIntegrationEmailFilterArrayOutput() ServiceIntegrationEmailFilterArrayOutput
	ToServiceIntegrationEmailFilterArrayOutputWithContext(context.Context) ServiceIntegrationEmailFilterArrayOutput
}

type ServiceIntegrationEmailFilterArray []ServiceIntegrationEmailFilterInput

func (ServiceIntegrationEmailFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailFilter)(nil)).Elem()
}

func (i ServiceIntegrationEmailFilterArray) ToServiceIntegrationEmailFilterArrayOutput() ServiceIntegrationEmailFilterArrayOutput {
	return i.ToServiceIntegrationEmailFilterArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailFilterArray) ToServiceIntegrationEmailFilterArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailFilterArrayOutput)
}

type ServiceIntegrationEmailFilterOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailFilter)(nil)).Elem()
}

func (o ServiceIntegrationEmailFilterOutput) ToServiceIntegrationEmailFilterOutput() ServiceIntegrationEmailFilterOutput {
	return o
}

func (o ServiceIntegrationEmailFilterOutput) ToServiceIntegrationEmailFilterOutputWithContext(ctx context.Context) ServiceIntegrationEmailFilterOutput {
	return o
}

// Can be `always` or `match`.
func (o ServiceIntegrationEmailFilterOutput) BodyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.BodyMode }).(pulumi.StringPtrOutput)
}

// Should be a valid regex or `null`
func (o ServiceIntegrationEmailFilterOutput) BodyRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.BodyRegex }).(pulumi.StringPtrOutput)
}

// Can be `always` or `match`.
func (o ServiceIntegrationEmailFilterOutput) FromEmailMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.FromEmailMode }).(pulumi.StringPtrOutput)
}

// Should be a valid regex or `null`
func (o ServiceIntegrationEmailFilterOutput) FromEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.FromEmailRegex }).(pulumi.StringPtrOutput)
}

// The ID of the service integration.
func (o ServiceIntegrationEmailFilterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Can be `always` or `match`.
func (o ServiceIntegrationEmailFilterOutput) SubjectMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.SubjectMode }).(pulumi.StringPtrOutput)
}

// Should be a valid regex or `null`
func (o ServiceIntegrationEmailFilterOutput) SubjectRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailFilter) *string { return v.SubjectRegex }).(pulumi.StringPtrOutput)
}

type ServiceIntegrationEmailFilterArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailFilter)(nil)).Elem()
}

func (o ServiceIntegrationEmailFilterArrayOutput) ToServiceIntegrationEmailFilterArrayOutput() ServiceIntegrationEmailFilterArrayOutput {
	return o
}

func (o ServiceIntegrationEmailFilterArrayOutput) ToServiceIntegrationEmailFilterArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailFilterArrayOutput {
	return o
}

func (o ServiceIntegrationEmailFilterArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationEmailFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIntegrationEmailFilter {
		return vs[0].([]ServiceIntegrationEmailFilter)[vs[1].(int)]
	}).(ServiceIntegrationEmailFilterOutput)
}

type ServiceIntegrationEmailParser struct {
	// Can be `resolve` or `trigger`.
	Action string `pulumi:"action"`
	// The ID of the service integration.
	Id              *int                                          `pulumi:"id"`
	MatchPredicate  ServiceIntegrationEmailParserMatchPredicate   `pulumi:"matchPredicate"`
	ValueExtractors []ServiceIntegrationEmailParserValueExtractor `pulumi:"valueExtractors"`
}

// ServiceIntegrationEmailParserInput is an input type that accepts ServiceIntegrationEmailParserArgs and ServiceIntegrationEmailParserOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserInput` via:
//
//	ServiceIntegrationEmailParserArgs{...}
type ServiceIntegrationEmailParserInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserOutput() ServiceIntegrationEmailParserOutput
	ToServiceIntegrationEmailParserOutputWithContext(context.Context) ServiceIntegrationEmailParserOutput
}

type ServiceIntegrationEmailParserArgs struct {
	// Can be `resolve` or `trigger`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ID of the service integration.
	Id              pulumi.IntPtrInput                                    `pulumi:"id"`
	MatchPredicate  ServiceIntegrationEmailParserMatchPredicateInput      `pulumi:"matchPredicate"`
	ValueExtractors ServiceIntegrationEmailParserValueExtractorArrayInput `pulumi:"valueExtractors"`
}

func (ServiceIntegrationEmailParserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParser)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserArgs) ToServiceIntegrationEmailParserOutput() ServiceIntegrationEmailParserOutput {
	return i.ToServiceIntegrationEmailParserOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserArgs) ToServiceIntegrationEmailParserOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserOutput)
}

// ServiceIntegrationEmailParserArrayInput is an input type that accepts ServiceIntegrationEmailParserArray and ServiceIntegrationEmailParserArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserArrayInput` via:
//
//	ServiceIntegrationEmailParserArray{ ServiceIntegrationEmailParserArgs{...} }
type ServiceIntegrationEmailParserArrayInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserArrayOutput() ServiceIntegrationEmailParserArrayOutput
	ToServiceIntegrationEmailParserArrayOutputWithContext(context.Context) ServiceIntegrationEmailParserArrayOutput
}

type ServiceIntegrationEmailParserArray []ServiceIntegrationEmailParserInput

func (ServiceIntegrationEmailParserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParser)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserArray) ToServiceIntegrationEmailParserArrayOutput() ServiceIntegrationEmailParserArrayOutput {
	return i.ToServiceIntegrationEmailParserArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserArray) ToServiceIntegrationEmailParserArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserArrayOutput)
}

type ServiceIntegrationEmailParserOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParser)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserOutput) ToServiceIntegrationEmailParserOutput() ServiceIntegrationEmailParserOutput {
	return o
}

func (o ServiceIntegrationEmailParserOutput) ToServiceIntegrationEmailParserOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserOutput {
	return o
}

// Can be `resolve` or `trigger`.
func (o ServiceIntegrationEmailParserOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParser) string { return v.Action }).(pulumi.StringOutput)
}

// The ID of the service integration.
func (o ServiceIntegrationEmailParserOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParser) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o ServiceIntegrationEmailParserOutput) MatchPredicate() ServiceIntegrationEmailParserMatchPredicateOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParser) ServiceIntegrationEmailParserMatchPredicate {
		return v.MatchPredicate
	}).(ServiceIntegrationEmailParserMatchPredicateOutput)
}

func (o ServiceIntegrationEmailParserOutput) ValueExtractors() ServiceIntegrationEmailParserValueExtractorArrayOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParser) []ServiceIntegrationEmailParserValueExtractor {
		return v.ValueExtractors
	}).(ServiceIntegrationEmailParserValueExtractorArrayOutput)
}

type ServiceIntegrationEmailParserArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParser)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserArrayOutput) ToServiceIntegrationEmailParserArrayOutput() ServiceIntegrationEmailParserArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserArrayOutput) ToServiceIntegrationEmailParserArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationEmailParserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIntegrationEmailParser {
		return vs[0].([]ServiceIntegrationEmailParser)[vs[1].(int)]
	}).(ServiceIntegrationEmailParserOutput)
}

type ServiceIntegrationEmailParserMatchPredicate struct {
	Predicates []ServiceIntegrationEmailParserMatchPredicatePredicate `pulumi:"predicates"`
	// Can be `any` or `all`.
	Type string `pulumi:"type"`
}

// ServiceIntegrationEmailParserMatchPredicateInput is an input type that accepts ServiceIntegrationEmailParserMatchPredicateArgs and ServiceIntegrationEmailParserMatchPredicateOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserMatchPredicateInput` via:
//
//	ServiceIntegrationEmailParserMatchPredicateArgs{...}
type ServiceIntegrationEmailParserMatchPredicateInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserMatchPredicateOutput() ServiceIntegrationEmailParserMatchPredicateOutput
	ToServiceIntegrationEmailParserMatchPredicateOutputWithContext(context.Context) ServiceIntegrationEmailParserMatchPredicateOutput
}

type ServiceIntegrationEmailParserMatchPredicateArgs struct {
	Predicates ServiceIntegrationEmailParserMatchPredicatePredicateArrayInput `pulumi:"predicates"`
	// Can be `any` or `all`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceIntegrationEmailParserMatchPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicate)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserMatchPredicateArgs) ToServiceIntegrationEmailParserMatchPredicateOutput() ServiceIntegrationEmailParserMatchPredicateOutput {
	return i.ToServiceIntegrationEmailParserMatchPredicateOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserMatchPredicateArgs) ToServiceIntegrationEmailParserMatchPredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserMatchPredicateOutput)
}

type ServiceIntegrationEmailParserMatchPredicateOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserMatchPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicate)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserMatchPredicateOutput) ToServiceIntegrationEmailParserMatchPredicateOutput() ServiceIntegrationEmailParserMatchPredicateOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicateOutput) ToServiceIntegrationEmailParserMatchPredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicateOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicateOutput) Predicates() ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicate) []ServiceIntegrationEmailParserMatchPredicatePredicate {
		return v.Predicates
	}).(ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput)
}

// Can be `any` or `all`.
func (o ServiceIntegrationEmailParserMatchPredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicate) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicate struct {
	// Predicate value or valid regex.
	Matcher *string `pulumi:"matcher"`
	// Can be `subject`, `body` or `fromAddresses`.
	Part       *string                                                         `pulumi:"part"`
	Predicates []ServiceIntegrationEmailParserMatchPredicatePredicatePredicate `pulumi:"predicates"`
	// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
	Type string `pulumi:"type"`
}

// ServiceIntegrationEmailParserMatchPredicatePredicateInput is an input type that accepts ServiceIntegrationEmailParserMatchPredicatePredicateArgs and ServiceIntegrationEmailParserMatchPredicatePredicateOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserMatchPredicatePredicateInput` via:
//
//	ServiceIntegrationEmailParserMatchPredicatePredicateArgs{...}
type ServiceIntegrationEmailParserMatchPredicatePredicateInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserMatchPredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicateOutput
	ToServiceIntegrationEmailParserMatchPredicatePredicateOutputWithContext(context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateOutput
}

type ServiceIntegrationEmailParserMatchPredicatePredicateArgs struct {
	// Predicate value or valid regex.
	Matcher pulumi.StringPtrInput `pulumi:"matcher"`
	// Can be `subject`, `body` or `fromAddresses`.
	Part       pulumi.StringPtrInput                                                   `pulumi:"part"`
	Predicates ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayInput `pulumi:"predicates"`
	// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceIntegrationEmailParserMatchPredicatePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicate)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicateArgs) ToServiceIntegrationEmailParserMatchPredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicateOutput {
	return i.ToServiceIntegrationEmailParserMatchPredicatePredicateOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicateArgs) ToServiceIntegrationEmailParserMatchPredicatePredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserMatchPredicatePredicateOutput)
}

// ServiceIntegrationEmailParserMatchPredicatePredicateArrayInput is an input type that accepts ServiceIntegrationEmailParserMatchPredicatePredicateArray and ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserMatchPredicatePredicateArrayInput` via:
//
//	ServiceIntegrationEmailParserMatchPredicatePredicateArray{ ServiceIntegrationEmailParserMatchPredicatePredicateArgs{...} }
type ServiceIntegrationEmailParserMatchPredicatePredicateArrayInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput
	ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutputWithContext(context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput
}

type ServiceIntegrationEmailParserMatchPredicatePredicateArray []ServiceIntegrationEmailParserMatchPredicatePredicateInput

func (ServiceIntegrationEmailParserMatchPredicatePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserMatchPredicatePredicate)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicateArray) ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput {
	return i.ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicateArray) ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicateOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserMatchPredicatePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicate)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) ToServiceIntegrationEmailParserMatchPredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicateOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) ToServiceIntegrationEmailParserMatchPredicatePredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateOutput {
	return o
}

// Predicate value or valid regex.
func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) Matcher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicate) *string { return v.Matcher }).(pulumi.StringPtrOutput)
}

// Can be `subject`, `body` or `fromAddresses`.
func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) Part() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicate) *string { return v.Part }).(pulumi.StringPtrOutput)
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) Predicates() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicate) []ServiceIntegrationEmailParserMatchPredicatePredicatePredicate {
		return v.Predicates
	}).(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput)
}

// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
func (o ServiceIntegrationEmailParserMatchPredicatePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserMatchPredicatePredicate)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput) ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput) ToServiceIntegrationEmailParserMatchPredicatePredicateArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationEmailParserMatchPredicatePredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIntegrationEmailParserMatchPredicatePredicate {
		return vs[0].([]ServiceIntegrationEmailParserMatchPredicatePredicate)[vs[1].(int)]
	}).(ServiceIntegrationEmailParserMatchPredicatePredicateOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicatePredicate struct {
	// Predicate value or valid regex.
	Matcher string `pulumi:"matcher"`
	// Can be `subject`, `body` or `fromAddresses`.
	Part string `pulumi:"part"`
	// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
	Type string `pulumi:"type"`
}

// ServiceIntegrationEmailParserMatchPredicatePredicatePredicateInput is an input type that accepts ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs and ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserMatchPredicatePredicatePredicateInput` via:
//
//	ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs{...}
type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput
	ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutputWithContext(context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput
}

type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs struct {
	// Predicate value or valid regex.
	Matcher pulumi.StringInput `pulumi:"matcher"`
	// Can be `subject`, `body` or `fromAddresses`.
	Part pulumi.StringInput `pulumi:"part"`
	// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicatePredicate)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput {
	return i.ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput)
}

// ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayInput is an input type that accepts ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray and ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayInput` via:
//
//	ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray{ ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs{...} }
type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput
	ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutputWithContext(context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput
}

type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray []ServiceIntegrationEmailParserMatchPredicatePredicatePredicateInput

func (ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserMatchPredicatePredicatePredicate)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput {
	return i.ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicatePredicate)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput {
	return o
}

// Predicate value or valid regex.
func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) Matcher() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicatePredicate) string { return v.Matcher }).(pulumi.StringOutput)
}

// Can be `subject`, `body` or `fromAddresses`.
func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) Part() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicatePredicate) string { return v.Part }).(pulumi.StringOutput)
}

// Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserMatchPredicatePredicatePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserMatchPredicatePredicatePredicate)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput() ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput) ToServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIntegrationEmailParserMatchPredicatePredicatePredicate {
		return vs[0].([]ServiceIntegrationEmailParserMatchPredicatePredicatePredicate)[vs[1].(int)]
	}).(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput)
}

type ServiceIntegrationEmailParserValueExtractor struct {
	EndsBefore *string `pulumi:"endsBefore"`
	// Can be `subject` or `body`.
	Part string `pulumi:"part"`
	// If `type` has value `regex` this value should contain valid regex.
	//
	// **Note:** You can use the `getVendor` data source to locate the appropriate vendor ID.
	Regex       *string `pulumi:"regex"`
	StartsAfter *string `pulumi:"startsAfter"`
	// Can be `between`, `entire` or `regex`.
	Type string `pulumi:"type"`
	// First value extractor should have name `incidentKey` other value extractors should contain custom names.
	ValueName string `pulumi:"valueName"`
}

// ServiceIntegrationEmailParserValueExtractorInput is an input type that accepts ServiceIntegrationEmailParserValueExtractorArgs and ServiceIntegrationEmailParserValueExtractorOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserValueExtractorInput` via:
//
//	ServiceIntegrationEmailParserValueExtractorArgs{...}
type ServiceIntegrationEmailParserValueExtractorInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserValueExtractorOutput() ServiceIntegrationEmailParserValueExtractorOutput
	ToServiceIntegrationEmailParserValueExtractorOutputWithContext(context.Context) ServiceIntegrationEmailParserValueExtractorOutput
}

type ServiceIntegrationEmailParserValueExtractorArgs struct {
	EndsBefore pulumi.StringPtrInput `pulumi:"endsBefore"`
	// Can be `subject` or `body`.
	Part pulumi.StringInput `pulumi:"part"`
	// If `type` has value `regex` this value should contain valid regex.
	//
	// **Note:** You can use the `getVendor` data source to locate the appropriate vendor ID.
	Regex       pulumi.StringPtrInput `pulumi:"regex"`
	StartsAfter pulumi.StringPtrInput `pulumi:"startsAfter"`
	// Can be `between`, `entire` or `regex`.
	Type pulumi.StringInput `pulumi:"type"`
	// First value extractor should have name `incidentKey` other value extractors should contain custom names.
	ValueName pulumi.StringInput `pulumi:"valueName"`
}

func (ServiceIntegrationEmailParserValueExtractorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserValueExtractor)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserValueExtractorArgs) ToServiceIntegrationEmailParserValueExtractorOutput() ServiceIntegrationEmailParserValueExtractorOutput {
	return i.ToServiceIntegrationEmailParserValueExtractorOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserValueExtractorArgs) ToServiceIntegrationEmailParserValueExtractorOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserValueExtractorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserValueExtractorOutput)
}

// ServiceIntegrationEmailParserValueExtractorArrayInput is an input type that accepts ServiceIntegrationEmailParserValueExtractorArray and ServiceIntegrationEmailParserValueExtractorArrayOutput values.
// You can construct a concrete instance of `ServiceIntegrationEmailParserValueExtractorArrayInput` via:
//
//	ServiceIntegrationEmailParserValueExtractorArray{ ServiceIntegrationEmailParserValueExtractorArgs{...} }
type ServiceIntegrationEmailParserValueExtractorArrayInput interface {
	pulumi.Input

	ToServiceIntegrationEmailParserValueExtractorArrayOutput() ServiceIntegrationEmailParserValueExtractorArrayOutput
	ToServiceIntegrationEmailParserValueExtractorArrayOutputWithContext(context.Context) ServiceIntegrationEmailParserValueExtractorArrayOutput
}

type ServiceIntegrationEmailParserValueExtractorArray []ServiceIntegrationEmailParserValueExtractorInput

func (ServiceIntegrationEmailParserValueExtractorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserValueExtractor)(nil)).Elem()
}

func (i ServiceIntegrationEmailParserValueExtractorArray) ToServiceIntegrationEmailParserValueExtractorArrayOutput() ServiceIntegrationEmailParserValueExtractorArrayOutput {
	return i.ToServiceIntegrationEmailParserValueExtractorArrayOutputWithContext(context.Background())
}

func (i ServiceIntegrationEmailParserValueExtractorArray) ToServiceIntegrationEmailParserValueExtractorArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserValueExtractorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationEmailParserValueExtractorArrayOutput)
}

type ServiceIntegrationEmailParserValueExtractorOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserValueExtractorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationEmailParserValueExtractor)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserValueExtractorOutput) ToServiceIntegrationEmailParserValueExtractorOutput() ServiceIntegrationEmailParserValueExtractorOutput {
	return o
}

func (o ServiceIntegrationEmailParserValueExtractorOutput) ToServiceIntegrationEmailParserValueExtractorOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserValueExtractorOutput {
	return o
}

func (o ServiceIntegrationEmailParserValueExtractorOutput) EndsBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) *string { return v.EndsBefore }).(pulumi.StringPtrOutput)
}

// Can be `subject` or `body`.
func (o ServiceIntegrationEmailParserValueExtractorOutput) Part() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) string { return v.Part }).(pulumi.StringOutput)
}

// If `type` has value `regex` this value should contain valid regex.
//
// **Note:** You can use the `getVendor` data source to locate the appropriate vendor ID.
func (o ServiceIntegrationEmailParserValueExtractorOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

func (o ServiceIntegrationEmailParserValueExtractorOutput) StartsAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) *string { return v.StartsAfter }).(pulumi.StringPtrOutput)
}

// Can be `between`, `entire` or `regex`.
func (o ServiceIntegrationEmailParserValueExtractorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) string { return v.Type }).(pulumi.StringOutput)
}

// First value extractor should have name `incidentKey` other value extractors should contain custom names.
func (o ServiceIntegrationEmailParserValueExtractorOutput) ValueName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIntegrationEmailParserValueExtractor) string { return v.ValueName }).(pulumi.StringOutput)
}

type ServiceIntegrationEmailParserValueExtractorArrayOutput struct{ *pulumi.OutputState }

func (ServiceIntegrationEmailParserValueExtractorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIntegrationEmailParserValueExtractor)(nil)).Elem()
}

func (o ServiceIntegrationEmailParserValueExtractorArrayOutput) ToServiceIntegrationEmailParserValueExtractorArrayOutput() ServiceIntegrationEmailParserValueExtractorArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserValueExtractorArrayOutput) ToServiceIntegrationEmailParserValueExtractorArrayOutputWithContext(ctx context.Context) ServiceIntegrationEmailParserValueExtractorArrayOutput {
	return o
}

func (o ServiceIntegrationEmailParserValueExtractorArrayOutput) Index(i pulumi.IntInput) ServiceIntegrationEmailParserValueExtractorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIntegrationEmailParserValueExtractor {
		return vs[0].([]ServiceIntegrationEmailParserValueExtractor)[vs[1].(int)]
	}).(ServiceIntegrationEmailParserValueExtractorOutput)
}

type ServiceScheduledAction struct {
	// A block representing when the scheduled action will occur.
	Ats []ServiceScheduledActionAt `pulumi:"ats"`
	// The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
	ToUrgency *string `pulumi:"toUrgency"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type *string `pulumi:"type"`
}

// ServiceScheduledActionInput is an input type that accepts ServiceScheduledActionArgs and ServiceScheduledActionOutput values.
// You can construct a concrete instance of `ServiceScheduledActionInput` via:
//
//	ServiceScheduledActionArgs{...}
type ServiceScheduledActionInput interface {
	pulumi.Input

	ToServiceScheduledActionOutput() ServiceScheduledActionOutput
	ToServiceScheduledActionOutputWithContext(context.Context) ServiceScheduledActionOutput
}

type ServiceScheduledActionArgs struct {
	// A block representing when the scheduled action will occur.
	Ats ServiceScheduledActionAtArrayInput `pulumi:"ats"`
	// The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
	ToUrgency pulumi.StringPtrInput `pulumi:"toUrgency"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceScheduledActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceScheduledAction)(nil)).Elem()
}

func (i ServiceScheduledActionArgs) ToServiceScheduledActionOutput() ServiceScheduledActionOutput {
	return i.ToServiceScheduledActionOutputWithContext(context.Background())
}

func (i ServiceScheduledActionArgs) ToServiceScheduledActionOutputWithContext(ctx context.Context) ServiceScheduledActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceScheduledActionOutput)
}

// ServiceScheduledActionArrayInput is an input type that accepts ServiceScheduledActionArray and ServiceScheduledActionArrayOutput values.
// You can construct a concrete instance of `ServiceScheduledActionArrayInput` via:
//
//	ServiceScheduledActionArray{ ServiceScheduledActionArgs{...} }
type ServiceScheduledActionArrayInput interface {
	pulumi.Input

	ToServiceScheduledActionArrayOutput() ServiceScheduledActionArrayOutput
	ToServiceScheduledActionArrayOutputWithContext(context.Context) ServiceScheduledActionArrayOutput
}

type ServiceScheduledActionArray []ServiceScheduledActionInput

func (ServiceScheduledActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceScheduledAction)(nil)).Elem()
}

func (i ServiceScheduledActionArray) ToServiceScheduledActionArrayOutput() ServiceScheduledActionArrayOutput {
	return i.ToServiceScheduledActionArrayOutputWithContext(context.Background())
}

func (i ServiceScheduledActionArray) ToServiceScheduledActionArrayOutputWithContext(ctx context.Context) ServiceScheduledActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceScheduledActionArrayOutput)
}

type ServiceScheduledActionOutput struct{ *pulumi.OutputState }

func (ServiceScheduledActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceScheduledAction)(nil)).Elem()
}

func (o ServiceScheduledActionOutput) ToServiceScheduledActionOutput() ServiceScheduledActionOutput {
	return o
}

func (o ServiceScheduledActionOutput) ToServiceScheduledActionOutputWithContext(ctx context.Context) ServiceScheduledActionOutput {
	return o
}

// A block representing when the scheduled action will occur.
func (o ServiceScheduledActionOutput) Ats() ServiceScheduledActionAtArrayOutput {
	return o.ApplyT(func(v ServiceScheduledAction) []ServiceScheduledActionAt { return v.Ats }).(ServiceScheduledActionAtArrayOutput)
}

// The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
func (o ServiceScheduledActionOutput) ToUrgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceScheduledAction) *string { return v.ToUrgency }).(pulumi.StringPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceScheduledActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceScheduledAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceScheduledActionArrayOutput struct{ *pulumi.OutputState }

func (ServiceScheduledActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceScheduledAction)(nil)).Elem()
}

func (o ServiceScheduledActionArrayOutput) ToServiceScheduledActionArrayOutput() ServiceScheduledActionArrayOutput {
	return o
}

func (o ServiceScheduledActionArrayOutput) ToServiceScheduledActionArrayOutputWithContext(ctx context.Context) ServiceScheduledActionArrayOutput {
	return o
}

func (o ServiceScheduledActionArrayOutput) Index(i pulumi.IntInput) ServiceScheduledActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceScheduledAction {
		return vs[0].([]ServiceScheduledAction)[vs[1].(int)]
	}).(ServiceScheduledActionOutput)
}

type ServiceScheduledActionAt struct {
	// Designates either the start or the end of the scheduled action. Can be `supportHoursStart` or `supportHoursEnd`.
	//
	// Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `duringSupportHours` and to `low`  for `outsideSupportHours` in `incidentUrgencyRule`.
	//
	// Below is an example for a `Service` resource with `incidentUrgencyRules` with `type = "useSupportHours"`, `supportHours` and a default `scheduledAction` as well.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := pagerduty.NewService(ctx, "foo", &pagerduty.ServiceArgs{
	// 			Description:            pulumi.String("bar bar bar"),
	// 			AutoResolveTimeout:     pulumi.String("3600"),
	// 			AcknowledgementTimeout: pulumi.String("3600"),
	// 			EscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Foo.Id),
	// 			IncidentUrgencyRule: &pagerduty.ServiceIncidentUrgencyRuleArgs{
	// 				Type: pulumi.String("use_support_hours"),
	// 				DuringSupportHours: &pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs{
	// 					Type:    pulumi.String("constant"),
	// 					Urgency: pulumi.String("high"),
	// 				},
	// 				OutsideSupportHours: &pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{
	// 					Type:    pulumi.String("constant"),
	// 					Urgency: pulumi.String("low"),
	// 				},
	// 			},
	// 			SupportHours: &pagerduty.ServiceSupportHoursArgs{
	// 				Type:      pulumi.String("fixed_time_per_day"),
	// 				TimeZone:  pulumi.String("America/Lima"),
	// 				StartTime: pulumi.String("09:00:00"),
	// 				EndTime:   pulumi.String("17:00:00"),
	// 				DaysOfWeeks: pulumi.IntArray{
	// 					pulumi.Int(1),
	// 					pulumi.Int(2),
	// 					pulumi.Int(3),
	// 					pulumi.Int(4),
	// 					pulumi.Int(5),
	// 				},
	// 			},
	// 			ScheduledActions: pagerduty.ServiceScheduledActionArray{
	// 				&pagerduty.ServiceScheduledActionArgs{
	// 					Type:      pulumi.String("urgency_change"),
	// 					ToUrgency: pulumi.String("high"),
	// 					Ats: pagerduty.ServiceScheduledActionAtArray{
	// 						&pagerduty.ServiceScheduledActionAtArgs{
	// 							Type: pulumi.String("named_time"),
	// 							Name: pulumi.String("support_hours_start"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name *string `pulumi:"name"`
	// The type of time specification. Currently, this must be set to `namedTime`.
	Type *string `pulumi:"type"`
}

// ServiceScheduledActionAtInput is an input type that accepts ServiceScheduledActionAtArgs and ServiceScheduledActionAtOutput values.
// You can construct a concrete instance of `ServiceScheduledActionAtInput` via:
//
//	ServiceScheduledActionAtArgs{...}
type ServiceScheduledActionAtInput interface {
	pulumi.Input

	ToServiceScheduledActionAtOutput() ServiceScheduledActionAtOutput
	ToServiceScheduledActionAtOutputWithContext(context.Context) ServiceScheduledActionAtOutput
}

type ServiceScheduledActionAtArgs struct {
	// Designates either the start or the end of the scheduled action. Can be `supportHoursStart` or `supportHoursEnd`.
	//
	// Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `duringSupportHours` and to `low`  for `outsideSupportHours` in `incidentUrgencyRule`.
	//
	// Below is an example for a `Service` resource with `incidentUrgencyRules` with `type = "useSupportHours"`, `supportHours` and a default `scheduledAction` as well.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := pagerduty.NewService(ctx, "foo", &pagerduty.ServiceArgs{
	// 			Description:            pulumi.String("bar bar bar"),
	// 			AutoResolveTimeout:     pulumi.String("3600"),
	// 			AcknowledgementTimeout: pulumi.String("3600"),
	// 			EscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Foo.Id),
	// 			IncidentUrgencyRule: &pagerduty.ServiceIncidentUrgencyRuleArgs{
	// 				Type: pulumi.String("use_support_hours"),
	// 				DuringSupportHours: &pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs{
	// 					Type:    pulumi.String("constant"),
	// 					Urgency: pulumi.String("high"),
	// 				},
	// 				OutsideSupportHours: &pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{
	// 					Type:    pulumi.String("constant"),
	// 					Urgency: pulumi.String("low"),
	// 				},
	// 			},
	// 			SupportHours: &pagerduty.ServiceSupportHoursArgs{
	// 				Type:      pulumi.String("fixed_time_per_day"),
	// 				TimeZone:  pulumi.String("America/Lima"),
	// 				StartTime: pulumi.String("09:00:00"),
	// 				EndTime:   pulumi.String("17:00:00"),
	// 				DaysOfWeeks: pulumi.IntArray{
	// 					pulumi.Int(1),
	// 					pulumi.Int(2),
	// 					pulumi.Int(3),
	// 					pulumi.Int(4),
	// 					pulumi.Int(5),
	// 				},
	// 			},
	// 			ScheduledActions: pagerduty.ServiceScheduledActionArray{
	// 				&pagerduty.ServiceScheduledActionArgs{
	// 					Type:      pulumi.String("urgency_change"),
	// 					ToUrgency: pulumi.String("high"),
	// 					Ats: pagerduty.ServiceScheduledActionAtArray{
	// 						&pagerduty.ServiceScheduledActionAtArgs{
	// 							Type: pulumi.String("named_time"),
	// 							Name: pulumi.String("support_hours_start"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of time specification. Currently, this must be set to `namedTime`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceScheduledActionAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceScheduledActionAt)(nil)).Elem()
}

func (i ServiceScheduledActionAtArgs) ToServiceScheduledActionAtOutput() ServiceScheduledActionAtOutput {
	return i.ToServiceScheduledActionAtOutputWithContext(context.Background())
}

func (i ServiceScheduledActionAtArgs) ToServiceScheduledActionAtOutputWithContext(ctx context.Context) ServiceScheduledActionAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceScheduledActionAtOutput)
}

// ServiceScheduledActionAtArrayInput is an input type that accepts ServiceScheduledActionAtArray and ServiceScheduledActionAtArrayOutput values.
// You can construct a concrete instance of `ServiceScheduledActionAtArrayInput` via:
//
//	ServiceScheduledActionAtArray{ ServiceScheduledActionAtArgs{...} }
type ServiceScheduledActionAtArrayInput interface {
	pulumi.Input

	ToServiceScheduledActionAtArrayOutput() ServiceScheduledActionAtArrayOutput
	ToServiceScheduledActionAtArrayOutputWithContext(context.Context) ServiceScheduledActionAtArrayOutput
}

type ServiceScheduledActionAtArray []ServiceScheduledActionAtInput

func (ServiceScheduledActionAtArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceScheduledActionAt)(nil)).Elem()
}

func (i ServiceScheduledActionAtArray) ToServiceScheduledActionAtArrayOutput() ServiceScheduledActionAtArrayOutput {
	return i.ToServiceScheduledActionAtArrayOutputWithContext(context.Background())
}

func (i ServiceScheduledActionAtArray) ToServiceScheduledActionAtArrayOutputWithContext(ctx context.Context) ServiceScheduledActionAtArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceScheduledActionAtArrayOutput)
}

type ServiceScheduledActionAtOutput struct{ *pulumi.OutputState }

func (ServiceScheduledActionAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceScheduledActionAt)(nil)).Elem()
}

func (o ServiceScheduledActionAtOutput) ToServiceScheduledActionAtOutput() ServiceScheduledActionAtOutput {
	return o
}

func (o ServiceScheduledActionAtOutput) ToServiceScheduledActionAtOutputWithContext(ctx context.Context) ServiceScheduledActionAtOutput {
	return o
}

// Designates either the start or the end of the scheduled action. Can be `supportHoursStart` or `supportHoursEnd`.
//
// Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `duringSupportHours` and to `low`  for `outsideSupportHours` in `incidentUrgencyRule`.
//
// Below is an example for a `Service` resource with `incidentUrgencyRules` with `type = "useSupportHours"`, `supportHours` and a default `scheduledAction` as well.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-pagerduty/sdk/v4/go/pagerduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pagerduty.NewService(ctx, "foo", &pagerduty.ServiceArgs{
//				Description:            pulumi.String("bar bar bar"),
//				AutoResolveTimeout:     pulumi.String("3600"),
//				AcknowledgementTimeout: pulumi.String("3600"),
//				EscalationPolicy:       pulumi.Any(pagerduty_escalation_policy.Foo.Id),
//				IncidentUrgencyRule: &pagerduty.ServiceIncidentUrgencyRuleArgs{
//					Type: pulumi.String("use_support_hours"),
//					DuringSupportHours: &pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs{
//						Type:    pulumi.String("constant"),
//						Urgency: pulumi.String("high"),
//					},
//					OutsideSupportHours: &pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{
//						Type:    pulumi.String("constant"),
//						Urgency: pulumi.String("low"),
//					},
//				},
//				SupportHours: &pagerduty.ServiceSupportHoursArgs{
//					Type:      pulumi.String("fixed_time_per_day"),
//					TimeZone:  pulumi.String("America/Lima"),
//					StartTime: pulumi.String("09:00:00"),
//					EndTime:   pulumi.String("17:00:00"),
//					DaysOfWeeks: pulumi.IntArray{
//						pulumi.Int(1),
//						pulumi.Int(2),
//						pulumi.Int(3),
//						pulumi.Int(4),
//						pulumi.Int(5),
//					},
//				},
//				ScheduledActions: pagerduty.ServiceScheduledActionArray{
//					&pagerduty.ServiceScheduledActionArgs{
//						Type:      pulumi.String("urgency_change"),
//						ToUrgency: pulumi.String("high"),
//						Ats: pagerduty.ServiceScheduledActionAtArray{
//							&pagerduty.ServiceScheduledActionAtArgs{
//								Type: pulumi.String("named_time"),
//								Name: pulumi.String("support_hours_start"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o ServiceScheduledActionAtOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceScheduledActionAt) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of time specification. Currently, this must be set to `namedTime`.
func (o ServiceScheduledActionAtOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceScheduledActionAt) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceScheduledActionAtArrayOutput struct{ *pulumi.OutputState }

func (ServiceScheduledActionAtArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceScheduledActionAt)(nil)).Elem()
}

func (o ServiceScheduledActionAtArrayOutput) ToServiceScheduledActionAtArrayOutput() ServiceScheduledActionAtArrayOutput {
	return o
}

func (o ServiceScheduledActionAtArrayOutput) ToServiceScheduledActionAtArrayOutputWithContext(ctx context.Context) ServiceScheduledActionAtArrayOutput {
	return o
}

func (o ServiceScheduledActionAtArrayOutput) Index(i pulumi.IntInput) ServiceScheduledActionAtOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceScheduledActionAt {
		return vs[0].([]ServiceScheduledActionAt)[vs[1].(int)]
	}).(ServiceScheduledActionAtOutput)
}

type ServiceSupportHours struct {
	// Array of days of week as integers. `1` to `7`, `1` being
	// Monday and `7` being Sunday.
	DaysOfWeeks []int `pulumi:"daysOfWeeks"`
	// The support hours' ending time of day.
	//
	// A `scheduledActions` block is required when using `type = "useSupportHours"` in `incidentUrgencyRule`.
	//
	// The block contains the following arguments:
	EndTime *string `pulumi:"endTime"`
	// The support hours' starting time of day.
	StartTime *string `pulumi:"startTime"`
	// The time zone for the support hours.
	TimeZone *string `pulumi:"timeZone"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type *string `pulumi:"type"`
}

// ServiceSupportHoursInput is an input type that accepts ServiceSupportHoursArgs and ServiceSupportHoursOutput values.
// You can construct a concrete instance of `ServiceSupportHoursInput` via:
//
//	ServiceSupportHoursArgs{...}
type ServiceSupportHoursInput interface {
	pulumi.Input

	ToServiceSupportHoursOutput() ServiceSupportHoursOutput
	ToServiceSupportHoursOutputWithContext(context.Context) ServiceSupportHoursOutput
}

type ServiceSupportHoursArgs struct {
	// Array of days of week as integers. `1` to `7`, `1` being
	// Monday and `7` being Sunday.
	DaysOfWeeks pulumi.IntArrayInput `pulumi:"daysOfWeeks"`
	// The support hours' ending time of day.
	//
	// A `scheduledActions` block is required when using `type = "useSupportHours"` in `incidentUrgencyRule`.
	//
	// The block contains the following arguments:
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The support hours' starting time of day.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The time zone for the support hours.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceSupportHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSupportHours)(nil)).Elem()
}

func (i ServiceSupportHoursArgs) ToServiceSupportHoursOutput() ServiceSupportHoursOutput {
	return i.ToServiceSupportHoursOutputWithContext(context.Background())
}

func (i ServiceSupportHoursArgs) ToServiceSupportHoursOutputWithContext(ctx context.Context) ServiceSupportHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSupportHoursOutput)
}

func (i ServiceSupportHoursArgs) ToServiceSupportHoursPtrOutput() ServiceSupportHoursPtrOutput {
	return i.ToServiceSupportHoursPtrOutputWithContext(context.Background())
}

func (i ServiceSupportHoursArgs) ToServiceSupportHoursPtrOutputWithContext(ctx context.Context) ServiceSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSupportHoursOutput).ToServiceSupportHoursPtrOutputWithContext(ctx)
}

// ServiceSupportHoursPtrInput is an input type that accepts ServiceSupportHoursArgs, ServiceSupportHoursPtr and ServiceSupportHoursPtrOutput values.
// You can construct a concrete instance of `ServiceSupportHoursPtrInput` via:
//
//	        ServiceSupportHoursArgs{...}
//
//	or:
//
//	        nil
type ServiceSupportHoursPtrInput interface {
	pulumi.Input

	ToServiceSupportHoursPtrOutput() ServiceSupportHoursPtrOutput
	ToServiceSupportHoursPtrOutputWithContext(context.Context) ServiceSupportHoursPtrOutput
}

type serviceSupportHoursPtrType ServiceSupportHoursArgs

func ServiceSupportHoursPtr(v *ServiceSupportHoursArgs) ServiceSupportHoursPtrInput {
	return (*serviceSupportHoursPtrType)(v)
}

func (*serviceSupportHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSupportHours)(nil)).Elem()
}

func (i *serviceSupportHoursPtrType) ToServiceSupportHoursPtrOutput() ServiceSupportHoursPtrOutput {
	return i.ToServiceSupportHoursPtrOutputWithContext(context.Background())
}

func (i *serviceSupportHoursPtrType) ToServiceSupportHoursPtrOutputWithContext(ctx context.Context) ServiceSupportHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSupportHoursPtrOutput)
}

type ServiceSupportHoursOutput struct{ *pulumi.OutputState }

func (ServiceSupportHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSupportHours)(nil)).Elem()
}

func (o ServiceSupportHoursOutput) ToServiceSupportHoursOutput() ServiceSupportHoursOutput {
	return o
}

func (o ServiceSupportHoursOutput) ToServiceSupportHoursOutputWithContext(ctx context.Context) ServiceSupportHoursOutput {
	return o
}

func (o ServiceSupportHoursOutput) ToServiceSupportHoursPtrOutput() ServiceSupportHoursPtrOutput {
	return o.ToServiceSupportHoursPtrOutputWithContext(context.Background())
}

func (o ServiceSupportHoursOutput) ToServiceSupportHoursPtrOutputWithContext(ctx context.Context) ServiceSupportHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSupportHours) *ServiceSupportHours {
		return &v
	}).(ServiceSupportHoursPtrOutput)
}

// Array of days of week as integers. `1` to `7`, `1` being
// Monday and `7` being Sunday.
func (o ServiceSupportHoursOutput) DaysOfWeeks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ServiceSupportHours) []int { return v.DaysOfWeeks }).(pulumi.IntArrayOutput)
}

// The support hours' ending time of day.
//
// A `scheduledActions` block is required when using `type = "useSupportHours"` in `incidentUrgencyRule`.
//
// The block contains the following arguments:
func (o ServiceSupportHoursOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSupportHours) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The support hours' starting time of day.
func (o ServiceSupportHoursOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSupportHours) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone for the support hours.
func (o ServiceSupportHoursOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSupportHours) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceSupportHoursOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSupportHours) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceSupportHoursPtrOutput struct{ *pulumi.OutputState }

func (ServiceSupportHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSupportHours)(nil)).Elem()
}

func (o ServiceSupportHoursPtrOutput) ToServiceSupportHoursPtrOutput() ServiceSupportHoursPtrOutput {
	return o
}

func (o ServiceSupportHoursPtrOutput) ToServiceSupportHoursPtrOutputWithContext(ctx context.Context) ServiceSupportHoursPtrOutput {
	return o
}

func (o ServiceSupportHoursPtrOutput) Elem() ServiceSupportHoursOutput {
	return o.ApplyT(func(v *ServiceSupportHours) ServiceSupportHours {
		if v != nil {
			return *v
		}
		var ret ServiceSupportHours
		return ret
	}).(ServiceSupportHoursOutput)
}

// Array of days of week as integers. `1` to `7`, `1` being
// Monday and `7` being Sunday.
func (o ServiceSupportHoursPtrOutput) DaysOfWeeks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ServiceSupportHours) []int {
		if v == nil {
			return nil
		}
		return v.DaysOfWeeks
	}).(pulumi.IntArrayOutput)
}

// The support hours' ending time of day.
//
// A `scheduledActions` block is required when using `type = "useSupportHours"` in `incidentUrgencyRule`.
//
// The block contains the following arguments:
func (o ServiceSupportHoursPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The support hours' starting time of day.
func (o ServiceSupportHoursPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The time zone for the support hours.
func (o ServiceSupportHoursPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The type of alert grouping; one of `intelligent`, `time` or `contentBased`.
func (o ServiceSupportHoursPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSupportHours) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type SlackConnectionConfig struct {
	// A list of strings to filter events by PagerDuty event type. `"incident.triggered"` is required. The follow event types are also possible:
	// - `incident.acknowledged`
	// - `incident.escalated`
	// - `incident.resolved`
	// - `incident.reassigned`
	// - `incident.annotated`
	// - `incident.unacknowledged`
	// - `incident.delegated`
	// - `incident.priority_updated`
	// - `incident.responder.added`
	// - `incident.responder.replied`
	// - `incident.status_update_published`
	// - `incident.reopened`
	Events []string `pulumi:"events"`
	// Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through getPriority data source.
	// - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.
	// - When set to `["*"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.
	Priorities []string `pulumi:"priorities"`
	// Allows you to filter events by urgency. Either `high` or `low`.
	Urgency *string `pulumi:"urgency"`
}

// SlackConnectionConfigInput is an input type that accepts SlackConnectionConfigArgs and SlackConnectionConfigOutput values.
// You can construct a concrete instance of `SlackConnectionConfigInput` via:
//
//	SlackConnectionConfigArgs{...}
type SlackConnectionConfigInput interface {
	pulumi.Input

	ToSlackConnectionConfigOutput() SlackConnectionConfigOutput
	ToSlackConnectionConfigOutputWithContext(context.Context) SlackConnectionConfigOutput
}

type SlackConnectionConfigArgs struct {
	// A list of strings to filter events by PagerDuty event type. `"incident.triggered"` is required. The follow event types are also possible:
	// - `incident.acknowledged`
	// - `incident.escalated`
	// - `incident.resolved`
	// - `incident.reassigned`
	// - `incident.annotated`
	// - `incident.unacknowledged`
	// - `incident.delegated`
	// - `incident.priority_updated`
	// - `incident.responder.added`
	// - `incident.responder.replied`
	// - `incident.status_update_published`
	// - `incident.reopened`
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through getPriority data source.
	// - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.
	// - When set to `["*"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.
	Priorities pulumi.StringArrayInput `pulumi:"priorities"`
	// Allows you to filter events by urgency. Either `high` or `low`.
	Urgency pulumi.StringPtrInput `pulumi:"urgency"`
}

func (SlackConnectionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackConnectionConfig)(nil)).Elem()
}

func (i SlackConnectionConfigArgs) ToSlackConnectionConfigOutput() SlackConnectionConfigOutput {
	return i.ToSlackConnectionConfigOutputWithContext(context.Background())
}

func (i SlackConnectionConfigArgs) ToSlackConnectionConfigOutputWithContext(ctx context.Context) SlackConnectionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackConnectionConfigOutput)
}

// SlackConnectionConfigArrayInput is an input type that accepts SlackConnectionConfigArray and SlackConnectionConfigArrayOutput values.
// You can construct a concrete instance of `SlackConnectionConfigArrayInput` via:
//
//	SlackConnectionConfigArray{ SlackConnectionConfigArgs{...} }
type SlackConnectionConfigArrayInput interface {
	pulumi.Input

	ToSlackConnectionConfigArrayOutput() SlackConnectionConfigArrayOutput
	ToSlackConnectionConfigArrayOutputWithContext(context.Context) SlackConnectionConfigArrayOutput
}

type SlackConnectionConfigArray []SlackConnectionConfigInput

func (SlackConnectionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackConnectionConfig)(nil)).Elem()
}

func (i SlackConnectionConfigArray) ToSlackConnectionConfigArrayOutput() SlackConnectionConfigArrayOutput {
	return i.ToSlackConnectionConfigArrayOutputWithContext(context.Background())
}

func (i SlackConnectionConfigArray) ToSlackConnectionConfigArrayOutputWithContext(ctx context.Context) SlackConnectionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackConnectionConfigArrayOutput)
}

type SlackConnectionConfigOutput struct{ *pulumi.OutputState }

func (SlackConnectionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlackConnectionConfig)(nil)).Elem()
}

func (o SlackConnectionConfigOutput) ToSlackConnectionConfigOutput() SlackConnectionConfigOutput {
	return o
}

func (o SlackConnectionConfigOutput) ToSlackConnectionConfigOutputWithContext(ctx context.Context) SlackConnectionConfigOutput {
	return o
}

// A list of strings to filter events by PagerDuty event type. `"incident.triggered"` is required. The follow event types are also possible:
// - `incident.acknowledged`
// - `incident.escalated`
// - `incident.resolved`
// - `incident.reassigned`
// - `incident.annotated`
// - `incident.unacknowledged`
// - `incident.delegated`
// - `incident.priority_updated`
// - `incident.responder.added`
// - `incident.responder.replied`
// - `incident.status_update_published`
// - `incident.reopened`
func (o SlackConnectionConfigOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SlackConnectionConfig) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through getPriority data source.
// - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.
// - When set to `["*"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.
func (o SlackConnectionConfigOutput) Priorities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SlackConnectionConfig) []string { return v.Priorities }).(pulumi.StringArrayOutput)
}

// Allows you to filter events by urgency. Either `high` or `low`.
func (o SlackConnectionConfigOutput) Urgency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlackConnectionConfig) *string { return v.Urgency }).(pulumi.StringPtrOutput)
}

type SlackConnectionConfigArrayOutput struct{ *pulumi.OutputState }

func (SlackConnectionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlackConnectionConfig)(nil)).Elem()
}

func (o SlackConnectionConfigArrayOutput) ToSlackConnectionConfigArrayOutput() SlackConnectionConfigArrayOutput {
	return o
}

func (o SlackConnectionConfigArrayOutput) ToSlackConnectionConfigArrayOutputWithContext(ctx context.Context) SlackConnectionConfigArrayOutput {
	return o
}

func (o SlackConnectionConfigArrayOutput) Index(i pulumi.IntInput) SlackConnectionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlackConnectionConfig {
		return vs[0].([]SlackConnectionConfig)[vs[1].(int)]
	}).(SlackConnectionConfigOutput)
}

type WebhookSubscriptionDeliveryMethod struct {
	// The customHeader of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.
	CustomHeaders []WebhookSubscriptionDeliveryMethodCustomHeader `pulumi:"customHeaders"`
	// Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.
	TemporarilyDisabled *bool `pulumi:"temporarilyDisabled"`
	// Indicates the type of the delivery method. Allowed and default value: `httpDeliveryMethod`.
	Type *string `pulumi:"type"`
	// The destination URL for webhook delivery.
	Url *string `pulumi:"url"`
}

// WebhookSubscriptionDeliveryMethodInput is an input type that accepts WebhookSubscriptionDeliveryMethodArgs and WebhookSubscriptionDeliveryMethodOutput values.
// You can construct a concrete instance of `WebhookSubscriptionDeliveryMethodInput` via:
//
//	WebhookSubscriptionDeliveryMethodArgs{...}
type WebhookSubscriptionDeliveryMethodInput interface {
	pulumi.Input

	ToWebhookSubscriptionDeliveryMethodOutput() WebhookSubscriptionDeliveryMethodOutput
	ToWebhookSubscriptionDeliveryMethodOutputWithContext(context.Context) WebhookSubscriptionDeliveryMethodOutput
}

type WebhookSubscriptionDeliveryMethodArgs struct {
	// The customHeader of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.
	CustomHeaders WebhookSubscriptionDeliveryMethodCustomHeaderArrayInput `pulumi:"customHeaders"`
	// Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.
	TemporarilyDisabled pulumi.BoolPtrInput `pulumi:"temporarilyDisabled"`
	// Indicates the type of the delivery method. Allowed and default value: `httpDeliveryMethod`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The destination URL for webhook delivery.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (WebhookSubscriptionDeliveryMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionDeliveryMethod)(nil)).Elem()
}

func (i WebhookSubscriptionDeliveryMethodArgs) ToWebhookSubscriptionDeliveryMethodOutput() WebhookSubscriptionDeliveryMethodOutput {
	return i.ToWebhookSubscriptionDeliveryMethodOutputWithContext(context.Background())
}

func (i WebhookSubscriptionDeliveryMethodArgs) ToWebhookSubscriptionDeliveryMethodOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionDeliveryMethodOutput)
}

// WebhookSubscriptionDeliveryMethodArrayInput is an input type that accepts WebhookSubscriptionDeliveryMethodArray and WebhookSubscriptionDeliveryMethodArrayOutput values.
// You can construct a concrete instance of `WebhookSubscriptionDeliveryMethodArrayInput` via:
//
//	WebhookSubscriptionDeliveryMethodArray{ WebhookSubscriptionDeliveryMethodArgs{...} }
type WebhookSubscriptionDeliveryMethodArrayInput interface {
	pulumi.Input

	ToWebhookSubscriptionDeliveryMethodArrayOutput() WebhookSubscriptionDeliveryMethodArrayOutput
	ToWebhookSubscriptionDeliveryMethodArrayOutputWithContext(context.Context) WebhookSubscriptionDeliveryMethodArrayOutput
}

type WebhookSubscriptionDeliveryMethodArray []WebhookSubscriptionDeliveryMethodInput

func (WebhookSubscriptionDeliveryMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionDeliveryMethod)(nil)).Elem()
}

func (i WebhookSubscriptionDeliveryMethodArray) ToWebhookSubscriptionDeliveryMethodArrayOutput() WebhookSubscriptionDeliveryMethodArrayOutput {
	return i.ToWebhookSubscriptionDeliveryMethodArrayOutputWithContext(context.Background())
}

func (i WebhookSubscriptionDeliveryMethodArray) ToWebhookSubscriptionDeliveryMethodArrayOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionDeliveryMethodArrayOutput)
}

type WebhookSubscriptionDeliveryMethodOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionDeliveryMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionDeliveryMethod)(nil)).Elem()
}

func (o WebhookSubscriptionDeliveryMethodOutput) ToWebhookSubscriptionDeliveryMethodOutput() WebhookSubscriptionDeliveryMethodOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodOutput) ToWebhookSubscriptionDeliveryMethodOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodOutput {
	return o
}

// The customHeader of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.
func (o WebhookSubscriptionDeliveryMethodOutput) CustomHeaders() WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethod) []WebhookSubscriptionDeliveryMethodCustomHeader {
		return v.CustomHeaders
	}).(WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput)
}

// Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.
func (o WebhookSubscriptionDeliveryMethodOutput) TemporarilyDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethod) *bool { return v.TemporarilyDisabled }).(pulumi.BoolPtrOutput)
}

// Indicates the type of the delivery method. Allowed and default value: `httpDeliveryMethod`.
func (o WebhookSubscriptionDeliveryMethodOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethod) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The destination URL for webhook delivery.
func (o WebhookSubscriptionDeliveryMethodOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethod) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type WebhookSubscriptionDeliveryMethodArrayOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionDeliveryMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionDeliveryMethod)(nil)).Elem()
}

func (o WebhookSubscriptionDeliveryMethodArrayOutput) ToWebhookSubscriptionDeliveryMethodArrayOutput() WebhookSubscriptionDeliveryMethodArrayOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodArrayOutput) ToWebhookSubscriptionDeliveryMethodArrayOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodArrayOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodArrayOutput) Index(i pulumi.IntInput) WebhookSubscriptionDeliveryMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSubscriptionDeliveryMethod {
		return vs[0].([]WebhookSubscriptionDeliveryMethod)[vs[1].(int)]
	}).(WebhookSubscriptionDeliveryMethodOutput)
}

type WebhookSubscriptionDeliveryMethodCustomHeader struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// WebhookSubscriptionDeliveryMethodCustomHeaderInput is an input type that accepts WebhookSubscriptionDeliveryMethodCustomHeaderArgs and WebhookSubscriptionDeliveryMethodCustomHeaderOutput values.
// You can construct a concrete instance of `WebhookSubscriptionDeliveryMethodCustomHeaderInput` via:
//
//	WebhookSubscriptionDeliveryMethodCustomHeaderArgs{...}
type WebhookSubscriptionDeliveryMethodCustomHeaderInput interface {
	pulumi.Input

	ToWebhookSubscriptionDeliveryMethodCustomHeaderOutput() WebhookSubscriptionDeliveryMethodCustomHeaderOutput
	ToWebhookSubscriptionDeliveryMethodCustomHeaderOutputWithContext(context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderOutput
}

type WebhookSubscriptionDeliveryMethodCustomHeaderArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (WebhookSubscriptionDeliveryMethodCustomHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionDeliveryMethodCustomHeader)(nil)).Elem()
}

func (i WebhookSubscriptionDeliveryMethodCustomHeaderArgs) ToWebhookSubscriptionDeliveryMethodCustomHeaderOutput() WebhookSubscriptionDeliveryMethodCustomHeaderOutput {
	return i.ToWebhookSubscriptionDeliveryMethodCustomHeaderOutputWithContext(context.Background())
}

func (i WebhookSubscriptionDeliveryMethodCustomHeaderArgs) ToWebhookSubscriptionDeliveryMethodCustomHeaderOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionDeliveryMethodCustomHeaderOutput)
}

// WebhookSubscriptionDeliveryMethodCustomHeaderArrayInput is an input type that accepts WebhookSubscriptionDeliveryMethodCustomHeaderArray and WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput values.
// You can construct a concrete instance of `WebhookSubscriptionDeliveryMethodCustomHeaderArrayInput` via:
//
//	WebhookSubscriptionDeliveryMethodCustomHeaderArray{ WebhookSubscriptionDeliveryMethodCustomHeaderArgs{...} }
type WebhookSubscriptionDeliveryMethodCustomHeaderArrayInput interface {
	pulumi.Input

	ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput() WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput
	ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutputWithContext(context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput
}

type WebhookSubscriptionDeliveryMethodCustomHeaderArray []WebhookSubscriptionDeliveryMethodCustomHeaderInput

func (WebhookSubscriptionDeliveryMethodCustomHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionDeliveryMethodCustomHeader)(nil)).Elem()
}

func (i WebhookSubscriptionDeliveryMethodCustomHeaderArray) ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput() WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput {
	return i.ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutputWithContext(context.Background())
}

func (i WebhookSubscriptionDeliveryMethodCustomHeaderArray) ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput)
}

type WebhookSubscriptionDeliveryMethodCustomHeaderOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionDeliveryMethodCustomHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionDeliveryMethodCustomHeader)(nil)).Elem()
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderOutput) ToWebhookSubscriptionDeliveryMethodCustomHeaderOutput() WebhookSubscriptionDeliveryMethodCustomHeaderOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderOutput) ToWebhookSubscriptionDeliveryMethodCustomHeaderOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethodCustomHeader) string { return v.Name }).(pulumi.StringOutput)
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSubscriptionDeliveryMethodCustomHeader) string { return v.Value }).(pulumi.StringOutput)
}

type WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionDeliveryMethodCustomHeader)(nil)).Elem()
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput) ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput() WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput) ToWebhookSubscriptionDeliveryMethodCustomHeaderArrayOutputWithContext(ctx context.Context) WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput {
	return o
}

func (o WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput) Index(i pulumi.IntInput) WebhookSubscriptionDeliveryMethodCustomHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSubscriptionDeliveryMethodCustomHeader {
		return vs[0].([]WebhookSubscriptionDeliveryMethodCustomHeader)[vs[1].(int)]
	}).(WebhookSubscriptionDeliveryMethodCustomHeaderOutput)
}

type WebhookSubscriptionFilter struct {
	// The id of the object being used as the filter. This field is required for all filter types except account_reference.
	Id *string `pulumi:"id"`
	// The type of object being used as the filter. Allowed values are `accountReference`, `serviceReference`, and `teamReference`.
	Type string `pulumi:"type"`
}

// WebhookSubscriptionFilterInput is an input type that accepts WebhookSubscriptionFilterArgs and WebhookSubscriptionFilterOutput values.
// You can construct a concrete instance of `WebhookSubscriptionFilterInput` via:
//
//	WebhookSubscriptionFilterArgs{...}
type WebhookSubscriptionFilterInput interface {
	pulumi.Input

	ToWebhookSubscriptionFilterOutput() WebhookSubscriptionFilterOutput
	ToWebhookSubscriptionFilterOutputWithContext(context.Context) WebhookSubscriptionFilterOutput
}

type WebhookSubscriptionFilterArgs struct {
	// The id of the object being used as the filter. This field is required for all filter types except account_reference.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of object being used as the filter. Allowed values are `accountReference`, `serviceReference`, and `teamReference`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebhookSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionFilter)(nil)).Elem()
}

func (i WebhookSubscriptionFilterArgs) ToWebhookSubscriptionFilterOutput() WebhookSubscriptionFilterOutput {
	return i.ToWebhookSubscriptionFilterOutputWithContext(context.Background())
}

func (i WebhookSubscriptionFilterArgs) ToWebhookSubscriptionFilterOutputWithContext(ctx context.Context) WebhookSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionFilterOutput)
}

// WebhookSubscriptionFilterArrayInput is an input type that accepts WebhookSubscriptionFilterArray and WebhookSubscriptionFilterArrayOutput values.
// You can construct a concrete instance of `WebhookSubscriptionFilterArrayInput` via:
//
//	WebhookSubscriptionFilterArray{ WebhookSubscriptionFilterArgs{...} }
type WebhookSubscriptionFilterArrayInput interface {
	pulumi.Input

	ToWebhookSubscriptionFilterArrayOutput() WebhookSubscriptionFilterArrayOutput
	ToWebhookSubscriptionFilterArrayOutputWithContext(context.Context) WebhookSubscriptionFilterArrayOutput
}

type WebhookSubscriptionFilterArray []WebhookSubscriptionFilterInput

func (WebhookSubscriptionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionFilter)(nil)).Elem()
}

func (i WebhookSubscriptionFilterArray) ToWebhookSubscriptionFilterArrayOutput() WebhookSubscriptionFilterArrayOutput {
	return i.ToWebhookSubscriptionFilterArrayOutputWithContext(context.Background())
}

func (i WebhookSubscriptionFilterArray) ToWebhookSubscriptionFilterArrayOutputWithContext(ctx context.Context) WebhookSubscriptionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSubscriptionFilterArrayOutput)
}

type WebhookSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSubscriptionFilter)(nil)).Elem()
}

func (o WebhookSubscriptionFilterOutput) ToWebhookSubscriptionFilterOutput() WebhookSubscriptionFilterOutput {
	return o
}

func (o WebhookSubscriptionFilterOutput) ToWebhookSubscriptionFilterOutputWithContext(ctx context.Context) WebhookSubscriptionFilterOutput {
	return o
}

// The id of the object being used as the filter. This field is required for all filter types except account_reference.
func (o WebhookSubscriptionFilterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSubscriptionFilter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of object being used as the filter. Allowed values are `accountReference`, `serviceReference`, and `teamReference`.
func (o WebhookSubscriptionFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSubscriptionFilter) string { return v.Type }).(pulumi.StringOutput)
}

type WebhookSubscriptionFilterArrayOutput struct{ *pulumi.OutputState }

func (WebhookSubscriptionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSubscriptionFilter)(nil)).Elem()
}

func (o WebhookSubscriptionFilterArrayOutput) ToWebhookSubscriptionFilterArrayOutput() WebhookSubscriptionFilterArrayOutput {
	return o
}

func (o WebhookSubscriptionFilterArrayOutput) ToWebhookSubscriptionFilterArrayOutputWithContext(ctx context.Context) WebhookSubscriptionFilterArrayOutput {
	return o
}

func (o WebhookSubscriptionFilterArrayOutput) Index(i pulumi.IntInput) WebhookSubscriptionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSubscriptionFilter {
		return vs[0].([]WebhookSubscriptionFilter)[vs[1].(int)]
	}).(WebhookSubscriptionFilterOutput)
}

type GetAutomationActionsActionActionDataReference struct {
	// (Optional) The command to execute the script with.
	InvocationCommand string `pulumi:"invocationCommand"`
	// (Optional) The arguments to pass to the Process Automation job execution.
	ProcessAutomationJobArguments string `pulumi:"processAutomationJobArguments"`
	// (Required for `processAutomation` action_type) The ID of the Process Automation job to execute.
	ProcessAutomationJobId string `pulumi:"processAutomationJobId"`
	// (Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
	ProcessAutomationNodeFilter string `pulumi:"processAutomationNodeFilter"`
	// (Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.
	Script string `pulumi:"script"`
}

// GetAutomationActionsActionActionDataReferenceInput is an input type that accepts GetAutomationActionsActionActionDataReferenceArgs and GetAutomationActionsActionActionDataReferenceOutput values.
// You can construct a concrete instance of `GetAutomationActionsActionActionDataReferenceInput` via:
//
//	GetAutomationActionsActionActionDataReferenceArgs{...}
type GetAutomationActionsActionActionDataReferenceInput interface {
	pulumi.Input

	ToGetAutomationActionsActionActionDataReferenceOutput() GetAutomationActionsActionActionDataReferenceOutput
	ToGetAutomationActionsActionActionDataReferenceOutputWithContext(context.Context) GetAutomationActionsActionActionDataReferenceOutput
}

type GetAutomationActionsActionActionDataReferenceArgs struct {
	// (Optional) The command to execute the script with.
	InvocationCommand pulumi.StringInput `pulumi:"invocationCommand"`
	// (Optional) The arguments to pass to the Process Automation job execution.
	ProcessAutomationJobArguments pulumi.StringInput `pulumi:"processAutomationJobArguments"`
	// (Required for `processAutomation` action_type) The ID of the Process Automation job to execute.
	ProcessAutomationJobId pulumi.StringInput `pulumi:"processAutomationJobId"`
	// (Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
	ProcessAutomationNodeFilter pulumi.StringInput `pulumi:"processAutomationNodeFilter"`
	// (Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.
	Script pulumi.StringInput `pulumi:"script"`
}

func (GetAutomationActionsActionActionDataReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutomationActionsActionActionDataReference)(nil)).Elem()
}

func (i GetAutomationActionsActionActionDataReferenceArgs) ToGetAutomationActionsActionActionDataReferenceOutput() GetAutomationActionsActionActionDataReferenceOutput {
	return i.ToGetAutomationActionsActionActionDataReferenceOutputWithContext(context.Background())
}

func (i GetAutomationActionsActionActionDataReferenceArgs) ToGetAutomationActionsActionActionDataReferenceOutputWithContext(ctx context.Context) GetAutomationActionsActionActionDataReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAutomationActionsActionActionDataReferenceOutput)
}

// GetAutomationActionsActionActionDataReferenceArrayInput is an input type that accepts GetAutomationActionsActionActionDataReferenceArray and GetAutomationActionsActionActionDataReferenceArrayOutput values.
// You can construct a concrete instance of `GetAutomationActionsActionActionDataReferenceArrayInput` via:
//
//	GetAutomationActionsActionActionDataReferenceArray{ GetAutomationActionsActionActionDataReferenceArgs{...} }
type GetAutomationActionsActionActionDataReferenceArrayInput interface {
	pulumi.Input

	ToGetAutomationActionsActionActionDataReferenceArrayOutput() GetAutomationActionsActionActionDataReferenceArrayOutput
	ToGetAutomationActionsActionActionDataReferenceArrayOutputWithContext(context.Context) GetAutomationActionsActionActionDataReferenceArrayOutput
}

type GetAutomationActionsActionActionDataReferenceArray []GetAutomationActionsActionActionDataReferenceInput

func (GetAutomationActionsActionActionDataReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAutomationActionsActionActionDataReference)(nil)).Elem()
}

func (i GetAutomationActionsActionActionDataReferenceArray) ToGetAutomationActionsActionActionDataReferenceArrayOutput() GetAutomationActionsActionActionDataReferenceArrayOutput {
	return i.ToGetAutomationActionsActionActionDataReferenceArrayOutputWithContext(context.Background())
}

func (i GetAutomationActionsActionActionDataReferenceArray) ToGetAutomationActionsActionActionDataReferenceArrayOutputWithContext(ctx context.Context) GetAutomationActionsActionActionDataReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAutomationActionsActionActionDataReferenceArrayOutput)
}

type GetAutomationActionsActionActionDataReferenceOutput struct{ *pulumi.OutputState }

func (GetAutomationActionsActionActionDataReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAutomationActionsActionActionDataReference)(nil)).Elem()
}

func (o GetAutomationActionsActionActionDataReferenceOutput) ToGetAutomationActionsActionActionDataReferenceOutput() GetAutomationActionsActionActionDataReferenceOutput {
	return o
}

func (o GetAutomationActionsActionActionDataReferenceOutput) ToGetAutomationActionsActionActionDataReferenceOutputWithContext(ctx context.Context) GetAutomationActionsActionActionDataReferenceOutput {
	return o
}

// (Optional) The command to execute the script with.
func (o GetAutomationActionsActionActionDataReferenceOutput) InvocationCommand() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutomationActionsActionActionDataReference) string { return v.InvocationCommand }).(pulumi.StringOutput)
}

// (Optional) The arguments to pass to the Process Automation job execution.
func (o GetAutomationActionsActionActionDataReferenceOutput) ProcessAutomationJobArguments() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutomationActionsActionActionDataReference) string { return v.ProcessAutomationJobArguments }).(pulumi.StringOutput)
}

// (Required for `processAutomation` action_type) The ID of the Process Automation job to execute.
func (o GetAutomationActionsActionActionDataReferenceOutput) ProcessAutomationJobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutomationActionsActionActionDataReference) string { return v.ProcessAutomationJobId }).(pulumi.StringOutput)
}

// (Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
func (o GetAutomationActionsActionActionDataReferenceOutput) ProcessAutomationNodeFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutomationActionsActionActionDataReference) string { return v.ProcessAutomationNodeFilter }).(pulumi.StringOutput)
}

// (Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.
func (o GetAutomationActionsActionActionDataReferenceOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v GetAutomationActionsActionActionDataReference) string { return v.Script }).(pulumi.StringOutput)
}

type GetAutomationActionsActionActionDataReferenceArrayOutput struct{ *pulumi.OutputState }

func (GetAutomationActionsActionActionDataReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAutomationActionsActionActionDataReference)(nil)).Elem()
}

func (o GetAutomationActionsActionActionDataReferenceArrayOutput) ToGetAutomationActionsActionActionDataReferenceArrayOutput() GetAutomationActionsActionActionDataReferenceArrayOutput {
	return o
}

func (o GetAutomationActionsActionActionDataReferenceArrayOutput) ToGetAutomationActionsActionActionDataReferenceArrayOutputWithContext(ctx context.Context) GetAutomationActionsActionActionDataReferenceArrayOutput {
	return o
}

func (o GetAutomationActionsActionActionDataReferenceArrayOutput) Index(i pulumi.IntInput) GetAutomationActionsActionActionDataReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAutomationActionsActionActionDataReference {
		return vs[0].([]GetAutomationActionsActionActionDataReference)[vs[1].(int)]
	}).(GetAutomationActionsActionActionDataReferenceOutput)
}

type GetEventOrchestrationIntegrationDetail struct {
	// ID of the integration
	Id         string                                            `pulumi:"id"`
	Label      string                                            `pulumi:"label"`
	Parameters []GetEventOrchestrationIntegrationDetailParameter `pulumi:"parameters"`
}

// GetEventOrchestrationIntegrationDetailInput is an input type that accepts GetEventOrchestrationIntegrationDetailArgs and GetEventOrchestrationIntegrationDetailOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationDetailInput` via:
//
//	GetEventOrchestrationIntegrationDetailArgs{...}
type GetEventOrchestrationIntegrationDetailInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationDetailOutput() GetEventOrchestrationIntegrationDetailOutput
	ToGetEventOrchestrationIntegrationDetailOutputWithContext(context.Context) GetEventOrchestrationIntegrationDetailOutput
}

type GetEventOrchestrationIntegrationDetailArgs struct {
	// ID of the integration
	Id         pulumi.StringInput                                        `pulumi:"id"`
	Label      pulumi.StringInput                                        `pulumi:"label"`
	Parameters GetEventOrchestrationIntegrationDetailParameterArrayInput `pulumi:"parameters"`
}

func (GetEventOrchestrationIntegrationDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationDetail)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationDetailArgs) ToGetEventOrchestrationIntegrationDetailOutput() GetEventOrchestrationIntegrationDetailOutput {
	return i.ToGetEventOrchestrationIntegrationDetailOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationDetailArgs) ToGetEventOrchestrationIntegrationDetailOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationDetailOutput)
}

// GetEventOrchestrationIntegrationDetailArrayInput is an input type that accepts GetEventOrchestrationIntegrationDetailArray and GetEventOrchestrationIntegrationDetailArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationDetailArrayInput` via:
//
//	GetEventOrchestrationIntegrationDetailArray{ GetEventOrchestrationIntegrationDetailArgs{...} }
type GetEventOrchestrationIntegrationDetailArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationDetailArrayOutput() GetEventOrchestrationIntegrationDetailArrayOutput
	ToGetEventOrchestrationIntegrationDetailArrayOutputWithContext(context.Context) GetEventOrchestrationIntegrationDetailArrayOutput
}

type GetEventOrchestrationIntegrationDetailArray []GetEventOrchestrationIntegrationDetailInput

func (GetEventOrchestrationIntegrationDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationDetail)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationDetailArray) ToGetEventOrchestrationIntegrationDetailArrayOutput() GetEventOrchestrationIntegrationDetailArrayOutput {
	return i.ToGetEventOrchestrationIntegrationDetailArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationDetailArray) ToGetEventOrchestrationIntegrationDetailArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationDetailArrayOutput)
}

type GetEventOrchestrationIntegrationDetailOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationDetail)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationDetailOutput) ToGetEventOrchestrationIntegrationDetailOutput() GetEventOrchestrationIntegrationDetailOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailOutput) ToGetEventOrchestrationIntegrationDetailOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailOutput {
	return o
}

// ID of the integration
func (o GetEventOrchestrationIntegrationDetailOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationDetail) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEventOrchestrationIntegrationDetailOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationDetail) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetEventOrchestrationIntegrationDetailOutput) Parameters() GetEventOrchestrationIntegrationDetailParameterArrayOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationDetail) []GetEventOrchestrationIntegrationDetailParameter {
		return v.Parameters
	}).(GetEventOrchestrationIntegrationDetailParameterArrayOutput)
}

type GetEventOrchestrationIntegrationDetailArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationDetail)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationDetailArrayOutput) ToGetEventOrchestrationIntegrationDetailArrayOutput() GetEventOrchestrationIntegrationDetailArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailArrayOutput) ToGetEventOrchestrationIntegrationDetailArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationIntegrationDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationIntegrationDetail {
		return vs[0].([]GetEventOrchestrationIntegrationDetail)[vs[1].(int)]
	}).(GetEventOrchestrationIntegrationDetailOutput)
}

type GetEventOrchestrationIntegrationDetailParameter struct {
	// Routing key that routes to this Orchestration.
	RoutingKey string `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type string `pulumi:"type"`
}

// GetEventOrchestrationIntegrationDetailParameterInput is an input type that accepts GetEventOrchestrationIntegrationDetailParameterArgs and GetEventOrchestrationIntegrationDetailParameterOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationDetailParameterInput` via:
//
//	GetEventOrchestrationIntegrationDetailParameterArgs{...}
type GetEventOrchestrationIntegrationDetailParameterInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationDetailParameterOutput() GetEventOrchestrationIntegrationDetailParameterOutput
	ToGetEventOrchestrationIntegrationDetailParameterOutputWithContext(context.Context) GetEventOrchestrationIntegrationDetailParameterOutput
}

type GetEventOrchestrationIntegrationDetailParameterArgs struct {
	// Routing key that routes to this Orchestration.
	RoutingKey pulumi.StringInput `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEventOrchestrationIntegrationDetailParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationDetailParameter)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationDetailParameterArgs) ToGetEventOrchestrationIntegrationDetailParameterOutput() GetEventOrchestrationIntegrationDetailParameterOutput {
	return i.ToGetEventOrchestrationIntegrationDetailParameterOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationDetailParameterArgs) ToGetEventOrchestrationIntegrationDetailParameterOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationDetailParameterOutput)
}

// GetEventOrchestrationIntegrationDetailParameterArrayInput is an input type that accepts GetEventOrchestrationIntegrationDetailParameterArray and GetEventOrchestrationIntegrationDetailParameterArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationDetailParameterArrayInput` via:
//
//	GetEventOrchestrationIntegrationDetailParameterArray{ GetEventOrchestrationIntegrationDetailParameterArgs{...} }
type GetEventOrchestrationIntegrationDetailParameterArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationDetailParameterArrayOutput() GetEventOrchestrationIntegrationDetailParameterArrayOutput
	ToGetEventOrchestrationIntegrationDetailParameterArrayOutputWithContext(context.Context) GetEventOrchestrationIntegrationDetailParameterArrayOutput
}

type GetEventOrchestrationIntegrationDetailParameterArray []GetEventOrchestrationIntegrationDetailParameterInput

func (GetEventOrchestrationIntegrationDetailParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationDetailParameter)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationDetailParameterArray) ToGetEventOrchestrationIntegrationDetailParameterArrayOutput() GetEventOrchestrationIntegrationDetailParameterArrayOutput {
	return i.ToGetEventOrchestrationIntegrationDetailParameterArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationDetailParameterArray) ToGetEventOrchestrationIntegrationDetailParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationDetailParameterArrayOutput)
}

type GetEventOrchestrationIntegrationDetailParameterOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationDetailParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationDetailParameter)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationDetailParameterOutput) ToGetEventOrchestrationIntegrationDetailParameterOutput() GetEventOrchestrationIntegrationDetailParameterOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailParameterOutput) ToGetEventOrchestrationIntegrationDetailParameterOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailParameterOutput {
	return o
}

// Routing key that routes to this Orchestration.
func (o GetEventOrchestrationIntegrationDetailParameterOutput) RoutingKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationDetailParameter) string { return v.RoutingKey }).(pulumi.StringOutput)
}

// Type of the routing key. `global` is the default type.
func (o GetEventOrchestrationIntegrationDetailParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationDetailParameter) string { return v.Type }).(pulumi.StringOutput)
}

type GetEventOrchestrationIntegrationDetailParameterArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationDetailParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationDetailParameter)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationDetailParameterArrayOutput) ToGetEventOrchestrationIntegrationDetailParameterArrayOutput() GetEventOrchestrationIntegrationDetailParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailParameterArrayOutput) ToGetEventOrchestrationIntegrationDetailParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationDetailParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationDetailParameterArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationIntegrationDetailParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationIntegrationDetailParameter {
		return vs[0].([]GetEventOrchestrationIntegrationDetailParameter)[vs[1].(int)]
	}).(GetEventOrchestrationIntegrationDetailParameterOutput)
}

type GetEventOrchestrationIntegrationParameter struct {
	// Routing key that routes to this Orchestration.
	RoutingKey string `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type string `pulumi:"type"`
}

// GetEventOrchestrationIntegrationParameterInput is an input type that accepts GetEventOrchestrationIntegrationParameterArgs and GetEventOrchestrationIntegrationParameterOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationParameterInput` via:
//
//	GetEventOrchestrationIntegrationParameterArgs{...}
type GetEventOrchestrationIntegrationParameterInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationIntegrationParameterOutput
	ToGetEventOrchestrationIntegrationParameterOutputWithContext(context.Context) GetEventOrchestrationIntegrationParameterOutput
}

type GetEventOrchestrationIntegrationParameterArgs struct {
	// Routing key that routes to this Orchestration.
	RoutingKey pulumi.StringInput `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEventOrchestrationIntegrationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationParameterArgs) ToGetEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationIntegrationParameterOutput {
	return i.ToGetEventOrchestrationIntegrationParameterOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationParameterArgs) ToGetEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationParameterOutput)
}

// GetEventOrchestrationIntegrationParameterArrayInput is an input type that accepts GetEventOrchestrationIntegrationParameterArray and GetEventOrchestrationIntegrationParameterArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationIntegrationParameterArrayInput` via:
//
//	GetEventOrchestrationIntegrationParameterArray{ GetEventOrchestrationIntegrationParameterArgs{...} }
type GetEventOrchestrationIntegrationParameterArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationIntegrationParameterArrayOutput
	ToGetEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Context) GetEventOrchestrationIntegrationParameterArrayOutput
}

type GetEventOrchestrationIntegrationParameterArray []GetEventOrchestrationIntegrationParameterInput

func (GetEventOrchestrationIntegrationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i GetEventOrchestrationIntegrationParameterArray) ToGetEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationIntegrationParameterArrayOutput {
	return i.ToGetEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationIntegrationParameterArray) ToGetEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationIntegrationParameterArrayOutput)
}

type GetEventOrchestrationIntegrationParameterOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationParameterOutput) ToGetEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationIntegrationParameterOutput {
	return o
}

func (o GetEventOrchestrationIntegrationParameterOutput) ToGetEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationParameterOutput {
	return o
}

// Routing key that routes to this Orchestration.
func (o GetEventOrchestrationIntegrationParameterOutput) RoutingKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationParameter) string { return v.RoutingKey }).(pulumi.StringOutput)
}

// Type of the routing key. `global` is the default type.
func (o GetEventOrchestrationIntegrationParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationIntegrationParameter) string { return v.Type }).(pulumi.StringOutput)
}

type GetEventOrchestrationIntegrationParameterArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationIntegrationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o GetEventOrchestrationIntegrationParameterArrayOutput) ToGetEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationParameterArrayOutput) ToGetEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationIntegrationParameterArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationIntegrationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationIntegrationParameter {
		return vs[0].([]GetEventOrchestrationIntegrationParameter)[vs[1].(int)]
	}).(GetEventOrchestrationIntegrationParameterOutput)
}

type GetEventOrchestrationsEventOrchestration struct {
	// ID of the integration
	Id string `pulumi:"id"`
	// An integration for the Event Orchestration.
	Integrations []GetEventOrchestrationsEventOrchestrationIntegration `pulumi:"integrations"`
	// The name of the found Event Orchestration.
	Name string `pulumi:"name"`
}

// GetEventOrchestrationsEventOrchestrationInput is an input type that accepts GetEventOrchestrationsEventOrchestrationArgs and GetEventOrchestrationsEventOrchestrationOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationInput` via:
//
//	GetEventOrchestrationsEventOrchestrationArgs{...}
type GetEventOrchestrationsEventOrchestrationInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationOutput() GetEventOrchestrationsEventOrchestrationOutput
	ToGetEventOrchestrationsEventOrchestrationOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationOutput
}

type GetEventOrchestrationsEventOrchestrationArgs struct {
	// ID of the integration
	Id pulumi.StringInput `pulumi:"id"`
	// An integration for the Event Orchestration.
	Integrations GetEventOrchestrationsEventOrchestrationIntegrationArrayInput `pulumi:"integrations"`
	// The name of the found Event Orchestration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetEventOrchestrationsEventOrchestrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestration)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationArgs) ToGetEventOrchestrationsEventOrchestrationOutput() GetEventOrchestrationsEventOrchestrationOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationArgs) ToGetEventOrchestrationsEventOrchestrationOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationOutput)
}

// GetEventOrchestrationsEventOrchestrationArrayInput is an input type that accepts GetEventOrchestrationsEventOrchestrationArray and GetEventOrchestrationsEventOrchestrationArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationArrayInput` via:
//
//	GetEventOrchestrationsEventOrchestrationArray{ GetEventOrchestrationsEventOrchestrationArgs{...} }
type GetEventOrchestrationsEventOrchestrationArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationArrayOutput() GetEventOrchestrationsEventOrchestrationArrayOutput
	ToGetEventOrchestrationsEventOrchestrationArrayOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationArrayOutput
}

type GetEventOrchestrationsEventOrchestrationArray []GetEventOrchestrationsEventOrchestrationInput

func (GetEventOrchestrationsEventOrchestrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestration)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationArray) ToGetEventOrchestrationsEventOrchestrationArrayOutput() GetEventOrchestrationsEventOrchestrationArrayOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationArray) ToGetEventOrchestrationsEventOrchestrationArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationArrayOutput)
}

type GetEventOrchestrationsEventOrchestrationOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestration)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationOutput) ToGetEventOrchestrationsEventOrchestrationOutput() GetEventOrchestrationsEventOrchestrationOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationOutput) ToGetEventOrchestrationsEventOrchestrationOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationOutput {
	return o
}

// ID of the integration
func (o GetEventOrchestrationsEventOrchestrationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestration) string { return v.Id }).(pulumi.StringOutput)
}

// An integration for the Event Orchestration.
func (o GetEventOrchestrationsEventOrchestrationOutput) Integrations() GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestration) []GetEventOrchestrationsEventOrchestrationIntegration {
		return v.Integrations
	}).(GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput)
}

// The name of the found Event Orchestration.
func (o GetEventOrchestrationsEventOrchestrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestration) string { return v.Name }).(pulumi.StringOutput)
}

type GetEventOrchestrationsEventOrchestrationArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestration)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationArrayOutput) ToGetEventOrchestrationsEventOrchestrationArrayOutput() GetEventOrchestrationsEventOrchestrationArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationArrayOutput) ToGetEventOrchestrationsEventOrchestrationArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationsEventOrchestrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationsEventOrchestration {
		return vs[0].([]GetEventOrchestrationsEventOrchestration)[vs[1].(int)]
	}).(GetEventOrchestrationsEventOrchestrationOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegration struct {
	// ID of the integration
	Id         string                                                         `pulumi:"id"`
	Label      string                                                         `pulumi:"label"`
	Parameters []GetEventOrchestrationsEventOrchestrationIntegrationParameter `pulumi:"parameters"`
}

// GetEventOrchestrationsEventOrchestrationIntegrationInput is an input type that accepts GetEventOrchestrationsEventOrchestrationIntegrationArgs and GetEventOrchestrationsEventOrchestrationIntegrationOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationIntegrationInput` via:
//
//	GetEventOrchestrationsEventOrchestrationIntegrationArgs{...}
type GetEventOrchestrationsEventOrchestrationIntegrationInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationIntegrationOutput() GetEventOrchestrationsEventOrchestrationIntegrationOutput
	ToGetEventOrchestrationsEventOrchestrationIntegrationOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationIntegrationOutput
}

type GetEventOrchestrationsEventOrchestrationIntegrationArgs struct {
	// ID of the integration
	Id         pulumi.StringInput                                                     `pulumi:"id"`
	Label      pulumi.StringInput                                                     `pulumi:"label"`
	Parameters GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayInput `pulumi:"parameters"`
}

func (GetEventOrchestrationsEventOrchestrationIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegration)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationArgs) ToGetEventOrchestrationsEventOrchestrationIntegrationOutput() GetEventOrchestrationsEventOrchestrationIntegrationOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationIntegrationOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationArgs) ToGetEventOrchestrationsEventOrchestrationIntegrationOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationIntegrationOutput)
}

// GetEventOrchestrationsEventOrchestrationIntegrationArrayInput is an input type that accepts GetEventOrchestrationsEventOrchestrationIntegrationArray and GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationIntegrationArrayInput` via:
//
//	GetEventOrchestrationsEventOrchestrationIntegrationArray{ GetEventOrchestrationsEventOrchestrationIntegrationArgs{...} }
type GetEventOrchestrationsEventOrchestrationIntegrationArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput
	ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput
}

type GetEventOrchestrationsEventOrchestrationIntegrationArray []GetEventOrchestrationsEventOrchestrationIntegrationInput

func (GetEventOrchestrationsEventOrchestrationIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestrationIntegration)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationArray) ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationArray) ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegrationOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegration)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationOutput() GetEventOrchestrationsEventOrchestrationIntegrationOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationOutput {
	return o
}

// ID of the integration
func (o GetEventOrchestrationsEventOrchestrationIntegrationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestrationIntegration) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestrationIntegration) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationOutput) Parameters() GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestrationIntegration) []GetEventOrchestrationsEventOrchestrationIntegrationParameter {
		return v.Parameters
	}).(GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestrationIntegration)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationsEventOrchestrationIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationsEventOrchestrationIntegration {
		return vs[0].([]GetEventOrchestrationsEventOrchestrationIntegration)[vs[1].(int)]
	}).(GetEventOrchestrationsEventOrchestrationIntegrationOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegrationParameter struct {
	// Routing key that routes to this Orchestration.
	RoutingKey string `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type string `pulumi:"type"`
}

// GetEventOrchestrationsEventOrchestrationIntegrationParameterInput is an input type that accepts GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs and GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationIntegrationParameterInput` via:
//
//	GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs{...}
type GetEventOrchestrationsEventOrchestrationIntegrationParameterInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput
	ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput
}

type GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs struct {
	// Routing key that routes to this Orchestration.
	RoutingKey pulumi.StringInput `pulumi:"routingKey"`
	// Type of the routing key. `global` is the default type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput)
}

// GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayInput is an input type that accepts GetEventOrchestrationsEventOrchestrationIntegrationParameterArray and GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput values.
// You can construct a concrete instance of `GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayInput` via:
//
//	GetEventOrchestrationsEventOrchestrationIntegrationParameterArray{ GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs{...} }
type GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayInput interface {
	pulumi.Input

	ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput
	ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput
}

type GetEventOrchestrationsEventOrchestrationIntegrationParameterArray []GetEventOrchestrationsEventOrchestrationIntegrationParameterInput

func (GetEventOrchestrationsEventOrchestrationIntegrationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationParameterArray) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput {
	return i.ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutputWithContext(context.Background())
}

func (i GetEventOrchestrationsEventOrchestrationIntegrationParameterArray) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput {
	return o
}

// Routing key that routes to this Orchestration.
func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput) RoutingKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestrationIntegrationParameter) string { return v.RoutingKey }).(pulumi.StringOutput)
}

// Type of the routing key. `global` is the default type.
func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventOrchestrationsEventOrchestrationIntegrationParameter) string { return v.Type }).(pulumi.StringOutput)
}

type GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput struct{ *pulumi.OutputState }

func (GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEventOrchestrationsEventOrchestrationIntegrationParameter)(nil)).Elem()
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput() GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput) ToGetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutputWithContext(ctx context.Context) GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput {
	return o
}

func (o GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput) Index(i pulumi.IntInput) GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEventOrchestrationsEventOrchestrationIntegrationParameter {
		return vs[0].([]GetEventOrchestrationsEventOrchestrationIntegrationParameter)[vs[1].(int)]
	}).(GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput)
}

type GetLicensesLicense struct {
	// Available allocations to assign to users
	AllocationsAvailable int `pulumi:"allocationsAvailable"`
	// The number of allocations already assigned to users
	CurrentValue int `pulumi:"currentValue"`
	// Description of the license
	Description string `pulumi:"description"`
	HtmlUrl     string `pulumi:"htmlUrl"`
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id string `pulumi:"id"`
	// Name of the license
	Name string `pulumi:"name"`
	// The role group for the license that determines the available `validRoles`
	RoleGroup string `pulumi:"roleGroup"`
	Self      string `pulumi:"self"`
	// Summary of the license
	Summary string `pulumi:"summary"`
	Type    string `pulumi:"type"`
	// List of allowed roles that may be assigned to a user with this license
	ValidRoles []string `pulumi:"validRoles"`
}

// GetLicensesLicenseInput is an input type that accepts GetLicensesLicenseArgs and GetLicensesLicenseOutput values.
// You can construct a concrete instance of `GetLicensesLicenseInput` via:
//
//	GetLicensesLicenseArgs{...}
type GetLicensesLicenseInput interface {
	pulumi.Input

	ToGetLicensesLicenseOutput() GetLicensesLicenseOutput
	ToGetLicensesLicenseOutputWithContext(context.Context) GetLicensesLicenseOutput
}

type GetLicensesLicenseArgs struct {
	// Available allocations to assign to users
	AllocationsAvailable pulumi.IntInput `pulumi:"allocationsAvailable"`
	// The number of allocations already assigned to users
	CurrentValue pulumi.IntInput `pulumi:"currentValue"`
	// Description of the license
	Description pulumi.StringInput `pulumi:"description"`
	HtmlUrl     pulumi.StringInput `pulumi:"htmlUrl"`
	// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the license
	Name pulumi.StringInput `pulumi:"name"`
	// The role group for the license that determines the available `validRoles`
	RoleGroup pulumi.StringInput `pulumi:"roleGroup"`
	Self      pulumi.StringInput `pulumi:"self"`
	// Summary of the license
	Summary pulumi.StringInput `pulumi:"summary"`
	Type    pulumi.StringInput `pulumi:"type"`
	// List of allowed roles that may be assigned to a user with this license
	ValidRoles pulumi.StringArrayInput `pulumi:"validRoles"`
}

func (GetLicensesLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesLicense)(nil)).Elem()
}

func (i GetLicensesLicenseArgs) ToGetLicensesLicenseOutput() GetLicensesLicenseOutput {
	return i.ToGetLicensesLicenseOutputWithContext(context.Background())
}

func (i GetLicensesLicenseArgs) ToGetLicensesLicenseOutputWithContext(ctx context.Context) GetLicensesLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicensesLicenseOutput)
}

// GetLicensesLicenseArrayInput is an input type that accepts GetLicensesLicenseArray and GetLicensesLicenseArrayOutput values.
// You can construct a concrete instance of `GetLicensesLicenseArrayInput` via:
//
//	GetLicensesLicenseArray{ GetLicensesLicenseArgs{...} }
type GetLicensesLicenseArrayInput interface {
	pulumi.Input

	ToGetLicensesLicenseArrayOutput() GetLicensesLicenseArrayOutput
	ToGetLicensesLicenseArrayOutputWithContext(context.Context) GetLicensesLicenseArrayOutput
}

type GetLicensesLicenseArray []GetLicensesLicenseInput

func (GetLicensesLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicensesLicense)(nil)).Elem()
}

func (i GetLicensesLicenseArray) ToGetLicensesLicenseArrayOutput() GetLicensesLicenseArrayOutput {
	return i.ToGetLicensesLicenseArrayOutputWithContext(context.Background())
}

func (i GetLicensesLicenseArray) ToGetLicensesLicenseArrayOutputWithContext(ctx context.Context) GetLicensesLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicensesLicenseArrayOutput)
}

type GetLicensesLicenseOutput struct{ *pulumi.OutputState }

func (GetLicensesLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicensesLicense)(nil)).Elem()
}

func (o GetLicensesLicenseOutput) ToGetLicensesLicenseOutput() GetLicensesLicenseOutput {
	return o
}

func (o GetLicensesLicenseOutput) ToGetLicensesLicenseOutputWithContext(ctx context.Context) GetLicensesLicenseOutput {
	return o
}

// Available allocations to assign to users
func (o GetLicensesLicenseOutput) AllocationsAvailable() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicensesLicense) int { return v.AllocationsAvailable }).(pulumi.IntOutput)
}

// The number of allocations already assigned to users
func (o GetLicensesLicenseOutput) CurrentValue() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicensesLicense) int { return v.CurrentValue }).(pulumi.IntOutput)
}

// Description of the license
func (o GetLicensesLicenseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetLicensesLicenseOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// Allows to override the default behavior for setting the `id` attribute that is required for data sources.
func (o GetLicensesLicenseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the license
func (o GetLicensesLicenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Name }).(pulumi.StringOutput)
}

// The role group for the license that determines the available `validRoles`
func (o GetLicensesLicenseOutput) RoleGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.RoleGroup }).(pulumi.StringOutput)
}

func (o GetLicensesLicenseOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Self }).(pulumi.StringOutput)
}

// Summary of the license
func (o GetLicensesLicenseOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Summary }).(pulumi.StringOutput)
}

func (o GetLicensesLicenseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicensesLicense) string { return v.Type }).(pulumi.StringOutput)
}

// List of allowed roles that may be assigned to a user with this license
func (o GetLicensesLicenseOutput) ValidRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLicensesLicense) []string { return v.ValidRoles }).(pulumi.StringArrayOutput)
}

type GetLicensesLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetLicensesLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicensesLicense)(nil)).Elem()
}

func (o GetLicensesLicenseArrayOutput) ToGetLicensesLicenseArrayOutput() GetLicensesLicenseArrayOutput {
	return o
}

func (o GetLicensesLicenseArrayOutput) ToGetLicensesLicenseArrayOutputWithContext(ctx context.Context) GetLicensesLicenseArrayOutput {
	return o
}

func (o GetLicensesLicenseArrayOutput) Index(i pulumi.IntInput) GetLicensesLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLicensesLicense {
		return vs[0].([]GetLicensesLicense)[vs[1].(int)]
	}).(GetLicensesLicenseOutput)
}

type GetServiceTeam struct {
	// The ID of the found service.
	Id string `pulumi:"id"`
	// The service name to use to find a service in the PagerDuty API.
	Name string `pulumi:"name"`
}

// GetServiceTeamInput is an input type that accepts GetServiceTeamArgs and GetServiceTeamOutput values.
// You can construct a concrete instance of `GetServiceTeamInput` via:
//
//	GetServiceTeamArgs{...}
type GetServiceTeamInput interface {
	pulumi.Input

	ToGetServiceTeamOutput() GetServiceTeamOutput
	ToGetServiceTeamOutputWithContext(context.Context) GetServiceTeamOutput
}

type GetServiceTeamArgs struct {
	// The ID of the found service.
	Id pulumi.StringInput `pulumi:"id"`
	// The service name to use to find a service in the PagerDuty API.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServiceTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTeam)(nil)).Elem()
}

func (i GetServiceTeamArgs) ToGetServiceTeamOutput() GetServiceTeamOutput {
	return i.ToGetServiceTeamOutputWithContext(context.Background())
}

func (i GetServiceTeamArgs) ToGetServiceTeamOutputWithContext(ctx context.Context) GetServiceTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTeamOutput)
}

// GetServiceTeamArrayInput is an input type that accepts GetServiceTeamArray and GetServiceTeamArrayOutput values.
// You can construct a concrete instance of `GetServiceTeamArrayInput` via:
//
//	GetServiceTeamArray{ GetServiceTeamArgs{...} }
type GetServiceTeamArrayInput interface {
	pulumi.Input

	ToGetServiceTeamArrayOutput() GetServiceTeamArrayOutput
	ToGetServiceTeamArrayOutputWithContext(context.Context) GetServiceTeamArrayOutput
}

type GetServiceTeamArray []GetServiceTeamInput

func (GetServiceTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTeam)(nil)).Elem()
}

func (i GetServiceTeamArray) ToGetServiceTeamArrayOutput() GetServiceTeamArrayOutput {
	return i.ToGetServiceTeamArrayOutputWithContext(context.Background())
}

func (i GetServiceTeamArray) ToGetServiceTeamArrayOutputWithContext(ctx context.Context) GetServiceTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTeamArrayOutput)
}

type GetServiceTeamOutput struct{ *pulumi.OutputState }

func (GetServiceTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTeam)(nil)).Elem()
}

func (o GetServiceTeamOutput) ToGetServiceTeamOutput() GetServiceTeamOutput {
	return o
}

func (o GetServiceTeamOutput) ToGetServiceTeamOutputWithContext(ctx context.Context) GetServiceTeamOutput {
	return o
}

// The ID of the found service.
func (o GetServiceTeamOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTeam) string { return v.Id }).(pulumi.StringOutput)
}

// The service name to use to find a service in the PagerDuty API.
func (o GetServiceTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTeam) string { return v.Name }).(pulumi.StringOutput)
}

type GetServiceTeamArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTeam)(nil)).Elem()
}

func (o GetServiceTeamArrayOutput) ToGetServiceTeamArrayOutput() GetServiceTeamArrayOutput {
	return o
}

func (o GetServiceTeamArrayOutput) ToGetServiceTeamArrayOutputWithContext(ctx context.Context) GetServiceTeamArrayOutput {
	return o
}

func (o GetServiceTeamArrayOutput) Index(i pulumi.IntInput) GetServiceTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTeam {
		return vs[0].([]GetServiceTeam)[vs[1].(int)]
	}).(GetServiceTeamOutput)
}

type GetUsersUser struct {
	// The email to use to find a user in the PagerDuty API.
	Email string `pulumi:"email"`
	// The ID of the found user.
	Id string `pulumi:"id"`
	// The short name of the found user.
	Name string `pulumi:"name"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The email to use to find a user in the PagerDuty API.
	Email pulumi.StringInput `pulumi:"email"`
	// The ID of the found user.
	Id pulumi.StringInput `pulumi:"id"`
	// The short name of the found user.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The email to use to find a user in the PagerDuty API.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// The ID of the found user.
func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// The short name of the found user.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationActionsActionActionDataReferenceInput)(nil)).Elem(), AutomationActionsActionActionDataReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationActionsActionActionDataReferencePtrInput)(nil)).Elem(), AutomationActionsActionActionDataReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleInput)(nil)).Elem(), EscalationPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleArrayInput)(nil)).Elem(), EscalationPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleEscalationRuleAssignmentStrategyInput)(nil)).Elem(), EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrInput)(nil)).Elem(), EscalationPolicyRuleEscalationRuleAssignmentStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleTargetInput)(nil)).Elem(), EscalationPolicyRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyRuleTargetArrayInput)(nil)).Elem(), EscalationPolicyRuleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllPtrInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsPtrInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionParameterInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsExtractionInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsVariableInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalCatchAllActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationGlobalCatchAllActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetInput)(nil)).Elem(), EventOrchestrationGlobalSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionParameterInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsExtractionInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsVariableInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleConditionInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationGlobalSetRuleConditionArrayInput)(nil)).Elem(), EventOrchestrationGlobalSetRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationIntegrationTypeInput)(nil)).Elem(), EventOrchestrationIntegrationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationIntegrationTypeArrayInput)(nil)).Elem(), EventOrchestrationIntegrationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationIntegrationParameterInput)(nil)).Elem(), EventOrchestrationIntegrationParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationIntegrationParameterArrayInput)(nil)).Elem(), EventOrchestrationIntegrationParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterCatchAllInput)(nil)).Elem(), EventOrchestrationRouterCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterCatchAllPtrInput)(nil)).Elem(), EventOrchestrationRouterCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterCatchAllActionsInput)(nil)).Elem(), EventOrchestrationRouterCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterCatchAllActionsPtrInput)(nil)).Elem(), EventOrchestrationRouterCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetInput)(nil)).Elem(), EventOrchestrationRouterSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetPtrInput)(nil)).Elem(), EventOrchestrationRouterSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetRuleInput)(nil)).Elem(), EventOrchestrationRouterSetRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetRuleArrayInput)(nil)).Elem(), EventOrchestrationRouterSetRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetRuleActionsInput)(nil)).Elem(), EventOrchestrationRouterSetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetRuleConditionInput)(nil)).Elem(), EventOrchestrationRouterSetRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationRouterSetRuleConditionArrayInput)(nil)).Elem(), EventOrchestrationRouterSetRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllInput)(nil)).Elem(), EventOrchestrationServiceCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllPtrInput)(nil)).Elem(), EventOrchestrationServiceCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsPtrInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionHeaderInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionParameterInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsAutomationActionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsExtractionInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsVariableInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceCatchAllActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationServiceCatchAllActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetInput)(nil)).Elem(), EventOrchestrationServiceSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetArrayInput)(nil)).Elem(), EventOrchestrationServiceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleInput)(nil)).Elem(), EventOrchestrationServiceSetRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionHeaderInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionParameterInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsAutomationActionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsExtractionInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsVariableInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleConditionInput)(nil)).Elem(), EventOrchestrationServiceSetRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationServiceSetRuleConditionArrayInput)(nil)).Elem(), EventOrchestrationServiceSetRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllPtrInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsPtrInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsExtractionInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsVariableInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedCatchAllActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationUnroutedCatchAllActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetInput)(nil)).Elem(), EventOrchestrationUnroutedSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetArrayInput)(nil)).Elem(), EventOrchestrationUnroutedSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleArrayInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsExtractionInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsExtractionArrayInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsVariableInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleActionsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleActionsVariableArrayInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleActionsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleConditionInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventOrchestrationUnroutedSetRuleConditionArrayInput)(nil)).Elem(), EventOrchestrationUnroutedSetRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInput)(nil)).Elem(), IncidentWorkflowStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepArrayInput)(nil)).Elem(), IncidentWorkflowStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputArrayInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepArrayInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepInputTypeInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputStepInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInlineStepsInputStepInputTypeArrayInput)(nil)).Elem(), IncidentWorkflowStepInlineStepsInputStepInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInputTypeInput)(nil)).Elem(), IncidentWorkflowStepInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentWorkflowStepInputTypeArrayInput)(nil)).Elem(), IncidentWorkflowStepInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderUseAppOauthScopedTokenInput)(nil)).Elem(), ProviderUseAppOauthScopedTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderUseAppOauthScopedTokenPtrInput)(nil)).Elem(), ProviderUseAppOauthScopedTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderInput)(nil)).Elem(), ResponsePlayResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderArrayInput)(nil)).Elem(), ResponsePlayResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderEscalationRuleInput)(nil)).Elem(), ResponsePlayResponderEscalationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderEscalationRuleArrayInput)(nil)).Elem(), ResponsePlayResponderEscalationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderEscalationRuleTargetInput)(nil)).Elem(), ResponsePlayResponderEscalationRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderEscalationRuleTargetArrayInput)(nil)).Elem(), ResponsePlayResponderEscalationRuleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderServiceInput)(nil)).Elem(), ResponsePlayResponderServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderServiceArrayInput)(nil)).Elem(), ResponsePlayResponderServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderTeamInput)(nil)).Elem(), ResponsePlayResponderTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlayResponderTeamArrayInput)(nil)).Elem(), ResponsePlayResponderTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlaySubscriberInput)(nil)).Elem(), ResponsePlaySubscriberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePlaySubscriberArrayInput)(nil)).Elem(), ResponsePlaySubscriberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsInput)(nil)).Elem(), RulesetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsPtrInput)(nil)).Elem(), RulesetRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsAnnotateInput)(nil)).Elem(), RulesetRuleActionsAnnotateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsAnnotateArrayInput)(nil)).Elem(), RulesetRuleActionsAnnotateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsEventActionInput)(nil)).Elem(), RulesetRuleActionsEventActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsEventActionArrayInput)(nil)).Elem(), RulesetRuleActionsEventActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsExtractionInput)(nil)).Elem(), RulesetRuleActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsExtractionArrayInput)(nil)).Elem(), RulesetRuleActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsPriorityInput)(nil)).Elem(), RulesetRuleActionsPriorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsPriorityArrayInput)(nil)).Elem(), RulesetRuleActionsPriorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsRouteInput)(nil)).Elem(), RulesetRuleActionsRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsRouteArrayInput)(nil)).Elem(), RulesetRuleActionsRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSeverityInput)(nil)).Elem(), RulesetRuleActionsSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSeverityArrayInput)(nil)).Elem(), RulesetRuleActionsSeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSuppressInput)(nil)).Elem(), RulesetRuleActionsSuppressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSuppressArrayInput)(nil)).Elem(), RulesetRuleActionsSuppressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSuspendInput)(nil)).Elem(), RulesetRuleActionsSuspendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleActionsSuspendArrayInput)(nil)).Elem(), RulesetRuleActionsSuspendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsInput)(nil)).Elem(), RulesetRuleConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsPtrInput)(nil)).Elem(), RulesetRuleConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsSubconditionInput)(nil)).Elem(), RulesetRuleConditionsSubconditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsSubconditionArrayInput)(nil)).Elem(), RulesetRuleConditionsSubconditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsSubconditionParameterInput)(nil)).Elem(), RulesetRuleConditionsSubconditionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleConditionsSubconditionParameterArrayInput)(nil)).Elem(), RulesetRuleConditionsSubconditionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFrameInput)(nil)).Elem(), RulesetRuleTimeFrameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFramePtrInput)(nil)).Elem(), RulesetRuleTimeFrameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFrameActiveBetweenInput)(nil)).Elem(), RulesetRuleTimeFrameActiveBetweenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFrameActiveBetweenArrayInput)(nil)).Elem(), RulesetRuleTimeFrameActiveBetweenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFrameScheduledWeeklyInput)(nil)).Elem(), RulesetRuleTimeFrameScheduledWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleTimeFrameScheduledWeeklyArrayInput)(nil)).Elem(), RulesetRuleTimeFrameScheduledWeeklyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleVariableInput)(nil)).Elem(), RulesetRuleVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleVariableArrayInput)(nil)).Elem(), RulesetRuleVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleVariableParameterInput)(nil)).Elem(), RulesetRuleVariableParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetRuleVariableParameterArrayInput)(nil)).Elem(), RulesetRuleVariableParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetTeamInput)(nil)).Elem(), RulesetTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetTeamPtrInput)(nil)).Elem(), RulesetTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleFinalScheduleInput)(nil)).Elem(), ScheduleFinalScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleFinalScheduleArrayInput)(nil)).Elem(), ScheduleFinalScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLayerInput)(nil)).Elem(), ScheduleLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLayerArrayInput)(nil)).Elem(), ScheduleLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLayerRestrictionInput)(nil)).Elem(), ScheduleLayerRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLayerRestrictionArrayInput)(nil)).Elem(), ScheduleLayerRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlertGroupingParametersInput)(nil)).Elem(), ServiceAlertGroupingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlertGroupingParametersPtrInput)(nil)).Elem(), ServiceAlertGroupingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlertGroupingParametersConfigInput)(nil)).Elem(), ServiceAlertGroupingParametersConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAlertGroupingParametersConfigPtrInput)(nil)).Elem(), ServiceAlertGroupingParametersConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAutoPauseNotificationsParametersInput)(nil)).Elem(), ServiceAutoPauseNotificationsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAutoPauseNotificationsParametersPtrInput)(nil)).Elem(), ServiceAutoPauseNotificationsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencyInput)(nil)).Elem(), ServiceDependencyDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencyPtrInput)(nil)).Elem(), ServiceDependencyDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencyDependentServiceInput)(nil)).Elem(), ServiceDependencyDependencyDependentServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencyDependentServiceArrayInput)(nil)).Elem(), ServiceDependencyDependencyDependentServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencySupportingServiceInput)(nil)).Elem(), ServiceDependencyDependencySupportingServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDependencyDependencySupportingServiceArrayInput)(nil)).Elem(), ServiceDependencyDependencySupportingServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsInput)(nil)).Elem(), ServiceEventRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsPtrInput)(nil)).Elem(), ServiceEventRuleActionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsAnnotateInput)(nil)).Elem(), ServiceEventRuleActionsAnnotateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsAnnotateArrayInput)(nil)).Elem(), ServiceEventRuleActionsAnnotateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsEventActionInput)(nil)).Elem(), ServiceEventRuleActionsEventActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsEventActionArrayInput)(nil)).Elem(), ServiceEventRuleActionsEventActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsExtractionInput)(nil)).Elem(), ServiceEventRuleActionsExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsExtractionArrayInput)(nil)).Elem(), ServiceEventRuleActionsExtractionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsPriorityInput)(nil)).Elem(), ServiceEventRuleActionsPriorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsPriorityArrayInput)(nil)).Elem(), ServiceEventRuleActionsPriorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSeverityInput)(nil)).Elem(), ServiceEventRuleActionsSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSeverityArrayInput)(nil)).Elem(), ServiceEventRuleActionsSeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSuppressInput)(nil)).Elem(), ServiceEventRuleActionsSuppressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSuppressArrayInput)(nil)).Elem(), ServiceEventRuleActionsSuppressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSuspendInput)(nil)).Elem(), ServiceEventRuleActionsSuspendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleActionsSuspendArrayInput)(nil)).Elem(), ServiceEventRuleActionsSuspendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsInput)(nil)).Elem(), ServiceEventRuleConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsPtrInput)(nil)).Elem(), ServiceEventRuleConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsSubconditionInput)(nil)).Elem(), ServiceEventRuleConditionsSubconditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsSubconditionArrayInput)(nil)).Elem(), ServiceEventRuleConditionsSubconditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsSubconditionParameterInput)(nil)).Elem(), ServiceEventRuleConditionsSubconditionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleConditionsSubconditionParameterArrayInput)(nil)).Elem(), ServiceEventRuleConditionsSubconditionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFrameInput)(nil)).Elem(), ServiceEventRuleTimeFrameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFramePtrInput)(nil)).Elem(), ServiceEventRuleTimeFrameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFrameActiveBetweenInput)(nil)).Elem(), ServiceEventRuleTimeFrameActiveBetweenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFrameActiveBetweenArrayInput)(nil)).Elem(), ServiceEventRuleTimeFrameActiveBetweenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFrameScheduledWeeklyInput)(nil)).Elem(), ServiceEventRuleTimeFrameScheduledWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleTimeFrameScheduledWeeklyArrayInput)(nil)).Elem(), ServiceEventRuleTimeFrameScheduledWeeklyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleVariableInput)(nil)).Elem(), ServiceEventRuleVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleVariableArrayInput)(nil)).Elem(), ServiceEventRuleVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleVariableParameterInput)(nil)).Elem(), ServiceEventRuleVariableParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleVariableParameterArrayInput)(nil)).Elem(), ServiceEventRuleVariableParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRuleInput)(nil)).Elem(), ServiceIncidentUrgencyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRulePtrInput)(nil)).Elem(), ServiceIncidentUrgencyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRuleDuringSupportHoursInput)(nil)).Elem(), ServiceIncidentUrgencyRuleDuringSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRuleDuringSupportHoursPtrInput)(nil)).Elem(), ServiceIncidentUrgencyRuleDuringSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRuleOutsideSupportHoursInput)(nil)).Elem(), ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentUrgencyRuleOutsideSupportHoursPtrInput)(nil)).Elem(), ServiceIncidentUrgencyRuleOutsideSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailFilterInput)(nil)).Elem(), ServiceIntegrationEmailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailFilterArrayInput)(nil)).Elem(), ServiceIntegrationEmailFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserInput)(nil)).Elem(), ServiceIntegrationEmailParserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserArrayInput)(nil)).Elem(), ServiceIntegrationEmailParserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicateInput)(nil)).Elem(), ServiceIntegrationEmailParserMatchPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicateInput)(nil)).Elem(), ServiceIntegrationEmailParserMatchPredicatePredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicateArrayInput)(nil)).Elem(), ServiceIntegrationEmailParserMatchPredicatePredicateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicatePredicateInput)(nil)).Elem(), ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayInput)(nil)).Elem(), ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserValueExtractorInput)(nil)).Elem(), ServiceIntegrationEmailParserValueExtractorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIntegrationEmailParserValueExtractorArrayInput)(nil)).Elem(), ServiceIntegrationEmailParserValueExtractorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceScheduledActionInput)(nil)).Elem(), ServiceScheduledActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceScheduledActionArrayInput)(nil)).Elem(), ServiceScheduledActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceScheduledActionAtInput)(nil)).Elem(), ServiceScheduledActionAtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceScheduledActionAtArrayInput)(nil)).Elem(), ServiceScheduledActionAtArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSupportHoursInput)(nil)).Elem(), ServiceSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSupportHoursPtrInput)(nil)).Elem(), ServiceSupportHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackConnectionConfigInput)(nil)).Elem(), SlackConnectionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackConnectionConfigArrayInput)(nil)).Elem(), SlackConnectionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionDeliveryMethodInput)(nil)).Elem(), WebhookSubscriptionDeliveryMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionDeliveryMethodArrayInput)(nil)).Elem(), WebhookSubscriptionDeliveryMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionDeliveryMethodCustomHeaderInput)(nil)).Elem(), WebhookSubscriptionDeliveryMethodCustomHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionDeliveryMethodCustomHeaderArrayInput)(nil)).Elem(), WebhookSubscriptionDeliveryMethodCustomHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionFilterInput)(nil)).Elem(), WebhookSubscriptionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSubscriptionFilterArrayInput)(nil)).Elem(), WebhookSubscriptionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAutomationActionsActionActionDataReferenceInput)(nil)).Elem(), GetAutomationActionsActionActionDataReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAutomationActionsActionActionDataReferenceArrayInput)(nil)).Elem(), GetAutomationActionsActionActionDataReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationDetailInput)(nil)).Elem(), GetEventOrchestrationIntegrationDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationDetailArrayInput)(nil)).Elem(), GetEventOrchestrationIntegrationDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationDetailParameterInput)(nil)).Elem(), GetEventOrchestrationIntegrationDetailParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationDetailParameterArrayInput)(nil)).Elem(), GetEventOrchestrationIntegrationDetailParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationParameterInput)(nil)).Elem(), GetEventOrchestrationIntegrationParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationIntegrationParameterArrayInput)(nil)).Elem(), GetEventOrchestrationIntegrationParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationArrayInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationArrayInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationParameterInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationIntegrationParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayInput)(nil)).Elem(), GetEventOrchestrationsEventOrchestrationIntegrationParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicensesLicenseInput)(nil)).Elem(), GetLicensesLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicensesLicenseArrayInput)(nil)).Elem(), GetLicensesLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTeamInput)(nil)).Elem(), GetServiceTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTeamArrayInput)(nil)).Elem(), GetServiceTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(AutomationActionsActionActionDataReferenceOutput{})
	pulumi.RegisterOutputType(AutomationActionsActionActionDataReferencePtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleEscalationRuleAssignmentStrategyOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleEscalationRuleAssignmentStrategyPtrOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(EscalationPolicyRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalCatchAllActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleConditionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationGlobalSetRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationIntegrationTypeOutput{})
	pulumi.RegisterOutputType(EventOrchestrationIntegrationTypeArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationIntegrationParameterOutput{})
	pulumi.RegisterOutputType(EventOrchestrationIntegrationParameterArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterCatchAllOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterCatchAllPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterCatchAllActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterCatchAllActionsPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetRuleOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetRuleArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetRuleActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetRuleConditionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationRouterSetRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionParameterOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsAutomationActionParameterArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceCatchAllActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionParameterOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsAutomationActionParameterArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleConditionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationServiceSetRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsPtrOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedCatchAllActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleActionsOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleActionsExtractionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleActionsVariableOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleActionsVariableArrayOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleConditionOutput{})
	pulumi.RegisterOutputType(EventOrchestrationUnroutedSetRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputStepOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputStepArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputStepInputTypeOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInlineStepsInputStepInputTypeArrayOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInputTypeOutput{})
	pulumi.RegisterOutputType(IncidentWorkflowStepInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ProviderUseAppOauthScopedTokenOutput{})
	pulumi.RegisterOutputType(ProviderUseAppOauthScopedTokenPtrOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderArrayOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderEscalationRuleOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderEscalationRuleArrayOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderEscalationRuleTargetOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderEscalationRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderServiceOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderServiceArrayOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderTeamOutput{})
	pulumi.RegisterOutputType(ResponsePlayResponderTeamArrayOutput{})
	pulumi.RegisterOutputType(ResponsePlaySubscriberOutput{})
	pulumi.RegisterOutputType(ResponsePlaySubscriberArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsPtrOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsAnnotateOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsAnnotateArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsEventActionOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsEventActionArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsExtractionOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsPriorityOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsPriorityArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsRouteOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsRouteArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSeverityOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSeverityArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSuppressOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSuppressArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSuspendOutput{})
	pulumi.RegisterOutputType(RulesetRuleActionsSuspendArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsPtrOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsSubconditionOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsSubconditionArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsSubconditionParameterOutput{})
	pulumi.RegisterOutputType(RulesetRuleConditionsSubconditionParameterArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFrameOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFramePtrOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFrameActiveBetweenOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFrameActiveBetweenArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFrameScheduledWeeklyOutput{})
	pulumi.RegisterOutputType(RulesetRuleTimeFrameScheduledWeeklyArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleVariableOutput{})
	pulumi.RegisterOutputType(RulesetRuleVariableArrayOutput{})
	pulumi.RegisterOutputType(RulesetRuleVariableParameterOutput{})
	pulumi.RegisterOutputType(RulesetRuleVariableParameterArrayOutput{})
	pulumi.RegisterOutputType(RulesetTeamOutput{})
	pulumi.RegisterOutputType(RulesetTeamPtrOutput{})
	pulumi.RegisterOutputType(ScheduleFinalScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleFinalScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleLayerOutput{})
	pulumi.RegisterOutputType(ScheduleLayerArrayOutput{})
	pulumi.RegisterOutputType(ScheduleLayerRestrictionOutput{})
	pulumi.RegisterOutputType(ScheduleLayerRestrictionArrayOutput{})
	pulumi.RegisterOutputType(ServiceAlertGroupingParametersOutput{})
	pulumi.RegisterOutputType(ServiceAlertGroupingParametersPtrOutput{})
	pulumi.RegisterOutputType(ServiceAlertGroupingParametersConfigOutput{})
	pulumi.RegisterOutputType(ServiceAlertGroupingParametersConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceAutoPauseNotificationsParametersOutput{})
	pulumi.RegisterOutputType(ServiceAutoPauseNotificationsParametersPtrOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencyOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencyPtrOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencyDependentServiceOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencyDependentServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencySupportingServiceOutput{})
	pulumi.RegisterOutputType(ServiceDependencyDependencySupportingServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsPtrOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsAnnotateOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsAnnotateArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsEventActionOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsEventActionArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsExtractionOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsExtractionArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsPriorityOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsPriorityArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSeverityOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSeverityArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSuppressOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSuppressArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSuspendOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleActionsSuspendArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsPtrOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsSubconditionOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsSubconditionArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsSubconditionParameterOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleConditionsSubconditionParameterArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFrameOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFramePtrOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFrameActiveBetweenOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFrameActiveBetweenArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFrameScheduledWeeklyOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleTimeFrameScheduledWeeklyArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleVariableOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleVariableArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleVariableParameterOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleVariableParameterArrayOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRuleOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRulePtrOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRuleDuringSupportHoursOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRuleDuringSupportHoursPtrOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRuleOutsideSupportHoursOutput{})
	pulumi.RegisterOutputType(ServiceIncidentUrgencyRuleOutsideSupportHoursPtrOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailFilterOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailFilterArrayOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserArrayOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserMatchPredicateOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserMatchPredicatePredicateOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserMatchPredicatePredicateArrayOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserMatchPredicatePredicatePredicateArrayOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserValueExtractorOutput{})
	pulumi.RegisterOutputType(ServiceIntegrationEmailParserValueExtractorArrayOutput{})
	pulumi.RegisterOutputType(ServiceScheduledActionOutput{})
	pulumi.RegisterOutputType(ServiceScheduledActionArrayOutput{})
	pulumi.RegisterOutputType(ServiceScheduledActionAtOutput{})
	pulumi.RegisterOutputType(ServiceScheduledActionAtArrayOutput{})
	pulumi.RegisterOutputType(ServiceSupportHoursOutput{})
	pulumi.RegisterOutputType(ServiceSupportHoursPtrOutput{})
	pulumi.RegisterOutputType(SlackConnectionConfigOutput{})
	pulumi.RegisterOutputType(SlackConnectionConfigArrayOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionDeliveryMethodOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionDeliveryMethodArrayOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionDeliveryMethodCustomHeaderOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionDeliveryMethodCustomHeaderArrayOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(WebhookSubscriptionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetAutomationActionsActionActionDataReferenceOutput{})
	pulumi.RegisterOutputType(GetAutomationActionsActionActionDataReferenceArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationDetailOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationDetailArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationDetailParameterOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationDetailParameterArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationParameterOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationIntegrationParameterArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationIntegrationOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationIntegrationParameterOutput{})
	pulumi.RegisterOutputType(GetEventOrchestrationsEventOrchestrationIntegrationParameterArrayOutput{})
	pulumi.RegisterOutputType(GetLicensesLicenseOutput{})
	pulumi.RegisterOutputType(GetLicensesLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTeamOutput{})
	pulumi.RegisterOutputType(GetServiceTeamArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
