// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// [Rulesets](https://support.pagerduty.com/docs/rulesets) allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-pagerduty/sdk/go/pagerduty"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooTeam, err := pagerduty.NewTeam(ctx, "fooTeam", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewRuleset(ctx, "fooRuleset", &pagerduty.RulesetArgs{
// 			Team: &pagerduty.RulesetTeamArgs{
// 				Id: fooTeam.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Ruleset struct {
	pulumi.CustomResourceState

	// Name of the ruleset.
	Name pulumi.StringOutput `pulumi:"name"`
	// Routing keys routed to this ruleset.
	RoutingKeys pulumi.StringArrayOutput `pulumi:"routingKeys"`
	// Reference to the team that owns the ruleset. If none is specified, only admins have access.
	Team RulesetTeamPtrOutput `pulumi:"team"`
	// Type of ruleset. Currently only sets to `global`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRuleset registers a new resource with the given unique name, arguments, and options.
func NewRuleset(ctx *pulumi.Context,
	name string, args *RulesetArgs, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	if args == nil {
		args = &RulesetArgs{}
	}
	var resource Ruleset
	err := ctx.RegisterResource("pagerduty:index/ruleset:Ruleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleset gets an existing Ruleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RulesetState, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	var resource Ruleset
	err := ctx.ReadResource("pagerduty:index/ruleset:Ruleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ruleset resources.
type rulesetState struct {
	// Name of the ruleset.
	Name *string `pulumi:"name"`
	// Routing keys routed to this ruleset.
	RoutingKeys []string `pulumi:"routingKeys"`
	// Reference to the team that owns the ruleset. If none is specified, only admins have access.
	Team *RulesetTeam `pulumi:"team"`
	// Type of ruleset. Currently only sets to `global`.
	Type *string `pulumi:"type"`
}

type RulesetState struct {
	// Name of the ruleset.
	Name pulumi.StringPtrInput
	// Routing keys routed to this ruleset.
	RoutingKeys pulumi.StringArrayInput
	// Reference to the team that owns the ruleset. If none is specified, only admins have access.
	Team RulesetTeamPtrInput
	// Type of ruleset. Currently only sets to `global`.
	Type pulumi.StringPtrInput
}

func (RulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetState)(nil)).Elem()
}

type rulesetArgs struct {
	// Name of the ruleset.
	Name *string `pulumi:"name"`
	// Reference to the team that owns the ruleset. If none is specified, only admins have access.
	Team *RulesetTeam `pulumi:"team"`
}

// The set of arguments for constructing a Ruleset resource.
type RulesetArgs struct {
	// Name of the ruleset.
	Name pulumi.StringPtrInput
	// Reference to the team that owns the ruleset. If none is specified, only admins have access.
	Team RulesetTeamPtrInput
}

func (RulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetArgs)(nil)).Elem()
}
