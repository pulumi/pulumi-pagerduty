// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A [service dependency](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1service_dependencies~1associate/post) is a relationship between a business service and technical and business services that this service uses, or that are used by this service, and are critical for successful operation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-pagerduty/sdk/go/pagerduty"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := pagerduty.NewServiceDependency(ctx, "foo", &pagerduty.ServiceDependencyArgs{
// 			Dependencies: pagerduty.ServiceDependencyDependencyArray{
// 				&pagerduty.ServiceDependencyDependencyArgs{
// 					DependentServices: pagerduty.ServiceDependencyDependencyDependentServiceArray{
// 						&pagerduty.ServiceDependencyDependencyDependentServiceArgs{
// 							Id:   pulumi.String(pagerduty_business_service.Foo.Id),
// 							Type: pulumi.String("business_service"),
// 						},
// 					},
// 					SupportingServices: pagerduty.ServiceDependencyDependencySupportingServiceArray{
// 						&pagerduty.ServiceDependencyDependencySupportingServiceArgs{
// 							Id:   pulumi.String(pagerduty_service.Foo.Id),
// 							Type: pulumi.String("service"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewServiceDependency(ctx, "bar", &pagerduty.ServiceDependencyArgs{
// 			Dependencies: pagerduty.ServiceDependencyDependencyArray{
// 				&pagerduty.ServiceDependencyDependencyArgs{
// 					DependentServices: pagerduty.ServiceDependencyDependencyDependentServiceArray{
// 						&pagerduty.ServiceDependencyDependencyDependentServiceArgs{
// 							Id:   pulumi.String(pagerduty_business_service.Foo.Id),
// 							Type: pulumi.String("business_service"),
// 						},
// 					},
// 					SupportingServices: pagerduty.ServiceDependencyDependencySupportingServiceArray{
// 						&pagerduty.ServiceDependencyDependencySupportingServiceArgs{
// 							Id:   pulumi.String(pagerduty_service.Two.Id),
// 							Type: pulumi.String("service"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ServiceDependency struct {
	pulumi.CustomResourceState

	// The relationship between the `supportingService` and `dependentService`.
	Dependencies ServiceDependencyDependencyArrayOutput `pulumi:"dependencies"`
}

// NewServiceDependency registers a new resource with the given unique name, arguments, and options.
func NewServiceDependency(ctx *pulumi.Context,
	name string, args *ServiceDependencyArgs, opts ...pulumi.ResourceOption) (*ServiceDependency, error) {
	if args == nil || args.Dependencies == nil {
		return nil, errors.New("missing required argument 'Dependencies'")
	}
	if args == nil {
		args = &ServiceDependencyArgs{}
	}
	var resource ServiceDependency
	err := ctx.RegisterResource("pagerduty:index/serviceDependency:ServiceDependency", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDependency gets an existing ServiceDependency resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDependency(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDependencyState, opts ...pulumi.ResourceOption) (*ServiceDependency, error) {
	var resource ServiceDependency
	err := ctx.ReadResource("pagerduty:index/serviceDependency:ServiceDependency", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDependency resources.
type serviceDependencyState struct {
	// The relationship between the `supportingService` and `dependentService`.
	Dependencies []ServiceDependencyDependency `pulumi:"dependencies"`
}

type ServiceDependencyState struct {
	// The relationship between the `supportingService` and `dependentService`.
	Dependencies ServiceDependencyDependencyArrayInput
}

func (ServiceDependencyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDependencyState)(nil)).Elem()
}

type serviceDependencyArgs struct {
	// The relationship between the `supportingService` and `dependentService`.
	Dependencies []ServiceDependencyDependency `pulumi:"dependencies"`
}

// The set of arguments for constructing a ServiceDependency resource.
type ServiceDependencyArgs struct {
	// The relationship between the `supportingService` and `dependentService`.
	Dependencies ServiceDependencyDependencyArrayInput
}

func (ServiceDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDependencyArgs)(nil)).Elem()
}
