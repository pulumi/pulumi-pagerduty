// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A [service integration](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Services/post_services_id_integrations) is an integration that belongs to a service.
//
// ## Import
//
// Services can be imported using their related `service` id and service integration `id` separated by a dot, e.g.
//
// ```sh
//  $ pulumi import pagerduty:index/serviceIntegration:ServiceIntegration main PLSSSSS.PLIIIII
// ```
type ServiceIntegration struct {
	pulumi.CustomResourceState

	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl pulumi.StringOutput `pulumi:"htmlUrl"`
	// This is the unique fully-qualified email address used for routing emails to this integration for processing.
	IntegrationEmail pulumi.StringOutput `pulumi:"integrationEmail"`
	// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
	IntegrationKey pulumi.StringOutput `pulumi:"integrationKey"`
	// The name of the service integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the service the integration should belong to.
	Service pulumi.StringOutput `pulumi:"service"`
	// The service type. Can be:
	// `awsCloudwatchInboundIntegration`,
	// `cloudkickInboundIntegration`,
	// `eventTransformerApiInboundIntegration`,
	// `eventsApiV2InboundIntegration` (requires service `alertCreation` to be `createAlertsAndIncidents`),
	// `genericEmailInboundIntegration`,
	// `genericEventsApiInboundIntegration`,
	// `keynoteInboundIntegration`,
	// `nagiosInboundIntegration`,
	// `pingdomInboundIntegration`or `sqlMonitorInboundIntegration`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).
	Vendor pulumi.StringOutput `pulumi:"vendor"`
}

// NewServiceIntegration registers a new resource with the given unique name, arguments, and options.
func NewServiceIntegration(ctx *pulumi.Context,
	name string, args *ServiceIntegrationArgs, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	var resource ServiceIntegration
	err := ctx.RegisterResource("pagerduty:index/serviceIntegration:ServiceIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceIntegration gets an existing ServiceIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceIntegrationState, opts ...pulumi.ResourceOption) (*ServiceIntegration, error) {
	var resource ServiceIntegration
	err := ctx.ReadResource("pagerduty:index/serviceIntegration:ServiceIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceIntegration resources.
type serviceIntegrationState struct {
	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl *string `pulumi:"htmlUrl"`
	// This is the unique fully-qualified email address used for routing emails to this integration for processing.
	IntegrationEmail *string `pulumi:"integrationEmail"`
	// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
	IntegrationKey *string `pulumi:"integrationKey"`
	// The name of the service integration.
	Name *string `pulumi:"name"`
	// The ID of the service the integration should belong to.
	Service *string `pulumi:"service"`
	// The service type. Can be:
	// `awsCloudwatchInboundIntegration`,
	// `cloudkickInboundIntegration`,
	// `eventTransformerApiInboundIntegration`,
	// `eventsApiV2InboundIntegration` (requires service `alertCreation` to be `createAlertsAndIncidents`),
	// `genericEmailInboundIntegration`,
	// `genericEventsApiInboundIntegration`,
	// `keynoteInboundIntegration`,
	// `nagiosInboundIntegration`,
	// `pingdomInboundIntegration`or `sqlMonitorInboundIntegration`.
	Type *string `pulumi:"type"`
	// The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).
	Vendor *string `pulumi:"vendor"`
}

type ServiceIntegrationState struct {
	// URL at which the entity is uniquely displayed in the Web app
	HtmlUrl pulumi.StringPtrInput
	// This is the unique fully-qualified email address used for routing emails to this integration for processing.
	IntegrationEmail pulumi.StringPtrInput
	// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
	IntegrationKey pulumi.StringPtrInput
	// The name of the service integration.
	Name pulumi.StringPtrInput
	// The ID of the service the integration should belong to.
	Service pulumi.StringPtrInput
	// The service type. Can be:
	// `awsCloudwatchInboundIntegration`,
	// `cloudkickInboundIntegration`,
	// `eventTransformerApiInboundIntegration`,
	// `eventsApiV2InboundIntegration` (requires service `alertCreation` to be `createAlertsAndIncidents`),
	// `genericEmailInboundIntegration`,
	// `genericEventsApiInboundIntegration`,
	// `keynoteInboundIntegration`,
	// `nagiosInboundIntegration`,
	// `pingdomInboundIntegration`or `sqlMonitorInboundIntegration`.
	Type pulumi.StringPtrInput
	// The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).
	Vendor pulumi.StringPtrInput
}

func (ServiceIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationState)(nil)).Elem()
}

type serviceIntegrationArgs struct {
	// This is the unique fully-qualified email address used for routing emails to this integration for processing.
	IntegrationEmail *string `pulumi:"integrationEmail"`
	// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
	IntegrationKey *string `pulumi:"integrationKey"`
	// The name of the service integration.
	Name *string `pulumi:"name"`
	// The ID of the service the integration should belong to.
	Service string `pulumi:"service"`
	// The service type. Can be:
	// `awsCloudwatchInboundIntegration`,
	// `cloudkickInboundIntegration`,
	// `eventTransformerApiInboundIntegration`,
	// `eventsApiV2InboundIntegration` (requires service `alertCreation` to be `createAlertsAndIncidents`),
	// `genericEmailInboundIntegration`,
	// `genericEventsApiInboundIntegration`,
	// `keynoteInboundIntegration`,
	// `nagiosInboundIntegration`,
	// `pingdomInboundIntegration`or `sqlMonitorInboundIntegration`.
	Type *string `pulumi:"type"`
	// The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).
	Vendor *string `pulumi:"vendor"`
}

// The set of arguments for constructing a ServiceIntegration resource.
type ServiceIntegrationArgs struct {
	// This is the unique fully-qualified email address used for routing emails to this integration for processing.
	IntegrationEmail pulumi.StringPtrInput
	// This is the unique key used to route events to this integration when received via the PagerDuty Events API.
	IntegrationKey pulumi.StringPtrInput
	// The name of the service integration.
	Name pulumi.StringPtrInput
	// The ID of the service the integration should belong to.
	Service pulumi.StringInput
	// The service type. Can be:
	// `awsCloudwatchInboundIntegration`,
	// `cloudkickInboundIntegration`,
	// `eventTransformerApiInboundIntegration`,
	// `eventsApiV2InboundIntegration` (requires service `alertCreation` to be `createAlertsAndIncidents`),
	// `genericEmailInboundIntegration`,
	// `genericEventsApiInboundIntegration`,
	// `keynoteInboundIntegration`,
	// `nagiosInboundIntegration`,
	// `pingdomInboundIntegration`or `sqlMonitorInboundIntegration`.
	Type pulumi.StringPtrInput
	// The ID of the vendor the integration should integrate with (e.g Datadog or Amazon Cloudwatch).
	Vendor pulumi.StringPtrInput
}

func (ServiceIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceIntegrationArgs)(nil)).Elem()
}

type ServiceIntegrationInput interface {
	pulumi.Input

	ToServiceIntegrationOutput() ServiceIntegrationOutput
	ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput
}

func (ServiceIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegration)(nil)).Elem()
}

func (i ServiceIntegration) ToServiceIntegrationOutput() ServiceIntegrationOutput {
	return i.ToServiceIntegrationOutputWithContext(context.Background())
}

func (i ServiceIntegration) ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIntegrationOutput)
}

type ServiceIntegrationOutput struct {
	*pulumi.OutputState
}

func (ServiceIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIntegrationOutput)(nil)).Elem()
}

func (o ServiceIntegrationOutput) ToServiceIntegrationOutput() ServiceIntegrationOutput {
	return o
}

func (o ServiceIntegrationOutput) ToServiceIntegrationOutputWithContext(ctx context.Context) ServiceIntegrationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceIntegrationOutput{})
}
