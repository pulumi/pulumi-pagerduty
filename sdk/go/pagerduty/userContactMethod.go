// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A [contact method](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users_id_contact_methods) is a contact method for a PagerDuty user (email, phone or SMS).
//
// ## Import
//
// Contact methods can be imported using the `user_id` and the `id`, e.g.
//
// ```sh
//  $ pulumi import pagerduty:index/userContactMethod:UserContactMethod main PLBP09X:PLBP09X
// ```
type UserContactMethod struct {
	pulumi.CustomResourceState

	// The "address" to deliver to: `email`, `phone number`, etc., depending on the type.
	Address pulumi.StringOutput `pulumi:"address"`
	// If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.
	Blacklisted pulumi.BoolOutput `pulumi:"blacklisted"`
	// The 1-to-3 digit country calling code. Required when using `phoneContactMethod` or `smsContactMethod`.
	CountryCode pulumi.IntPtrOutput `pulumi:"countryCode"`
	// If true, this phone is capable of receiving SMS messages.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The label (e.g., "Work", "Mobile", etc.).
	Label pulumi.StringOutput `pulumi:"label"`
	// Send an abbreviated email message instead of the standard email output.
	SendShortEmail pulumi.BoolPtrOutput `pulumi:"sendShortEmail"`
	// The contact method type. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserContactMethod registers a new resource with the given unique name, arguments, and options.
func NewUserContactMethod(ctx *pulumi.Context,
	name string, args *UserContactMethodArgs, opts ...pulumi.ResourceOption) (*UserContactMethod, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.UserId == nil {
		return nil, errors.New("missing required argument 'UserId'")
	}
	if args == nil {
		args = &UserContactMethodArgs{}
	}
	var resource UserContactMethod
	err := ctx.RegisterResource("pagerduty:index/userContactMethod:UserContactMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserContactMethod gets an existing UserContactMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserContactMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserContactMethodState, opts ...pulumi.ResourceOption) (*UserContactMethod, error) {
	var resource UserContactMethod
	err := ctx.ReadResource("pagerduty:index/userContactMethod:UserContactMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserContactMethod resources.
type userContactMethodState struct {
	// The "address" to deliver to: `email`, `phone number`, etc., depending on the type.
	Address *string `pulumi:"address"`
	// If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.
	Blacklisted *bool `pulumi:"blacklisted"`
	// The 1-to-3 digit country calling code. Required when using `phoneContactMethod` or `smsContactMethod`.
	CountryCode *int `pulumi:"countryCode"`
	// If true, this phone is capable of receiving SMS messages.
	Enabled *bool `pulumi:"enabled"`
	// The label (e.g., "Work", "Mobile", etc.).
	Label *string `pulumi:"label"`
	// Send an abbreviated email message instead of the standard email output.
	SendShortEmail *bool `pulumi:"sendShortEmail"`
	// The contact method type. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
	Type *string `pulumi:"type"`
	// The ID of the user.
	UserId *string `pulumi:"userId"`
}

type UserContactMethodState struct {
	// The "address" to deliver to: `email`, `phone number`, etc., depending on the type.
	Address pulumi.StringPtrInput
	// If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.
	Blacklisted pulumi.BoolPtrInput
	// The 1-to-3 digit country calling code. Required when using `phoneContactMethod` or `smsContactMethod`.
	CountryCode pulumi.IntPtrInput
	// If true, this phone is capable of receiving SMS messages.
	Enabled pulumi.BoolPtrInput
	// The label (e.g., "Work", "Mobile", etc.).
	Label pulumi.StringPtrInput
	// Send an abbreviated email message instead of the standard email output.
	SendShortEmail pulumi.BoolPtrInput
	// The contact method type. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
	Type pulumi.StringPtrInput
	// The ID of the user.
	UserId pulumi.StringPtrInput
}

func (UserContactMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*userContactMethodState)(nil)).Elem()
}

type userContactMethodArgs struct {
	// The "address" to deliver to: `email`, `phone number`, etc., depending on the type.
	Address string `pulumi:"address"`
	// The 1-to-3 digit country calling code. Required when using `phoneContactMethod` or `smsContactMethod`.
	CountryCode *int `pulumi:"countryCode"`
	// The label (e.g., "Work", "Mobile", etc.).
	Label string `pulumi:"label"`
	// Send an abbreviated email message instead of the standard email output.
	SendShortEmail *bool `pulumi:"sendShortEmail"`
	// The contact method type. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
	Type string `pulumi:"type"`
	// The ID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserContactMethod resource.
type UserContactMethodArgs struct {
	// The "address" to deliver to: `email`, `phone number`, etc., depending on the type.
	Address pulumi.StringInput
	// The 1-to-3 digit country calling code. Required when using `phoneContactMethod` or `smsContactMethod`.
	CountryCode pulumi.IntPtrInput
	// The label (e.g., "Work", "Mobile", etc.).
	Label pulumi.StringInput
	// Send an abbreviated email message instead of the standard email output.
	SendShortEmail pulumi.BoolPtrInput
	// The contact method type. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
	Type pulumi.StringInput
	// The ID of the user.
	UserId pulumi.StringInput
}

func (UserContactMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userContactMethodArgs)(nil)).Elem()
}

type UserContactMethodInput interface {
	pulumi.Input

	ToUserContactMethodOutput() UserContactMethodOutput
	ToUserContactMethodOutputWithContext(ctx context.Context) UserContactMethodOutput
}

func (UserContactMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*UserContactMethod)(nil)).Elem()
}

func (i UserContactMethod) ToUserContactMethodOutput() UserContactMethodOutput {
	return i.ToUserContactMethodOutputWithContext(context.Background())
}

func (i UserContactMethod) ToUserContactMethodOutputWithContext(ctx context.Context) UserContactMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserContactMethodOutput)
}

type UserContactMethodOutput struct {
	*pulumi.OutputState
}

func (UserContactMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserContactMethodOutput)(nil)).Elem()
}

func (o UserContactMethodOutput) ToUserContactMethodOutput() UserContactMethodOutput {
	return o
}

func (o UserContactMethodOutput) ToUserContactMethodOutputWithContext(ctx context.Context) UserContactMethodOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserContactMethodOutput{})
}
