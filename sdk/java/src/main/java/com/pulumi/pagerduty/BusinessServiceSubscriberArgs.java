// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class BusinessServiceSubscriberArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessServiceSubscriberArgs Empty = new BusinessServiceSubscriberArgs();

    /**
     * The ID of the business service to subscribe to.
     * 
     */
    @Import(name="businessServiceId", required=true)
    private Output<String> businessServiceId;

    /**
     * @return The ID of the business service to subscribe to.
     * 
     */
    public Output<String> businessServiceId() {
        return this.businessServiceId;
    }

    /**
     * The ID of the subscriber entity.
     * 
     */
    @Import(name="subscriberId", required=true)
    private Output<String> subscriberId;

    /**
     * @return The ID of the subscriber entity.
     * 
     */
    public Output<String> subscriberId() {
        return this.subscriberId;
    }

    /**
     * Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.
     * 
     */
    @Import(name="subscriberType", required=true)
    private Output<String> subscriberType;

    /**
     * @return Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.
     * 
     */
    public Output<String> subscriberType() {
        return this.subscriberType;
    }

    private BusinessServiceSubscriberArgs() {}

    private BusinessServiceSubscriberArgs(BusinessServiceSubscriberArgs $) {
        this.businessServiceId = $.businessServiceId;
        this.subscriberId = $.subscriberId;
        this.subscriberType = $.subscriberType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessServiceSubscriberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessServiceSubscriberArgs $;

        public Builder() {
            $ = new BusinessServiceSubscriberArgs();
        }

        public Builder(BusinessServiceSubscriberArgs defaults) {
            $ = new BusinessServiceSubscriberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param businessServiceId The ID of the business service to subscribe to.
         * 
         * @return builder
         * 
         */
        public Builder businessServiceId(Output<String> businessServiceId) {
            $.businessServiceId = businessServiceId;
            return this;
        }

        /**
         * @param businessServiceId The ID of the business service to subscribe to.
         * 
         * @return builder
         * 
         */
        public Builder businessServiceId(String businessServiceId) {
            return businessServiceId(Output.of(businessServiceId));
        }

        /**
         * @param subscriberId The ID of the subscriber entity.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(Output<String> subscriberId) {
            $.subscriberId = subscriberId;
            return this;
        }

        /**
         * @param subscriberId The ID of the subscriber entity.
         * 
         * @return builder
         * 
         */
        public Builder subscriberId(String subscriberId) {
            return subscriberId(Output.of(subscriberId));
        }

        /**
         * @param subscriberType Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.
         * 
         * @return builder
         * 
         */
        public Builder subscriberType(Output<String> subscriberType) {
            $.subscriberType = subscriberType;
            return this;
        }

        /**
         * @param subscriberType Type of subscriber entity in the subscriber assignment. Possible values can be `user` and `team`.
         * 
         * @return builder
         * 
         */
        public Builder subscriberType(String subscriberType) {
            return subscriberType(Output.of(subscriberType));
        }

        public BusinessServiceSubscriberArgs build() {
            $.businessServiceId = Objects.requireNonNull($.businessServiceId, "expected parameter 'businessServiceId' to be non-null");
            $.subscriberId = Objects.requireNonNull($.subscriberId, "expected parameter 'subscriberId' to be non-null");
            $.subscriberType = Objects.requireNonNull($.subscriberType, "expected parameter 'subscriberType' to be non-null");
            return $;
        }
    }

}
