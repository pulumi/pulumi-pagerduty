// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CustomFieldSchemaAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomFieldSchemaAssignmentArgs Empty = new CustomFieldSchemaAssignmentArgs();

    /**
     * The id of the field schema.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The id of the field schema.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The id of the service.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The id of the service.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private CustomFieldSchemaAssignmentArgs() {}

    private CustomFieldSchemaAssignmentArgs(CustomFieldSchemaAssignmentArgs $) {
        this.schema = $.schema;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomFieldSchemaAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomFieldSchemaAssignmentArgs $;

        public Builder() {
            $ = new CustomFieldSchemaAssignmentArgs();
        }

        public Builder(CustomFieldSchemaAssignmentArgs defaults) {
            $ = new CustomFieldSchemaAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param schema The id of the field schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The id of the field schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param service The id of the service.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The id of the service.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public CustomFieldSchemaAssignmentArgs build() {
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
