// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnablementArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnablementArgs Empty = new EnablementArgs();

    /**
     * Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the entity for which to manage the enablement.
     * 
     */
    @Import(name="entityId", required=true)
    private Output<String> entityId;

    /**
     * @return The ID of the entity for which to manage the enablement.
     * 
     */
    public Output<String> entityId() {
        return this.entityId;
    }

    /**
     * The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
     * 
     */
    @Import(name="entityType", required=true)
    private Output<String> entityType;

    /**
     * @return The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
     * 
     */
    public Output<String> entityType() {
        return this.entityType;
    }

    /**
     * The name of the feature to enable or disable. Possible values can be `aiops`.
     * 
     */
    @Import(name="feature", required=true)
    private Output<String> feature;

    /**
     * @return The name of the feature to enable or disable. Possible values can be `aiops`.
     * 
     */
    public Output<String> feature() {
        return this.feature;
    }

    private EnablementArgs() {}

    private EnablementArgs(EnablementArgs $) {
        this.enabled = $.enabled;
        this.entityId = $.entityId;
        this.entityType = $.entityType;
        this.feature = $.feature;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnablementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnablementArgs $;

        public Builder() {
            $ = new EnablementArgs();
        }

        public Builder(EnablementArgs defaults) {
            $ = new EnablementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entityId The ID of the entity for which to manage the enablement.
         * 
         * @return builder
         * 
         */
        public Builder entityId(Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId The ID of the entity for which to manage the enablement.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        /**
         * @param entityType The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
         * 
         * @return builder
         * 
         */
        public Builder entityType(Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The type of entity for which to manage the enablement. Possible values can be `service` and `event_orchestration`.
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param feature The name of the feature to enable or disable. Possible values can be `aiops`.
         * 
         * @return builder
         * 
         */
        public Builder feature(Output<String> feature) {
            $.feature = feature;
            return this;
        }

        /**
         * @param feature The name of the feature to enable or disable. Possible values can be `aiops`.
         * 
         * @return builder
         * 
         */
        public Builder feature(String feature) {
            return feature(Output.of(feature));
        }

        public EnablementArgs build() {
            if ($.entityId == null) {
                throw new MissingRequiredPropertyException("EnablementArgs", "entityId");
            }
            if ($.entityType == null) {
                throw new MissingRequiredPropertyException("EnablementArgs", "entityType");
            }
            if ($.feature == null) {
                throw new MissingRequiredPropertyException("EnablementArgs", "feature");
            }
            return $;
        }
    }

}
