// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EscalationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final EscalationPolicyArgs Empty = new EscalationPolicyArgs();

    /**
     * A human-friendly description of the escalation policy.
     * If not set, a placeholder of &#34;Managed by Pulumi&#34; will be set.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-friendly description of the escalation policy.
     * If not set, a placeholder of &#34;Managed by Pulumi&#34; will be set.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the escalation policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the escalation policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of times the escalation policy will repeat after reaching the end of its escalation.
     * 
     */
    @Import(name="numLoops")
    private @Nullable Output<Integer> numLoops;

    /**
     * @return The number of times the escalation policy will repeat after reaching the end of its escalation.
     * 
     */
    public Optional<Output<Integer>> numLoops() {
        return Optional.ofNullable(this.numLoops);
    }

    /**
     * An Escalation rule block. Escalation rules documented below.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<EscalationPolicyRuleArgs>> rules;

    /**
     * @return An Escalation rule block. Escalation rules documented below.
     * 
     */
    public Output<List<EscalationPolicyRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.
     * 
     */
    @Import(name="teams")
    private @Nullable Output<String> teams;

    /**
     * @return Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.
     * 
     */
    public Optional<Output<String>> teams() {
        return Optional.ofNullable(this.teams);
    }

    private EscalationPolicyArgs() {}

    private EscalationPolicyArgs(EscalationPolicyArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.numLoops = $.numLoops;
        this.rules = $.rules;
        this.teams = $.teams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EscalationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EscalationPolicyArgs $;

        public Builder() {
            $ = new EscalationPolicyArgs();
        }

        public Builder(EscalationPolicyArgs defaults) {
            $ = new EscalationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-friendly description of the escalation policy.
         * If not set, a placeholder of &#34;Managed by Pulumi&#34; will be set.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-friendly description of the escalation policy.
         * If not set, a placeholder of &#34;Managed by Pulumi&#34; will be set.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the escalation policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the escalation policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numLoops The number of times the escalation policy will repeat after reaching the end of its escalation.
         * 
         * @return builder
         * 
         */
        public Builder numLoops(@Nullable Output<Integer> numLoops) {
            $.numLoops = numLoops;
            return this;
        }

        /**
         * @param numLoops The number of times the escalation policy will repeat after reaching the end of its escalation.
         * 
         * @return builder
         * 
         */
        public Builder numLoops(Integer numLoops) {
            return numLoops(Output.of(numLoops));
        }

        /**
         * @param rules An Escalation rule block. Escalation rules documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<EscalationPolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules An Escalation rule block. Escalation rules documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<EscalationPolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules An Escalation rule block. Escalation rules documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(EscalationPolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param teams Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<String> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams Team associated with the policy (Only 1 team can be assigned to an Escalation Policy). Account must have the `teams` ability to use this parameter.
         * 
         * @return builder
         * 
         */
        public Builder teams(String teams) {
            return teams(Output.of(teams));
        }

        public EscalationPolicyArgs build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("EscalationPolicyArgs", "rules");
            }
            return $;
        }
    }

}
