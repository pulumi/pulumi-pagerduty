// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.EventOrchestrationIntegrationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationArgs Empty = new EventOrchestrationArgs();

    /**
     * A human-friendly description of the Event Orchestration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-friendly description of the Event Orchestration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of integrations for the Event Orchestration.
     * 
     */
    @Import(name="integrations")
    private @Nullable Output<List<EventOrchestrationIntegrationArgs>> integrations;

    /**
     * @return A list of integrations for the Event Orchestration.
     * 
     */
    public Optional<Output<List<EventOrchestrationIntegrationArgs>>> integrations() {
        return Optional.ofNullable(this.integrations);
    }

    /**
     * Name of the Event Orchestration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Event Orchestration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
     * 
     */
    @Import(name="team")
    private @Nullable Output<String> team;

    /**
     * @return ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
     * 
     */
    public Optional<Output<String>> team() {
        return Optional.ofNullable(this.team);
    }

    private EventOrchestrationArgs() {}

    private EventOrchestrationArgs(EventOrchestrationArgs $) {
        this.description = $.description;
        this.integrations = $.integrations;
        this.name = $.name;
        this.team = $.team;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationArgs $;

        public Builder() {
            $ = new EventOrchestrationArgs();
        }

        public Builder(EventOrchestrationArgs defaults) {
            $ = new EventOrchestrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-friendly description of the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-friendly description of the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param integrations A list of integrations for the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder integrations(@Nullable Output<List<EventOrchestrationIntegrationArgs>> integrations) {
            $.integrations = integrations;
            return this;
        }

        /**
         * @param integrations A list of integrations for the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder integrations(List<EventOrchestrationIntegrationArgs> integrations) {
            return integrations(Output.of(integrations));
        }

        /**
         * @param integrations A list of integrations for the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder integrations(EventOrchestrationIntegrationArgs... integrations) {
            return integrations(List.of(integrations));
        }

        /**
         * @param name Name of the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param team ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
         * 
         * @return builder
         * 
         */
        public Builder team(@Nullable Output<String> team) {
            $.team = team;
            return this;
        }

        /**
         * @param team ID of the team that owns the Event Orchestration. If none is specified, only admins have access.
         * 
         * @return builder
         * 
         */
        public Builder team(String team) {
            return team(Output.of(team));
        }

        public EventOrchestrationArgs build() {
            return $;
        }
    }

}
