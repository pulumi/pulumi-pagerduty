// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationGlobalArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalState;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCatchAll;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalSet;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A [Global Orchestration](https://support.pagerduty.com/docs/event-orchestration#global-orchestrations) allows you to create a set of Event Rules. The Global Orchestration evaluates Events sent to it against each of its rules, beginning with the rules in the &#34;start&#34; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Global Orchestration for further processing.
 * 
 * ## Example of configuring a Global Orchestration
 * 
 * This example shows creating `Team`, and `Event Orchestration` resources followed by creating a Global Orchestration to handle Events sent to that Event Orchestration.
 * 
 * This example also shows using `priority` data source to configure `priority` action for a rule. If the Event matches the third rule in set &#34;step-two&#34; the resulting incident will have the Priority `P1`.
 * 
 * This example shows a Global Orchestration that has nested sets: a rule in the &#34;start&#34; set has a `route_to` action pointing at the &#34;step-two&#34; set.
 * 
 * The `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set. In this example the `catch_all` doesn&#39;t have any `actions` so it&#39;ll leave events as-is.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.Team;
 * import com.pulumi.pagerduty.TeamArgs;
 * import com.pulumi.pagerduty.EventOrchestration;
 * import com.pulumi.pagerduty.EventOrchestrationArgs;
 * import com.pulumi.pagerduty.PagerdutyFunctions;
 * import com.pulumi.pagerduty.inputs.GetPriorityArgs;
 * import com.pulumi.pagerduty.EventOrchestrationGlobal;
 * import com.pulumi.pagerduty.EventOrchestrationGlobalArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalSetArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllActionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var databaseTeam = new Team(&#34;databaseTeam&#34;, TeamArgs.builder()        
 *             .name(&#34;Database Team&#34;)
 *             .build());
 * 
 *         var eventOrchestration = new EventOrchestration(&#34;eventOrchestration&#34;, EventOrchestrationArgs.builder()        
 *             .name(&#34;Example Orchestration&#34;)
 *             .team(databaseTeam.id())
 *             .build());
 * 
 *         final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()
 *             .name(&#34;P1&#34;)
 *             .build());
 * 
 *         var global = new EventOrchestrationGlobal(&#34;global&#34;, EventOrchestrationGlobalArgs.builder()        
 *             .eventOrchestration(eventOrchestration.id())
 *             .sets(            
 *                 EventOrchestrationGlobalSetArgs.builder()
 *                     .id(&#34;start&#34;)
 *                     .rules(EventOrchestrationGlobalSetRuleArgs.builder()
 *                         .label(&#34;Always annotate a note to all events&#34;)
 *                         .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()
 *                             .annotate(&#34;This incident was created by the Database Team via a Global Orchestration&#34;)
 *                             .routeTo(&#34;step-two&#34;)
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 EventOrchestrationGlobalSetArgs.builder()
 *                     .id(&#34;step-two&#34;)
 *                     .rules(                    
 *                         EventOrchestrationGlobalSetRuleArgs.builder()
 *                             .label(&#34;Drop events that are marked as no-op&#34;)
 *                             .conditions(EventOrchestrationGlobalSetRuleConditionArgs.builder()
 *                                 .expression(&#34;event.summary matches &#39;no-op&#39;&#34;)
 *                                 .build())
 *                             .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()
 *                                 .dropEvent(true)
 *                                 .build())
 *                             .build(),
 *                         EventOrchestrationGlobalSetRuleArgs.builder()
 *                             .label(&#34;If there&#39;s something wrong on the replica, then mark the alert as a warning&#34;)
 *                             .conditions(EventOrchestrationGlobalSetRuleConditionArgs.builder()
 *                                 .expression(&#34;event.custom_details.hostname matches part &#39;replica&#39;&#34;)
 *                                 .build())
 *                             .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()
 *                                 .severity(&#34;warning&#34;)
 *                                 .build())
 *                             .build(),
 *                         EventOrchestrationGlobalSetRuleArgs.builder()
 *                             .label(&#34;Otherwise, set the incident to P1 and run a diagnostic&#34;)
 *                             .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()
 *                                 .priority(p1.applyValue(getPriorityResult -&gt; getPriorityResult.id()))
 *                                 .automationAction(EventOrchestrationGlobalSetRuleActionsAutomationActionArgs.builder()
 *                                     .name(&#34;db-diagnostic&#34;)
 *                                     .url(&#34;https://example.com/run-diagnostic&#34;)
 *                                     .autoSend(true)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                     .build())
 *             .catchAll(EventOrchestrationGlobalCatchAllArgs.builder()
 *                 .actions()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Global Orchestration can be imported using the `id` of the Event Orchestration, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal global 1b49abe7-26db-4439-a715-c6d883acfb3e
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal")
public class EventOrchestrationGlobal extends com.pulumi.resources.CustomResource {
    /**
     * the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    @Export(name="catchAll", refs={EventOrchestrationGlobalCatchAll.class}, tree="[0]")
    private Output<EventOrchestrationGlobalCatchAll> catchAll;

    /**
     * @return the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    public Output<EventOrchestrationGlobalCatchAll> catchAll() {
        return this.catchAll;
    }
    /**
     * ID of the Event Orchestration to which this Global Orchestration belongs to.
     * 
     */
    @Export(name="eventOrchestration", refs={String.class}, tree="[0]")
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Event Orchestration to which this Global Orchestration belongs to.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }
    /**
     * A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    @Export(name="sets", refs={List.class,EventOrchestrationGlobalSet.class}, tree="[0,1]")
    private Output<List<EventOrchestrationGlobalSet>> sets;

    /**
     * @return A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    public Output<List<EventOrchestrationGlobalSet>> sets() {
        return this.sets;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationGlobal(String name) {
        this(name, EventOrchestrationGlobalArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationGlobal(String name, EventOrchestrationGlobalArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationGlobal(String name, EventOrchestrationGlobalArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal", name, args == null ? EventOrchestrationGlobalArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EventOrchestrationGlobal(String name, Output<String> id, @Nullable EventOrchestrationGlobalState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobal:EventOrchestrationGlobal", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationGlobal get(String name, Output<String> id, @Nullable EventOrchestrationGlobalState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationGlobal(name, id, state, options);
    }
}
