// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalSetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EventOrchestrationGlobalArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationGlobalArgs Empty = new EventOrchestrationGlobalArgs();

    /**
     * the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    @Import(name="catchAll", required=true)
    private Output<EventOrchestrationGlobalCatchAllArgs> catchAll;

    /**
     * @return the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    public Output<EventOrchestrationGlobalCatchAllArgs> catchAll() {
        return this.catchAll;
    }

    /**
     * ID of the Event Orchestration to which this Global Orchestration belongs to.
     * 
     */
    @Import(name="eventOrchestration", required=true)
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Event Orchestration to which this Global Orchestration belongs to.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }

    /**
     * A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    @Import(name="sets", required=true)
    private Output<List<EventOrchestrationGlobalSetArgs>> sets;

    /**
     * @return A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    public Output<List<EventOrchestrationGlobalSetArgs>> sets() {
        return this.sets;
    }

    private EventOrchestrationGlobalArgs() {}

    private EventOrchestrationGlobalArgs(EventOrchestrationGlobalArgs $) {
        this.catchAll = $.catchAll;
        this.eventOrchestration = $.eventOrchestration;
        this.sets = $.sets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationGlobalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationGlobalArgs $;

        public Builder() {
            $ = new EventOrchestrationGlobalArgs();
        }

        public Builder(EventOrchestrationGlobalArgs defaults) {
            $ = new EventOrchestrationGlobalArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catchAll the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(Output<EventOrchestrationGlobalCatchAllArgs> catchAll) {
            $.catchAll = catchAll;
            return this;
        }

        /**
         * @param catchAll the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(EventOrchestrationGlobalCatchAllArgs catchAll) {
            return catchAll(Output.of(catchAll));
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which this Global Orchestration belongs to.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(Output<String> eventOrchestration) {
            $.eventOrchestration = eventOrchestration;
            return this;
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which this Global Orchestration belongs to.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(String eventOrchestration) {
            return eventOrchestration(Output.of(eventOrchestration));
        }

        /**
         * @param sets A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
         * 
         * @return builder
         * 
         */
        public Builder sets(Output<List<EventOrchestrationGlobalSetArgs>> sets) {
            $.sets = sets;
            return this;
        }

        /**
         * @param sets A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
         * 
         * @return builder
         * 
         */
        public Builder sets(List<EventOrchestrationGlobalSetArgs> sets) {
            return sets(Output.of(sets));
        }

        /**
         * @param sets A Global Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
         * 
         * @return builder
         * 
         */
        public Builder sets(EventOrchestrationGlobalSetArgs... sets) {
            return sets(List.of(sets));
        }

        public EventOrchestrationGlobalArgs build() {
            if ($.catchAll == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationGlobalArgs", "catchAll");
            }
            if ($.eventOrchestration == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationGlobalArgs", "eventOrchestration");
            }
            if ($.sets == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationGlobalArgs", "sets");
            }
            return $;
        }
    }

}
