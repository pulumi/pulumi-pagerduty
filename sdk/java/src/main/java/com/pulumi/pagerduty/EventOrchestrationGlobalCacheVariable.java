// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariableArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableState;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCacheVariableCondition;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCacheVariableConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration
 * 
 * ## Import
 * 
 * Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable")
public class EventOrchestrationGlobalCacheVariable extends com.pulumi.resources.CustomResource {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
     * 
     */
    @Export(name="conditions", refs={List.class,EventOrchestrationGlobalCacheVariableCondition.class}, tree="[0,1]")
    private Output</* @Nullable */ List<EventOrchestrationGlobalCacheVariableCondition>> conditions;

    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
     * 
     */
    public Output<Optional<List<EventOrchestrationGlobalCacheVariableCondition>>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    @Export(name="configuration", refs={EventOrchestrationGlobalCacheVariableConfiguration.class}, tree="[0]")
    private Output<EventOrchestrationGlobalCacheVariableConfiguration> configuration;

    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    public Output<EventOrchestrationGlobalCacheVariableConfiguration> configuration() {
        return this.configuration;
    }
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     * 
     */
    @Export(name="eventOrchestration", refs={String.class}, tree="[0]")
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Global Event Orchestration to which this Cache Variable belongs.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Cache Variable associated with the Global Event Orchestration.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationGlobalCacheVariable(java.lang.String name) {
        this(name, EventOrchestrationGlobalCacheVariableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationGlobalCacheVariable(java.lang.String name, EventOrchestrationGlobalCacheVariableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationGlobalCacheVariable(java.lang.String name, EventOrchestrationGlobalCacheVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EventOrchestrationGlobalCacheVariable(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationGlobalCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, state, makeResourceOptions(options, id), false);
    }

    private static EventOrchestrationGlobalCacheVariableArgs makeArgs(EventOrchestrationGlobalCacheVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EventOrchestrationGlobalCacheVariableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationGlobalCacheVariable get(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationGlobalCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationGlobalCacheVariable(name, id, state, options);
    }
}
