// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariableArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableState;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCacheVariableCondition;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCacheVariableConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration
 * 
 * ## Example of configuring a Cache Variable for a Global Event Orchestration
 * 
 * This example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.Team;
 * import com.pulumi.pagerduty.TeamArgs;
 * import com.pulumi.pagerduty.EventOrchestration;
 * import com.pulumi.pagerduty.EventOrchestrationArgs;
 * import com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariable;
 * import com.pulumi.pagerduty.EventOrchestrationGlobalCacheVariableArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableConditionArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCacheVariableConfigurationArgs;
 * import com.pulumi.pagerduty.EventOrchestrationGlobal;
 * import com.pulumi.pagerduty.EventOrchestrationGlobalArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalSetArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationGlobalCatchAllActionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var databaseTeam = new Team("databaseTeam", TeamArgs.builder()
 *             .name("Database Team")
 *             .build());
 * 
 *         var eventOrchestration = new EventOrchestration("eventOrchestration", EventOrchestrationArgs.builder()
 *             .name("Example Orchestration")
 *             .team(databaseTeam.id())
 *             .build());
 * 
 *         var cacheVar = new EventOrchestrationGlobalCacheVariable("cacheVar", EventOrchestrationGlobalCacheVariableArgs.builder()
 *             .eventOrchestration(eventOrchestration.id())
 *             .name("recent_host")
 *             .conditions(EventOrchestrationGlobalCacheVariableConditionArgs.builder()
 *                 .expression("event.source exists")
 *                 .build())
 *             .configuration(EventOrchestrationGlobalCacheVariableConfigurationArgs.builder()
 *                 .type("recent_value")
 *                 .source("event.source")
 *                 .regex(".*")
 *                 .build())
 *             .build());
 * 
 *         var global = new EventOrchestrationGlobal("global", EventOrchestrationGlobalArgs.builder()
 *             .eventOrchestration(eventOrchestration.id())
 *             .sets(EventOrchestrationGlobalSetArgs.builder()
 *                 .id("start")
 *                 .rules(EventOrchestrationGlobalSetRuleArgs.builder()
 *                     .label("Always annotate the incident with the event source for all events")
 *                     .actions(EventOrchestrationGlobalSetRuleActionsArgs.builder()
 *                         .annotate("Last time, we saw this incident occur on host: {{cache_var.recent_host}}")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .catchAll(EventOrchestrationGlobalCatchAllArgs.builder()
 *                 .actions()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable")
public class EventOrchestrationGlobalCacheVariable extends com.pulumi.resources.CustomResource {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value.
     * 
     */
    @Export(name="conditions", refs={List.class,EventOrchestrationGlobalCacheVariableCondition.class}, tree="[0,1]")
    private Output</* @Nullable */ List<EventOrchestrationGlobalCacheVariableCondition>> conditions;

    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value.
     * 
     */
    public Output<Optional<List<EventOrchestrationGlobalCacheVariableCondition>>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    @Export(name="configuration", refs={EventOrchestrationGlobalCacheVariableConfiguration.class}, tree="[0]")
    private Output<EventOrchestrationGlobalCacheVariableConfiguration> configuration;

    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    public Output<EventOrchestrationGlobalCacheVariableConfiguration> configuration() {
        return this.configuration;
    }
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     * 
     */
    @Export(name="eventOrchestration", refs={String.class}, tree="[0]")
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Global Event Orchestration to which this Cache Variable belongs.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Cache Variable associated with the Global Event Orchestration.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationGlobalCacheVariable(String name) {
        this(name, EventOrchestrationGlobalCacheVariableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationGlobalCacheVariable(String name, EventOrchestrationGlobalCacheVariableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationGlobalCacheVariable(String name, EventOrchestrationGlobalCacheVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, args == null ? EventOrchestrationGlobalCacheVariableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EventOrchestrationGlobalCacheVariable(String name, Output<String> id, @Nullable EventOrchestrationGlobalCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationGlobalCacheVariable get(String name, Output<String> id, @Nullable EventOrchestrationGlobalCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationGlobalCacheVariable(name, id, state, options);
    }
}
