// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationRouterArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationRouterState;
import com.pulumi.pagerduty.outputs.EventOrchestrationRouterCatchAll;
import com.pulumi.pagerduty.outputs.EventOrchestrationRouterSet;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * An Orchestration Router allows users to create a set of Event Rules. The Router evaluates events sent to this Orchestration against each of its rules, one at a time, and routes the event to a specific Service based on the first rule that matches. If an event doesn&#39;t match any rules, it&#39;ll be sent to service specified in the `catch_all` or to the &#34;Unrouted&#34; Orchestration if no service is specified.
 * 
 * ## Example of configuring Router rules for an Orchestration
 * 
 * In this example the user has defined the Router with two rules, each routing to a different service.
 * 
 * This example assumes services used in the `route_to` configuration already exists. So it does not show creation of service resource.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.EventOrchestrationRouter;
 * import com.pulumi.pagerduty.EventOrchestrationRouterArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationRouterSetArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllActionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var router = new EventOrchestrationRouter("router", EventOrchestrationRouterArgs.builder()        
 *             .eventOrchestration(myMonitor.id())
 *             .set(EventOrchestrationRouterSetArgs.builder()
 *                 .id("start")
 *                 .rules(                
 *                     EventOrchestrationRouterSetRuleArgs.builder()
 *                         .label("Events relating to our relational database")
 *                         .conditions(                        
 *                             EventOrchestrationRouterSetRuleConditionArgs.builder()
 *                                 .expression("event.summary matches part 'database'")
 *                                 .build(),
 *                             EventOrchestrationRouterSetRuleConditionArgs.builder()
 *                                 .expression("event.source matches regex 'db[0-9]+-server'")
 *                                 .build())
 *                         .actions(EventOrchestrationRouterSetRuleActionsArgs.builder()
 *                             .routeTo(database.id())
 *                             .build())
 *                         .build(),
 *                     EventOrchestrationRouterSetRuleArgs.builder()
 *                         .conditions(EventOrchestrationRouterSetRuleConditionArgs.builder()
 *                             .expression("event.summary matches part 'www'")
 *                             .build())
 *                         .actions(EventOrchestrationRouterSetRuleActionsArgs.builder()
 *                             .routeTo(www.id())
 *                             .build())
 *                         .build())
 *                 .build())
 *             .catchAll(EventOrchestrationRouterCatchAllArgs.builder()
 *                 .actions(EventOrchestrationRouterCatchAllActionsArgs.builder()
 *                     .routeTo("unrouted")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Router can be imported using the `id` of the Event Orchestration, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter router 1b49abe7-26db-4439-a715-c6d883acfb3e
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter")
public class EventOrchestrationRouter extends com.pulumi.resources.CustomResource {
    /**
     * When none of the rules match an event, the event will be routed according to the catch_all settings.
     * 
     */
    @Export(name="catchAll", refs={EventOrchestrationRouterCatchAll.class}, tree="[0]")
    private Output<EventOrchestrationRouterCatchAll> catchAll;

    /**
     * @return When none of the rules match an event, the event will be routed according to the catch_all settings.
     * 
     */
    public Output<EventOrchestrationRouterCatchAll> catchAll() {
        return this.catchAll;
    }
    /**
     * ID of the Event Orchestration to which the Router belongs.
     * 
     */
    @Export(name="eventOrchestration", refs={String.class}, tree="[0]")
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Event Orchestration to which the Router belongs.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }
    /**
     * The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    @Export(name="set", refs={EventOrchestrationRouterSet.class}, tree="[0]")
    private Output<EventOrchestrationRouterSet> set;

    /**
     * @return The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    public Output<EventOrchestrationRouterSet> set() {
        return this.set;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationRouter(String name) {
        this(name, EventOrchestrationRouterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationRouter(String name, EventOrchestrationRouterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationRouter(String name, EventOrchestrationRouterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter", name, args == null ? EventOrchestrationRouterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EventOrchestrationRouter(String name, Output<String> id, @Nullable EventOrchestrationRouterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationRouter get(String name, Output<String> id, @Nullable EventOrchestrationRouterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationRouter(name, id, state, options);
    }
}
