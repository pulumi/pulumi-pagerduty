// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationRouterSetArgs;
import java.lang.String;
import java.util.Objects;


public final class EventOrchestrationRouterArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationRouterArgs Empty = new EventOrchestrationRouterArgs();

    /**
     * When none of the rules match an event, the event will be routed according to the catchAll settings.
     * 
     */
    @Import(name="catchAll", required=true)
    private Output<EventOrchestrationRouterCatchAllArgs> catchAll;

    /**
     * @return When none of the rules match an event, the event will be routed according to the catchAll settings.
     * 
     */
    public Output<EventOrchestrationRouterCatchAllArgs> catchAll() {
        return this.catchAll;
    }

    /**
     * ID of the Event Orchestration to which the Router belongs.
     * 
     */
    @Import(name="eventOrchestration", required=true)
    private Output<String> eventOrchestration;

    /**
     * @return ID of the Event Orchestration to which the Router belongs.
     * 
     */
    public Output<String> eventOrchestration() {
        return this.eventOrchestration;
    }

    /**
     * The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    @Import(name="set", required=true)
    private Output<EventOrchestrationRouterSetArgs> set;

    /**
     * @return The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    public Output<EventOrchestrationRouterSetArgs> set() {
        return this.set;
    }

    private EventOrchestrationRouterArgs() {}

    private EventOrchestrationRouterArgs(EventOrchestrationRouterArgs $) {
        this.catchAll = $.catchAll;
        this.eventOrchestration = $.eventOrchestration;
        this.set = $.set;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationRouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationRouterArgs $;

        public Builder() {
            $ = new EventOrchestrationRouterArgs();
        }

        public Builder(EventOrchestrationRouterArgs defaults) {
            $ = new EventOrchestrationRouterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catchAll When none of the rules match an event, the event will be routed according to the catchAll settings.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(Output<EventOrchestrationRouterCatchAllArgs> catchAll) {
            $.catchAll = catchAll;
            return this;
        }

        /**
         * @param catchAll When none of the rules match an event, the event will be routed according to the catchAll settings.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(EventOrchestrationRouterCatchAllArgs catchAll) {
            return catchAll(Output.of(catchAll));
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which the Router belongs.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(Output<String> eventOrchestration) {
            $.eventOrchestration = eventOrchestration;
            return this;
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which the Router belongs.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(String eventOrchestration) {
            return eventOrchestration(Output.of(eventOrchestration));
        }

        /**
         * @param set The Router contains a single set of rules  (the &#34;start&#34; set).
         * 
         * @return builder
         * 
         */
        public Builder set(Output<EventOrchestrationRouterSetArgs> set) {
            $.set = set;
            return this;
        }

        /**
         * @param set The Router contains a single set of rules  (the &#34;start&#34; set).
         * 
         * @return builder
         * 
         */
        public Builder set(EventOrchestrationRouterSetArgs set) {
            return set(Output.of(set));
        }

        public EventOrchestrationRouterArgs build() {
            if ($.catchAll == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationRouterArgs", "catchAll");
            }
            if ($.eventOrchestration == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationRouterArgs", "eventOrchestration");
            }
            if ($.set == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationRouterArgs", "set");
            }
            return $;
        }
    }

}
