// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationServiceArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationServiceState;
import com.pulumi.pagerduty.outputs.EventOrchestrationServiceCatchAll;
import com.pulumi.pagerduty.outputs.EventOrchestrationServiceSet;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A [Service Orchestration](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations) allows you to create a set of Event Rules. The Service Orchestration evaluates Events sent to this Service against each of its rules, beginning with the rules in the &#34;start&#34; set. When a matching rule is found, it can modify and enhance the event and can route the event to another set of rules within this Service Orchestration for further processing.
 * 
 * &gt; If you have a Service that uses [Service Event Rules](https://support.pagerduty.com/docs/rulesets#service-event-rules), you can switch to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations) at any time setting the attribute `enable_event_orchestration_for_service` to `true`. Please read the [Switch to Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#switch-to-service-orchestrations) instructions for more information.
 * 
 * ## Example of configuring a Service Orchestration
 * 
 * This example shows creating `Team`, `User`, `Escalation Policy`, and `Service` resources followed by creating a Service Orchestration to handle Events sent to that Service.
 * 
 * This example also shows using the pagerduty.getPriority and pagerduty.EscalationPolicy data sources to configure `priority` and `escalation_policy` actions for a rule.
 * 
 * This example shows a Service Orchestration that has nested sets: a rule in the &#34;start&#34; set has a `route_to` action pointing at the &#34;step-two&#34; set.
 * 
 * The `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set. In this example the `catch_all` doesn&#39;t have any `actions` so it&#39;ll leave events as-is.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.Team;
 * import com.pulumi.pagerduty.TeamArgs;
 * import com.pulumi.pagerduty.User;
 * import com.pulumi.pagerduty.UserArgs;
 * import com.pulumi.pagerduty.TeamMembership;
 * import com.pulumi.pagerduty.TeamMembershipArgs;
 * import com.pulumi.pagerduty.EscalationPolicy;
 * import com.pulumi.pagerduty.EscalationPolicyArgs;
 * import com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;
 * import com.pulumi.pagerduty.Service;
 * import com.pulumi.pagerduty.ServiceArgs;
 * import com.pulumi.pagerduty.IncidentCustomField;
 * import com.pulumi.pagerduty.IncidentCustomFieldArgs;
 * import com.pulumi.pagerduty.PagerdutyFunctions;
 * import com.pulumi.pagerduty.inputs.GetPriorityArgs;
 * import com.pulumi.pagerduty.inputs.GetEscalationPolicyArgs;
 * import com.pulumi.pagerduty.EventOrchestrationService;
 * import com.pulumi.pagerduty.EventOrchestrationServiceArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceSetArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllActionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var engineering = new Team("engineering", TeamArgs.builder()
 *             .name("Engineering")
 *             .build());
 * 
 *         var example = new User("example", UserArgs.builder()
 *             .name("Earline Greenholt")
 *             .email("125.greenholt.earline}{@literal @}{@code graham.name")
 *             .build());
 * 
 *         var foo = new TeamMembership("foo", TeamMembershipArgs.builder()
 *             .userId(example.id())
 *             .teamId(engineering.id())
 *             .role("manager")
 *             .build());
 * 
 *         var exampleEscalationPolicy = new EscalationPolicy("exampleEscalationPolicy", EscalationPolicyArgs.builder()
 *             .name("Engineering Escalation Policy")
 *             .numLoops(2)
 *             .rules(EscalationPolicyRuleArgs.builder()
 *                 .escalationDelayInMinutes(10)
 *                 .targets(EscalationPolicyRuleTargetArgs.builder()
 *                     .type("user_reference")
 *                     .id(example.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleService = new Service("exampleService", ServiceArgs.builder()
 *             .name("My Web App")
 *             .autoResolveTimeout("14400")
 *             .acknowledgementTimeout("600")
 *             .escalationPolicy(exampleEscalationPolicy.id())
 *             .alertCreation("create_alerts_and_incidents")
 *             .build());
 * 
 *         var csImpact = new IncidentCustomField("csImpact", IncidentCustomFieldArgs.builder()
 *             .name("impact")
 *             .dataType("string")
 *             .fieldType("single_value")
 *             .build());
 * 
 *         final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()
 *             .name("P1")
 *             .build());
 * 
 *         final var sreEscPolicy = PagerdutyFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()
 *             .name("SRE Escalation Policy")
 *             .build());
 * 
 *         var www = new EventOrchestrationService("www", EventOrchestrationServiceArgs.builder()
 *             .service(exampleService.id())
 *             .enableEventOrchestrationForService(true)
 *             .sets(            
 *                 EventOrchestrationServiceSetArgs.builder()
 *                     .id("start")
 *                     .rules(EventOrchestrationServiceSetRuleArgs.builder()
 *                         .label("Always apply some consistent event transformations to all events")
 *                         .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                             .variables(EventOrchestrationServiceSetRuleActionsVariableArgs.builder()
 *                                 .name("hostname")
 *                                 .path("event.component")
 *                                 .value("hostname: (.*)")
 *                                 .type("regex")
 *                                 .build())
 *                             .extractions(                            
 *                                 EventOrchestrationServiceSetRuleActionsExtractionArgs.builder()
 *                                     .template("}{{{@code variables.hostname}}}{@code ")
 *                                     .target("event.custom_details.hostname")
 *                                     .build(),
 *                                 EventOrchestrationServiceSetRuleActionsExtractionArgs.builder()
 *                                     .source("event.source")
 *                                     .regex("www (.*) service")
 *                                     .target("event.source")
 *                                     .build())
 *                             .routeTo("step-two")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 EventOrchestrationServiceSetArgs.builder()
 *                     .id("step-two")
 *                     .rules(                    
 *                         EventOrchestrationServiceSetRuleArgs.builder()
 *                             .label("All critical alerts should be treated as P1 incident")
 *                             .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                                 .expression("event.severity matches 'critical'")
 *                                 .build())
 *                             .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                                 .annotate("Please use our P1 runbook: https://docs.test/p1-runbook")
 *                                 .priority(p1.id())
 *                                 .incidentCustomFieldUpdates(EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdateArgs.builder()
 *                                     .id(csImpact.id())
 *                                     .value("High Impact")
 *                                     .build())
 *                                 .build())
 *                             .build(),
 *                         EventOrchestrationServiceSetRuleArgs.builder()
 *                             .label("If any of the API apps are unavailable, page the SRE team")
 *                             .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                                 .expression("event.custom_details.service_name matches part '-api' and event.custom_details.status_code matches '502'")
 *                                 .build())
 *                             .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                                 .escalationPolicy(sreEscPolicy.id())
 *                                 .build())
 *                             .build(),
 *                         EventOrchestrationServiceSetRuleArgs.builder()
 *                             .label("If there's something wrong on the canary let the team know about it in our deployments Slack channel")
 *                             .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                                 .expression("event.custom_details.hostname matches part 'canary'")
 *                                 .build())
 *                             .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                                 .automationAction(EventOrchestrationServiceSetRuleActionsAutomationActionArgs.builder()
 *                                     .name("Canary Slack Notification")
 *                                     .url("https://our-slack-listerner.test/canary-notification")
 *                                     .autoSend(true)
 *                                     .parameters(                                    
 *                                         EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs.builder()
 *                                             .key("channel")
 *                                             .value("#my-team-channel")
 *                                             .build(),
 *                                         EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs.builder()
 *                                             .key("message")
 *                                             .value("something is wrong with the canary deployment")
 *                                             .build())
 *                                     .headers(EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs.builder()
 *                                         .key("X-Notification-Source")
 *                                         .value("PagerDuty Incident Webhook")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build(),
 *                         EventOrchestrationServiceSetRuleArgs.builder()
 *                             .label("Never bother the on-call for info-level events outside of work hours")
 *                             .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                                 .expression("event.severity matches 'info' and not (now in Mon,Tue,Wed,Thu,Fri 09:00:00 to 17:00:00 America/Los_Angeles)")
 *                                 .build())
 *                             .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                                 .suppress(true)
 *                                 .build())
 *                             .build())
 *                     .build())
 *             .catchAll(EventOrchestrationServiceCatchAllArgs.builder()
 *                 .actions(EventOrchestrationServiceCatchAllActionsArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Service Orchestration can be imported using the `id` of the Service, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationService:EventOrchestrationService service PFEODA7
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationService:EventOrchestrationService")
public class EventOrchestrationService extends com.pulumi.resources.CustomResource {
    /**
     * the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    @Export(name="catchAll", refs={EventOrchestrationServiceCatchAll.class}, tree="[0]")
    private Output<EventOrchestrationServiceCatchAll> catchAll;

    /**
     * @return the `catch_all` actions will be applied if an Event reaches the end of any set without matching any rules in that set.
     * 
     */
    public Output<EventOrchestrationServiceCatchAll> catchAll() {
        return this.catchAll;
    }
    /**
     * Opt-in/out for switching the Service to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations).
     * 
     */
    @Export(name="enableEventOrchestrationForService", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableEventOrchestrationForService;

    /**
     * @return Opt-in/out for switching the Service to [Service Orchestrations](https://support.pagerduty.com/docs/event-orchestration#service-orchestrations).
     * 
     */
    public Output<Boolean> enableEventOrchestrationForService() {
        return this.enableEventOrchestrationForService;
    }
    /**
     * ID of the Service to which this Service Orchestration belongs to.
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return ID of the Service to which this Service Orchestration belongs to.
     * 
     */
    public Output<String> service() {
        return this.service;
    }
    /**
     * A Service Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    @Export(name="sets", refs={List.class,EventOrchestrationServiceSet.class}, tree="[0,1]")
    private Output<List<EventOrchestrationServiceSet>> sets;

    /**
     * @return A Service Orchestration must contain at least a &#34;start&#34; set, but can contain any number of additional sets that are routed to by other rules to form a directional graph.
     * 
     */
    public Output<List<EventOrchestrationServiceSet>> sets() {
        return this.sets;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationService(java.lang.String name) {
        this(name, EventOrchestrationServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationService(java.lang.String name, EventOrchestrationServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationService(java.lang.String name, EventOrchestrationServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationService:EventOrchestrationService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EventOrchestrationService(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationService:EventOrchestrationService", name, state, makeResourceOptions(options, id), false);
    }

    private static EventOrchestrationServiceArgs makeArgs(EventOrchestrationServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EventOrchestrationServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationService get(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationService(name, id, state, options);
    }
}
