// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.EventOrchestrationServiceCacheVariableArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableState;
import com.pulumi.pagerduty.outputs.EventOrchestrationServiceCacheVariableCondition;
import com.pulumi.pagerduty.outputs.EventOrchestrationServiceCacheVariableConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Service Event Orchestration, in order to temporarily store event data to be referenced later within the Service Event Orchestration
 * 
 * ## Example of configuring a Cache Variable for a Service Event Orchestration
 * 
 * This example shows creating a service `Event Orchestration` and a `Cache Variable`. This Cache Variable will count and store the number of trigger events with &#39;database&#39; in its title. Then all alerts sent to this Event Orchestration will have its severity upped to &#39;critical&#39; if the count has reached at least 5 triggers within the last 1 minute.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.Team;
 * import com.pulumi.pagerduty.TeamArgs;
 * import com.pulumi.pagerduty.User;
 * import com.pulumi.pagerduty.UserArgs;
 * import com.pulumi.pagerduty.EscalationPolicy;
 * import com.pulumi.pagerduty.EscalationPolicyArgs;
 * import com.pulumi.pagerduty.inputs.EscalationPolicyRuleArgs;
 * import com.pulumi.pagerduty.Service;
 * import com.pulumi.pagerduty.ServiceArgs;
 * import com.pulumi.pagerduty.EventOrchestrationServiceCacheVariable;
 * import com.pulumi.pagerduty.EventOrchestrationServiceCacheVariableArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConditionArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConfigurationArgs;
 * import com.pulumi.pagerduty.EventOrchestrationService;
 * import com.pulumi.pagerduty.EventOrchestrationServiceArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceSetArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllArgs;
 * import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCatchAllActionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var databaseTeam = new Team("databaseTeam", TeamArgs.builder()
 *             .name("Database Team")
 *             .build());
 * 
 *         var user1 = new User("user1", UserArgs.builder()
 *             .name("Earline Greenholt")
 *             .email("125.greenholt.earline}{@literal @}{@code graham.name")
 *             .teams(databaseTeam.id())
 *             .build());
 * 
 *         var dbEp = new EscalationPolicy("dbEp", EscalationPolicyArgs.builder()
 *             .name("Database Escalation Policy")
 *             .numLoops(2)
 *             .rules(EscalationPolicyRuleArgs.builder()
 *                 .escalationDelayInMinutes(10)
 *                 .targets(EscalationPolicyRuleTargetArgs.builder()
 *                     .type("user")
 *                     .id(user1.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var svc = new Service("svc", ServiceArgs.builder()
 *             .name("My Database Service")
 *             .autoResolveTimeout("14400")
 *             .acknowledgementTimeout("600")
 *             .escalationPolicy(dbEp.id())
 *             .alertCreation("create_alerts_and_incidents")
 *             .build());
 * 
 *         var numDbTriggers = new EventOrchestrationServiceCacheVariable("numDbTriggers", EventOrchestrationServiceCacheVariableArgs.builder()
 *             .service(svc.id())
 *             .name("num_db_triggers")
 *             .conditions(EventOrchestrationServiceCacheVariableConditionArgs.builder()
 *                 .expression("event.summary matches part 'database'")
 *                 .build())
 *             .configuration(EventOrchestrationServiceCacheVariableConfigurationArgs.builder()
 *                 .type("trigger_event_count")
 *                 .ttlSeconds(60)
 *                 .build())
 *             .build());
 * 
 *         var isMaintenance = new EventOrchestrationServiceCacheVariable("isMaintenance", EventOrchestrationServiceCacheVariableArgs.builder()
 *             .service(svc.id())
 *             .name("is_maintenance")
 *             .configuration(EventOrchestrationServiceCacheVariableConfigurationArgs.builder()
 *                 .type("external_data")
 *                 .dataType("boolean")
 *                 .ttlSeconds(7200)
 *                 .build())
 *             .build());
 * 
 *         var eventOrchestration = new EventOrchestrationService("eventOrchestration", EventOrchestrationServiceArgs.builder()
 *             .service(svc.id())
 *             .enableEventOrchestrationForService(true)
 *             .sets(EventOrchestrationServiceSetArgs.builder()
 *                 .id("start")
 *                 .rules(                
 *                     EventOrchestrationServiceSetRuleArgs.builder()
 *                         .label("Suppress alerts if the service is in maintenance")
 *                         .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                             .expression("cache_var.is_maintenance == true")
 *                             .build())
 *                         .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                             .suppress(true)
 *                             .build())
 *                         .build(),
 *                     EventOrchestrationServiceSetRuleArgs.builder()
 *                         .label("Set severity to critical if we see at least 5 triggers on the DB within the last 1 minute")
 *                         .conditions(EventOrchestrationServiceSetRuleConditionArgs.builder()
 *                             .expression("cache_var.num_db_triggers >= 5")
 *                             .build())
 *                         .actions(EventOrchestrationServiceSetRuleActionsArgs.builder()
 *                             .severity("critical")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .catchAll(EventOrchestrationServiceCatchAllArgs.builder()
 *                 .actions(EventOrchestrationServiceCatchAllActionsArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Cache Variables can be imported using colon-separated IDs, which is the combination of the Service Event Orchestration ID followed by the Cache Variable ID, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable cache_variable PLBP09X:138ed254-3444-44ad-8cc7-701d69def439
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable")
public class EventOrchestrationServiceCacheVariable extends com.pulumi.resources.CustomResource {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recentValue` or `triggerEventCount`.
     * 
     */
    @Export(name="conditions", refs={List.class,EventOrchestrationServiceCacheVariableCondition.class}, tree="[0,1]")
    private Output</* @Nullable */ List<EventOrchestrationServiceCacheVariableCondition>> conditions;

    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recentValue` or `triggerEventCount`.
     * 
     */
    public Output<Optional<List<EventOrchestrationServiceCacheVariableCondition>>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    @Export(name="configuration", refs={EventOrchestrationServiceCacheVariableConfiguration.class}, tree="[0]")
    private Output<EventOrchestrationServiceCacheVariableConfiguration> configuration;

    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    public Output<EventOrchestrationServiceCacheVariableConfiguration> configuration() {
        return this.configuration;
    }
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Name of the Cache Variable associated with the Service Event Orchestration.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Cache Variable associated with the Service Event Orchestration.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventOrchestrationServiceCacheVariable(java.lang.String name) {
        this(name, EventOrchestrationServiceCacheVariableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventOrchestrationServiceCacheVariable(java.lang.String name, EventOrchestrationServiceCacheVariableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventOrchestrationServiceCacheVariable(java.lang.String name, EventOrchestrationServiceCacheVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EventOrchestrationServiceCacheVariable(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationServiceCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/eventOrchestrationServiceCacheVariable:EventOrchestrationServiceCacheVariable", name, state, makeResourceOptions(options, id), false);
    }

    private static EventOrchestrationServiceCacheVariableArgs makeArgs(EventOrchestrationServiceCacheVariableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EventOrchestrationServiceCacheVariableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventOrchestrationServiceCacheVariable get(java.lang.String name, Output<java.lang.String> id, @Nullable EventOrchestrationServiceCacheVariableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventOrchestrationServiceCacheVariable(name, id, state, options);
    }
}
