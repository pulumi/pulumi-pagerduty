// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConditionArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationServiceCacheVariableConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationServiceCacheVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationServiceCacheVariableArgs Empty = new EventOrchestrationServiceCacheVariableArgs();

    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<EventOrchestrationServiceCacheVariableConditionArgs>> conditions;

    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
     * 
     */
    public Optional<Output<List<EventOrchestrationServiceCacheVariableConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    @Import(name="configuration", required=true)
    private Output<EventOrchestrationServiceCacheVariableConfigurationArgs> configuration;

    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    public Output<EventOrchestrationServiceCacheVariableConfigurationArgs> configuration() {
        return this.configuration;
    }

    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Name of the Cache Variable associated with the Service Event Orchestration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Cache Variable associated with the Service Event Orchestration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private EventOrchestrationServiceCacheVariableArgs() {}

    private EventOrchestrationServiceCacheVariableArgs(EventOrchestrationServiceCacheVariableArgs $) {
        this.conditions = $.conditions;
        this.configuration = $.configuration;
        this.disabled = $.disabled;
        this.name = $.name;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationServiceCacheVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationServiceCacheVariableArgs $;

        public Builder() {
            $ = new EventOrchestrationServiceCacheVariableArgs();
        }

        public Builder(EventOrchestrationServiceCacheVariableArgs defaults) {
            $ = new EventOrchestrationServiceCacheVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<EventOrchestrationServiceCacheVariableConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<EventOrchestrationServiceCacheVariableConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recent_value` or `trigger_event_count`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(EventOrchestrationServiceCacheVariableConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param configuration A configuration object to define what and how values will be stored in the Cache Variable.
         * 
         * @return builder
         * 
         */
        public Builder configuration(Output<EventOrchestrationServiceCacheVariableConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration A configuration object to define what and how values will be stored in the Cache Variable.
         * 
         * @return builder
         * 
         */
        public Builder configuration(EventOrchestrationServiceCacheVariableConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param disabled Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param name Name of the Cache Variable associated with the Service Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Cache Variable associated with the Service Event Orchestration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param service ID of the Service Event Orchestration to which this Cache Variable belongs.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service ID of the Service Event Orchestration to which this Cache Variable belongs.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public EventOrchestrationServiceCacheVariableArgs build() {
            if ($.configuration == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationServiceCacheVariableArgs", "configuration");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationServiceCacheVariableArgs", "service");
            }
            return $;
        }
    }

}
