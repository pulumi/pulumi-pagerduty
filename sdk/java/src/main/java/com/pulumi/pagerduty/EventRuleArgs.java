// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventRuleArgs Empty = new EventRuleArgs();

    /**
     * A list of one or more actions for each rule. Each action within the list is itself a list.
     * 
     */
    @Import(name="actionJson", required=true)
    private Output<String> actionJson;

    /**
     * @return A list of one or more actions for each rule. Each action within the list is itself a list.
     * 
     */
    public Output<String> actionJson() {
        return this.actionJson;
    }

    /**
     * Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
     * 
     */
    @Import(name="advancedConditionJson")
    private @Nullable Output<String> advancedConditionJson;

    /**
     * @return Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
     * 
     */
    public Optional<Output<String>> advancedConditionJson() {
        return Optional.ofNullable(this.advancedConditionJson);
    }

    /**
     * Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
     * 
     */
    @Import(name="conditionJson", required=true)
    private Output<String> conditionJson;

    /**
     * @return Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
     * 
     */
    public Output<String> conditionJson() {
        return this.conditionJson;
    }

    private EventRuleArgs() {}

    private EventRuleArgs(EventRuleArgs $) {
        this.actionJson = $.actionJson;
        this.advancedConditionJson = $.advancedConditionJson;
        this.conditionJson = $.conditionJson;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventRuleArgs $;

        public Builder() {
            $ = new EventRuleArgs();
        }

        public Builder(EventRuleArgs defaults) {
            $ = new EventRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionJson A list of one or more actions for each rule. Each action within the list is itself a list.
         * 
         * @return builder
         * 
         */
        public Builder actionJson(Output<String> actionJson) {
            $.actionJson = actionJson;
            return this;
        }

        /**
         * @param actionJson A list of one or more actions for each rule. Each action within the list is itself a list.
         * 
         * @return builder
         * 
         */
        public Builder actionJson(String actionJson) {
            return actionJson(Output.of(actionJson));
        }

        /**
         * @param advancedConditionJson Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
         * 
         * @return builder
         * 
         */
        public Builder advancedConditionJson(@Nullable Output<String> advancedConditionJson) {
            $.advancedConditionJson = advancedConditionJson;
            return this;
        }

        /**
         * @param advancedConditionJson Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
         * 
         * @return builder
         * 
         */
        public Builder advancedConditionJson(String advancedConditionJson) {
            return advancedConditionJson(Output.of(advancedConditionJson));
        }

        /**
         * @param conditionJson Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
         * 
         * @return builder
         * 
         */
        public Builder conditionJson(Output<String> conditionJson) {
            $.conditionJson = conditionJson;
            return this;
        }

        /**
         * @param conditionJson Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
         * 
         * @return builder
         * 
         */
        public Builder conditionJson(String conditionJson) {
            return conditionJson(Output.of(conditionJson));
        }

        public EventRuleArgs build() {
            if ($.actionJson == null) {
                throw new MissingRequiredPropertyException("EventRuleArgs", "actionJson");
            }
            if ($.conditionJson == null) {
                throw new MissingRequiredPropertyException("EventRuleArgs", "conditionJson");
            }
            return $;
        }
    }

}
