// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionServiceNowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionServiceNowArgs Empty = new ExtensionServiceNowArgs();

    @Import(name="endpointUrl")
    private @Nullable Output<String> endpointUrl;

    public Optional<Output<String>> endpointUrl() {
        return Optional.ofNullable(this.endpointUrl);
    }

    @Import(name="extensionObjects", required=true)
    private Output<List<String>> extensionObjects;

    public Output<List<String>> extensionObjects() {
        return this.extensionObjects;
    }

    @Import(name="extensionSchema", required=true)
    private Output<String> extensionSchema;

    public Output<String> extensionSchema() {
        return this.extensionSchema;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="referer", required=true)
    private Output<String> referer;

    public Output<String> referer() {
        return this.referer;
    }

    @Import(name="snowPassword", required=true)
    private Output<String> snowPassword;

    public Output<String> snowPassword() {
        return this.snowPassword;
    }

    @Import(name="snowUser", required=true)
    private Output<String> snowUser;

    public Output<String> snowUser() {
        return this.snowUser;
    }

    @Import(name="summary")
    private @Nullable Output<String> summary;

    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    @Import(name="syncOptions", required=true)
    private Output<String> syncOptions;

    public Output<String> syncOptions() {
        return this.syncOptions;
    }

    @Import(name="target", required=true)
    private Output<String> target;

    public Output<String> target() {
        return this.target;
    }

    @Import(name="taskType", required=true)
    private Output<String> taskType;

    public Output<String> taskType() {
        return this.taskType;
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ExtensionServiceNowArgs() {}

    private ExtensionServiceNowArgs(ExtensionServiceNowArgs $) {
        this.endpointUrl = $.endpointUrl;
        this.extensionObjects = $.extensionObjects;
        this.extensionSchema = $.extensionSchema;
        this.name = $.name;
        this.referer = $.referer;
        this.snowPassword = $.snowPassword;
        this.snowUser = $.snowUser;
        this.summary = $.summary;
        this.syncOptions = $.syncOptions;
        this.target = $.target;
        this.taskType = $.taskType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionServiceNowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionServiceNowArgs $;

        public Builder() {
            $ = new ExtensionServiceNowArgs();
        }

        public Builder(ExtensionServiceNowArgs defaults) {
            $ = new ExtensionServiceNowArgs(Objects.requireNonNull(defaults));
        }

        public Builder endpointUrl(@Nullable Output<String> endpointUrl) {
            $.endpointUrl = endpointUrl;
            return this;
        }

        public Builder endpointUrl(String endpointUrl) {
            return endpointUrl(Output.of(endpointUrl));
        }

        public Builder extensionObjects(Output<List<String>> extensionObjects) {
            $.extensionObjects = extensionObjects;
            return this;
        }

        public Builder extensionObjects(List<String> extensionObjects) {
            return extensionObjects(Output.of(extensionObjects));
        }

        public Builder extensionObjects(String... extensionObjects) {
            return extensionObjects(List.of(extensionObjects));
        }

        public Builder extensionSchema(Output<String> extensionSchema) {
            $.extensionSchema = extensionSchema;
            return this;
        }

        public Builder extensionSchema(String extensionSchema) {
            return extensionSchema(Output.of(extensionSchema));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder referer(Output<String> referer) {
            $.referer = referer;
            return this;
        }

        public Builder referer(String referer) {
            return referer(Output.of(referer));
        }

        public Builder snowPassword(Output<String> snowPassword) {
            $.snowPassword = snowPassword;
            return this;
        }

        public Builder snowPassword(String snowPassword) {
            return snowPassword(Output.of(snowPassword));
        }

        public Builder snowUser(Output<String> snowUser) {
            $.snowUser = snowUser;
            return this;
        }

        public Builder snowUser(String snowUser) {
            return snowUser(Output.of(snowUser));
        }

        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public Builder syncOptions(Output<String> syncOptions) {
            $.syncOptions = syncOptions;
            return this;
        }

        public Builder syncOptions(String syncOptions) {
            return syncOptions(Output.of(syncOptions));
        }

        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder taskType(Output<String> taskType) {
            $.taskType = taskType;
            return this;
        }

        public Builder taskType(String taskType) {
            return taskType(Output.of(taskType));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ExtensionServiceNowArgs build() {
            if ($.extensionObjects == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "extensionObjects");
            }
            if ($.extensionSchema == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "extensionSchema");
            }
            if ($.referer == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "referer");
            }
            if ($.snowPassword == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "snowPassword");
            }
            if ($.snowUser == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "snowUser");
            }
            if ($.syncOptions == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "syncOptions");
            }
            if ($.target == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "target");
            }
            if ($.taskType == null) {
                throw new MissingRequiredPropertyException("ExtensionServiceNowArgs", "taskType");
            }
            return $;
        }
    }

}
