// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final IncidentTypeArgs Empty = new IncidentTypeArgs();

    /**
     * A succinct description of the Incident Type.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A succinct description of the Incident Type.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * State of this Incident Type object. Defaults to true if not provided.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return State of this Incident Type object. Defaults to true if not provided.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent type of the Incident Type. Either name or id of the parent type can be used.
     * 
     */
    @Import(name="parentType", required=true)
    private Output<String> parentType;

    /**
     * @return The parent type of the Incident Type. Either name or id of the parent type can be used.
     * 
     */
    public Output<String> parentType() {
        return this.parentType;
    }

    private IncidentTypeArgs() {}

    private IncidentTypeArgs(IncidentTypeArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.name = $.name;
        this.parentType = $.parentType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentTypeArgs $;

        public Builder() {
            $ = new IncidentTypeArgs();
        }

        public Builder(IncidentTypeArgs defaults) {
            $ = new IncidentTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A succinct description of the Incident Type.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A succinct description of the Incident Type.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the Incident Type. Usage of the prefixes PD, PagerDuty, or the suffixes Default, or (Default) is prohibited.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled State of this Incident Type object. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled State of this Incident Type object. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Incident Type. Usage of the suffix `_default` is prohibited. This cannot be changed once the incident type has been created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentType The parent type of the Incident Type. Either name or id of the parent type can be used.
         * 
         * @return builder
         * 
         */
        public Builder parentType(Output<String> parentType) {
            $.parentType = parentType;
            return this;
        }

        /**
         * @param parentType The parent type of the Incident Type. Either name or id of the parent type can be used.
         * 
         * @return builder
         * 
         */
        public Builder parentType(String parentType) {
            return parentType(Output.of(parentType));
        }

        public IncidentTypeArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("IncidentTypeArgs", "displayName");
            }
            if ($.parentType == null) {
                throw new MissingRequiredPropertyException("IncidentTypeArgs", "parentType");
            }
            return $;
        }
    }

}
