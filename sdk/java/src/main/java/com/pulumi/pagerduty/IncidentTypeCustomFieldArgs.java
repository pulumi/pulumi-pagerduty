// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentTypeCustomFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final IncidentTypeCustomFieldArgs Empty = new IncidentTypeCustomFieldArgs();

    /**
     * [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
     * 
     */
    @Import(name="dataType", required=true)
    private Output<String> dataType;

    /**
     * @return [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }

    /**
     * The default value to set when new incidents are created. Always specified as a string.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The default value to set when new incidents are created. Always specified as a string.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The description of the custom field.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the custom field.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the custom Type.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the custom Type.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Whether the custom field is enabled. Defaults to true if not provided.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the custom field is enabled. Defaults to true if not provided.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
     * 
     */
    @Import(name="fieldOptions")
    private @Nullable Output<List<String>> fieldOptions;

    /**
     * @return The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
     * 
     */
    public Optional<Output<List<String>>> fieldOptions() {
        return Optional.ofNullable(this.fieldOptions);
    }

    /**
     * [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
     * 
     */
    @Import(name="fieldType")
    private @Nullable Output<String> fieldType;

    /**
     * @return [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
     * 
     */
    public Optional<Output<String>> fieldType() {
        return Optional.ofNullable(this.fieldType);
    }

    /**
     * [Updating causes resource replacement] The id of the incident type the custom field is associated with.
     * 
     */
    @Import(name="incidentType", required=true)
    private Output<String> incidentType;

    /**
     * @return [Updating causes resource replacement] The id of the incident type the custom field is associated with.
     * 
     */
    public Output<String> incidentType() {
        return this.incidentType;
    }

    /**
     * [Updating causes resource replacement] The name of the custom field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [Updating causes resource replacement] The name of the custom field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private IncidentTypeCustomFieldArgs() {}

    private IncidentTypeCustomFieldArgs(IncidentTypeCustomFieldArgs $) {
        this.dataType = $.dataType;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.fieldOptions = $.fieldOptions;
        this.fieldType = $.fieldType;
        this.incidentType = $.incidentType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentTypeCustomFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentTypeCustomFieldArgs $;

        public Builder() {
            $ = new IncidentTypeCustomFieldArgs();
        }

        public Builder(IncidentTypeCustomFieldArgs defaults) {
            $ = new IncidentTypeCustomFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `data_type` is `single_value`, otherwise must be `string`. Update
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param defaultValue The default value to set when new incidents are created. Always specified as a string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value to set when new incidents are created. Always specified as a string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description The description of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the custom Type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the custom Type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Whether the custom field is enabled. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the custom field is enabled. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(@Nullable Output<List<String>> fieldOptions) {
            $.fieldOptions = fieldOptions;
            return this;
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(List<String> fieldOptions) {
            return fieldOptions(Output.of(fieldOptions));
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `single_value_fixed` or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(String... fieldOptions) {
            return fieldOptions(List.of(fieldOptions));
        }

        /**
         * @param fieldType [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(@Nullable Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        /**
         * @param fieldType [Updating causes resource replacement] The field type of the field. Must be one of `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        /**
         * @param incidentType [Updating causes resource replacement] The id of the incident type the custom field is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(Output<String> incidentType) {
            $.incidentType = incidentType;
            return this;
        }

        /**
         * @param incidentType [Updating causes resource replacement] The id of the incident type the custom field is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(String incidentType) {
            return incidentType(Output.of(incidentType));
        }

        /**
         * @param name [Updating causes resource replacement] The name of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [Updating causes resource replacement] The name of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public IncidentTypeCustomFieldArgs build() {
            if ($.dataType == null) {
                throw new MissingRequiredPropertyException("IncidentTypeCustomFieldArgs", "dataType");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("IncidentTypeCustomFieldArgs", "displayName");
            }
            if ($.incidentType == null) {
                throw new MissingRequiredPropertyException("IncidentTypeCustomFieldArgs", "incidentType");
            }
            return $;
        }
    }

}
