// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowArgs Empty = new MaintenanceWindowArgs();

    /**
     * A description for the maintenance window.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the maintenance window.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maintenance window&#39;s end time. This is when the services will start creating incidents again. This date must be in the future and after the `startTime`.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The maintenance window&#39;s end time. This is when the services will start creating incidents again. This date must be in the future and after the `startTime`.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * A list of service IDs to include in the maintenance window.
     * 
     */
    @Import(name="services", required=true)
    private Output<List<String>> services;

    /**
     * @return A list of service IDs to include in the maintenance window.
     * 
     */
    public Output<List<String>> services() {
        return this.services;
    }

    /**
     * The maintenance window&#39;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The maintenance window&#39;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    private MaintenanceWindowArgs() {}

    private MaintenanceWindowArgs(MaintenanceWindowArgs $) {
        this.description = $.description;
        this.endTime = $.endTime;
        this.services = $.services;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowArgs $;

        public Builder() {
            $ = new MaintenanceWindowArgs();
        }

        public Builder(MaintenanceWindowArgs defaults) {
            $ = new MaintenanceWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime The maintenance window&#39;s end time. This is when the services will start creating incidents again. This date must be in the future and after the `startTime`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The maintenance window&#39;s end time. This is when the services will start creating incidents again. This date must be in the future and after the `startTime`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param services A list of service IDs to include in the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder services(Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services A list of service IDs to include in the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services A list of service IDs to include in the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param startTime The maintenance window&#39;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The maintenance window&#39;s start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public MaintenanceWindowArgs build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("MaintenanceWindowArgs", "endTime");
            }
            if ($.services == null) {
                throw new MissingRequiredPropertyException("MaintenanceWindowArgs", "services");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("MaintenanceWindowArgs", "startTime");
            }
            return $;
        }
    }

}
