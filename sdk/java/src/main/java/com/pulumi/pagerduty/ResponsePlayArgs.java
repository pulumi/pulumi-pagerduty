// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.ResponsePlayResponderArgs;
import com.pulumi.pagerduty.inputs.ResponsePlaySubscriberArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResponsePlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponsePlayArgs Empty = new ResponsePlayArgs();

    /**
     * The telephone number that will be set as the conference number for any incident on which this response play is run.
     * 
     */
    @Import(name="conferenceNumber")
    private @Nullable Output<String> conferenceNumber;

    /**
     * @return The telephone number that will be set as the conference number for any incident on which this response play is run.
     * 
     */
    public Optional<Output<String>> conferenceNumber() {
        return Optional.ofNullable(this.conferenceNumber);
    }

    /**
     * The URL that will be set as the conference URL for any incident on which this response play is run.
     * 
     */
    @Import(name="conferenceUrl")
    private @Nullable Output<String> conferenceUrl;

    /**
     * @return The URL that will be set as the conference URL for any incident on which this response play is run.
     * 
     */
    public Optional<Output<String>> conferenceUrl() {
        return Optional.ofNullable(this.conferenceUrl);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="from", required=true)
    private Output<String> from;

    public Output<String> from() {
        return this.from;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="responders")
    private @Nullable Output<List<ResponsePlayResponderArgs>> responders;

    public Optional<Output<List<ResponsePlayResponderArgs>>> responders() {
        return Optional.ofNullable(this.responders);
    }

    @Import(name="respondersMessage")
    private @Nullable Output<String> respondersMessage;

    public Optional<Output<String>> respondersMessage() {
        return Optional.ofNullable(this.respondersMessage);
    }

    @Import(name="runnability")
    private @Nullable Output<String> runnability;

    public Optional<Output<String>> runnability() {
        return Optional.ofNullable(this.runnability);
    }

    @Import(name="subscribers")
    private @Nullable Output<List<ResponsePlaySubscriberArgs>> subscribers;

    public Optional<Output<List<ResponsePlaySubscriberArgs>>> subscribers() {
        return Optional.ofNullable(this.subscribers);
    }

    @Import(name="subscribersMessage")
    private @Nullable Output<String> subscribersMessage;

    public Optional<Output<String>> subscribersMessage() {
        return Optional.ofNullable(this.subscribersMessage);
    }

    @Import(name="team")
    private @Nullable Output<String> team;

    public Optional<Output<String>> team() {
        return Optional.ofNullable(this.team);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ResponsePlayArgs() {}

    private ResponsePlayArgs(ResponsePlayArgs $) {
        this.conferenceNumber = $.conferenceNumber;
        this.conferenceUrl = $.conferenceUrl;
        this.description = $.description;
        this.from = $.from;
        this.name = $.name;
        this.responders = $.responders;
        this.respondersMessage = $.respondersMessage;
        this.runnability = $.runnability;
        this.subscribers = $.subscribers;
        this.subscribersMessage = $.subscribersMessage;
        this.team = $.team;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponsePlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponsePlayArgs $;

        public Builder() {
            $ = new ResponsePlayArgs();
        }

        public Builder(ResponsePlayArgs defaults) {
            $ = new ResponsePlayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conferenceNumber The telephone number that will be set as the conference number for any incident on which this response play is run.
         * 
         * @return builder
         * 
         */
        public Builder conferenceNumber(@Nullable Output<String> conferenceNumber) {
            $.conferenceNumber = conferenceNumber;
            return this;
        }

        /**
         * @param conferenceNumber The telephone number that will be set as the conference number for any incident on which this response play is run.
         * 
         * @return builder
         * 
         */
        public Builder conferenceNumber(String conferenceNumber) {
            return conferenceNumber(Output.of(conferenceNumber));
        }

        /**
         * @param conferenceUrl The URL that will be set as the conference URL for any incident on which this response play is run.
         * 
         * @return builder
         * 
         */
        public Builder conferenceUrl(@Nullable Output<String> conferenceUrl) {
            $.conferenceUrl = conferenceUrl;
            return this;
        }

        /**
         * @param conferenceUrl The URL that will be set as the conference URL for any incident on which this response play is run.
         * 
         * @return builder
         * 
         */
        public Builder conferenceUrl(String conferenceUrl) {
            return conferenceUrl(Output.of(conferenceUrl));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder from(Output<String> from) {
            $.from = from;
            return this;
        }

        public Builder from(String from) {
            return from(Output.of(from));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder responders(@Nullable Output<List<ResponsePlayResponderArgs>> responders) {
            $.responders = responders;
            return this;
        }

        public Builder responders(List<ResponsePlayResponderArgs> responders) {
            return responders(Output.of(responders));
        }

        public Builder responders(ResponsePlayResponderArgs... responders) {
            return responders(List.of(responders));
        }

        public Builder respondersMessage(@Nullable Output<String> respondersMessage) {
            $.respondersMessage = respondersMessage;
            return this;
        }

        public Builder respondersMessage(String respondersMessage) {
            return respondersMessage(Output.of(respondersMessage));
        }

        public Builder runnability(@Nullable Output<String> runnability) {
            $.runnability = runnability;
            return this;
        }

        public Builder runnability(String runnability) {
            return runnability(Output.of(runnability));
        }

        public Builder subscribers(@Nullable Output<List<ResponsePlaySubscriberArgs>> subscribers) {
            $.subscribers = subscribers;
            return this;
        }

        public Builder subscribers(List<ResponsePlaySubscriberArgs> subscribers) {
            return subscribers(Output.of(subscribers));
        }

        public Builder subscribers(ResponsePlaySubscriberArgs... subscribers) {
            return subscribers(List.of(subscribers));
        }

        public Builder subscribersMessage(@Nullable Output<String> subscribersMessage) {
            $.subscribersMessage = subscribersMessage;
            return this;
        }

        public Builder subscribersMessage(String subscribersMessage) {
            return subscribersMessage(Output.of(subscribersMessage));
        }

        public Builder team(@Nullable Output<String> team) {
            $.team = team;
            return this;
        }

        public Builder team(String team) {
            return team(Output.of(team));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResponsePlayArgs build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            if ($.from == null) {
                throw new MissingRequiredPropertyException("ResponsePlayArgs", "from");
            }
            return $;
        }
    }

}
