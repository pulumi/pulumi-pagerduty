// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.RulesetRuleArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.RulesetRuleState;
import com.pulumi.pagerduty.outputs.RulesetRuleActions;
import com.pulumi.pagerduty.outputs.RulesetRuleConditions;
import com.pulumi.pagerduty.outputs.RulesetRuleTimeFrame;
import com.pulumi.pagerduty.outputs.RulesetRuleVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An [event rule](https://support.pagerduty.com/docs/rulesets#section-create-event-rules) allows you to set actions that should be taken on events that meet your designated rule criteria.
 * 
 * ## Import
 * 
 * Ruleset rules can be imported using the related `ruleset` ID and the `ruleset_rule` ID separated by a dot, e.g.
 * 
 * ```sh
 *  $ pulumi import pagerduty:index/rulesetRule:RulesetRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/rulesetRule:RulesetRule")
public class RulesetRule extends com.pulumi.resources.CustomResource {
    /**
     * Actions to apply to an event if the conditions match.
     * 
     */
    @Export(name="actions", type=RulesetRuleActions.class, parameters={})
    private Output</* @Nullable */ RulesetRuleActions> actions;

    /**
     * @return Actions to apply to an event if the conditions match.
     * 
     */
    public Output<Optional<RulesetRuleActions>> actions() {
        return Codegen.optional(this.actions);
    }
    /**
     * Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.
     * 
     */
    @Export(name="catchAll", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> catchAll;

    /**
     * @return Indicates whether the Event Rule is the last Event Rule of the Ruleset that serves as a catch-all. It has limited functionality compared to other rules and always matches.
     * 
     */
    public Output<Optional<Boolean>> catchAll() {
        return Codegen.optional(this.catchAll);
    }
    /**
     * Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.
     * 
     */
    @Export(name="conditions", type=RulesetRuleConditions.class, parameters={})
    private Output</* @Nullable */ RulesetRuleConditions> conditions;

    /**
     * @return Conditions evaluated to check if an event matches this event rule. Is always empty for the catch-all rule, though.
     * 
     */
    public Output<Optional<RulesetRuleConditions>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Position/index of the rule within the ruleset.
     * 
     */
    @Export(name="position", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> position;

    /**
     * @return Position/index of the rule within the ruleset.
     * 
     */
    public Output<Optional<Integer>> position() {
        return Codegen.optional(this.position);
    }
    /**
     * The ID of the ruleset that the rule belongs to.
     * 
     */
    @Export(name="ruleset", type=String.class, parameters={})
    private Output<String> ruleset;

    /**
     * @return The ID of the ruleset that the rule belongs to.
     * 
     */
    public Output<String> ruleset() {
        return this.ruleset;
    }
    /**
     * Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
     * 
     */
    @Export(name="timeFrame", type=RulesetRuleTimeFrame.class, parameters={})
    private Output</* @Nullable */ RulesetRuleTimeFrame> timeFrame;

    /**
     * @return Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
     * 
     */
    public Output<Optional<RulesetRuleTimeFrame>> timeFrame() {
        return Codegen.optional(this.timeFrame);
    }
    /**
     * Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
     * 
     */
    @Export(name="variables", type=List.class, parameters={RulesetRuleVariable.class})
    private Output</* @Nullable */ List<RulesetRuleVariable>> variables;

    /**
     * @return Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
     * 
     */
    public Output<Optional<List<RulesetRuleVariable>>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RulesetRule(String name) {
        this(name, RulesetRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RulesetRule(String name, RulesetRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RulesetRule(String name, RulesetRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/rulesetRule:RulesetRule", name, args == null ? RulesetRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RulesetRule(String name, Output<String> id, @Nullable RulesetRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/rulesetRule:RulesetRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RulesetRule get(String name, Output<String> id, @Nullable RulesetRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RulesetRule(name, id, state, options);
    }
}
