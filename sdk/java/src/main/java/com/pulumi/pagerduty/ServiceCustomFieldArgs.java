// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.ServiceCustomFieldFieldOptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceCustomFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCustomFieldArgs Empty = new ServiceCustomFieldArgs();

    /**
     * The kind of data the custom field is allowed to contain. Can be one of: `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     * 
     */
    @Import(name="dataType", required=true)
    private Output<String> dataType;

    /**
     * @return The kind of data the custom field is allowed to contain. Can be one of: `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }

    /**
     * Default value for the field.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return Default value for the field.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * A description of the data this field contains.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the data this field contains.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The human-readable name of the field. Must be unique across an account.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human-readable name of the field. Must be unique across an account.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Whether the field is enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the field is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Configuration block for defining options for `single_value_fixed` or `multi_value_fixed` field types. Can be specified multiple times for multiple options.
     * 
     */
    @Import(name="fieldOptions")
    private @Nullable Output<List<ServiceCustomFieldFieldOptionArgs>> fieldOptions;

    /**
     * @return Configuration block for defining options for `single_value_fixed` or `multi_value_fixed` field types. Can be specified multiple times for multiple options.
     * 
     */
    public Optional<Output<List<ServiceCustomFieldFieldOptionArgs>>> fieldOptions() {
        return Optional.ofNullable(this.fieldOptions);
    }

    /**
     * The type of field. Must be one of: `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
     * 
     */
    @Import(name="fieldType", required=true)
    private Output<String> fieldType;

    /**
     * @return The type of field. Must be one of: `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
     * 
     */
    public Output<String> fieldType() {
        return this.fieldType;
    }

    /**
     * The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underscores. Must be unique and cannot be changed once created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underscores. Must be unique and cannot be changed once created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ServiceCustomFieldArgs() {}

    private ServiceCustomFieldArgs(ServiceCustomFieldArgs $) {
        this.dataType = $.dataType;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.fieldOptions = $.fieldOptions;
        this.fieldType = $.fieldType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCustomFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCustomFieldArgs $;

        public Builder() {
            $ = new ServiceCustomFieldArgs();
        }

        public Builder(ServiceCustomFieldArgs defaults) {
            $ = new ServiceCustomFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType The kind of data the custom field is allowed to contain. Can be one of: `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The kind of data the custom field is allowed to contain. Can be one of: `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param defaultValue Default value for the field.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue Default value for the field.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description A description of the data this field contains.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the data this field contains.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The human-readable name of the field. Must be unique across an account.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the field. Must be unique across an account.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Whether the field is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the field is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fieldOptions Configuration block for defining options for `single_value_fixed` or `multi_value_fixed` field types. Can be specified multiple times for multiple options.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(@Nullable Output<List<ServiceCustomFieldFieldOptionArgs>> fieldOptions) {
            $.fieldOptions = fieldOptions;
            return this;
        }

        /**
         * @param fieldOptions Configuration block for defining options for `single_value_fixed` or `multi_value_fixed` field types. Can be specified multiple times for multiple options.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(List<ServiceCustomFieldFieldOptionArgs> fieldOptions) {
            return fieldOptions(Output.of(fieldOptions));
        }

        /**
         * @param fieldOptions Configuration block for defining options for `single_value_fixed` or `multi_value_fixed` field types. Can be specified multiple times for multiple options.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(ServiceCustomFieldFieldOptionArgs... fieldOptions) {
            return fieldOptions(List.of(fieldOptions));
        }

        /**
         * @param fieldType The type of field. Must be one of: `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        /**
         * @param fieldType The type of field. Must be one of: `single_value`, `single_value_fixed`, `multi_value`, or `multi_value_fixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        /**
         * @param name The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underscores. Must be unique and cannot be changed once created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the field. May include ASCII characters, specifically lowercase letters, digits, and underscores. Must be unique and cannot be changed once created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceCustomFieldArgs build() {
            if ($.dataType == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldArgs", "dataType");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldArgs", "displayName");
            }
            if ($.fieldType == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldArgs", "fieldType");
            }
            return $;
        }
    }

}
