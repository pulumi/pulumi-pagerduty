// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.ServiceDependencyArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.ServiceDependencyState;
import com.pulumi.pagerduty.outputs.ServiceDependencyDependency;
import javax.annotation.Nullable;

/**
 * A [service dependency](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Mg-associate-service-dependencies) is a relationship between two services that this service uses, or that are used by this service, and are critical for successful operation.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.ServiceDependency;
 * import com.pulumi.pagerduty.ServiceDependencyArgs;
 * import com.pulumi.pagerduty.inputs.ServiceDependencyDependencyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new ServiceDependency("foo", ServiceDependencyArgs.builder()        
 *             .dependency(ServiceDependencyDependencyArgs.builder()
 *                 .dependentServices(ServiceDependencyDependencyDependentServiceArgs.builder()
 *                     .id(fooPagerdutyBusinessService.id())
 *                     .type(fooPagerdutyBusinessService.type())
 *                     .build())
 *                 .supportingServices(ServiceDependencyDependencySupportingServiceArgs.builder()
 *                     .id(fooPagerdutyService.id())
 *                     .type(fooPagerdutyService.type())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var bar = new ServiceDependency("bar", ServiceDependencyArgs.builder()        
 *             .dependency(ServiceDependencyDependencyArgs.builder()
 *                 .dependentServices(ServiceDependencyDependencyDependentServiceArgs.builder()
 *                     .id(fooPagerdutyBusinessService.id())
 *                     .type(fooPagerdutyBusinessService.type())
 *                     .build())
 *                 .supportingServices(ServiceDependencyDependencySupportingServiceArgs.builder()
 *                     .id(two.id())
 *                     .type(two.type())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Service dependencies can be imported using the related supporting service id, supporting service type (`business_service` or `service`) and the dependency id separated by a dot, e.g.
 * 
 * ```sh
 * $ pulumi import pagerduty:index/serviceDependency:ServiceDependency main P4B2Z7G.business_service.D5RTHKRNGU4PYE90PJ
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/serviceDependency:ServiceDependency")
public class ServiceDependency extends com.pulumi.resources.CustomResource {
    @Export(name="dependency", refs={ServiceDependencyDependency.class}, tree="[0]")
    private Output<ServiceDependencyDependency> dependency;

    public Output<ServiceDependencyDependency> dependency() {
        return this.dependency;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceDependency(String name) {
        this(name, ServiceDependencyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceDependency(String name, ServiceDependencyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceDependency(String name, ServiceDependencyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/serviceDependency:ServiceDependency", name, args == null ? ServiceDependencyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceDependency(String name, Output<String> id, @Nullable ServiceDependencyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/serviceDependency:ServiceDependency", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceDependency get(String name, Output<String> id, @Nullable ServiceDependencyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceDependency(name, id, state, options);
    }
}
