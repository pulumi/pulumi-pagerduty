// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.ServiceEventRuleActionsArgs;
import com.pulumi.pagerduty.inputs.ServiceEventRuleConditionsArgs;
import com.pulumi.pagerduty.inputs.ServiceEventRuleTimeFrameArgs;
import com.pulumi.pagerduty.inputs.ServiceEventRuleVariableArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEventRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEventRuleArgs Empty = new ServiceEventRuleArgs();

    /**
     * Actions to apply to an event if the conditions match.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<ServiceEventRuleActionsArgs> actions;

    /**
     * @return Actions to apply to an event if the conditions match.
     * 
     */
    public Optional<Output<ServiceEventRuleActionsArgs>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Conditions evaluated to check if an event matches this event rule.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<ServiceEventRuleConditionsArgs> conditions;

    /**
     * @return Conditions evaluated to check if an event matches this event rule.
     * 
     */
    public Optional<Output<ServiceEventRuleConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Position/index of the rule within the service.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return Position/index of the rule within the service.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The ID of the service that the rule belongs to.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The ID of the service that the rule belongs to.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
     * 
     */
    @Import(name="timeFrame")
    private @Nullable Output<ServiceEventRuleTimeFrameArgs> timeFrame;

    /**
     * @return Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
     * 
     */
    public Optional<Output<ServiceEventRuleTimeFrameArgs>> timeFrame() {
        return Optional.ofNullable(this.timeFrame);
    }

    /**
     * Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
     * 
     */
    @Import(name="variables")
    private @Nullable Output<List<ServiceEventRuleVariableArgs>> variables;

    /**
     * @return Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
     * 
     */
    public Optional<Output<List<ServiceEventRuleVariableArgs>>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private ServiceEventRuleArgs() {}

    private ServiceEventRuleArgs(ServiceEventRuleArgs $) {
        this.actions = $.actions;
        this.conditions = $.conditions;
        this.disabled = $.disabled;
        this.position = $.position;
        this.service = $.service;
        this.timeFrame = $.timeFrame;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEventRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEventRuleArgs $;

        public Builder() {
            $ = new ServiceEventRuleArgs();
        }

        public Builder(ServiceEventRuleArgs defaults) {
            $ = new ServiceEventRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Actions to apply to an event if the conditions match.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<ServiceEventRuleActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions to apply to an event if the conditions match.
         * 
         * @return builder
         * 
         */
        public Builder actions(ServiceEventRuleActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param conditions Conditions evaluated to check if an event matches this event rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<ServiceEventRuleConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions evaluated to check if an event matches this event rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ServiceEventRuleConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param disabled Indicates whether the rule is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Indicates whether the rule is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param position Position/index of the rule within the service.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position Position/index of the rule within the service.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param service The ID of the service that the rule belongs to.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The ID of the service that the rule belongs to.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param timeFrame Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
         * 
         * @return builder
         * 
         */
        public Builder timeFrame(@Nullable Output<ServiceEventRuleTimeFrameArgs> timeFrame) {
            $.timeFrame = timeFrame;
            return this;
        }

        /**
         * @param timeFrame Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
         * 
         * @return builder
         * 
         */
        public Builder timeFrame(ServiceEventRuleTimeFrameArgs timeFrame) {
            return timeFrame(Output.of(timeFrame));
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<List<ServiceEventRuleVariableArgs>> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
         * 
         * @return builder
         * 
         */
        public Builder variables(List<ServiceEventRuleVariableArgs> variables) {
            return variables(Output.of(variables));
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
         * 
         * @return builder
         * 
         */
        public Builder variables(ServiceEventRuleVariableArgs... variables) {
            return variables(List.of(variables));
        }

        public ServiceEventRuleArgs build() {
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
