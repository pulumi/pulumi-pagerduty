// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.SlackConnectionArgs;
import com.pulumi.pagerduty.Utilities;
import com.pulumi.pagerduty.inputs.SlackConnectionState;
import com.pulumi.pagerduty.outputs.SlackConnectionConfig;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A [slack connection](https://developer.pagerduty.com/api-reference/YXBpOjExMjA5NTQ0-pager-duty-slack-integration-api) allows you to connect a workspace in Slack to a PagerDuty service or team which allows you to acknowledge and resolve PagerDuty incidents from the Slack user interface.
 * 
 * **NOTES for using this resource:**
 * * To first use this resource you will need to [map your PagerDuty account to a valid Slack Workspace](https://support.pagerduty.com/docs/slack-integration-guide#integration-walkthrough). *This can only be done through the PagerDuty UI.*
 * * This resource requires a PagerDuty [user-level API key](https://support.pagerduty.com/docs/generating-api-keys#section-generating-a-personal-rest-api-key). This can be set as the `user_token` on the provider tag or as the `PAGERDUTY_USER_TOKEN` environment variable.
 * * This resource is for configuring Slack V2 Next Generation connections. If you configured your Slack integration (V1 or V2) prior to August 10, 2021, you may migrate to the Slack V2 Next Generation update using this [migration instructions](https://support.pagerduty.com/docs/slack-integration-guide#migrate-to-slack-v2-next-generation), but if you configured your Slack integration after that date, you will have access to the update out of the box.
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pagerduty.Team;
 * import com.pulumi.pagerduty.PagerdutyFunctions;
 * import com.pulumi.pagerduty.inputs.GetPriorityArgs;
 * import com.pulumi.pagerduty.SlackConnection;
 * import com.pulumi.pagerduty.SlackConnectionArgs;
 * import com.pulumi.pagerduty.inputs.SlackConnectionConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var fooTeam = new Team(&#34;fooTeam&#34;);
 * 
 *         final var p1 = PagerdutyFunctions.getPriority(GetPriorityArgs.builder()
 *             .name(&#34;P1&#34;)
 *             .build());
 * 
 *         var fooSlackConnection = new SlackConnection(&#34;fooSlackConnection&#34;, SlackConnectionArgs.builder()        
 *             .sourceId(fooTeam.id())
 *             .sourceType(&#34;team_reference&#34;)
 *             .workspaceId(&#34;T02A123LV1A&#34;)
 *             .channelId(&#34;C02CABCDAC9&#34;)
 *             .notificationType(&#34;responder&#34;)
 *             .configs(SlackConnectionConfigArgs.builder()
 *                 .events(                
 *                     &#34;incident.triggered&#34;,
 *                     &#34;incident.acknowledged&#34;,
 *                     &#34;incident.escalated&#34;,
 *                     &#34;incident.resolved&#34;,
 *                     &#34;incident.reassigned&#34;,
 *                     &#34;incident.annotated&#34;,
 *                     &#34;incident.unacknowledged&#34;,
 *                     &#34;incident.delegated&#34;,
 *                     &#34;incident.priority_updated&#34;,
 *                     &#34;incident.responder.added&#34;,
 *                     &#34;incident.responder.replied&#34;,
 *                     &#34;incident.status_update_published&#34;,
 *                     &#34;incident.reopened&#34;)
 *                 .priorities(p1.applyValue(getPriorityResult -&gt; getPriorityResult.id()))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Slack connections can be imported using the related `workspace` ID and the `slack_connection` ID separated by a dot, e.g.
 * 
 * ```sh
 *  $ pulumi import pagerduty:index/slackConnection:SlackConnection main T02A123LV1A.PUABCDL
 * ```
 * 
 */
@ResourceType(type="pagerduty:index/slackConnection:SlackConnection")
public class SlackConnection extends com.pulumi.resources.CustomResource {
    /**
     * The ID of a Slack channel in the workspace.
     * 
     */
    @Export(name="channelId", type=String.class, parameters={})
    private Output<String> channelId;

    /**
     * @return The ID of a Slack channel in the workspace.
     * 
     */
    public Output<String> channelId() {
        return this.channelId;
    }
    /**
     * Name of the Slack channel in Slack connection.
     * 
     */
    @Export(name="channelName", type=String.class, parameters={})
    private Output<String> channelName;

    /**
     * @return Name of the Slack channel in Slack connection.
     * 
     */
    public Output<String> channelName() {
        return this.channelName;
    }
    /**
     * Configuration options for the Slack connection that provide options to filter events.
     * 
     */
    @Export(name="configs", type=List.class, parameters={SlackConnectionConfig.class})
    private Output<List<SlackConnectionConfig>> configs;

    /**
     * @return Configuration options for the Slack connection that provide options to filter events.
     * 
     */
    public Output<List<SlackConnectionConfig>> configs() {
        return this.configs;
    }
    /**
     * Type of notification. Either `responder` or `stakeholder`.
     * 
     */
    @Export(name="notificationType", type=String.class, parameters={})
    private Output<String> notificationType;

    /**
     * @return Type of notification. Either `responder` or `stakeholder`.
     * 
     */
    public Output<String> notificationType() {
        return this.notificationType;
    }
    /**
     * The ID of the source in PagerDuty. Valid sources are services or teams.
     * 
     */
    @Export(name="sourceId", type=String.class, parameters={})
    private Output<String> sourceId;

    /**
     * @return The ID of the source in PagerDuty. Valid sources are services or teams.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }
    /**
     * Name of the source (team or service) in Slack connection.
     * 
     */
    @Export(name="sourceName", type=String.class, parameters={})
    private Output<String> sourceName;

    /**
     * @return Name of the source (team or service) in Slack connection.
     * 
     */
    public Output<String> sourceName() {
        return this.sourceName;
    }
    /**
     * The type of the source. Either `team_reference` or `service_reference`.
     * 
     */
    @Export(name="sourceType", type=String.class, parameters={})
    private Output<String> sourceType;

    /**
     * @return The type of the source. Either `team_reference` or `service_reference`.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }
    /**
     * The ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.
     * 
     */
    @Export(name="workspaceId", type=String.class, parameters={})
    private Output<String> workspaceId;

    /**
     * @return The ID of the connected Slack workspace. Can also be defined by the `SLACK_CONNECTION_WORKSPACE_ID` environment variable.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SlackConnection(String name) {
        this(name, SlackConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SlackConnection(String name, SlackConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SlackConnection(String name, SlackConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/slackConnection:SlackConnection", name, args == null ? SlackConnectionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SlackConnection(String name, Output<String> id, @Nullable SlackConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pagerduty:index/slackConnection:SlackConnection", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SlackConnection get(String name, Output<String> id, @Nullable SlackConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SlackConnection(name, id, state, options);
    }
}
