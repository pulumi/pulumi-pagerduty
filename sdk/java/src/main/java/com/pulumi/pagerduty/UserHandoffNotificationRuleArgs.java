// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.UserHandoffNotificationRuleContactMethodArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserHandoffNotificationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserHandoffNotificationRuleArgs Empty = new UserHandoffNotificationRuleArgs();

    /**
     * The contact method to notify the user. Contact method documented below.
     * 
     */
    @Import(name="contactMethod", required=true)
    private Output<UserHandoffNotificationRuleContactMethodArgs> contactMethod;

    /**
     * @return The contact method to notify the user. Contact method documented below.
     * 
     */
    public Output<UserHandoffNotificationRuleContactMethodArgs> contactMethod() {
        return this.contactMethod;
    }

    /**
     * The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     * 
     */
    @Import(name="handoffType")
    private @Nullable Output<String> handoffType;

    /**
     * @return The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     * 
     */
    public Optional<Output<String>> handoffType() {
        return Optional.ofNullable(this.handoffType);
    }

    /**
     * The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     * 
     */
    @Import(name="notifyAdvanceInMinutes", required=true)
    private Output<Integer> notifyAdvanceInMinutes;

    /**
     * @return The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     * 
     */
    public Output<Integer> notifyAdvanceInMinutes() {
        return this.notifyAdvanceInMinutes;
    }

    /**
     * The ID of the user.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The ID of the user.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserHandoffNotificationRuleArgs() {}

    private UserHandoffNotificationRuleArgs(UserHandoffNotificationRuleArgs $) {
        this.contactMethod = $.contactMethod;
        this.handoffType = $.handoffType;
        this.notifyAdvanceInMinutes = $.notifyAdvanceInMinutes;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserHandoffNotificationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserHandoffNotificationRuleArgs $;

        public Builder() {
            $ = new UserHandoffNotificationRuleArgs();
        }

        public Builder(UserHandoffNotificationRuleArgs defaults) {
            $ = new UserHandoffNotificationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactMethod The contact method to notify the user. Contact method documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactMethod(Output<UserHandoffNotificationRuleContactMethodArgs> contactMethod) {
            $.contactMethod = contactMethod;
            return this;
        }

        /**
         * @param contactMethod The contact method to notify the user. Contact method documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactMethod(UserHandoffNotificationRuleContactMethodArgs contactMethod) {
            return contactMethod(Output.of(contactMethod));
        }

        /**
         * @param handoffType The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
         * 
         * @return builder
         * 
         */
        public Builder handoffType(@Nullable Output<String> handoffType) {
            $.handoffType = handoffType;
            return this;
        }

        /**
         * @param handoffType The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
         * 
         * @return builder
         * 
         */
        public Builder handoffType(String handoffType) {
            return handoffType(Output.of(handoffType));
        }

        /**
         * @param notifyAdvanceInMinutes The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder notifyAdvanceInMinutes(Output<Integer> notifyAdvanceInMinutes) {
            $.notifyAdvanceInMinutes = notifyAdvanceInMinutes;
            return this;
        }

        /**
         * @param notifyAdvanceInMinutes The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder notifyAdvanceInMinutes(Integer notifyAdvanceInMinutes) {
            return notifyAdvanceInMinutes(Output.of(notifyAdvanceInMinutes));
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserHandoffNotificationRuleArgs build() {
            if ($.contactMethod == null) {
                throw new MissingRequiredPropertyException("UserHandoffNotificationRuleArgs", "contactMethod");
            }
            if ($.notifyAdvanceInMinutes == null) {
                throw new MissingRequiredPropertyException("UserHandoffNotificationRuleArgs", "notifyAdvanceInMinutes");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserHandoffNotificationRuleArgs", "userId");
            }
            return $;
        }
    }

}
