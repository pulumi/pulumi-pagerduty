// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomFieldSchemaFieldConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final CustomFieldSchemaFieldConfigurationState Empty = new CustomFieldSchemaFieldConfigurationState();

    /**
     * The default value for the field.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The default value for the field.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The datatype of the default value.
     * 
     */
    @Import(name="defaultValueDatatype")
    private @Nullable Output<String> defaultValueDatatype;

    /**
     * @return The datatype of the default value.
     * 
     */
    public Optional<Output<String>> defaultValueDatatype() {
        return Optional.ofNullable(this.defaultValueDatatype);
    }

    /**
     * Whether or not the default value is multi-valued.
     * 
     */
    @Import(name="defaultValueMultiValue")
    private @Nullable Output<Boolean> defaultValueMultiValue;

    /**
     * @return Whether or not the default value is multi-valued.
     * 
     */
    public Optional<Output<Boolean>> defaultValueMultiValue() {
        return Optional.ofNullable(this.defaultValueMultiValue);
    }

    /**
     * The ID of the field.
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return The ID of the field.
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * True if the field is required
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return True if the field is required
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * The ID of the schema.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The ID of the schema.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    private CustomFieldSchemaFieldConfigurationState() {}

    private CustomFieldSchemaFieldConfigurationState(CustomFieldSchemaFieldConfigurationState $) {
        this.defaultValue = $.defaultValue;
        this.defaultValueDatatype = $.defaultValueDatatype;
        this.defaultValueMultiValue = $.defaultValueMultiValue;
        this.field = $.field;
        this.required = $.required;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomFieldSchemaFieldConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomFieldSchemaFieldConfigurationState $;

        public Builder() {
            $ = new CustomFieldSchemaFieldConfigurationState();
        }

        public Builder(CustomFieldSchemaFieldConfigurationState defaults) {
            $ = new CustomFieldSchemaFieldConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue The default value for the field.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value for the field.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param defaultValueDatatype The datatype of the default value.
         * 
         * @return builder
         * 
         */
        public Builder defaultValueDatatype(@Nullable Output<String> defaultValueDatatype) {
            $.defaultValueDatatype = defaultValueDatatype;
            return this;
        }

        /**
         * @param defaultValueDatatype The datatype of the default value.
         * 
         * @return builder
         * 
         */
        public Builder defaultValueDatatype(String defaultValueDatatype) {
            return defaultValueDatatype(Output.of(defaultValueDatatype));
        }

        /**
         * @param defaultValueMultiValue Whether or not the default value is multi-valued.
         * 
         * @return builder
         * 
         */
        public Builder defaultValueMultiValue(@Nullable Output<Boolean> defaultValueMultiValue) {
            $.defaultValueMultiValue = defaultValueMultiValue;
            return this;
        }

        /**
         * @param defaultValueMultiValue Whether or not the default value is multi-valued.
         * 
         * @return builder
         * 
         */
        public Builder defaultValueMultiValue(Boolean defaultValueMultiValue) {
            return defaultValueMultiValue(Output.of(defaultValueMultiValue));
        }

        /**
         * @param field The ID of the field.
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The ID of the field.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param required True if the field is required
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required True if the field is required
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param schema The ID of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The ID of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public CustomFieldSchemaFieldConfigurationState build() {
            return $;
        }
    }

}
