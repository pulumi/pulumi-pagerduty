// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomFieldState extends com.pulumi.resources.ResourceArgs {

    public static final CustomFieldState Empty = new CustomFieldState();

    /**
     * The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     * 
     */
    @Import(name="datatype")
    private @Nullable Output<String> datatype;

    /**
     * @return The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     * 
     */
    public Optional<Output<String>> datatype() {
        return Optional.ofNullable(this.datatype);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * True if the field can only accept values from a set of options.
     * 
     */
    @Import(name="fixedOptions")
    private @Nullable Output<Boolean> fixedOptions;

    /**
     * @return True if the field can only accept values from a set of options.
     * 
     */
    public Optional<Output<Boolean>> fixedOptions() {
        return Optional.ofNullable(this.fixedOptions);
    }

    /**
     * True if the field can accept multiple values.
     * 
     */
    @Import(name="multiValue")
    private @Nullable Output<Boolean> multiValue;

    /**
     * @return True if the field can accept multiple values.
     * 
     */
    public Optional<Output<Boolean>> multiValue() {
        return Optional.ofNullable(this.multiValue);
    }

    /**
     * The name of the field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CustomFieldState() {}

    private CustomFieldState(CustomFieldState $) {
        this.datatype = $.datatype;
        this.description = $.description;
        this.displayName = $.displayName;
        this.fixedOptions = $.fixedOptions;
        this.multiValue = $.multiValue;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomFieldState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomFieldState $;

        public Builder() {
            $ = new CustomFieldState();
        }

        public Builder(CustomFieldState defaults) {
            $ = new CustomFieldState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datatype The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
         * 
         * @return builder
         * 
         */
        public Builder datatype(@Nullable Output<String> datatype) {
            $.datatype = datatype;
            return this;
        }

        /**
         * @param datatype The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
         * 
         * @return builder
         * 
         */
        public Builder datatype(String datatype) {
            return datatype(Output.of(datatype));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fixedOptions True if the field can only accept values from a set of options.
         * 
         * @return builder
         * 
         */
        public Builder fixedOptions(@Nullable Output<Boolean> fixedOptions) {
            $.fixedOptions = fixedOptions;
            return this;
        }

        /**
         * @param fixedOptions True if the field can only accept values from a set of options.
         * 
         * @return builder
         * 
         */
        public Builder fixedOptions(Boolean fixedOptions) {
            return fixedOptions(Output.of(fixedOptions));
        }

        /**
         * @param multiValue True if the field can accept multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(@Nullable Output<Boolean> multiValue) {
            $.multiValue = multiValue;
            return this;
        }

        /**
         * @param multiValue True if the field can accept multiple values.
         * 
         * @return builder
         * 
         */
        public Builder multiValue(Boolean multiValue) {
            return multiValue(Output.of(multiValue));
        }

        /**
         * @param name The name of the field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CustomFieldState build() {
            return $;
        }
    }

}
