// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.EventOrchestrationRouterCatchAllArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationRouterSetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationRouterState extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationRouterState Empty = new EventOrchestrationRouterState();

    /**
     * When none of the rules match an event, the event will be routed according to the catch_all settings.
     * 
     */
    @Import(name="catchAll")
    private @Nullable Output<EventOrchestrationRouterCatchAllArgs> catchAll;

    /**
     * @return When none of the rules match an event, the event will be routed according to the catch_all settings.
     * 
     */
    public Optional<Output<EventOrchestrationRouterCatchAllArgs>> catchAll() {
        return Optional.ofNullable(this.catchAll);
    }

    /**
     * ID of the Event Orchestration to which the Router belongs.
     * 
     */
    @Import(name="eventOrchestration")
    private @Nullable Output<String> eventOrchestration;

    /**
     * @return ID of the Event Orchestration to which the Router belongs.
     * 
     */
    public Optional<Output<String>> eventOrchestration() {
        return Optional.ofNullable(this.eventOrchestration);
    }

    /**
     * The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    @Import(name="set")
    private @Nullable Output<EventOrchestrationRouterSetArgs> set;

    /**
     * @return The Router contains a single set of rules  (the &#34;start&#34; set).
     * 
     */
    public Optional<Output<EventOrchestrationRouterSetArgs>> set() {
        return Optional.ofNullable(this.set);
    }

    private EventOrchestrationRouterState() {}

    private EventOrchestrationRouterState(EventOrchestrationRouterState $) {
        this.catchAll = $.catchAll;
        this.eventOrchestration = $.eventOrchestration;
        this.set = $.set;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationRouterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationRouterState $;

        public Builder() {
            $ = new EventOrchestrationRouterState();
        }

        public Builder(EventOrchestrationRouterState defaults) {
            $ = new EventOrchestrationRouterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catchAll When none of the rules match an event, the event will be routed according to the catch_all settings.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(@Nullable Output<EventOrchestrationRouterCatchAllArgs> catchAll) {
            $.catchAll = catchAll;
            return this;
        }

        /**
         * @param catchAll When none of the rules match an event, the event will be routed according to the catch_all settings.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(EventOrchestrationRouterCatchAllArgs catchAll) {
            return catchAll(Output.of(catchAll));
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which the Router belongs.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(@Nullable Output<String> eventOrchestration) {
            $.eventOrchestration = eventOrchestration;
            return this;
        }

        /**
         * @param eventOrchestration ID of the Event Orchestration to which the Router belongs.
         * 
         * @return builder
         * 
         */
        public Builder eventOrchestration(String eventOrchestration) {
            return eventOrchestration(Output.of(eventOrchestration));
        }

        /**
         * @param set The Router contains a single set of rules  (the &#34;start&#34; set).
         * 
         * @return builder
         * 
         */
        public Builder set(@Nullable Output<EventOrchestrationRouterSetArgs> set) {
            $.set = set;
            return this;
        }

        /**
         * @param set The Router contains a single set of rules  (the &#34;start&#34; set).
         * 
         * @return builder
         * 
         */
        public Builder set(EventOrchestrationRouterSetArgs set) {
            return set(Output.of(set));
        }

        public EventOrchestrationRouterState build() {
            return $;
        }
    }

}
