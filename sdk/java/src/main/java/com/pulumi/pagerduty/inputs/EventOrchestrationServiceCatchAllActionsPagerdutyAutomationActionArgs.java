// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs Empty = new EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs();

    /**
     * Id of the Process Automation action to be triggered.
     * 
     */
    @Import(name="actionId", required=true)
    private Output<String> actionId;

    /**
     * @return Id of the Process Automation action to be triggered.
     * 
     */
    public Output<String> actionId() {
        return this.actionId;
    }

    /**
     * The Automation Action will be triggered whenever an alert reaches the specified state. Allowed values are: `[&#34;alert_triggered&#34;]`, `[&#34;alert_suspended&#34;]`, `[&#34;alert_suppressed&#34;]`
     * 
     */
    @Import(name="triggerTypes")
    private @Nullable Output<String> triggerTypes;

    /**
     * @return The Automation Action will be triggered whenever an alert reaches the specified state. Allowed values are: `[&#34;alert_triggered&#34;]`, `[&#34;alert_suspended&#34;]`, `[&#34;alert_suppressed&#34;]`
     * 
     */
    public Optional<Output<String>> triggerTypes() {
        return Optional.ofNullable(this.triggerTypes);
    }

    private EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs() {}

    private EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs $) {
        this.actionId = $.actionId;
        this.triggerTypes = $.triggerTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs $;

        public Builder() {
            $ = new EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs();
        }

        public Builder(EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs defaults) {
            $ = new EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionId Id of the Process Automation action to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder actionId(Output<String> actionId) {
            $.actionId = actionId;
            return this;
        }

        /**
         * @param actionId Id of the Process Automation action to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder actionId(String actionId) {
            return actionId(Output.of(actionId));
        }

        /**
         * @param triggerTypes The Automation Action will be triggered whenever an alert reaches the specified state. Allowed values are: `[&#34;alert_triggered&#34;]`, `[&#34;alert_suspended&#34;]`, `[&#34;alert_suppressed&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder triggerTypes(@Nullable Output<String> triggerTypes) {
            $.triggerTypes = triggerTypes;
            return this;
        }

        /**
         * @param triggerTypes The Automation Action will be triggered whenever an alert reaches the specified state. Allowed values are: `[&#34;alert_triggered&#34;]`, `[&#34;alert_suspended&#34;]`, `[&#34;alert_suppressed&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder triggerTypes(String triggerTypes) {
            return triggerTypes(Output.of(triggerTypes));
        }

        public EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs build() {
            if ($.actionId == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs", "actionId");
            }
            return $;
        }
    }

}
