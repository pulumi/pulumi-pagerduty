// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedCatchAllActionsExtractionArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedCatchAllActionsVariableArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationUnroutedCatchAllActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationUnroutedCatchAllActionsArgs Empty = new EventOrchestrationUnroutedCatchAllActionsArgs();

    /**
     * sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
     * 
     */
    @Import(name="eventAction")
    private @Nullable Output<String> eventAction;

    /**
     * @return sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
     * 
     */
    public Optional<Output<String>> eventAction() {
        return Optional.ofNullable(this.eventAction);
    }

    /**
     * Replace any CEF field or Custom Details object field using custom variables.
     * 
     */
    @Import(name="extractions")
    private @Nullable Output<List<EventOrchestrationUnroutedCatchAllActionsExtractionArgs>> extractions;

    /**
     * @return Replace any CEF field or Custom Details object field using custom variables.
     * 
     */
    public Optional<Output<List<EventOrchestrationUnroutedCatchAllActionsExtractionArgs>>> extractions() {
        return Optional.ofNullable(this.extractions);
    }

    /**
     * sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    @Import(name="suppress")
    private @Nullable Output<Boolean> suppress;

    public Optional<Output<Boolean>> suppress() {
        return Optional.ofNullable(this.suppress);
    }

    /**
     * Populate variables from event payloads and use those variables in other event actions.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<List<EventOrchestrationUnroutedCatchAllActionsVariableArgs>> variables;

    /**
     * @return Populate variables from event payloads and use those variables in other event actions.
     * 
     */
    public Optional<Output<List<EventOrchestrationUnroutedCatchAllActionsVariableArgs>>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private EventOrchestrationUnroutedCatchAllActionsArgs() {}

    private EventOrchestrationUnroutedCatchAllActionsArgs(EventOrchestrationUnroutedCatchAllActionsArgs $) {
        this.eventAction = $.eventAction;
        this.extractions = $.extractions;
        this.severity = $.severity;
        this.suppress = $.suppress;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationUnroutedCatchAllActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationUnroutedCatchAllActionsArgs $;

        public Builder() {
            $ = new EventOrchestrationUnroutedCatchAllActionsArgs();
        }

        public Builder(EventOrchestrationUnroutedCatchAllActionsArgs defaults) {
            $ = new EventOrchestrationUnroutedCatchAllActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventAction sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
         * 
         * @return builder
         * 
         */
        public Builder eventAction(@Nullable Output<String> eventAction) {
            $.eventAction = eventAction;
            return this;
        }

        /**
         * @param eventAction sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
         * 
         * @return builder
         * 
         */
        public Builder eventAction(String eventAction) {
            return eventAction(Output.of(eventAction));
        }

        /**
         * @param extractions Replace any CEF field or Custom Details object field using custom variables.
         * 
         * @return builder
         * 
         */
        public Builder extractions(@Nullable Output<List<EventOrchestrationUnroutedCatchAllActionsExtractionArgs>> extractions) {
            $.extractions = extractions;
            return this;
        }

        /**
         * @param extractions Replace any CEF field or Custom Details object field using custom variables.
         * 
         * @return builder
         * 
         */
        public Builder extractions(List<EventOrchestrationUnroutedCatchAllActionsExtractionArgs> extractions) {
            return extractions(Output.of(extractions));
        }

        /**
         * @param extractions Replace any CEF field or Custom Details object field using custom variables.
         * 
         * @return builder
         * 
         */
        public Builder extractions(EventOrchestrationUnroutedCatchAllActionsExtractionArgs... extractions) {
            return extractions(List.of(extractions));
        }

        /**
         * @param severity sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        public Builder suppress(@Nullable Output<Boolean> suppress) {
            $.suppress = suppress;
            return this;
        }

        public Builder suppress(Boolean suppress) {
            return suppress(Output.of(suppress));
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<List<EventOrchestrationUnroutedCatchAllActionsVariableArgs>> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions.
         * 
         * @return builder
         * 
         */
        public Builder variables(List<EventOrchestrationUnroutedCatchAllActionsVariableArgs> variables) {
            return variables(Output.of(variables));
        }

        /**
         * @param variables Populate variables from event payloads and use those variables in other event actions.
         * 
         * @return builder
         * 
         */
        public Builder variables(EventOrchestrationUnroutedCatchAllActionsVariableArgs... variables) {
            return variables(List.of(variables));
        }

        public EventOrchestrationUnroutedCatchAllActionsArgs build() {
            return $;
        }
    }

}
