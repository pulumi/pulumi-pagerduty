// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedSetRuleActionsArgs;
import com.pulumi.pagerduty.inputs.EventOrchestrationUnroutedSetRuleConditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventOrchestrationUnroutedSetRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventOrchestrationUnroutedSetRuleArgs Empty = new EventOrchestrationUnroutedSetRuleArgs();

    /**
     * Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
     * 
     */
    @Import(name="actions", required=true)
    private Output<EventOrchestrationUnroutedSetRuleActionsArgs> actions;

    /**
     * @return Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
     * 
     */
    public Output<EventOrchestrationUnroutedSetRuleActionsArgs> actions() {
        return this.actions;
    }

    /**
     * Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<EventOrchestrationUnroutedSetRuleConditionArgs>> conditions;

    /**
     * @return Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
     * 
     */
    public Optional<Output<List<EventOrchestrationUnroutedSetRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Indicates whether the rule is disabled and would therefore not be evaluated.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The ID of the rule within the set.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the rule within the set.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A description of this rule&#39;s purpose.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return A description of this rule&#39;s purpose.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    private EventOrchestrationUnroutedSetRuleArgs() {}

    private EventOrchestrationUnroutedSetRuleArgs(EventOrchestrationUnroutedSetRuleArgs $) {
        this.actions = $.actions;
        this.conditions = $.conditions;
        this.disabled = $.disabled;
        this.id = $.id;
        this.label = $.label;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventOrchestrationUnroutedSetRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventOrchestrationUnroutedSetRuleArgs $;

        public Builder() {
            $ = new EventOrchestrationUnroutedSetRuleArgs();
        }

        public Builder(EventOrchestrationUnroutedSetRuleArgs defaults) {
            $ = new EventOrchestrationUnroutedSetRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<EventOrchestrationUnroutedSetRuleActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
         * 
         * @return builder
         * 
         */
        public Builder actions(EventOrchestrationUnroutedSetRuleActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param conditions Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<EventOrchestrationUnroutedSetRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<EventOrchestrationUnroutedSetRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(EventOrchestrationUnroutedSetRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param disabled Indicates whether the rule is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Indicates whether the rule is disabled and would therefore not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param id The ID of the rule within the set.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the rule within the set.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label A description of this rule&#39;s purpose.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A description of this rule&#39;s purpose.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        public EventOrchestrationUnroutedSetRuleArgs build() {
            if ($.actions == null) {
                throw new MissingRequiredPropertyException("EventOrchestrationUnroutedSetRuleArgs", "actions");
            }
            return $;
        }
    }

}
