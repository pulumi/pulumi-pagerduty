// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventRuleState extends com.pulumi.resources.ResourceArgs {

    public static final EventRuleState Empty = new EventRuleState();

    /**
     * A list of one or more actions for each rule. Each action within the list is itself a list.
     * 
     */
    @Import(name="actionJson")
    private @Nullable Output<String> actionJson;

    /**
     * @return A list of one or more actions for each rule. Each action within the list is itself a list.
     * 
     */
    public Optional<Output<String>> actionJson() {
        return Optional.ofNullable(this.actionJson);
    }

    /**
     * Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
     * 
     */
    @Import(name="advancedConditionJson")
    private @Nullable Output<String> advancedConditionJson;

    /**
     * @return Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
     * 
     */
    public Optional<Output<String>> advancedConditionJson() {
        return Optional.ofNullable(this.advancedConditionJson);
    }

    /**
     * A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.
     * 
     */
    @Import(name="catchAll")
    private @Nullable Output<Boolean> catchAll;

    /**
     * @return A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.
     * 
     */
    public Optional<Output<Boolean>> catchAll() {
        return Optional.ofNullable(this.catchAll);
    }

    /**
     * Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
     * 
     */
    @Import(name="conditionJson")
    private @Nullable Output<String> conditionJson;

    /**
     * @return Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
     * 
     */
    public Optional<Output<String>> conditionJson() {
        return Optional.ofNullable(this.conditionJson);
    }

    private EventRuleState() {}

    private EventRuleState(EventRuleState $) {
        this.actionJson = $.actionJson;
        this.advancedConditionJson = $.advancedConditionJson;
        this.catchAll = $.catchAll;
        this.conditionJson = $.conditionJson;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventRuleState $;

        public Builder() {
            $ = new EventRuleState();
        }

        public Builder(EventRuleState defaults) {
            $ = new EventRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionJson A list of one or more actions for each rule. Each action within the list is itself a list.
         * 
         * @return builder
         * 
         */
        public Builder actionJson(@Nullable Output<String> actionJson) {
            $.actionJson = actionJson;
            return this;
        }

        /**
         * @param actionJson A list of one or more actions for each rule. Each action within the list is itself a list.
         * 
         * @return builder
         * 
         */
        public Builder actionJson(String actionJson) {
            return actionJson(Output.of(actionJson));
        }

        /**
         * @param advancedConditionJson Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
         * 
         * @return builder
         * 
         */
        public Builder advancedConditionJson(@Nullable Output<String> advancedConditionJson) {
            $.advancedConditionJson = advancedConditionJson;
            return this;
        }

        /**
         * @param advancedConditionJson Contains a list of specific conditions including `active-between`,`scheduled-weekly`, and `frequency-over`. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see [Advanced Condition](https://developer.pagerduty.com/docs/rest-api-v2/global-event-rules-api/#advanced-condition-parameter) in the PagerDuty API documentation.
         * 
         * @return builder
         * 
         */
        public Builder advancedConditionJson(String advancedConditionJson) {
            return advancedConditionJson(Output.of(advancedConditionJson));
        }

        /**
         * @param catchAll A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(@Nullable Output<Boolean> catchAll) {
            $.catchAll = catchAll;
            return this;
        }

        /**
         * @param catchAll A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.
         * 
         * @return builder
         * 
         */
        public Builder catchAll(Boolean catchAll) {
            return catchAll(Output.of(catchAll));
        }

        /**
         * @param conditionJson Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
         * 
         * @return builder
         * 
         */
        public Builder conditionJson(@Nullable Output<String> conditionJson) {
            $.conditionJson = conditionJson;
            return this;
        }

        /**
         * @param conditionJson Contains a list of conditions. The first field in the list is `and` or `or`, followed by a list of operators and values.
         * 
         * @return builder
         * 
         */
        public Builder conditionJson(String conditionJson) {
            return conditionJson(Output.of(conditionJson));
        }

        public EventRuleState build() {
            return $;
        }
    }

}
