// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetAlertGroupingSettingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetAlertGroupingSettingConfigArgs Empty = new GetAlertGroupingSettingConfigArgs();

    /**
     * One of `any` or `all`. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`. Group alerts based on one or all of `fields` value(s).
     * 
     */
    @Import(name="aggregate", required=true)
    private Output<String> aggregate;

    /**
     * @return One of `any` or `all`. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`. Group alerts based on one or all of `fields` value(s).
     * 
     */
    public Output<String> aggregate() {
        return this.aggregate;
    }

    /**
     * Alerts will be grouped together if the content of these fields match. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`.
     * 
     */
    @Import(name="fields", required=true)
    private Output<List<String>> fields;

    /**
     * @return Alerts will be grouped together if the content of these fields match. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`.
     * 
     */
    public Output<List<String>> fields() {
        return this.fields;
    }

    /**
     * An array of strings which represent the iag fields with which to intelligently group against.
     * 
     */
    @Import(name="iagFields", required=true)
    private Output<List<String>> iagFields;

    /**
     * @return An array of strings which represent the iag fields with which to intelligently group against.
     * 
     */
    public Output<List<String>> iagFields() {
        return this.iagFields;
    }

    /**
     * The maximum amount of time allowed between Alerts. This setting applies only when `type` is set to `intelligent`, `contentBased`, `contentBasedIntelligent`. Value must be between `300` and `3600` or exactly `86400` (86400 is supported only for `contentBased` alert grouping). Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to `null`.
     * 
     */
    @Import(name="timeWindow", required=true)
    private Output<Integer> timeWindow;

    /**
     * @return The maximum amount of time allowed between Alerts. This setting applies only when `type` is set to `intelligent`, `contentBased`, `contentBasedIntelligent`. Value must be between `300` and `3600` or exactly `86400` (86400 is supported only for `contentBased` alert grouping). Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to `null`.
     * 
     */
    public Output<Integer> timeWindow() {
        return this.timeWindow;
    }

    /**
     * The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when `type` is set to `time`. To continue grouping alerts until the incident is resolved leave this value unset or set it to `null`.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when `type` is set to `time`. To continue grouping alerts until the incident is resolved leave this value unset or set it to `null`.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    private GetAlertGroupingSettingConfigArgs() {}

    private GetAlertGroupingSettingConfigArgs(GetAlertGroupingSettingConfigArgs $) {
        this.aggregate = $.aggregate;
        this.fields = $.fields;
        this.iagFields = $.iagFields;
        this.timeWindow = $.timeWindow;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAlertGroupingSettingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAlertGroupingSettingConfigArgs $;

        public Builder() {
            $ = new GetAlertGroupingSettingConfigArgs();
        }

        public Builder(GetAlertGroupingSettingConfigArgs defaults) {
            $ = new GetAlertGroupingSettingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregate One of `any` or `all`. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`. Group alerts based on one or all of `fields` value(s).
         * 
         * @return builder
         * 
         */
        public Builder aggregate(Output<String> aggregate) {
            $.aggregate = aggregate;
            return this;
        }

        /**
         * @param aggregate One of `any` or `all`. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`. Group alerts based on one or all of `fields` value(s).
         * 
         * @return builder
         * 
         */
        public Builder aggregate(String aggregate) {
            return aggregate(Output.of(aggregate));
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`.
         * 
         * @return builder
         * 
         */
        public Builder fields(Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting is only required and applies when `type` is set to `contentBased` or `contentBasedIntelligent`.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param iagFields An array of strings which represent the iag fields with which to intelligently group against.
         * 
         * @return builder
         * 
         */
        public Builder iagFields(Output<List<String>> iagFields) {
            $.iagFields = iagFields;
            return this;
        }

        /**
         * @param iagFields An array of strings which represent the iag fields with which to intelligently group against.
         * 
         * @return builder
         * 
         */
        public Builder iagFields(List<String> iagFields) {
            return iagFields(Output.of(iagFields));
        }

        /**
         * @param iagFields An array of strings which represent the iag fields with which to intelligently group against.
         * 
         * @return builder
         * 
         */
        public Builder iagFields(String... iagFields) {
            return iagFields(List.of(iagFields));
        }

        /**
         * @param timeWindow The maximum amount of time allowed between Alerts. This setting applies only when `type` is set to `intelligent`, `contentBased`, `contentBasedIntelligent`. Value must be between `300` and `3600` or exactly `86400` (86400 is supported only for `contentBased` alert grouping). Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to `null`.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(Output<Integer> timeWindow) {
            $.timeWindow = timeWindow;
            return this;
        }

        /**
         * @param timeWindow The maximum amount of time allowed between Alerts. This setting applies only when `type` is set to `intelligent`, `contentBased`, `contentBasedIntelligent`. Value must be between `300` and `3600` or exactly `86400` (86400 is supported only for `contentBased` alert grouping). Any Alerts arriving greater than `timeWindow` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to `null`.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(Integer timeWindow) {
            return timeWindow(Output.of(timeWindow));
        }

        /**
         * @param timeout The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when `type` is set to `time`. To continue grouping alerts until the incident is resolved leave this value unset or set it to `null`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when `type` is set to `time`. To continue grouping alerts until the incident is resolved leave this value unset or set it to `null`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public GetAlertGroupingSettingConfigArgs build() {
            if ($.aggregate == null) {
                throw new MissingRequiredPropertyException("GetAlertGroupingSettingConfigArgs", "aggregate");
            }
            if ($.fields == null) {
                throw new MissingRequiredPropertyException("GetAlertGroupingSettingConfigArgs", "fields");
            }
            if ($.iagFields == null) {
                throw new MissingRequiredPropertyException("GetAlertGroupingSettingConfigArgs", "iagFields");
            }
            if ($.timeWindow == null) {
                throw new MissingRequiredPropertyException("GetAlertGroupingSettingConfigArgs", "timeWindow");
            }
            if ($.timeout == null) {
                throw new MissingRequiredPropertyException("GetAlertGroupingSettingConfigArgs", "timeout");
            }
            return $;
        }
    }

}
