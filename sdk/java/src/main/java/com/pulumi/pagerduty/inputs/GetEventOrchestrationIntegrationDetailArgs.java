// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.GetEventOrchestrationIntegrationDetailParameterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetEventOrchestrationIntegrationDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetEventOrchestrationIntegrationDetailArgs Empty = new GetEventOrchestrationIntegrationDetailArgs();

    /**
     * ID of the integration
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return ID of the integration
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    @Import(name="label", required=true)
    private Output<String> label;

    public Output<String> label() {
        return this.label;
    }

    @Import(name="parameters", required=true)
    private Output<List<GetEventOrchestrationIntegrationDetailParameterArgs>> parameters;

    public Output<List<GetEventOrchestrationIntegrationDetailParameterArgs>> parameters() {
        return this.parameters;
    }

    private GetEventOrchestrationIntegrationDetailArgs() {}

    private GetEventOrchestrationIntegrationDetailArgs(GetEventOrchestrationIntegrationDetailArgs $) {
        this.id = $.id;
        this.label = $.label;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEventOrchestrationIntegrationDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEventOrchestrationIntegrationDetailArgs $;

        public Builder() {
            $ = new GetEventOrchestrationIntegrationDetailArgs();
        }

        public Builder(GetEventOrchestrationIntegrationDetailArgs defaults) {
            $ = new GetEventOrchestrationIntegrationDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the integration
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the integration
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder parameters(Output<List<GetEventOrchestrationIntegrationDetailParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<GetEventOrchestrationIntegrationDetailParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(GetEventOrchestrationIntegrationDetailParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public GetEventOrchestrationIntegrationDetailArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            return $;
        }
    }

}
