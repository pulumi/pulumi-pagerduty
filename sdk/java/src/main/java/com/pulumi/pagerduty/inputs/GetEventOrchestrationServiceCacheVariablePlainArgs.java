// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEventOrchestrationServiceCacheVariablePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEventOrchestrationServiceCacheVariablePlainArgs Empty = new GetEventOrchestrationServiceCacheVariablePlainArgs();

    /**
     * ID of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    @Import(name="service", required=true)
    private String service;

    /**
     * @return ID of the Service Event Orchestration to which this Cache Variable belongs.
     * 
     */
    public String service() {
        return this.service;
    }

    private GetEventOrchestrationServiceCacheVariablePlainArgs() {}

    private GetEventOrchestrationServiceCacheVariablePlainArgs(GetEventOrchestrationServiceCacheVariablePlainArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEventOrchestrationServiceCacheVariablePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEventOrchestrationServiceCacheVariablePlainArgs $;

        public Builder() {
            $ = new GetEventOrchestrationServiceCacheVariablePlainArgs();
        }

        public Builder(GetEventOrchestrationServiceCacheVariablePlainArgs defaults) {
            $ = new GetEventOrchestrationServiceCacheVariablePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the Cache Variable associated with the Service Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param service ID of the Service Event Orchestration to which this Cache Variable belongs.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            $.service = service;
            return this;
        }

        public GetEventOrchestrationServiceCacheVariablePlainArgs build() {
            if ($.service == null) {
                throw new MissingRequiredPropertyException("GetEventOrchestrationServiceCacheVariablePlainArgs", "service");
            }
            return $;
        }
    }

}
