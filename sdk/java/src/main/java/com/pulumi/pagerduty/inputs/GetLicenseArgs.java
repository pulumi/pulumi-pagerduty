// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLicenseArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLicenseArgs Empty = new GetLicenseArgs();

    /**
     * Used to determine if the data config *description* is a valid substring of a valid license description assigned to the account.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Used to determine if the data config *description* is a valid substring of a valid license description assigned to the account.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Used to match the data config *id* with an exact match of a valid license ID assigned to the account.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Used to match the data config *id* with an exact match of a valid license ID assigned to the account.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Used to determine if the data config *name* is a valid substring of a valid license name assigned to the account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Used to determine if the data config *name* is a valid substring of a valid license name assigned to the account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetLicenseArgs() {}

    private GetLicenseArgs(GetLicenseArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLicenseArgs $;

        public Builder() {
            $ = new GetLicenseArgs();
        }

        public Builder(GetLicenseArgs defaults) {
            $ = new GetLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Used to determine if the data config *description* is a valid substring of a valid license description assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Used to determine if the data config *description* is a valid substring of a valid license description assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id Used to match the data config *id* with an exact match of a valid license ID assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Used to match the data config *id* with an exact match of a valid license ID assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Used to determine if the data config *name* is a valid substring of a valid license name assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Used to determine if the data config *name* is a valid substring of a valid license name assigned to the account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetLicenseArgs build() {
            return $;
        }
    }

}
