// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetLicensesLicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLicensesLicenseArgs Empty = new GetLicensesLicenseArgs();

    /**
     * Available allocations to assign to users
     * 
     */
    @Import(name="allocationsAvailable", required=true)
    private Output<Integer> allocationsAvailable;

    /**
     * @return Available allocations to assign to users
     * 
     */
    public Output<Integer> allocationsAvailable() {
        return this.allocationsAvailable;
    }

    /**
     * The number of allocations already assigned to users
     * 
     */
    @Import(name="currentValue", required=true)
    private Output<Integer> currentValue;

    /**
     * @return The number of allocations already assigned to users
     * 
     */
    public Output<Integer> currentValue() {
        return this.currentValue;
    }

    /**
     * Description of the license
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the license
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    @Import(name="htmlUrl", required=true)
    private Output<String> htmlUrl;

    public Output<String> htmlUrl() {
        return this.htmlUrl;
    }

    /**
     * Allows to override the default behavior for setting the `id` attribute that is required for data sources.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Allows to override the default behavior for setting the `id` attribute that is required for data sources.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Name of the license
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the license
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The role group for the license that determines the available `valid_roles`
     * 
     */
    @Import(name="roleGroup", required=true)
    private Output<String> roleGroup;

    /**
     * @return The role group for the license that determines the available `valid_roles`
     * 
     */
    public Output<String> roleGroup() {
        return this.roleGroup;
    }

    @Import(name="self", required=true)
    private Output<String> self;

    public Output<String> self() {
        return this.self;
    }

    /**
     * Summary of the license
     * 
     */
    @Import(name="summary", required=true)
    private Output<String> summary;

    /**
     * @return Summary of the license
     * 
     */
    public Output<String> summary() {
        return this.summary;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * List of allowed roles that may be assigned to a user with this license
     * 
     */
    @Import(name="validRoles", required=true)
    private Output<List<String>> validRoles;

    /**
     * @return List of allowed roles that may be assigned to a user with this license
     * 
     */
    public Output<List<String>> validRoles() {
        return this.validRoles;
    }

    private GetLicensesLicenseArgs() {}

    private GetLicensesLicenseArgs(GetLicensesLicenseArgs $) {
        this.allocationsAvailable = $.allocationsAvailable;
        this.currentValue = $.currentValue;
        this.description = $.description;
        this.htmlUrl = $.htmlUrl;
        this.id = $.id;
        this.name = $.name;
        this.roleGroup = $.roleGroup;
        this.self = $.self;
        this.summary = $.summary;
        this.type = $.type;
        this.validRoles = $.validRoles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLicensesLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLicensesLicenseArgs $;

        public Builder() {
            $ = new GetLicensesLicenseArgs();
        }

        public Builder(GetLicensesLicenseArgs defaults) {
            $ = new GetLicensesLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationsAvailable Available allocations to assign to users
         * 
         * @return builder
         * 
         */
        public Builder allocationsAvailable(Output<Integer> allocationsAvailable) {
            $.allocationsAvailable = allocationsAvailable;
            return this;
        }

        /**
         * @param allocationsAvailable Available allocations to assign to users
         * 
         * @return builder
         * 
         */
        public Builder allocationsAvailable(Integer allocationsAvailable) {
            return allocationsAvailable(Output.of(allocationsAvailable));
        }

        /**
         * @param currentValue The number of allocations already assigned to users
         * 
         * @return builder
         * 
         */
        public Builder currentValue(Output<Integer> currentValue) {
            $.currentValue = currentValue;
            return this;
        }

        /**
         * @param currentValue The number of allocations already assigned to users
         * 
         * @return builder
         * 
         */
        public Builder currentValue(Integer currentValue) {
            return currentValue(Output.of(currentValue));
        }

        /**
         * @param description Description of the license
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the license
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder htmlUrl(Output<String> htmlUrl) {
            $.htmlUrl = htmlUrl;
            return this;
        }

        public Builder htmlUrl(String htmlUrl) {
            return htmlUrl(Output.of(htmlUrl));
        }

        /**
         * @param id Allows to override the default behavior for setting the `id` attribute that is required for data sources.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Allows to override the default behavior for setting the `id` attribute that is required for data sources.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the license
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the license
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param roleGroup The role group for the license that determines the available `valid_roles`
         * 
         * @return builder
         * 
         */
        public Builder roleGroup(Output<String> roleGroup) {
            $.roleGroup = roleGroup;
            return this;
        }

        /**
         * @param roleGroup The role group for the license that determines the available `valid_roles`
         * 
         * @return builder
         * 
         */
        public Builder roleGroup(String roleGroup) {
            return roleGroup(Output.of(roleGroup));
        }

        public Builder self(Output<String> self) {
            $.self = self;
            return this;
        }

        public Builder self(String self) {
            return self(Output.of(self));
        }

        /**
         * @param summary Summary of the license
         * 
         * @return builder
         * 
         */
        public Builder summary(Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary Summary of the license
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validRoles List of allowed roles that may be assigned to a user with this license
         * 
         * @return builder
         * 
         */
        public Builder validRoles(Output<List<String>> validRoles) {
            $.validRoles = validRoles;
            return this;
        }

        /**
         * @param validRoles List of allowed roles that may be assigned to a user with this license
         * 
         * @return builder
         * 
         */
        public Builder validRoles(List<String> validRoles) {
            return validRoles(Output.of(validRoles));
        }

        /**
         * @param validRoles List of allowed roles that may be assigned to a user with this license
         * 
         * @return builder
         * 
         */
        public Builder validRoles(String... validRoles) {
            return validRoles(List.of(validRoles));
        }

        public GetLicensesLicenseArgs build() {
            $.allocationsAvailable = Objects.requireNonNull($.allocationsAvailable, "expected parameter 'allocationsAvailable' to be non-null");
            $.currentValue = Objects.requireNonNull($.currentValue, "expected parameter 'currentValue' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.htmlUrl = Objects.requireNonNull($.htmlUrl, "expected parameter 'htmlUrl' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.roleGroup = Objects.requireNonNull($.roleGroup, "expected parameter 'roleGroup' to be non-null");
            $.self = Objects.requireNonNull($.self, "expected parameter 'self' to be non-null");
            $.summary = Objects.requireNonNull($.summary, "expected parameter 'summary' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.validRoles = Objects.requireNonNull($.validRoles, "expected parameter 'validRoles' to be non-null");
            return $;
        }
    }

}
