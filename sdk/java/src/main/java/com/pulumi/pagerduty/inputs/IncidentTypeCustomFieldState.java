// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentTypeCustomFieldState extends com.pulumi.resources.ResourceArgs {

    public static final IncidentTypeCustomFieldState Empty = new IncidentTypeCustomFieldState();

    /**
     * [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `dataType` is `singleValue`, otherwise must be `string`. Update
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `dataType` is `singleValue`, otherwise must be `string`. Update
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * The default value to set when new incidents are created. Always specified as a string.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return The default value to set when new incidents are created. Always specified as a string.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The description of the custom field.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the custom field.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the custom Type.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the custom Type.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Whether the custom field is enabled. Defaults to true if not provided.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the custom field is enabled. Defaults to true if not provided.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The options for the custom field. Can only be applied to fields with a type of `singleValueFixed` or `multiValueFixed`.
     * 
     */
    @Import(name="fieldOptions")
    private @Nullable Output<List<String>> fieldOptions;

    /**
     * @return The options for the custom field. Can only be applied to fields with a type of `singleValueFixed` or `multiValueFixed`.
     * 
     */
    public Optional<Output<List<String>>> fieldOptions() {
        return Optional.ofNullable(this.fieldOptions);
    }

    /**
     * [Updating causes resource replacement] The field type of the field. Must be one of `singleValue`, `singleValueFixed`, `multiValue`, or `multiValueFixed`.
     * 
     */
    @Import(name="fieldType")
    private @Nullable Output<String> fieldType;

    /**
     * @return [Updating causes resource replacement] The field type of the field. Must be one of `singleValue`, `singleValueFixed`, `multiValue`, or `multiValueFixed`.
     * 
     */
    public Optional<Output<String>> fieldType() {
        return Optional.ofNullable(this.fieldType);
    }

    /**
     * [Updating causes resource replacement] The id of the incident type the custom field is associated with.
     * 
     */
    @Import(name="incidentType")
    private @Nullable Output<String> incidentType;

    /**
     * @return [Updating causes resource replacement] The id of the incident type the custom field is associated with.
     * 
     */
    public Optional<Output<String>> incidentType() {
        return Optional.ofNullable(this.incidentType);
    }

    /**
     * [Updating causes resource replacement] The name of the custom field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [Updating causes resource replacement] The name of the custom field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The API show URL at which the object is accessible.
     * 
     */
    @Import(name="self")
    private @Nullable Output<String> self;

    /**
     * @return The API show URL at which the object is accessible.
     * 
     */
    public Optional<Output<String>> self() {
        return Optional.ofNullable(this.self);
    }

    /**
     * A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private IncidentTypeCustomFieldState() {}

    private IncidentTypeCustomFieldState(IncidentTypeCustomFieldState $) {
        this.dataType = $.dataType;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.fieldOptions = $.fieldOptions;
        this.fieldType = $.fieldType;
        this.incidentType = $.incidentType;
        this.name = $.name;
        this.self = $.self;
        this.summary = $.summary;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentTypeCustomFieldState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentTypeCustomFieldState $;

        public Builder() {
            $ = new IncidentTypeCustomFieldState();
        }

        public Builder(IncidentTypeCustomFieldState defaults) {
            $ = new IncidentTypeCustomFieldState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `dataType` is `singleValue`, otherwise must be `string`. Update
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType [Updating causes resource replacement] The type of the data of this custom field. Can be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url` when `dataType` is `singleValue`, otherwise must be `string`. Update
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param defaultValue The default value to set when new incidents are created. Always specified as a string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value to set when new incidents are created. Always specified as a string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description The description of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the custom Type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the custom Type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Whether the custom field is enabled. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the custom field is enabled. Defaults to true if not provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `singleValueFixed` or `multiValueFixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(@Nullable Output<List<String>> fieldOptions) {
            $.fieldOptions = fieldOptions;
            return this;
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `singleValueFixed` or `multiValueFixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(List<String> fieldOptions) {
            return fieldOptions(Output.of(fieldOptions));
        }

        /**
         * @param fieldOptions The options for the custom field. Can only be applied to fields with a type of `singleValueFixed` or `multiValueFixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldOptions(String... fieldOptions) {
            return fieldOptions(List.of(fieldOptions));
        }

        /**
         * @param fieldType [Updating causes resource replacement] The field type of the field. Must be one of `singleValue`, `singleValueFixed`, `multiValue`, or `multiValueFixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(@Nullable Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        /**
         * @param fieldType [Updating causes resource replacement] The field type of the field. Must be one of `singleValue`, `singleValueFixed`, `multiValue`, or `multiValueFixed`.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        /**
         * @param incidentType [Updating causes resource replacement] The id of the incident type the custom field is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(@Nullable Output<String> incidentType) {
            $.incidentType = incidentType;
            return this;
        }

        /**
         * @param incidentType [Updating causes resource replacement] The id of the incident type the custom field is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(String incidentType) {
            return incidentType(Output.of(incidentType));
        }

        /**
         * @param name [Updating causes resource replacement] The name of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [Updating causes resource replacement] The name of the custom field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param self The API show URL at which the object is accessible.
         * 
         * @return builder
         * 
         */
        public Builder self(@Nullable Output<String> self) {
            $.self = self;
            return this;
        }

        /**
         * @param self The API show URL at which the object is accessible.
         * 
         * @return builder
         * 
         */
        public Builder self(String self) {
            return self(Output.of(self));
        }

        /**
         * @param summary A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public IncidentTypeCustomFieldState build() {
            return $;
        }
    }

}
