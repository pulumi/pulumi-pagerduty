// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.ResponsePlayResponderEscalationRuleArgs;
import com.pulumi.pagerduty.inputs.ResponsePlayResponderServiceArgs;
import com.pulumi.pagerduty.inputs.ResponsePlayResponderTeamArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResponsePlayResponderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponsePlayResponderArgs Empty = new ResponsePlayResponderArgs();

    /**
     * Description of escalation policy
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of escalation policy
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The escalation rules
     * 
     */
    @Import(name="escalationRules")
    private @Nullable Output<List<ResponsePlayResponderEscalationRuleArgs>> escalationRules;

    /**
     * @return The escalation rules
     * 
     */
    public Optional<Output<List<ResponsePlayResponderEscalationRuleArgs>>> escalationRules() {
        return Optional.ofNullable(this.escalationRules);
    }

    /**
     * ID of the user defined as the responder
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the user defined as the responder
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the escalation policy
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the escalation policy
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of times the escalation policy will repeat after reaching the end of its escalation.
     * 
     */
    @Import(name="numLoops")
    private @Nullable Output<Integer> numLoops;

    /**
     * @return The number of times the escalation policy will repeat after reaching the end of its escalation.
     * 
     */
    public Optional<Output<Integer>> numLoops() {
        return Optional.ofNullable(this.numLoops);
    }

    /**
     * Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to &#34;ifHasServices&#34;. Could be &#34;ifHasServices&#34;, &#34;always
     * 
     */
    @Import(name="onCallHandoffNotifications")
    private @Nullable Output<String> onCallHandoffNotifications;

    /**
     * @return Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to &#34;ifHasServices&#34;. Could be &#34;ifHasServices&#34;, &#34;always
     * 
     */
    public Optional<Output<String>> onCallHandoffNotifications() {
        return Optional.ofNullable(this.onCallHandoffNotifications);
    }

    /**
     * There can be multiple services associated with a policy.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<ResponsePlayResponderServiceArgs>> services;

    /**
     * @return There can be multiple services associated with a policy.
     * 
     */
    public Optional<Output<List<ResponsePlayResponderServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
     * 
     */
    @Import(name="teams")
    private @Nullable Output<List<ResponsePlayResponderTeamArgs>> teams;

    /**
     * @return Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
     * 
     */
    public Optional<Output<List<ResponsePlayResponderTeamArgs>>> teams() {
        return Optional.ofNullable(this.teams);
    }

    /**
     * Should be set as `escalationPolicy` for escalation policy responders.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Should be set as `escalationPolicy` for escalation policy responders.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ResponsePlayResponderArgs() {}

    private ResponsePlayResponderArgs(ResponsePlayResponderArgs $) {
        this.description = $.description;
        this.escalationRules = $.escalationRules;
        this.id = $.id;
        this.name = $.name;
        this.numLoops = $.numLoops;
        this.onCallHandoffNotifications = $.onCallHandoffNotifications;
        this.services = $.services;
        this.teams = $.teams;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponsePlayResponderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponsePlayResponderArgs $;

        public Builder() {
            $ = new ResponsePlayResponderArgs();
        }

        public Builder(ResponsePlayResponderArgs defaults) {
            $ = new ResponsePlayResponderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of escalation policy
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of escalation policy
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param escalationRules The escalation rules
         * 
         * @return builder
         * 
         */
        public Builder escalationRules(@Nullable Output<List<ResponsePlayResponderEscalationRuleArgs>> escalationRules) {
            $.escalationRules = escalationRules;
            return this;
        }

        /**
         * @param escalationRules The escalation rules
         * 
         * @return builder
         * 
         */
        public Builder escalationRules(List<ResponsePlayResponderEscalationRuleArgs> escalationRules) {
            return escalationRules(Output.of(escalationRules));
        }

        /**
         * @param escalationRules The escalation rules
         * 
         * @return builder
         * 
         */
        public Builder escalationRules(ResponsePlayResponderEscalationRuleArgs... escalationRules) {
            return escalationRules(List.of(escalationRules));
        }

        /**
         * @param id ID of the user defined as the responder
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the user defined as the responder
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the escalation policy
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the escalation policy
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numLoops The number of times the escalation policy will repeat after reaching the end of its escalation.
         * 
         * @return builder
         * 
         */
        public Builder numLoops(@Nullable Output<Integer> numLoops) {
            $.numLoops = numLoops;
            return this;
        }

        /**
         * @param numLoops The number of times the escalation policy will repeat after reaching the end of its escalation.
         * 
         * @return builder
         * 
         */
        public Builder numLoops(Integer numLoops) {
            return numLoops(Output.of(numLoops));
        }

        /**
         * @param onCallHandoffNotifications Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to &#34;ifHasServices&#34;. Could be &#34;ifHasServices&#34;, &#34;always
         * 
         * @return builder
         * 
         */
        public Builder onCallHandoffNotifications(@Nullable Output<String> onCallHandoffNotifications) {
            $.onCallHandoffNotifications = onCallHandoffNotifications;
            return this;
        }

        /**
         * @param onCallHandoffNotifications Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to &#34;ifHasServices&#34;. Could be &#34;ifHasServices&#34;, &#34;always
         * 
         * @return builder
         * 
         */
        public Builder onCallHandoffNotifications(String onCallHandoffNotifications) {
            return onCallHandoffNotifications(Output.of(onCallHandoffNotifications));
        }

        /**
         * @param services There can be multiple services associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<ResponsePlayResponderServiceArgs>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services There can be multiple services associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder services(List<ResponsePlayResponderServiceArgs> services) {
            return services(Output.of(services));
        }

        /**
         * @param services There can be multiple services associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder services(ResponsePlayResponderServiceArgs... services) {
            return services(List.of(services));
        }

        /**
         * @param teams Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<List<ResponsePlayResponderTeamArgs>> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder teams(List<ResponsePlayResponderTeamArgs> teams) {
            return teams(Output.of(teams));
        }

        /**
         * @param teams Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
         * 
         * @return builder
         * 
         */
        public Builder teams(ResponsePlayResponderTeamArgs... teams) {
            return teams(List.of(teams));
        }

        /**
         * @param type Should be set as `escalationPolicy` for escalation policy responders.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Should be set as `escalationPolicy` for escalation policy responders.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResponsePlayResponderArgs build() {
            return $;
        }
    }

}
