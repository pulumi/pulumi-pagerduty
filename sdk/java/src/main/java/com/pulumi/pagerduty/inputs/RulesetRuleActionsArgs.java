// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsAnnotateArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsEventActionArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsExtractionArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsPriorityArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsRouteArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsSeverityArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsSuppressArgs;
import com.pulumi.pagerduty.inputs.RulesetRuleActionsSuspendArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionsArgs Empty = new RulesetRuleActionsArgs();

    /**
     * Note added to the event.
     * 
     */
    @Import(name="annotates")
    private @Nullable Output<List<RulesetRuleActionsAnnotateArgs>> annotates;

    /**
     * @return Note added to the event.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsAnnotateArgs>>> annotates() {
        return Optional.ofNullable(this.annotates);
    }

    /**
     * An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
     * 
     */
    @Import(name="eventActions")
    private @Nullable Output<List<RulesetRuleActionsEventActionArgs>> eventActions;

    /**
     * @return An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsEventActionArgs>>> eventActions() {
        return Optional.ofNullable(this.eventActions);
    }

    /**
     * Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
     * 
     */
    @Import(name="extractions")
    private @Nullable Output<List<RulesetRuleActionsExtractionArgs>> extractions;

    /**
     * @return Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
     * 
     */
    public Optional<Output<List<RulesetRuleActionsExtractionArgs>>> extractions() {
        return Optional.ofNullable(this.extractions);
    }

    /**
     * The ID of the priority applied to the event.
     * 
     */
    @Import(name="priorities")
    private @Nullable Output<List<RulesetRuleActionsPriorityArgs>> priorities;

    /**
     * @return The ID of the priority applied to the event.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsPriorityArgs>>> priorities() {
        return Optional.ofNullable(this.priorities);
    }

    /**
     * The ID of the service where the event will be routed.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<RulesetRuleActionsRouteArgs>> routes;

    /**
     * @return The ID of the service where the event will be routed.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
     * 
     */
    @Import(name="severities")
    private @Nullable Output<List<RulesetRuleActionsSeverityArgs>> severities;

    /**
     * @return The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsSeverityArgs>>> severities() {
        return Optional.ofNullable(this.severities);
    }

    /**
     * Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
     * 
     */
    @Import(name="suppresses")
    private @Nullable Output<List<RulesetRuleActionsSuppressArgs>> suppresses;

    /**
     * @return Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsSuppressArgs>>> suppresses() {
        return Optional.ofNullable(this.suppresses);
    }

    /**
     * An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
     * 
     */
    @Import(name="suspends")
    private @Nullable Output<List<RulesetRuleActionsSuspendArgs>> suspends;

    /**
     * @return An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
     * 
     */
    public Optional<Output<List<RulesetRuleActionsSuspendArgs>>> suspends() {
        return Optional.ofNullable(this.suspends);
    }

    private RulesetRuleActionsArgs() {}

    private RulesetRuleActionsArgs(RulesetRuleActionsArgs $) {
        this.annotates = $.annotates;
        this.eventActions = $.eventActions;
        this.extractions = $.extractions;
        this.priorities = $.priorities;
        this.routes = $.routes;
        this.severities = $.severities;
        this.suppresses = $.suppresses;
        this.suspends = $.suspends;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionsArgs $;

        public Builder() {
            $ = new RulesetRuleActionsArgs();
        }

        public Builder(RulesetRuleActionsArgs defaults) {
            $ = new RulesetRuleActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotates Note added to the event.
         * 
         * @return builder
         * 
         */
        public Builder annotates(@Nullable Output<List<RulesetRuleActionsAnnotateArgs>> annotates) {
            $.annotates = annotates;
            return this;
        }

        /**
         * @param annotates Note added to the event.
         * 
         * @return builder
         * 
         */
        public Builder annotates(List<RulesetRuleActionsAnnotateArgs> annotates) {
            return annotates(Output.of(annotates));
        }

        /**
         * @param annotates Note added to the event.
         * 
         * @return builder
         * 
         */
        public Builder annotates(RulesetRuleActionsAnnotateArgs... annotates) {
            return annotates(List.of(annotates));
        }

        /**
         * @param eventActions An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
         * 
         * @return builder
         * 
         */
        public Builder eventActions(@Nullable Output<List<RulesetRuleActionsEventActionArgs>> eventActions) {
            $.eventActions = eventActions;
            return this;
        }

        /**
         * @param eventActions An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
         * 
         * @return builder
         * 
         */
        public Builder eventActions(List<RulesetRuleActionsEventActionArgs> eventActions) {
            return eventActions(Output.of(eventActions));
        }

        /**
         * @param eventActions An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
         * 
         * @return builder
         * 
         */
        public Builder eventActions(RulesetRuleActionsEventActionArgs... eventActions) {
            return eventActions(List.of(eventActions));
        }

        /**
         * @param extractions Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
         * 
         * @return builder
         * 
         */
        public Builder extractions(@Nullable Output<List<RulesetRuleActionsExtractionArgs>> extractions) {
            $.extractions = extractions;
            return this;
        }

        /**
         * @param extractions Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
         * 
         * @return builder
         * 
         */
        public Builder extractions(List<RulesetRuleActionsExtractionArgs> extractions) {
            return extractions(Output.of(extractions));
        }

        /**
         * @param extractions Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
         * 
         * @return builder
         * 
         */
        public Builder extractions(RulesetRuleActionsExtractionArgs... extractions) {
            return extractions(List.of(extractions));
        }

        /**
         * @param priorities The ID of the priority applied to the event.
         * 
         * @return builder
         * 
         */
        public Builder priorities(@Nullable Output<List<RulesetRuleActionsPriorityArgs>> priorities) {
            $.priorities = priorities;
            return this;
        }

        /**
         * @param priorities The ID of the priority applied to the event.
         * 
         * @return builder
         * 
         */
        public Builder priorities(List<RulesetRuleActionsPriorityArgs> priorities) {
            return priorities(Output.of(priorities));
        }

        /**
         * @param priorities The ID of the priority applied to the event.
         * 
         * @return builder
         * 
         */
        public Builder priorities(RulesetRuleActionsPriorityArgs... priorities) {
            return priorities(List.of(priorities));
        }

        /**
         * @param routes The ID of the service where the event will be routed.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<RulesetRuleActionsRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes The ID of the service where the event will be routed.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<RulesetRuleActionsRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes The ID of the service where the event will be routed.
         * 
         * @return builder
         * 
         */
        public Builder routes(RulesetRuleActionsRouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param severities The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
         * 
         * @return builder
         * 
         */
        public Builder severities(@Nullable Output<List<RulesetRuleActionsSeverityArgs>> severities) {
            $.severities = severities;
            return this;
        }

        /**
         * @param severities The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
         * 
         * @return builder
         * 
         */
        public Builder severities(List<RulesetRuleActionsSeverityArgs> severities) {
            return severities(Output.of(severities));
        }

        /**
         * @param severities The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
         * 
         * @return builder
         * 
         */
        public Builder severities(RulesetRuleActionsSeverityArgs... severities) {
            return severities(List.of(severities));
        }

        /**
         * @param suppresses Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suppresses(@Nullable Output<List<RulesetRuleActionsSuppressArgs>> suppresses) {
            $.suppresses = suppresses;
            return this;
        }

        /**
         * @param suppresses Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suppresses(List<RulesetRuleActionsSuppressArgs> suppresses) {
            return suppresses(Output.of(suppresses));
        }

        /**
         * @param suppresses Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suppresses(RulesetRuleActionsSuppressArgs... suppresses) {
            return suppresses(List.of(suppresses));
        }

        /**
         * @param suspends An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suspends(@Nullable Output<List<RulesetRuleActionsSuspendArgs>> suspends) {
            $.suspends = suspends;
            return this;
        }

        /**
         * @param suspends An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suspends(List<RulesetRuleActionsSuspendArgs> suspends) {
            return suspends(Output.of(suspends));
        }

        /**
         * @param suspends An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
         * 
         * @return builder
         * 
         */
        public Builder suspends(RulesetRuleActionsSuspendArgs... suspends) {
            return suspends(List.of(suspends));
        }

        public RulesetRuleActionsArgs build() {
            return $;
        }
    }

}
