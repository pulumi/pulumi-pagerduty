// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.RulesetTeamArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetState extends com.pulumi.resources.ResourceArgs {

    public static final RulesetState Empty = new RulesetState();

    /**
     * Name of the ruleset.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the ruleset.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Routing keys routed to this ruleset.
     * 
     */
    @Import(name="routingKeys")
    private @Nullable Output<List<String>> routingKeys;

    /**
     * @return Routing keys routed to this ruleset.
     * 
     */
    public Optional<Output<List<String>>> routingKeys() {
        return Optional.ofNullable(this.routingKeys);
    }

    /**
     * Reference to the team that owns the ruleset. If none is specified, only admins have access.
     * 
     */
    @Import(name="team")
    private @Nullable Output<RulesetTeamArgs> team;

    /**
     * @return Reference to the team that owns the ruleset. If none is specified, only admins have access.
     * 
     */
    public Optional<Output<RulesetTeamArgs>> team() {
        return Optional.ofNullable(this.team);
    }

    /**
     * Type of ruleset. Currently, only sets to `global`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of ruleset. Currently, only sets to `global`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RulesetState() {}

    private RulesetState(RulesetState $) {
        this.name = $.name;
        this.routingKeys = $.routingKeys;
        this.team = $.team;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetState $;

        public Builder() {
            $ = new RulesetState();
        }

        public Builder(RulesetState defaults) {
            $ = new RulesetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param routingKeys Routing keys routed to this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder routingKeys(@Nullable Output<List<String>> routingKeys) {
            $.routingKeys = routingKeys;
            return this;
        }

        /**
         * @param routingKeys Routing keys routed to this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder routingKeys(List<String> routingKeys) {
            return routingKeys(Output.of(routingKeys));
        }

        /**
         * @param routingKeys Routing keys routed to this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder routingKeys(String... routingKeys) {
            return routingKeys(List.of(routingKeys));
        }

        /**
         * @param team Reference to the team that owns the ruleset. If none is specified, only admins have access.
         * 
         * @return builder
         * 
         */
        public Builder team(@Nullable Output<RulesetTeamArgs> team) {
            $.team = team;
            return this;
        }

        /**
         * @param team Reference to the team that owns the ruleset. If none is specified, only admins have access.
         * 
         * @return builder
         * 
         */
        public Builder team(RulesetTeamArgs team) {
            return team(Output.of(team));
        }

        /**
         * @param type Type of ruleset. Currently, only sets to `global`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of ruleset. Currently, only sets to `global`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RulesetState build() {
            return $;
        }
    }

}
