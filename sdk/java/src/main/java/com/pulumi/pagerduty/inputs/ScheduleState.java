// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.inputs.ScheduleFinalScheduleArgs;
import com.pulumi.pagerduty.inputs.ScheduleLayerArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleState Empty = new ScheduleState();

    /**
     * The description of the schedule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the schedule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="finalSchedules")
    private @Nullable Output<List<ScheduleFinalScheduleArgs>> finalSchedules;

    public Optional<Output<List<ScheduleFinalScheduleArgs>>> finalSchedules() {
        return Optional.ofNullable(this.finalSchedules);
    }

    /**
     * A schedule layer block. Schedule layers documented below.
     * 
     */
    @Import(name="layers")
    private @Nullable Output<List<ScheduleLayerArgs>> layers;

    /**
     * @return A schedule layer block. Schedule layers documented below.
     * 
     */
    public Optional<Output<List<ScheduleLayerArgs>>> layers() {
        return Optional.ofNullable(this.layers);
    }

    /**
     * The name of the schedule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the schedule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:
     * If you don&#39;t pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.
     * If you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.
     * 
     */
    @Import(name="overflow")
    private @Nullable Output<Boolean> overflow;

    /**
     * @return Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:
     * If you don&#39;t pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.
     * If you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.
     * 
     */
    public Optional<Output<Boolean>> overflow() {
        return Optional.ofNullable(this.overflow);
    }

    /**
     * Teams associated with the schedule.
     * 
     */
    @Import(name="teams")
    private @Nullable Output<List<String>> teams;

    /**
     * @return Teams associated with the schedule.
     * 
     */
    public Optional<Output<List<String>>> teams() {
        return Optional.ofNullable(this.teams);
    }

    /**
     * The time zone of the schedule (e.g. `Europe/Berlin`).
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The time zone of the schedule (e.g. `Europe/Berlin`).
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private ScheduleState() {}

    private ScheduleState(ScheduleState $) {
        this.description = $.description;
        this.finalSchedules = $.finalSchedules;
        this.layers = $.layers;
        this.name = $.name;
        this.overflow = $.overflow;
        this.teams = $.teams;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleState $;

        public Builder() {
            $ = new ScheduleState();
        }

        public Builder(ScheduleState defaults) {
            $ = new ScheduleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder finalSchedules(@Nullable Output<List<ScheduleFinalScheduleArgs>> finalSchedules) {
            $.finalSchedules = finalSchedules;
            return this;
        }

        public Builder finalSchedules(List<ScheduleFinalScheduleArgs> finalSchedules) {
            return finalSchedules(Output.of(finalSchedules));
        }

        public Builder finalSchedules(ScheduleFinalScheduleArgs... finalSchedules) {
            return finalSchedules(List.of(finalSchedules));
        }

        /**
         * @param layers A schedule layer block. Schedule layers documented below.
         * 
         * @return builder
         * 
         */
        public Builder layers(@Nullable Output<List<ScheduleLayerArgs>> layers) {
            $.layers = layers;
            return this;
        }

        /**
         * @param layers A schedule layer block. Schedule layers documented below.
         * 
         * @return builder
         * 
         */
        public Builder layers(List<ScheduleLayerArgs> layers) {
            return layers(Output.of(layers));
        }

        /**
         * @param layers A schedule layer block. Schedule layers documented below.
         * 
         * @return builder
         * 
         */
        public Builder layers(ScheduleLayerArgs... layers) {
            return layers(List.of(layers));
        }

        /**
         * @param name The name of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param overflow Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:
         * If you don&#39;t pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.
         * If you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.
         * 
         * @return builder
         * 
         */
        public Builder overflow(@Nullable Output<Boolean> overflow) {
            $.overflow = overflow;
            return this;
        }

        /**
         * @param overflow Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow` is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:
         * If you don&#39;t pass the overflow=true parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.
         * If you do pass the `overflow` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.
         * 
         * @return builder
         * 
         */
        public Builder overflow(Boolean overflow) {
            return overflow(Output.of(overflow));
        }

        /**
         * @param teams Teams associated with the schedule.
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<List<String>> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams Teams associated with the schedule.
         * 
         * @return builder
         * 
         */
        public Builder teams(List<String> teams) {
            return teams(Output.of(teams));
        }

        /**
         * @param teams Teams associated with the schedule.
         * 
         * @return builder
         * 
         */
        public Builder teams(String... teams) {
            return teams(List.of(teams));
        }

        /**
         * @param timeZone The time zone of the schedule (e.g. `Europe/Berlin`).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone of the schedule (e.g. `Europe/Berlin`).
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public ScheduleState build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            return $;
        }
    }

}
