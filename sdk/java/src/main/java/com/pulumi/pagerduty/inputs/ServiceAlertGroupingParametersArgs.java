// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.ServiceAlertGroupingParametersConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAlertGroupingParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAlertGroupingParametersArgs Empty = new ServiceAlertGroupingParametersArgs();

    /**
     * Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
     * 
     */
    @Import(name="config")
    private @Nullable Output<ServiceAlertGroupingParametersConfigArgs> config;

    /**
     * @return Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
     * 
     */
    public Optional<Output<ServiceAlertGroupingParametersConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServiceAlertGroupingParametersArgs() {}

    private ServiceAlertGroupingParametersArgs(ServiceAlertGroupingParametersArgs $) {
        this.config = $.config;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAlertGroupingParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAlertGroupingParametersArgs $;

        public Builder() {
            $ = new ServiceAlertGroupingParametersArgs();
        }

        public Builder(ServiceAlertGroupingParametersArgs defaults) {
            $ = new ServiceAlertGroupingParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<ServiceAlertGroupingParametersConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
         * 
         * @return builder
         * 
         */
        public Builder config(ServiceAlertGroupingParametersConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param type The type of alert grouping; one of `intelligent`, `time` or `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of alert grouping; one of `intelligent`, `time` or `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceAlertGroupingParametersArgs build() {
            return $;
        }
    }

}
