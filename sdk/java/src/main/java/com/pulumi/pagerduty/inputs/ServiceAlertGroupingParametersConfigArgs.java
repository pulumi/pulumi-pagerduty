// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAlertGroupingParametersConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAlertGroupingParametersConfigArgs Empty = new ServiceAlertGroupingParametersConfigArgs();

    /**
     * One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
     * 
     */
    @Import(name="aggregate")
    private @Nullable Output<String> aggregate;

    /**
     * @return One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
     * 
     */
    public Optional<Output<String>> aggregate() {
        return Optional.ofNullable(this.aggregate);
    }

    /**
     * Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `time_window` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
     * 
     */
    @Import(name="timeWindow")
    private @Nullable Output<Integer> timeWindow;

    /**
     * @return The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `time_window` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
     * 
     */
    public Optional<Output<Integer>> timeWindow() {
        return Optional.ofNullable(this.timeWindow);
    }

    /**
     * The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private ServiceAlertGroupingParametersConfigArgs() {}

    private ServiceAlertGroupingParametersConfigArgs(ServiceAlertGroupingParametersConfigArgs $) {
        this.aggregate = $.aggregate;
        this.fields = $.fields;
        this.timeWindow = $.timeWindow;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAlertGroupingParametersConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAlertGroupingParametersConfigArgs $;

        public Builder() {
            $ = new ServiceAlertGroupingParametersConfigArgs();
        }

        public Builder(ServiceAlertGroupingParametersConfigArgs defaults) {
            $ = new ServiceAlertGroupingParametersConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregate One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
         * 
         * @return builder
         * 
         */
        public Builder aggregate(@Nullable Output<String> aggregate) {
            $.aggregate = aggregate;
            return this;
        }

        /**
         * @param aggregate One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
         * 
         * @return builder
         * 
         */
        public Builder aggregate(String aggregate) {
            return aggregate(Output.of(aggregate));
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param timeWindow The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `time_window` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(@Nullable Output<Integer> timeWindow) {
            $.timeWindow = timeWindow;
            return this;
        }

        /**
         * @param timeWindow The maximum amount of time allowed between Alerts. Value must be between `300` and `3600`. Any Alerts arriving greater than `time_window` seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(Integer timeWindow) {
            return timeWindow(Output.of(timeWindow));
        }

        /**
         * @param timeout The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public ServiceAlertGroupingParametersConfigArgs build() {
            return $;
        }
    }

}
