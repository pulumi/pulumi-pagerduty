// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAutoPauseNotificationsParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAutoPauseNotificationsParametersArgs Empty = new ServiceAutoPauseNotificationsParametersArgs();

    /**
     * Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to &#39;false&#39;.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
     * 
     * You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
     * Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
     * The block contains the following arguments:
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
     * 
     * You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
     * Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
     * The block contains the following arguments:
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private ServiceAutoPauseNotificationsParametersArgs() {}

    private ServiceAutoPauseNotificationsParametersArgs(ServiceAutoPauseNotificationsParametersArgs $) {
        this.enabled = $.enabled;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAutoPauseNotificationsParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAutoPauseNotificationsParametersArgs $;

        public Builder() {
            $ = new ServiceAutoPauseNotificationsParametersArgs();
        }

        public Builder(ServiceAutoPauseNotificationsParametersArgs defaults) {
            $ = new ServiceAutoPauseNotificationsParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param timeout Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
         * 
         * You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
         * Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
         * The block contains the following arguments:
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
         * 
         * You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
         * Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
         * The block contains the following arguments:
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public ServiceAutoPauseNotificationsParametersArgs build() {
            return $;
        }
    }

}
