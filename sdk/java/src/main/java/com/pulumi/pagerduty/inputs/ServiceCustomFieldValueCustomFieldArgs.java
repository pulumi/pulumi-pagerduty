// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServiceCustomFieldValueCustomFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCustomFieldValueCustomFieldArgs Empty = new ServiceCustomFieldValueCustomFieldArgs();

    /**
     * The ID of the custom field. Either `id` or `name` must be provided.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the custom field. Either `id` or `name` must be provided.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The name of the custom field. Either `id` or `name` must be provided.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the custom field. Either `id` or `name` must be provided.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The value to set for the custom field. Must be provided as a JSON-encoded string matching the field&#39;s data type. Use the `jsonencode()` function to ensure proper formatting.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value to set for the custom field. Must be provided as a JSON-encoded string matching the field&#39;s data type. Use the `jsonencode()` function to ensure proper formatting.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private ServiceCustomFieldValueCustomFieldArgs() {}

    private ServiceCustomFieldValueCustomFieldArgs(ServiceCustomFieldValueCustomFieldArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCustomFieldValueCustomFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCustomFieldValueCustomFieldArgs $;

        public Builder() {
            $ = new ServiceCustomFieldValueCustomFieldArgs();
        }

        public Builder(ServiceCustomFieldValueCustomFieldArgs defaults) {
            $ = new ServiceCustomFieldValueCustomFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of the custom field. Either `id` or `name` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the custom field. Either `id` or `name` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the custom field. Either `id` or `name` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the custom field. Either `id` or `name` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value The value to set for the custom field. Must be provided as a JSON-encoded string matching the field&#39;s data type. Use the `jsonencode()` function to ensure proper formatting.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value to set for the custom field. Must be provided as a JSON-encoded string matching the field&#39;s data type. Use the `jsonencode()` function to ensure proper formatting.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ServiceCustomFieldValueCustomFieldArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldValueCustomFieldArgs", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldValueCustomFieldArgs", "name");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("ServiceCustomFieldValueCustomFieldArgs", "value");
            }
            return $;
        }
    }

}
