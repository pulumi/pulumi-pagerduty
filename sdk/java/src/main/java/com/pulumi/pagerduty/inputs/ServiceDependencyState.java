// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.ServiceDependencyDependencyArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDependencyState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDependencyState Empty = new ServiceDependencyState();

    /**
     * The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
     * 
     */
    @Import(name="dependency")
    private @Nullable Output<ServiceDependencyDependencyArgs> dependency;

    /**
     * @return The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
     * 
     */
    public Optional<Output<ServiceDependencyDependencyArgs>> dependency() {
        return Optional.ofNullable(this.dependency);
    }

    private ServiceDependencyState() {}

    private ServiceDependencyState(ServiceDependencyState $) {
        this.dependency = $.dependency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDependencyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDependencyState $;

        public Builder() {
            $ = new ServiceDependencyState();
        }

        public Builder(ServiceDependencyState defaults) {
            $ = new ServiceDependencyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependency The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
         * 
         * @return builder
         * 
         */
        public Builder dependency(@Nullable Output<ServiceDependencyDependencyArgs> dependency) {
            $.dependency = dependency;
            return this;
        }

        /**
         * @param dependency The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
         * 
         * @return builder
         * 
         */
        public Builder dependency(ServiceDependencyDependencyArgs dependency) {
            return dependency(Output.of(dependency));
        }

        public ServiceDependencyState build() {
            return $;
        }
    }

}
