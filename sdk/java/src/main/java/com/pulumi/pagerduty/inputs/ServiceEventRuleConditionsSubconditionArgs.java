// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.ServiceEventRuleConditionsSubconditionParameterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEventRuleConditionsSubconditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEventRuleConditionsSubconditionArgs Empty = new ServiceEventRuleConditionsSubconditionArgs();

    /**
     * Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<ServiceEventRuleConditionsSubconditionParameterArgs>> parameters;

    /**
     * @return Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
     * 
     */
    public Optional<Output<List<ServiceEventRuleConditionsSubconditionParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    private ServiceEventRuleConditionsSubconditionArgs() {}

    private ServiceEventRuleConditionsSubconditionArgs(ServiceEventRuleConditionsSubconditionArgs $) {
        this.operator = $.operator;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEventRuleConditionsSubconditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEventRuleConditionsSubconditionArgs $;

        public Builder() {
            $ = new ServiceEventRuleConditionsSubconditionArgs();
        }

        public Builder(ServiceEventRuleConditionsSubconditionArgs defaults) {
            $ = new ServiceEventRuleConditionsSubconditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param parameters Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<ServiceEventRuleConditionsSubconditionParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<ServiceEventRuleConditionsSubconditionParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
         * 
         * @return builder
         * 
         */
        public Builder parameters(ServiceEventRuleConditionsSubconditionParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public ServiceEventRuleConditionsSubconditionArgs build() {
            return $;
        }
    }

}
