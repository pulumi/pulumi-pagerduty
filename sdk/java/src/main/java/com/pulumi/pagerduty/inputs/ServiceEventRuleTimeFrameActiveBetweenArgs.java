// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEventRuleTimeFrameActiveBetweenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEventRuleTimeFrameActiveBetweenArgs Empty = new ServiceEventRuleTimeFrameActiveBetweenArgs();

    /**
     * Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    /**
     * @return Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
     * 
     */
    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<Integer> startTime;

    /**
     * @return Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.
     * 
     */
    public Optional<Output<Integer>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private ServiceEventRuleTimeFrameActiveBetweenArgs() {}

    private ServiceEventRuleTimeFrameActiveBetweenArgs(ServiceEventRuleTimeFrameActiveBetweenArgs $) {
        this.endTime = $.endTime;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEventRuleTimeFrameActiveBetweenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEventRuleTimeFrameActiveBetweenArgs $;

        public Builder() {
            $ = new ServiceEventRuleTimeFrameActiveBetweenArgs();
        }

        public Builder(ServiceEventRuleTimeFrameActiveBetweenArgs defaults) {
            $ = new ServiceEventRuleTimeFrameActiveBetweenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param startTime Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<Integer> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Time when the schedule will start. Unix timestamp in milliseconds. For example, if you have a rule with a `start_time` of `0` and a `duration` of `60,000` then that rule would be active from `00:00` to `00:01`. If the `start_time` was `3,600,000` the it would be active starting at `01:00`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Integer startTime) {
            return startTime(Output.of(startTime));
        }

        public ServiceEventRuleTimeFrameActiveBetweenArgs build() {
            return $;
        }
    }

}
