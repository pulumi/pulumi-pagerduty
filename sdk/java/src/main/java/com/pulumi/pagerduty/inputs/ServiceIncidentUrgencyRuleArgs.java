// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;
import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIncidentUrgencyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIncidentUrgencyRuleArgs Empty = new ServiceIncidentUrgencyRuleArgs();

    /**
     * Incidents&#39; urgency during support hours.
     * 
     */
    @Import(name="duringSupportHours")
    private @Nullable Output<ServiceIncidentUrgencyRuleDuringSupportHoursArgs> duringSupportHours;

    /**
     * @return Incidents&#39; urgency during support hours.
     * 
     */
    public Optional<Output<ServiceIncidentUrgencyRuleDuringSupportHoursArgs>> duringSupportHours() {
        return Optional.ofNullable(this.duringSupportHours);
    }

    /**
     * Incidents&#39; urgency outside support hours.
     * 
     */
    @Import(name="outsideSupportHours")
    private @Nullable Output<ServiceIncidentUrgencyRuleOutsideSupportHoursArgs> outsideSupportHours;

    /**
     * @return Incidents&#39; urgency outside support hours.
     * 
     */
    public Optional<Output<ServiceIncidentUrgencyRuleOutsideSupportHoursArgs>> outsideSupportHours() {
        return Optional.ofNullable(this.outsideSupportHours);
    }

    /**
     * The type of incident urgency: `constant` or `use_support_hours` (when depending on specific support hours; see `support_hours`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of incident urgency: `constant` or `use_support_hours` (when depending on specific support hours; see `support_hours`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
     * 
     */
    @Import(name="urgency")
    private @Nullable Output<String> urgency;

    /**
     * @return The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
     * 
     */
    public Optional<Output<String>> urgency() {
        return Optional.ofNullable(this.urgency);
    }

    private ServiceIncidentUrgencyRuleArgs() {}

    private ServiceIncidentUrgencyRuleArgs(ServiceIncidentUrgencyRuleArgs $) {
        this.duringSupportHours = $.duringSupportHours;
        this.outsideSupportHours = $.outsideSupportHours;
        this.type = $.type;
        this.urgency = $.urgency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIncidentUrgencyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIncidentUrgencyRuleArgs $;

        public Builder() {
            $ = new ServiceIncidentUrgencyRuleArgs();
        }

        public Builder(ServiceIncidentUrgencyRuleArgs defaults) {
            $ = new ServiceIncidentUrgencyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duringSupportHours Incidents&#39; urgency during support hours.
         * 
         * @return builder
         * 
         */
        public Builder duringSupportHours(@Nullable Output<ServiceIncidentUrgencyRuleDuringSupportHoursArgs> duringSupportHours) {
            $.duringSupportHours = duringSupportHours;
            return this;
        }

        /**
         * @param duringSupportHours Incidents&#39; urgency during support hours.
         * 
         * @return builder
         * 
         */
        public Builder duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs duringSupportHours) {
            return duringSupportHours(Output.of(duringSupportHours));
        }

        /**
         * @param outsideSupportHours Incidents&#39; urgency outside support hours.
         * 
         * @return builder
         * 
         */
        public Builder outsideSupportHours(@Nullable Output<ServiceIncidentUrgencyRuleOutsideSupportHoursArgs> outsideSupportHours) {
            $.outsideSupportHours = outsideSupportHours;
            return this;
        }

        /**
         * @param outsideSupportHours Incidents&#39; urgency outside support hours.
         * 
         * @return builder
         * 
         */
        public Builder outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs outsideSupportHours) {
            return outsideSupportHours(Output.of(outsideSupportHours));
        }

        /**
         * @param type The type of incident urgency: `constant` or `use_support_hours` (when depending on specific support hours; see `support_hours`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of incident urgency: `constant` or `use_support_hours` (when depending on specific support hours; see `support_hours`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param urgency The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
         * 
         * @return builder
         * 
         */
        public Builder urgency(@Nullable Output<String> urgency) {
            $.urgency = urgency;
            return this;
        }

        /**
         * @param urgency The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
         * 
         * @return builder
         * 
         */
        public Builder urgency(String urgency) {
            return urgency(Output.of(urgency));
        }

        public ServiceIncidentUrgencyRuleArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ServiceIncidentUrgencyRuleArgs", "type");
            }
            return $;
        }
    }

}
