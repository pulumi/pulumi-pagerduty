// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceIntegrationEmailFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIntegrationEmailFilterArgs Empty = new ServiceIntegrationEmailFilterArgs();

    /**
     * Can be `always`, `match` or `no-match`.
     * 
     */
    @Import(name="bodyMode")
    private @Nullable Output<String> bodyMode;

    /**
     * @return Can be `always`, `match` or `no-match`.
     * 
     */
    public Optional<Output<String>> bodyMode() {
        return Optional.ofNullable(this.bodyMode);
    }

    /**
     * Should be a valid regex or `null`
     * 
     */
    @Import(name="bodyRegex")
    private @Nullable Output<String> bodyRegex;

    /**
     * @return Should be a valid regex or `null`
     * 
     */
    public Optional<Output<String>> bodyRegex() {
        return Optional.ofNullable(this.bodyRegex);
    }

    /**
     * Can be `always`, `match` or `no-match`.
     * 
     */
    @Import(name="fromEmailMode")
    private @Nullable Output<String> fromEmailMode;

    /**
     * @return Can be `always`, `match` or `no-match`.
     * 
     */
    public Optional<Output<String>> fromEmailMode() {
        return Optional.ofNullable(this.fromEmailMode);
    }

    /**
     * Should be a valid regex or `null`
     * 
     */
    @Import(name="fromEmailRegex")
    private @Nullable Output<String> fromEmailRegex;

    /**
     * @return Should be a valid regex or `null`
     * 
     */
    public Optional<Output<String>> fromEmailRegex() {
        return Optional.ofNullable(this.fromEmailRegex);
    }

    /**
     * The ID of the service integration.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the service integration.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Can be `always`, `match` or `no-match`.
     * 
     */
    @Import(name="subjectMode")
    private @Nullable Output<String> subjectMode;

    /**
     * @return Can be `always`, `match` or `no-match`.
     * 
     */
    public Optional<Output<String>> subjectMode() {
        return Optional.ofNullable(this.subjectMode);
    }

    /**
     * Should be a valid regex or `null`
     * 
     */
    @Import(name="subjectRegex")
    private @Nullable Output<String> subjectRegex;

    /**
     * @return Should be a valid regex or `null`
     * 
     */
    public Optional<Output<String>> subjectRegex() {
        return Optional.ofNullable(this.subjectRegex);
    }

    private ServiceIntegrationEmailFilterArgs() {}

    private ServiceIntegrationEmailFilterArgs(ServiceIntegrationEmailFilterArgs $) {
        this.bodyMode = $.bodyMode;
        this.bodyRegex = $.bodyRegex;
        this.fromEmailMode = $.fromEmailMode;
        this.fromEmailRegex = $.fromEmailRegex;
        this.id = $.id;
        this.subjectMode = $.subjectMode;
        this.subjectRegex = $.subjectRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIntegrationEmailFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIntegrationEmailFilterArgs $;

        public Builder() {
            $ = new ServiceIntegrationEmailFilterArgs();
        }

        public Builder(ServiceIntegrationEmailFilterArgs defaults) {
            $ = new ServiceIntegrationEmailFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bodyMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder bodyMode(@Nullable Output<String> bodyMode) {
            $.bodyMode = bodyMode;
            return this;
        }

        /**
         * @param bodyMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder bodyMode(String bodyMode) {
            return bodyMode(Output.of(bodyMode));
        }

        /**
         * @param bodyRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder bodyRegex(@Nullable Output<String> bodyRegex) {
            $.bodyRegex = bodyRegex;
            return this;
        }

        /**
         * @param bodyRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder bodyRegex(String bodyRegex) {
            return bodyRegex(Output.of(bodyRegex));
        }

        /**
         * @param fromEmailMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder fromEmailMode(@Nullable Output<String> fromEmailMode) {
            $.fromEmailMode = fromEmailMode;
            return this;
        }

        /**
         * @param fromEmailMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder fromEmailMode(String fromEmailMode) {
            return fromEmailMode(Output.of(fromEmailMode));
        }

        /**
         * @param fromEmailRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder fromEmailRegex(@Nullable Output<String> fromEmailRegex) {
            $.fromEmailRegex = fromEmailRegex;
            return this;
        }

        /**
         * @param fromEmailRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder fromEmailRegex(String fromEmailRegex) {
            return fromEmailRegex(Output.of(fromEmailRegex));
        }

        /**
         * @param id The ID of the service integration.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the service integration.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param subjectMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMode(@Nullable Output<String> subjectMode) {
            $.subjectMode = subjectMode;
            return this;
        }

        /**
         * @param subjectMode Can be `always`, `match` or `no-match`.
         * 
         * @return builder
         * 
         */
        public Builder subjectMode(String subjectMode) {
            return subjectMode(Output.of(subjectMode));
        }

        /**
         * @param subjectRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder subjectRegex(@Nullable Output<String> subjectRegex) {
            $.subjectRegex = subjectRegex;
            return this;
        }

        /**
         * @param subjectRegex Should be a valid regex or `null`
         * 
         * @return builder
         * 
         */
        public Builder subjectRegex(String subjectRegex) {
            return subjectRegex(Output.of(subjectRegex));
        }

        public ServiceIntegrationEmailFilterArgs build() {
            return $;
        }
    }

}
