// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceScheduledActionAtArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceScheduledActionAtArgs Empty = new ServiceScheduledActionAtArgs();

    /**
     * Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
     * 
     * Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.
     * 
     * Below is an example for a `pagerduty.Service` resource with `incident_urgency_rules` with `type = &#34;use_support_hours&#34;`, `support_hours` and a default `scheduled_action` as well.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pagerduty.Service;
     * import com.pulumi.pagerduty.ServiceArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foo = new Service(&#34;foo&#34;, ServiceArgs.builder()        
     *             .name(&#34;bar&#34;)
     *             .description(&#34;bar bar bar&#34;)
     *             .autoResolveTimeout(3600)
     *             .acknowledgementTimeout(3600)
     *             .escalationPolicy(fooPagerdutyEscalationPolicy.id())
     *             .incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs.builder()
     *                 .type(&#34;use_support_hours&#34;)
     *                 .duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs.builder()
     *                     .type(&#34;constant&#34;)
     *                     .urgency(&#34;high&#34;)
     *                     .build())
     *                 .outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs.builder()
     *                     .type(&#34;constant&#34;)
     *                     .urgency(&#34;low&#34;)
     *                     .build())
     *                 .build())
     *             .supportHours(ServiceSupportHoursArgs.builder()
     *                 .type(&#34;fixed_time_per_day&#34;)
     *                 .timeZone(&#34;America/Lima&#34;)
     *                 .startTime(&#34;09:00:00&#34;)
     *                 .endTime(&#34;17:00:00&#34;)
     *                 .daysOfWeeks(                
     *                     1,
     *                     2,
     *                     3,
     *                     4,
     *                     5)
     *                 .build())
     *             .scheduledActions(ServiceScheduledActionArgs.builder()
     *                 .type(&#34;urgency_change&#34;)
     *                 .toUrgency(&#34;high&#34;)
     *                 .ats(ServiceScheduledActionAtArgs.builder()
     *                     .type(&#34;named_time&#34;)
     *                     .name(&#34;support_hours_start&#34;)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
     * 
     * Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.
     * 
     * Below is an example for a `pagerduty.Service` resource with `incident_urgency_rules` with `type = &#34;use_support_hours&#34;`, `support_hours` and a default `scheduled_action` as well.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pagerduty.Service;
     * import com.pulumi.pagerduty.ServiceArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;
     * import com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foo = new Service(&#34;foo&#34;, ServiceArgs.builder()        
     *             .name(&#34;bar&#34;)
     *             .description(&#34;bar bar bar&#34;)
     *             .autoResolveTimeout(3600)
     *             .acknowledgementTimeout(3600)
     *             .escalationPolicy(fooPagerdutyEscalationPolicy.id())
     *             .incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs.builder()
     *                 .type(&#34;use_support_hours&#34;)
     *                 .duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs.builder()
     *                     .type(&#34;constant&#34;)
     *                     .urgency(&#34;high&#34;)
     *                     .build())
     *                 .outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs.builder()
     *                     .type(&#34;constant&#34;)
     *                     .urgency(&#34;low&#34;)
     *                     .build())
     *                 .build())
     *             .supportHours(ServiceSupportHoursArgs.builder()
     *                 .type(&#34;fixed_time_per_day&#34;)
     *                 .timeZone(&#34;America/Lima&#34;)
     *                 .startTime(&#34;09:00:00&#34;)
     *                 .endTime(&#34;17:00:00&#34;)
     *                 .daysOfWeeks(                
     *                     1,
     *                     2,
     *                     3,
     *                     4,
     *                     5)
     *                 .build())
     *             .scheduledActions(ServiceScheduledActionArgs.builder()
     *                 .type(&#34;urgency_change&#34;)
     *                 .toUrgency(&#34;high&#34;)
     *                 .ats(ServiceScheduledActionAtArgs.builder()
     *                     .type(&#34;named_time&#34;)
     *                     .name(&#34;support_hours_start&#34;)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of time specification. Currently, this must be set to `named_time`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of time specification. Currently, this must be set to `named_time`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServiceScheduledActionAtArgs() {}

    private ServiceScheduledActionAtArgs(ServiceScheduledActionAtArgs $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceScheduledActionAtArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceScheduledActionAtArgs $;

        public Builder() {
            $ = new ServiceScheduledActionAtArgs();
        }

        public Builder(ServiceScheduledActionAtArgs defaults) {
            $ = new ServiceScheduledActionAtArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
         * 
         * Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.
         * 
         * Below is an example for a `pagerduty.Service` resource with `incident_urgency_rules` with `type = &#34;use_support_hours&#34;`, `support_hours` and a default `scheduled_action` as well.
         * 
         * &lt;!--Start PulumiCodeChooser --&gt;
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.pagerduty.Service;
         * import com.pulumi.pagerduty.ServiceArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var foo = new Service(&#34;foo&#34;, ServiceArgs.builder()        
         *             .name(&#34;bar&#34;)
         *             .description(&#34;bar bar bar&#34;)
         *             .autoResolveTimeout(3600)
         *             .acknowledgementTimeout(3600)
         *             .escalationPolicy(fooPagerdutyEscalationPolicy.id())
         *             .incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs.builder()
         *                 .type(&#34;use_support_hours&#34;)
         *                 .duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs.builder()
         *                     .type(&#34;constant&#34;)
         *                     .urgency(&#34;high&#34;)
         *                     .build())
         *                 .outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs.builder()
         *                     .type(&#34;constant&#34;)
         *                     .urgency(&#34;low&#34;)
         *                     .build())
         *                 .build())
         *             .supportHours(ServiceSupportHoursArgs.builder()
         *                 .type(&#34;fixed_time_per_day&#34;)
         *                 .timeZone(&#34;America/Lima&#34;)
         *                 .startTime(&#34;09:00:00&#34;)
         *                 .endTime(&#34;17:00:00&#34;)
         *                 .daysOfWeeks(                
         *                     1,
         *                     2,
         *                     3,
         *                     4,
         *                     5)
         *                 .build())
         *             .scheduledActions(ServiceScheduledActionArgs.builder()
         *                 .type(&#34;urgency_change&#34;)
         *                 .toUrgency(&#34;high&#34;)
         *                 .ats(ServiceScheduledActionAtArgs.builder()
         *                     .type(&#34;named_time&#34;)
         *                     .name(&#34;support_hours_start&#34;)
         *                     .build())
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * &lt;!--End PulumiCodeChooser --&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
         * 
         * Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.
         * 
         * Below is an example for a `pagerduty.Service` resource with `incident_urgency_rules` with `type = &#34;use_support_hours&#34;`, `support_hours` and a default `scheduled_action` as well.
         * 
         * &lt;!--Start PulumiCodeChooser --&gt;
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import com.pulumi.pagerduty.Service;
         * import com.pulumi.pagerduty.ServiceArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleDuringSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;
         * import com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *         var foo = new Service(&#34;foo&#34;, ServiceArgs.builder()        
         *             .name(&#34;bar&#34;)
         *             .description(&#34;bar bar bar&#34;)
         *             .autoResolveTimeout(3600)
         *             .acknowledgementTimeout(3600)
         *             .escalationPolicy(fooPagerdutyEscalationPolicy.id())
         *             .incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs.builder()
         *                 .type(&#34;use_support_hours&#34;)
         *                 .duringSupportHours(ServiceIncidentUrgencyRuleDuringSupportHoursArgs.builder()
         *                     .type(&#34;constant&#34;)
         *                     .urgency(&#34;high&#34;)
         *                     .build())
         *                 .outsideSupportHours(ServiceIncidentUrgencyRuleOutsideSupportHoursArgs.builder()
         *                     .type(&#34;constant&#34;)
         *                     .urgency(&#34;low&#34;)
         *                     .build())
         *                 .build())
         *             .supportHours(ServiceSupportHoursArgs.builder()
         *                 .type(&#34;fixed_time_per_day&#34;)
         *                 .timeZone(&#34;America/Lima&#34;)
         *                 .startTime(&#34;09:00:00&#34;)
         *                 .endTime(&#34;17:00:00&#34;)
         *                 .daysOfWeeks(                
         *                     1,
         *                     2,
         *                     3,
         *                     4,
         *                     5)
         *                 .build())
         *             .scheduledActions(ServiceScheduledActionArgs.builder()
         *                 .type(&#34;urgency_change&#34;)
         *                 .toUrgency(&#34;high&#34;)
         *                 .ats(ServiceScheduledActionAtArgs.builder()
         *                     .type(&#34;named_time&#34;)
         *                     .name(&#34;support_hours_start&#34;)
         *                     .build())
         *                 .build())
         *             .build());
         * 
         *     }
         * }
         * ```
         * &lt;!--End PulumiCodeChooser --&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of time specification. Currently, this must be set to `named_time`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of time specification. Currently, this must be set to `named_time`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceScheduledActionAtArgs build() {
            return $;
        }
    }

}
