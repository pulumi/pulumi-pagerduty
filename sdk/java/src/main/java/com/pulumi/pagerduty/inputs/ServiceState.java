// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.pagerduty.inputs.ServiceAlertGroupingParametersArgs;
import com.pulumi.pagerduty.inputs.ServiceIncidentUrgencyRuleArgs;
import com.pulumi.pagerduty.inputs.ServiceScheduledActionArgs;
import com.pulumi.pagerduty.inputs.ServiceSupportHoursArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `&#34;null&#34;` string.  If not passed in, will default to &#39;&#34;1800&#34;&#39;.
     * 
     */
    @Import(name="acknowledgementTimeout")
    private @Nullable Output<String> acknowledgementTimeout;

    /**
     * @return Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `&#34;null&#34;` string.  If not passed in, will default to &#39;&#34;1800&#34;&#39;.
     * 
     */
    public Optional<Output<String>> acknowledgementTimeout() {
        return Optional.ofNullable(this.acknowledgementTimeout);
    }

    /**
     * Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value &#34;create_incidents&#34; is default: events will create an incident that cannot be merged. Value &#34;create_alerts_and_incidents&#34; is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.
     * 
     */
    @Import(name="alertCreation")
    private @Nullable Output<String> alertCreation;

    /**
     * @return Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value &#34;create_incidents&#34; is default: events will create an incident that cannot be merged. Value &#34;create_alerts_and_incidents&#34; is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.
     * 
     */
    public Optional<Output<String>> alertCreation() {
        return Optional.ofNullable(this.alertCreation);
    }

    /**
     * (Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,
     * 
     * @deprecated
     * Use `alert_grouping_parameters.type`
     * 
     */
    @Deprecated /* Use `alert_grouping_parameters.type` */
    @Import(name="alertGrouping")
    private @Nullable Output<String> alertGrouping;

    /**
     * @return (Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,
     * 
     * @deprecated
     * Use `alert_grouping_parameters.type`
     * 
     */
    @Deprecated /* Use `alert_grouping_parameters.type` */
    public Optional<Output<String>> alertGrouping() {
        return Optional.ofNullable(this.alertGrouping);
    }

    /**
     * Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.
     * 
     */
    @Import(name="alertGroupingParameters")
    private @Nullable Output<ServiceAlertGroupingParametersArgs> alertGroupingParameters;

    /**
     * @return Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.
     * 
     */
    public Optional<Output<ServiceAlertGroupingParametersArgs>> alertGroupingParameters() {
        return Optional.ofNullable(this.alertGroupingParameters);
    }

    /**
     * (Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,
     * 
     * @deprecated
     * Use `alert_grouping_parameters.config.timeout`
     * 
     */
    @Deprecated /* Use `alert_grouping_parameters.config.timeout` */
    @Import(name="alertGroupingTimeout")
    private @Nullable Output<String> alertGroupingTimeout;

    /**
     * @return (Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,
     * 
     * @deprecated
     * Use `alert_grouping_parameters.config.timeout`
     * 
     */
    @Deprecated /* Use `alert_grouping_parameters.config.timeout` */
    public Optional<Output<String>> alertGroupingTimeout() {
        return Optional.ofNullable(this.alertGroupingTimeout);
    }

    /**
     * Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `&#34;null&#34;` string.
     * 
     */
    @Import(name="autoResolveTimeout")
    private @Nullable Output<String> autoResolveTimeout;

    /**
     * @return Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `&#34;null&#34;` string.
     * 
     */
    public Optional<Output<String>> autoResolveTimeout() {
        return Optional.ofNullable(this.autoResolveTimeout);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The escalation policy used by this service.
     * 
     */
    @Import(name="escalationPolicy")
    private @Nullable Output<String> escalationPolicy;

    /**
     * @return The escalation policy used by this service.
     * 
     */
    public Optional<Output<String>> escalationPolicy() {
        return Optional.ofNullable(this.escalationPolicy);
    }

    @Import(name="htmlUrl")
    private @Nullable Output<String> htmlUrl;

    public Optional<Output<String>> htmlUrl() {
        return Optional.ofNullable(this.htmlUrl);
    }

    @Import(name="incidentUrgencyRule")
    private @Nullable Output<ServiceIncidentUrgencyRuleArgs> incidentUrgencyRule;

    public Optional<Output<ServiceIncidentUrgencyRuleArgs>> incidentUrgencyRule() {
        return Optional.ofNullable(this.incidentUrgencyRule);
    }

    @Import(name="lastIncidentTimestamp")
    private @Nullable Output<String> lastIncidentTimestamp;

    public Optional<Output<String>> lastIncidentTimestamp() {
        return Optional.ofNullable(this.lastIncidentTimestamp);
    }

    /**
     * The name of the service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="scheduledActions")
    private @Nullable Output<List<ServiceScheduledActionArgs>> scheduledActions;

    public Optional<Output<List<ServiceScheduledActionArgs>>> scheduledActions() {
        return Optional.ofNullable(this.scheduledActions);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="supportHours")
    private @Nullable Output<ServiceSupportHoursArgs> supportHours;

    public Optional<Output<ServiceSupportHoursArgs>> supportHours() {
        return Optional.ofNullable(this.supportHours);
    }

    /**
     * The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.acknowledgementTimeout = $.acknowledgementTimeout;
        this.alertCreation = $.alertCreation;
        this.alertGrouping = $.alertGrouping;
        this.alertGroupingParameters = $.alertGroupingParameters;
        this.alertGroupingTimeout = $.alertGroupingTimeout;
        this.autoResolveTimeout = $.autoResolveTimeout;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.escalationPolicy = $.escalationPolicy;
        this.htmlUrl = $.htmlUrl;
        this.incidentUrgencyRule = $.incidentUrgencyRule;
        this.lastIncidentTimestamp = $.lastIncidentTimestamp;
        this.name = $.name;
        this.scheduledActions = $.scheduledActions;
        this.status = $.status;
        this.supportHours = $.supportHours;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgementTimeout Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `&#34;null&#34;` string.  If not passed in, will default to &#39;&#34;1800&#34;&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgementTimeout(@Nullable Output<String> acknowledgementTimeout) {
            $.acknowledgementTimeout = acknowledgementTimeout;
            return this;
        }

        /**
         * @param acknowledgementTimeout Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `&#34;null&#34;` string.  If not passed in, will default to &#39;&#34;1800&#34;&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgementTimeout(String acknowledgementTimeout) {
            return acknowledgementTimeout(Output.of(acknowledgementTimeout));
        }

        /**
         * @param alertCreation Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value &#34;create_incidents&#34; is default: events will create an incident that cannot be merged. Value &#34;create_alerts_and_incidents&#34; is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.
         * 
         * @return builder
         * 
         */
        public Builder alertCreation(@Nullable Output<String> alertCreation) {
            $.alertCreation = alertCreation;
            return this;
        }

        /**
         * @param alertCreation Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value &#34;create_incidents&#34; is default: events will create an incident that cannot be merged. Value &#34;create_alerts_and_incidents&#34; is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.
         * 
         * @return builder
         * 
         */
        public Builder alertCreation(String alertCreation) {
            return alertCreation(Output.of(alertCreation));
        }

        /**
         * @param alertGrouping (Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,
         * 
         * @return builder
         * 
         * @deprecated
         * Use `alert_grouping_parameters.type`
         * 
         */
        @Deprecated /* Use `alert_grouping_parameters.type` */
        public Builder alertGrouping(@Nullable Output<String> alertGrouping) {
            $.alertGrouping = alertGrouping;
            return this;
        }

        /**
         * @param alertGrouping (Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use `alert_grouping_parameters.type` instead,
         * 
         * @return builder
         * 
         * @deprecated
         * Use `alert_grouping_parameters.type`
         * 
         */
        @Deprecated /* Use `alert_grouping_parameters.type` */
        public Builder alertGrouping(String alertGrouping) {
            return alertGrouping(Output.of(alertGrouping));
        }

        /**
         * @param alertGroupingParameters Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.
         * 
         * @return builder
         * 
         */
        public Builder alertGroupingParameters(@Nullable Output<ServiceAlertGroupingParametersArgs> alertGroupingParameters) {
            $.alertGroupingParameters = alertGroupingParameters;
            return this;
        }

        /**
         * @param alertGroupingParameters Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.
         * 
         * @return builder
         * 
         */
        public Builder alertGroupingParameters(ServiceAlertGroupingParametersArgs alertGroupingParameters) {
            return alertGroupingParameters(Output.of(alertGroupingParameters));
        }

        /**
         * @param alertGroupingTimeout (Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,
         * 
         * @return builder
         * 
         * @deprecated
         * Use `alert_grouping_parameters.config.timeout`
         * 
         */
        @Deprecated /* Use `alert_grouping_parameters.config.timeout` */
        public Builder alertGroupingTimeout(@Nullable Output<String> alertGroupingTimeout) {
            $.alertGroupingTimeout = alertGroupingTimeout;
            return this;
        }

        /**
         * @param alertGroupingTimeout (Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`. This field is deprecated, use `alert_grouping_parameters.config.timeout` instead,
         * 
         * @return builder
         * 
         * @deprecated
         * Use `alert_grouping_parameters.config.timeout`
         * 
         */
        @Deprecated /* Use `alert_grouping_parameters.config.timeout` */
        public Builder alertGroupingTimeout(String alertGroupingTimeout) {
            return alertGroupingTimeout(Output.of(alertGroupingTimeout));
        }

        /**
         * @param autoResolveTimeout Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `&#34;null&#34;` string.
         * 
         * @return builder
         * 
         */
        public Builder autoResolveTimeout(@Nullable Output<String> autoResolveTimeout) {
            $.autoResolveTimeout = autoResolveTimeout;
            return this;
        }

        /**
         * @param autoResolveTimeout Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `&#34;null&#34;` string.
         * 
         * @return builder
         * 
         */
        public Builder autoResolveTimeout(String autoResolveTimeout) {
            return autoResolveTimeout(Output.of(autoResolveTimeout));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param escalationPolicy The escalation policy used by this service.
         * 
         * @return builder
         * 
         */
        public Builder escalationPolicy(@Nullable Output<String> escalationPolicy) {
            $.escalationPolicy = escalationPolicy;
            return this;
        }

        /**
         * @param escalationPolicy The escalation policy used by this service.
         * 
         * @return builder
         * 
         */
        public Builder escalationPolicy(String escalationPolicy) {
            return escalationPolicy(Output.of(escalationPolicy));
        }

        public Builder htmlUrl(@Nullable Output<String> htmlUrl) {
            $.htmlUrl = htmlUrl;
            return this;
        }

        public Builder htmlUrl(String htmlUrl) {
            return htmlUrl(Output.of(htmlUrl));
        }

        public Builder incidentUrgencyRule(@Nullable Output<ServiceIncidentUrgencyRuleArgs> incidentUrgencyRule) {
            $.incidentUrgencyRule = incidentUrgencyRule;
            return this;
        }

        public Builder incidentUrgencyRule(ServiceIncidentUrgencyRuleArgs incidentUrgencyRule) {
            return incidentUrgencyRule(Output.of(incidentUrgencyRule));
        }

        public Builder lastIncidentTimestamp(@Nullable Output<String> lastIncidentTimestamp) {
            $.lastIncidentTimestamp = lastIncidentTimestamp;
            return this;
        }

        public Builder lastIncidentTimestamp(String lastIncidentTimestamp) {
            return lastIncidentTimestamp(Output.of(lastIncidentTimestamp));
        }

        /**
         * @param name The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder scheduledActions(@Nullable Output<List<ServiceScheduledActionArgs>> scheduledActions) {
            $.scheduledActions = scheduledActions;
            return this;
        }

        public Builder scheduledActions(List<ServiceScheduledActionArgs> scheduledActions) {
            return scheduledActions(Output.of(scheduledActions));
        }

        public Builder scheduledActions(ServiceScheduledActionArgs... scheduledActions) {
            return scheduledActions(List.of(scheduledActions));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder supportHours(@Nullable Output<ServiceSupportHoursArgs> supportHours) {
            $.supportHours = supportHours;
            return this;
        }

        public Builder supportHours(ServiceSupportHoursArgs supportHours) {
            return supportHours(Output.of(supportHours));
        }

        /**
         * @param type The type of alert grouping; one of `intelligent`, `time` or `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of alert grouping; one of `intelligent`, `time` or `content_based`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceState build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            return $;
        }
    }

}
