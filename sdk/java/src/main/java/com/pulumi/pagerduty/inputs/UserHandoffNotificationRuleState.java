// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pagerduty.inputs.UserHandoffNotificationRuleContactMethodArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserHandoffNotificationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final UserHandoffNotificationRuleState Empty = new UserHandoffNotificationRuleState();

    /**
     * The contact method to notify the user. Contact method documented below.
     * 
     */
    @Import(name="contactMethod")
    private @Nullable Output<UserHandoffNotificationRuleContactMethodArgs> contactMethod;

    /**
     * @return The contact method to notify the user. Contact method documented below.
     * 
     */
    public Optional<Output<UserHandoffNotificationRuleContactMethodArgs>> contactMethod() {
        return Optional.ofNullable(this.contactMethod);
    }

    /**
     * The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     * 
     */
    @Import(name="handoffType")
    private @Nullable Output<String> handoffType;

    /**
     * @return The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     * 
     */
    public Optional<Output<String>> handoffType() {
        return Optional.ofNullable(this.handoffType);
    }

    /**
     * The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     * 
     */
    @Import(name="notifyAdvanceInMinutes")
    private @Nullable Output<Integer> notifyAdvanceInMinutes;

    /**
     * @return The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     * 
     */
    public Optional<Output<Integer>> notifyAdvanceInMinutes() {
        return Optional.ofNullable(this.notifyAdvanceInMinutes);
    }

    /**
     * The ID of the user.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The ID of the user.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserHandoffNotificationRuleState() {}

    private UserHandoffNotificationRuleState(UserHandoffNotificationRuleState $) {
        this.contactMethod = $.contactMethod;
        this.handoffType = $.handoffType;
        this.notifyAdvanceInMinutes = $.notifyAdvanceInMinutes;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserHandoffNotificationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserHandoffNotificationRuleState $;

        public Builder() {
            $ = new UserHandoffNotificationRuleState();
        }

        public Builder(UserHandoffNotificationRuleState defaults) {
            $ = new UserHandoffNotificationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactMethod The contact method to notify the user. Contact method documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactMethod(@Nullable Output<UserHandoffNotificationRuleContactMethodArgs> contactMethod) {
            $.contactMethod = contactMethod;
            return this;
        }

        /**
         * @param contactMethod The contact method to notify the user. Contact method documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactMethod(UserHandoffNotificationRuleContactMethodArgs contactMethod) {
            return contactMethod(Output.of(contactMethod));
        }

        /**
         * @param handoffType The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
         * 
         * @return builder
         * 
         */
        public Builder handoffType(@Nullable Output<String> handoffType) {
            $.handoffType = handoffType;
            return this;
        }

        /**
         * @param handoffType The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
         * 
         * @return builder
         * 
         */
        public Builder handoffType(String handoffType) {
            return handoffType(Output.of(handoffType));
        }

        /**
         * @param notifyAdvanceInMinutes The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder notifyAdvanceInMinutes(@Nullable Output<Integer> notifyAdvanceInMinutes) {
            $.notifyAdvanceInMinutes = notifyAdvanceInMinutes;
            return this;
        }

        /**
         * @param notifyAdvanceInMinutes The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder notifyAdvanceInMinutes(Integer notifyAdvanceInMinutes) {
            return notifyAdvanceInMinutes(Output.of(notifyAdvanceInMinutes));
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserHandoffNotificationRuleState build() {
            return $;
        }
    }

}
