// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCatchAllActionsAutomationAction;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCatchAllActionsExtraction;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate;
import com.pulumi.pagerduty.outputs.EventOrchestrationGlobalCatchAllActionsVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventOrchestrationGlobalCatchAllActions {
    /**
     * @return Add this text as a note on the resulting incident.
     * 
     */
    private @Nullable String annotate;
    /**
     * @return Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) to be run for certain alert states.
     * 
     */
    private @Nullable EventOrchestrationGlobalCatchAllActionsAutomationAction automationAction;
    /**
     * @return When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
     * 
     */
    private @Nullable Boolean dropEvent;
    /**
     * @return The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service&#39;s settings, with what is configured by this action.
     * 
     */
    private @Nullable String escalationPolicy;
    /**
     * @return sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
     * 
     */
    private @Nullable String eventAction;
    /**
     * @return Replace any CEF field or Custom Details object field using custom variables.
     * 
     */
    private @Nullable List<EventOrchestrationGlobalCatchAllActionsExtraction> extractions;
    /**
     * @return Assign a custom field to the resulting incident.
     * 
     */
    private @Nullable List<EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate> incidentCustomFieldUpdates;
    /**
     * @return The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.
     * 
     */
    private @Nullable String priority;
    /**
     * @return The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
     * 
     */
    private @Nullable String routeTo;
    /**
     * @return sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
     * 
     */
    private @Nullable String severity;
    /**
     * @return Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
     * 
     */
    private @Nullable Boolean suppress;
    /**
     * @return The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won&#39;t create an incident for this alert.
     * 
     */
    private @Nullable Integer suspend;
    /**
     * @return Populate variables from event payloads and use those variables in other event actions.
     * 
     */
    private @Nullable List<EventOrchestrationGlobalCatchAllActionsVariable> variables;

    private EventOrchestrationGlobalCatchAllActions() {}
    /**
     * @return Add this text as a note on the resulting incident.
     * 
     */
    public Optional<String> annotate() {
        return Optional.ofNullable(this.annotate);
    }
    /**
     * @return Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) to be run for certain alert states.
     * 
     */
    public Optional<EventOrchestrationGlobalCatchAllActionsAutomationAction> automationAction() {
        return Optional.ofNullable(this.automationAction);
    }
    /**
     * @return When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
     * 
     */
    public Optional<Boolean> dropEvent() {
        return Optional.ofNullable(this.dropEvent);
    }
    /**
     * @return The ID of the Escalation Policy you want to assign incidents to. Event rules with this action will override the Escalation Policy already set on a Service&#39;s settings, with what is configured by this action.
     * 
     */
    public Optional<String> escalationPolicy() {
        return Optional.ofNullable(this.escalationPolicy);
    }
    /**
     * @return sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
     * 
     */
    public Optional<String> eventAction() {
        return Optional.ofNullable(this.eventAction);
    }
    /**
     * @return Replace any CEF field or Custom Details object field using custom variables.
     * 
     */
    public List<EventOrchestrationGlobalCatchAllActionsExtraction> extractions() {
        return this.extractions == null ? List.of() : this.extractions;
    }
    /**
     * @return Assign a custom field to the resulting incident.
     * 
     */
    public List<EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate> incidentCustomFieldUpdates() {
        return this.incidentCustomFieldUpdates == null ? List.of() : this.incidentCustomFieldUpdates;
    }
    /**
     * @return The ID of the priority you want to set on resulting incident. Consider using the `pagerduty.getPriority` data source.
     * 
     */
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
     * 
     */
    public Optional<String> routeTo() {
        return Optional.ofNullable(this.routeTo);
    }
    /**
     * @return sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
     * 
     */
    public Optional<Boolean> suppress() {
        return Optional.ofNullable(this.suppress);
    }
    /**
     * @return The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won&#39;t create an incident for this alert.
     * 
     */
    public Optional<Integer> suspend() {
        return Optional.ofNullable(this.suspend);
    }
    /**
     * @return Populate variables from event payloads and use those variables in other event actions.
     * 
     */
    public List<EventOrchestrationGlobalCatchAllActionsVariable> variables() {
        return this.variables == null ? List.of() : this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventOrchestrationGlobalCatchAllActions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String annotate;
        private @Nullable EventOrchestrationGlobalCatchAllActionsAutomationAction automationAction;
        private @Nullable Boolean dropEvent;
        private @Nullable String escalationPolicy;
        private @Nullable String eventAction;
        private @Nullable List<EventOrchestrationGlobalCatchAllActionsExtraction> extractions;
        private @Nullable List<EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate> incidentCustomFieldUpdates;
        private @Nullable String priority;
        private @Nullable String routeTo;
        private @Nullable String severity;
        private @Nullable Boolean suppress;
        private @Nullable Integer suspend;
        private @Nullable List<EventOrchestrationGlobalCatchAllActionsVariable> variables;
        public Builder() {}
        public Builder(EventOrchestrationGlobalCatchAllActions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotate = defaults.annotate;
    	      this.automationAction = defaults.automationAction;
    	      this.dropEvent = defaults.dropEvent;
    	      this.escalationPolicy = defaults.escalationPolicy;
    	      this.eventAction = defaults.eventAction;
    	      this.extractions = defaults.extractions;
    	      this.incidentCustomFieldUpdates = defaults.incidentCustomFieldUpdates;
    	      this.priority = defaults.priority;
    	      this.routeTo = defaults.routeTo;
    	      this.severity = defaults.severity;
    	      this.suppress = defaults.suppress;
    	      this.suspend = defaults.suspend;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder annotate(@Nullable String annotate) {

            this.annotate = annotate;
            return this;
        }
        @CustomType.Setter
        public Builder automationAction(@Nullable EventOrchestrationGlobalCatchAllActionsAutomationAction automationAction) {

            this.automationAction = automationAction;
            return this;
        }
        @CustomType.Setter
        public Builder dropEvent(@Nullable Boolean dropEvent) {

            this.dropEvent = dropEvent;
            return this;
        }
        @CustomType.Setter
        public Builder escalationPolicy(@Nullable String escalationPolicy) {

            this.escalationPolicy = escalationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder eventAction(@Nullable String eventAction) {

            this.eventAction = eventAction;
            return this;
        }
        @CustomType.Setter
        public Builder extractions(@Nullable List<EventOrchestrationGlobalCatchAllActionsExtraction> extractions) {

            this.extractions = extractions;
            return this;
        }
        public Builder extractions(EventOrchestrationGlobalCatchAllActionsExtraction... extractions) {
            return extractions(List.of(extractions));
        }
        @CustomType.Setter
        public Builder incidentCustomFieldUpdates(@Nullable List<EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate> incidentCustomFieldUpdates) {

            this.incidentCustomFieldUpdates = incidentCustomFieldUpdates;
            return this;
        }
        public Builder incidentCustomFieldUpdates(EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate... incidentCustomFieldUpdates) {
            return incidentCustomFieldUpdates(List.of(incidentCustomFieldUpdates));
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder routeTo(@Nullable String routeTo) {

            this.routeTo = routeTo;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder suppress(@Nullable Boolean suppress) {

            this.suppress = suppress;
            return this;
        }
        @CustomType.Setter
        public Builder suspend(@Nullable Integer suspend) {

            this.suspend = suspend;
            return this;
        }
        @CustomType.Setter
        public Builder variables(@Nullable List<EventOrchestrationGlobalCatchAllActionsVariable> variables) {

            this.variables = variables;
            return this;
        }
        public Builder variables(EventOrchestrationGlobalCatchAllActionsVariable... variables) {
            return variables(List.of(variables));
        }
        public EventOrchestrationGlobalCatchAllActions build() {
            final var _resultValue = new EventOrchestrationGlobalCatchAllActions();
            _resultValue.annotate = annotate;
            _resultValue.automationAction = automationAction;
            _resultValue.dropEvent = dropEvent;
            _resultValue.escalationPolicy = escalationPolicy;
            _resultValue.eventAction = eventAction;
            _resultValue.extractions = extractions;
            _resultValue.incidentCustomFieldUpdates = incidentCustomFieldUpdates;
            _resultValue.priority = priority;
            _resultValue.routeTo = routeTo;
            _resultValue.severity = severity;
            _resultValue.suppress = suppress;
            _resultValue.suspend = suspend;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
