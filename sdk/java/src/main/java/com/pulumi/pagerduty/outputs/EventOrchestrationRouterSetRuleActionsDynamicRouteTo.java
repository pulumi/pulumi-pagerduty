// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EventOrchestrationRouterSetRuleActionsDynamicRouteTo {
    /**
     * @return Indicates whether the extracted value from the source is a service&#39;s name or ID. Allowed values are: `serviceName`, `serviceId`
     * 
     * If an event has a value at the specified `source`, and if the `regex` successfully matches the value, and if the matching portion is valid Service ID or Name, then the event will be routed to that service. Otherwise the event will be checked against any subsequent router rules.
     * 
     */
    private String lookupBy;
    /**
     * @return The regular expression, used to extract a value from the source field. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
     * 
     */
    private String regex;
    /**
     * @return The path to a field in an event.
     * 
     */
    private String source;

    private EventOrchestrationRouterSetRuleActionsDynamicRouteTo() {}
    /**
     * @return Indicates whether the extracted value from the source is a service&#39;s name or ID. Allowed values are: `serviceName`, `serviceId`
     * 
     * If an event has a value at the specified `source`, and if the `regex` successfully matches the value, and if the matching portion is valid Service ID or Name, then the event will be routed to that service. Otherwise the event will be checked against any subsequent router rules.
     * 
     */
    public String lookupBy() {
        return this.lookupBy;
    }
    /**
     * @return The regular expression, used to extract a value from the source field. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
     * 
     */
    public String regex() {
        return this.regex;
    }
    /**
     * @return The path to a field in an event.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventOrchestrationRouterSetRuleActionsDynamicRouteTo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String lookupBy;
        private String regex;
        private String source;
        public Builder() {}
        public Builder(EventOrchestrationRouterSetRuleActionsDynamicRouteTo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lookupBy = defaults.lookupBy;
    	      this.regex = defaults.regex;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder lookupBy(String lookupBy) {
            if (lookupBy == null) {
              throw new MissingRequiredPropertyException("EventOrchestrationRouterSetRuleActionsDynamicRouteTo", "lookupBy");
            }
            this.lookupBy = lookupBy;
            return this;
        }
        @CustomType.Setter
        public Builder regex(String regex) {
            if (regex == null) {
              throw new MissingRequiredPropertyException("EventOrchestrationRouterSetRuleActionsDynamicRouteTo", "regex");
            }
            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("EventOrchestrationRouterSetRuleActionsDynamicRouteTo", "source");
            }
            this.source = source;
            return this;
        }
        public EventOrchestrationRouterSetRuleActionsDynamicRouteTo build() {
            final var _resultValue = new EventOrchestrationRouterSetRuleActionsDynamicRouteTo();
            _resultValue.lookupBy = lookupBy;
            _resultValue.regex = regex;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
