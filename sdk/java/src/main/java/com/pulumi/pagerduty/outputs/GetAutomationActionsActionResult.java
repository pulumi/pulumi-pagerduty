// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.outputs.GetAutomationActionsActionActionDataReference;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAutomationActionsActionResult {
    /**
     * @return (Optional) The category of the action. The only allowed values are `diagnostic` and `remediation`.
     * 
     */
    private String actionClassification;
    /**
     * @return Action Data block. Action Data is documented below.
     * 
     */
    private List<GetAutomationActionsActionActionDataReference> actionDataReferences;
    /**
     * @return The type of the action. The only allowed values are `processAutomation` and `script`.
     * 
     */
    private String actionType;
    /**
     * @return (Optional) Whether or not the action can be invoked automatically from a PagerDuty Event Orchestration.
     * 
     */
    private Boolean allowInvocationFromEventOrchestration;
    /**
     * @return (Optional) Whether or not the action can be invoked manually by a user on the PagerDuty website.
     * 
     */
    private Boolean allowInvocationManually;
    /**
     * @return The time action was created. Represented as an ISO 8601 timestamp.
     * 
     */
    private String creationTime;
    /**
     * @return (Optional) The description of the action.
     * 
     */
    private String description;
    /**
     * @return The ID of the action.
     * 
     */
    private String id;
    /**
     * @return (Optional) If the action should be able to be run against all services or just specified ones.
     * 
     */
    private Boolean mapToAllServices;
    /**
     * @return (Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.
     * 
     */
    private String modifyTime;
    /**
     * @return The name of the action.
     * 
     */
    private String name;
    /**
     * @return (Optional) Whether or not the action can be invoked on unresolved incidents.
     * 
     */
    private Boolean onlyInvocableOnUnresolvedIncidents;
    /**
     * @return (Optional) The Process Automation Actions runner to associate the action with.
     * 
     */
    private String runnerId;
    /**
     * @return (Optional) The type of the runner associated with the action.
     * 
     */
    private String runnerType;
    /**
     * @return The type of object. The value returned will be `action`.
     * 
     */
    private String type;

    private GetAutomationActionsActionResult() {}
    /**
     * @return (Optional) The category of the action. The only allowed values are `diagnostic` and `remediation`.
     * 
     */
    public String actionClassification() {
        return this.actionClassification;
    }
    /**
     * @return Action Data block. Action Data is documented below.
     * 
     */
    public List<GetAutomationActionsActionActionDataReference> actionDataReferences() {
        return this.actionDataReferences;
    }
    /**
     * @return The type of the action. The only allowed values are `processAutomation` and `script`.
     * 
     */
    public String actionType() {
        return this.actionType;
    }
    /**
     * @return (Optional) Whether or not the action can be invoked automatically from a PagerDuty Event Orchestration.
     * 
     */
    public Boolean allowInvocationFromEventOrchestration() {
        return this.allowInvocationFromEventOrchestration;
    }
    /**
     * @return (Optional) Whether or not the action can be invoked manually by a user on the PagerDuty website.
     * 
     */
    public Boolean allowInvocationManually() {
        return this.allowInvocationManually;
    }
    /**
     * @return The time action was created. Represented as an ISO 8601 timestamp.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return (Optional) The description of the action.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the action.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Optional) If the action should be able to be run against all services or just specified ones.
     * 
     */
    public Boolean mapToAllServices() {
        return this.mapToAllServices;
    }
    /**
     * @return (Optional) The last time action has been modified. Represented as an ISO 8601 timestamp.
     * 
     */
    public String modifyTime() {
        return this.modifyTime;
    }
    /**
     * @return The name of the action.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional) Whether or not the action can be invoked on unresolved incidents.
     * 
     */
    public Boolean onlyInvocableOnUnresolvedIncidents() {
        return this.onlyInvocableOnUnresolvedIncidents;
    }
    /**
     * @return (Optional) The Process Automation Actions runner to associate the action with.
     * 
     */
    public String runnerId() {
        return this.runnerId;
    }
    /**
     * @return (Optional) The type of the runner associated with the action.
     * 
     */
    public String runnerType() {
        return this.runnerType;
    }
    /**
     * @return The type of object. The value returned will be `action`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutomationActionsActionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String actionClassification;
        private List<GetAutomationActionsActionActionDataReference> actionDataReferences;
        private String actionType;
        private Boolean allowInvocationFromEventOrchestration;
        private Boolean allowInvocationManually;
        private String creationTime;
        private String description;
        private String id;
        private Boolean mapToAllServices;
        private String modifyTime;
        private String name;
        private Boolean onlyInvocableOnUnresolvedIncidents;
        private String runnerId;
        private String runnerType;
        private String type;
        public Builder() {}
        public Builder(GetAutomationActionsActionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionClassification = defaults.actionClassification;
    	      this.actionDataReferences = defaults.actionDataReferences;
    	      this.actionType = defaults.actionType;
    	      this.allowInvocationFromEventOrchestration = defaults.allowInvocationFromEventOrchestration;
    	      this.allowInvocationManually = defaults.allowInvocationManually;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.mapToAllServices = defaults.mapToAllServices;
    	      this.modifyTime = defaults.modifyTime;
    	      this.name = defaults.name;
    	      this.onlyInvocableOnUnresolvedIncidents = defaults.onlyInvocableOnUnresolvedIncidents;
    	      this.runnerId = defaults.runnerId;
    	      this.runnerType = defaults.runnerType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder actionClassification(String actionClassification) {
            if (actionClassification == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "actionClassification");
            }
            this.actionClassification = actionClassification;
            return this;
        }
        @CustomType.Setter
        public Builder actionDataReferences(List<GetAutomationActionsActionActionDataReference> actionDataReferences) {
            if (actionDataReferences == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "actionDataReferences");
            }
            this.actionDataReferences = actionDataReferences;
            return this;
        }
        public Builder actionDataReferences(GetAutomationActionsActionActionDataReference... actionDataReferences) {
            return actionDataReferences(List.of(actionDataReferences));
        }
        @CustomType.Setter
        public Builder actionType(String actionType) {
            if (actionType == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "actionType");
            }
            this.actionType = actionType;
            return this;
        }
        @CustomType.Setter
        public Builder allowInvocationFromEventOrchestration(Boolean allowInvocationFromEventOrchestration) {
            if (allowInvocationFromEventOrchestration == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "allowInvocationFromEventOrchestration");
            }
            this.allowInvocationFromEventOrchestration = allowInvocationFromEventOrchestration;
            return this;
        }
        @CustomType.Setter
        public Builder allowInvocationManually(Boolean allowInvocationManually) {
            if (allowInvocationManually == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "allowInvocationManually");
            }
            this.allowInvocationManually = allowInvocationManually;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mapToAllServices(Boolean mapToAllServices) {
            if (mapToAllServices == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "mapToAllServices");
            }
            this.mapToAllServices = mapToAllServices;
            return this;
        }
        @CustomType.Setter
        public Builder modifyTime(String modifyTime) {
            if (modifyTime == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "modifyTime");
            }
            this.modifyTime = modifyTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onlyInvocableOnUnresolvedIncidents(Boolean onlyInvocableOnUnresolvedIncidents) {
            if (onlyInvocableOnUnresolvedIncidents == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "onlyInvocableOnUnresolvedIncidents");
            }
            this.onlyInvocableOnUnresolvedIncidents = onlyInvocableOnUnresolvedIncidents;
            return this;
        }
        @CustomType.Setter
        public Builder runnerId(String runnerId) {
            if (runnerId == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "runnerId");
            }
            this.runnerId = runnerId;
            return this;
        }
        @CustomType.Setter
        public Builder runnerType(String runnerType) {
            if (runnerType == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "runnerType");
            }
            this.runnerType = runnerType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAutomationActionsActionResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetAutomationActionsActionResult build() {
            final var _resultValue = new GetAutomationActionsActionResult();
            _resultValue.actionClassification = actionClassification;
            _resultValue.actionDataReferences = actionDataReferences;
            _resultValue.actionType = actionType;
            _resultValue.allowInvocationFromEventOrchestration = allowInvocationFromEventOrchestration;
            _resultValue.allowInvocationManually = allowInvocationManually;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.mapToAllServices = mapToAllServices;
            _resultValue.modifyTime = modifyTime;
            _resultValue.name = name;
            _resultValue.onlyInvocableOnUnresolvedIncidents = onlyInvocableOnUnresolvedIncidents;
            _resultValue.runnerId = runnerId;
            _resultValue.runnerType = runnerType;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
