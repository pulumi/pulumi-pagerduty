// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.outputs.GetEventOrchestrationServiceCacheVariableCondition;
import com.pulumi.pagerduty.outputs.GetEventOrchestrationServiceCacheVariableConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEventOrchestrationServiceCacheVariableResult {
    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recentValue` or `triggerEventCount`.
     * 
     */
    private List<GetEventOrchestrationServiceCacheVariableCondition> conditions;
    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    private List<GetEventOrchestrationServiceCacheVariableConfiguration> configurations;
    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    private Boolean disabled;
    private @Nullable String id;
    private @Nullable String name;
    private String service;

    private GetEventOrchestrationServiceCacheVariableResult() {}
    /**
     * @return Conditions to be evaluated in order to determine whether or not to update the Cache Variable&#39;s stored value. This attribute can only be used when `configuration.0.type` is `recentValue` or `triggerEventCount`.
     * 
     */
    public List<GetEventOrchestrationServiceCacheVariableCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return A configuration object to define what and how values will be stored in the Cache Variable.
     * 
     */
    public List<GetEventOrchestrationServiceCacheVariableConfiguration> configurations() {
        return this.configurations;
    }
    /**
     * @return Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String service() {
        return this.service;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventOrchestrationServiceCacheVariableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetEventOrchestrationServiceCacheVariableCondition> conditions;
        private List<GetEventOrchestrationServiceCacheVariableConfiguration> configurations;
        private Boolean disabled;
        private @Nullable String id;
        private @Nullable String name;
        private String service;
        public Builder() {}
        public Builder(GetEventOrchestrationServiceCacheVariableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.configurations = defaults.configurations;
    	      this.disabled = defaults.disabled;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.service = defaults.service;
        }

        @CustomType.Setter
        public Builder conditions(List<GetEventOrchestrationServiceCacheVariableCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetEventOrchestrationServiceCacheVariableResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetEventOrchestrationServiceCacheVariableCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder configurations(List<GetEventOrchestrationServiceCacheVariableConfiguration> configurations) {
            if (configurations == null) {
              throw new MissingRequiredPropertyException("GetEventOrchestrationServiceCacheVariableResult", "configurations");
            }
            this.configurations = configurations;
            return this;
        }
        public Builder configurations(GetEventOrchestrationServiceCacheVariableConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetEventOrchestrationServiceCacheVariableResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetEventOrchestrationServiceCacheVariableResult", "service");
            }
            this.service = service;
            return this;
        }
        public GetEventOrchestrationServiceCacheVariableResult build() {
            final var _resultValue = new GetEventOrchestrationServiceCacheVariableResult();
            _resultValue.conditions = conditions;
            _resultValue.configurations = configurations;
            _resultValue.disabled = disabled;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.service = service;
            return _resultValue;
        }
    }
}
