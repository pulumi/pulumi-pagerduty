// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLicensesLicense {
    /**
     * @return Available allocations to assign to users
     * 
     */
    private Integer allocationsAvailable;
    /**
     * @return The number of allocations already assigned to users
     * 
     */
    private Integer currentValue;
    /**
     * @return Description of the license
     * 
     */
    private String description;
    private String htmlUrl;
    /**
     * @return Allows to override the default behavior for setting the `id` attribute that is required for data sources.
     * 
     */
    private String id;
    /**
     * @return Name of the license
     * 
     */
    private String name;
    /**
     * @return The role group for the license that determines the available `valid_roles`
     * 
     */
    private String roleGroup;
    private String self;
    /**
     * @return Summary of the license
     * 
     */
    private String summary;
    private String type;
    /**
     * @return List of allowed roles that may be assigned to a user with this license
     * 
     */
    private List<String> validRoles;

    private GetLicensesLicense() {}
    /**
     * @return Available allocations to assign to users
     * 
     */
    public Integer allocationsAvailable() {
        return this.allocationsAvailable;
    }
    /**
     * @return The number of allocations already assigned to users
     * 
     */
    public Integer currentValue() {
        return this.currentValue;
    }
    /**
     * @return Description of the license
     * 
     */
    public String description() {
        return this.description;
    }
    public String htmlUrl() {
        return this.htmlUrl;
    }
    /**
     * @return Allows to override the default behavior for setting the `id` attribute that is required for data sources.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the license
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The role group for the license that determines the available `valid_roles`
     * 
     */
    public String roleGroup() {
        return this.roleGroup;
    }
    public String self() {
        return this.self;
    }
    /**
     * @return Summary of the license
     * 
     */
    public String summary() {
        return this.summary;
    }
    public String type() {
        return this.type;
    }
    /**
     * @return List of allowed roles that may be assigned to a user with this license
     * 
     */
    public List<String> validRoles() {
        return this.validRoles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensesLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer allocationsAvailable;
        private Integer currentValue;
        private String description;
        private String htmlUrl;
        private String id;
        private String name;
        private String roleGroup;
        private String self;
        private String summary;
        private String type;
        private List<String> validRoles;
        public Builder() {}
        public Builder(GetLicensesLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationsAvailable = defaults.allocationsAvailable;
    	      this.currentValue = defaults.currentValue;
    	      this.description = defaults.description;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.roleGroup = defaults.roleGroup;
    	      this.self = defaults.self;
    	      this.summary = defaults.summary;
    	      this.type = defaults.type;
    	      this.validRoles = defaults.validRoles;
        }

        @CustomType.Setter
        public Builder allocationsAvailable(Integer allocationsAvailable) {
            if (allocationsAvailable == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "allocationsAvailable");
            }
            this.allocationsAvailable = allocationsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder currentValue(Integer currentValue) {
            if (currentValue == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "currentValue");
            }
            this.currentValue = currentValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder htmlUrl(String htmlUrl) {
            if (htmlUrl == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "htmlUrl");
            }
            this.htmlUrl = htmlUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder roleGroup(String roleGroup) {
            if (roleGroup == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "roleGroup");
            }
            this.roleGroup = roleGroup;
            return this;
        }
        @CustomType.Setter
        public Builder self(String self) {
            if (self == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "self");
            }
            this.self = self;
            return this;
        }
        @CustomType.Setter
        public Builder summary(String summary) {
            if (summary == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "summary");
            }
            this.summary = summary;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder validRoles(List<String> validRoles) {
            if (validRoles == null) {
              throw new MissingRequiredPropertyException("GetLicensesLicense", "validRoles");
            }
            this.validRoles = validRoles;
            return this;
        }
        public Builder validRoles(String... validRoles) {
            return validRoles(List.of(validRoles));
        }
        public GetLicensesLicense build() {
            final var _resultValue = new GetLicensesLicense();
            _resultValue.allocationsAvailable = allocationsAvailable;
            _resultValue.currentValue = currentValue;
            _resultValue.description = description;
            _resultValue.htmlUrl = htmlUrl;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.roleGroup = roleGroup;
            _resultValue.self = self;
            _resultValue.summary = summary;
            _resultValue.type = type;
            _resultValue.validRoles = validRoles;
            return _resultValue;
        }
    }
}
