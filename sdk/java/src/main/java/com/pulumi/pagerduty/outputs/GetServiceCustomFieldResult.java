// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.outputs.GetServiceCustomFieldFieldOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceCustomFieldResult {
    /**
     * @return The data type of the field option.
     * 
     */
    private String dataType;
    private String defaultValue;
    /**
     * @return A description of the data this field contains.
     * 
     */
    private String description;
    private String displayName;
    /**
     * @return Whether the field is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The options for the custom field. Only applies to `single_value_fixed` and `multi_value_fixed` field types. Each field option contains:
     * 
     */
    private List<GetServiceCustomFieldFieldOption> fieldOptions;
    /**
     * @return The type of data this field contains. In combination with the data_type field.
     * 
     */
    private String fieldType;
    /**
     * @return The ID of the found field.
     * 
     */
    private String id;
    /**
     * @return The name of the field. Contains ASCII characters, specifically lowercase letters, digits, and underscores.
     * 
     */
    private String name;
    /**
     * @return The API show URL at which the object is accessible.
     * 
     */
    private String self;
    /**
     * @return A short-form, server-generated string that provides succinct, important information about the field.
     * 
     */
    private String summary;
    /**
     * @return API object type.
     * 
     */
    private String type;

    private GetServiceCustomFieldResult() {}
    /**
     * @return The data type of the field option.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    public String defaultValue() {
        return this.defaultValue;
    }
    /**
     * @return A description of the data this field contains.
     * 
     */
    public String description() {
        return this.description;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Whether the field is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The options for the custom field. Only applies to `single_value_fixed` and `multi_value_fixed` field types. Each field option contains:
     * 
     */
    public List<GetServiceCustomFieldFieldOption> fieldOptions() {
        return this.fieldOptions;
    }
    /**
     * @return The type of data this field contains. In combination with the data_type field.
     * 
     */
    public String fieldType() {
        return this.fieldType;
    }
    /**
     * @return The ID of the found field.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the field. Contains ASCII characters, specifically lowercase letters, digits, and underscores.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The API show URL at which the object is accessible.
     * 
     */
    public String self() {
        return this.self;
    }
    /**
     * @return A short-form, server-generated string that provides succinct, important information about the field.
     * 
     */
    public String summary() {
        return this.summary;
    }
    /**
     * @return API object type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceCustomFieldResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataType;
        private String defaultValue;
        private String description;
        private String displayName;
        private Boolean enabled;
        private List<GetServiceCustomFieldFieldOption> fieldOptions;
        private String fieldType;
        private String id;
        private String name;
        private String self;
        private String summary;
        private String type;
        public Builder() {}
        public Builder(GetServiceCustomFieldResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataType = defaults.dataType;
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.fieldOptions = defaults.fieldOptions;
    	      this.fieldType = defaults.fieldType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.self = defaults.self;
    	      this.summary = defaults.summary;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(String defaultValue) {
            if (defaultValue == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "defaultValue");
            }
            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder fieldOptions(List<GetServiceCustomFieldFieldOption> fieldOptions) {
            if (fieldOptions == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "fieldOptions");
            }
            this.fieldOptions = fieldOptions;
            return this;
        }
        public Builder fieldOptions(GetServiceCustomFieldFieldOption... fieldOptions) {
            return fieldOptions(List.of(fieldOptions));
        }
        @CustomType.Setter
        public Builder fieldType(String fieldType) {
            if (fieldType == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "fieldType");
            }
            this.fieldType = fieldType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder self(String self) {
            if (self == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "self");
            }
            this.self = self;
            return this;
        }
        @CustomType.Setter
        public Builder summary(String summary) {
            if (summary == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "summary");
            }
            this.summary = summary;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceCustomFieldResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetServiceCustomFieldResult build() {
            final var _resultValue = new GetServiceCustomFieldResult();
            _resultValue.dataType = dataType;
            _resultValue.defaultValue = defaultValue;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enabled = enabled;
            _resultValue.fieldOptions = fieldOptions;
            _resultValue.fieldType = fieldType;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.self = self;
            _resultValue.summary = summary;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
