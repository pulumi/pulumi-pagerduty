// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.outputs.GetServiceTeam;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return Time in seconds that an incident changes to the Triggered State after being Acknowledged. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.
     * 
     */
    private Integer acknowledgementTimeout;
    /**
     * @return Whether a service creates only incidents, or both alerts and incidents. A service must create alerts in order to enable incident merging.
     * 
     */
    private String alertCreation;
    /**
     * @return Time in seconds that an incident is automatically resolved if left open for that long. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.
     * 
     */
    private Integer autoResolveTimeout;
    /**
     * @return The user-provided description of the service.
     * 
     */
    private String description;
    /**
     * @return The escalation policy associated with this service.
     * 
     */
    private String escalationPolicy;
    /**
     * @return The ID of the found service.
     * 
     */
    private String id;
    /**
     * @return The short name of the found service.
     * 
     */
    private String name;
    /**
     * @return The set of teams associated with the service.
     * 
     */
    private List<GetServiceTeam> teams;
    /**
     * @return The type of object. The value returned will be `service`. Can be used for passing to a service dependency.
     * 
     */
    private String type;

    private GetServiceResult() {}
    /**
     * @return Time in seconds that an incident changes to the Triggered State after being Acknowledged. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.
     * 
     */
    public Integer acknowledgementTimeout() {
        return this.acknowledgementTimeout;
    }
    /**
     * @return Whether a service creates only incidents, or both alerts and incidents. A service must create alerts in order to enable incident merging.
     * 
     */
    public String alertCreation() {
        return this.alertCreation;
    }
    /**
     * @return Time in seconds that an incident is automatically resolved if left open for that long. Value is null if the feature is disabled. Value must not be negative. Setting this field to 0, null (or unset) will disable the feature.
     * 
     */
    public Integer autoResolveTimeout() {
        return this.autoResolveTimeout;
    }
    /**
     * @return The user-provided description of the service.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The escalation policy associated with this service.
     * 
     */
    public String escalationPolicy() {
        return this.escalationPolicy;
    }
    /**
     * @return The ID of the found service.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The short name of the found service.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The set of teams associated with the service.
     * 
     */
    public List<GetServiceTeam> teams() {
        return this.teams;
    }
    /**
     * @return The type of object. The value returned will be `service`. Can be used for passing to a service dependency.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer acknowledgementTimeout;
        private String alertCreation;
        private Integer autoResolveTimeout;
        private String description;
        private String escalationPolicy;
        private String id;
        private String name;
        private List<GetServiceTeam> teams;
        private String type;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acknowledgementTimeout = defaults.acknowledgementTimeout;
    	      this.alertCreation = defaults.alertCreation;
    	      this.autoResolveTimeout = defaults.autoResolveTimeout;
    	      this.description = defaults.description;
    	      this.escalationPolicy = defaults.escalationPolicy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.teams = defaults.teams;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder acknowledgementTimeout(Integer acknowledgementTimeout) {
            if (acknowledgementTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "acknowledgementTimeout");
            }
            this.acknowledgementTimeout = acknowledgementTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder alertCreation(String alertCreation) {
            if (alertCreation == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "alertCreation");
            }
            this.alertCreation = alertCreation;
            return this;
        }
        @CustomType.Setter
        public Builder autoResolveTimeout(Integer autoResolveTimeout) {
            if (autoResolveTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "autoResolveTimeout");
            }
            this.autoResolveTimeout = autoResolveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder escalationPolicy(String escalationPolicy) {
            if (escalationPolicy == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "escalationPolicy");
            }
            this.escalationPolicy = escalationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder teams(List<GetServiceTeam> teams) {
            if (teams == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "teams");
            }
            this.teams = teams;
            return this;
        }
        public Builder teams(GetServiceTeam... teams) {
            return teams(List.of(teams));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.acknowledgementTimeout = acknowledgementTimeout;
            _resultValue.alertCreation = alertCreation;
            _resultValue.autoResolveTimeout = autoResolveTimeout;
            _resultValue.description = description;
            _resultValue.escalationPolicy = escalationPolicy;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.teams = teams;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
