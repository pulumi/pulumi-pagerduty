// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.pagerduty.outputs.GetStandardsStandardExclusion;
import com.pulumi.pagerduty.outputs.GetStandardsStandardInclusion;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStandardsStandard {
    /**
     * @return Indicates whether the standard is currently active and applicable to the resource.
     * 
     */
    private Boolean active;
    /**
     * @return Provides a textual description of the standard.
     * 
     */
    private String description;
    /**
     * @return A list of exceptions for the application of this standard.
     * 
     */
    private List<GetStandardsStandardExclusion> exclusions;
    /**
     * @return The unique identifier for the resource being included.
     * 
     */
    private String id;
    /**
     * @return A list of explict instances this standard applies to.
     * 
     */
    private List<GetStandardsStandardInclusion> inclusions;
    /**
     * @return The human-readable name of the standard.
     * 
     */
    private String name;
    /**
     * @return Filter by `resourceType` the received standards. Allowed values are `technicalService`.
     * 
     */
    private String resourceType;
    /**
     * @return Specifies the type of resource this inclusion applies to.
     * 
     */
    private String type;

    private GetStandardsStandard() {}
    /**
     * @return Indicates whether the standard is currently active and applicable to the resource.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return Provides a textual description of the standard.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A list of exceptions for the application of this standard.
     * 
     */
    public List<GetStandardsStandardExclusion> exclusions() {
        return this.exclusions;
    }
    /**
     * @return The unique identifier for the resource being included.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of explict instances this standard applies to.
     * 
     */
    public List<GetStandardsStandardInclusion> inclusions() {
        return this.inclusions;
    }
    /**
     * @return The human-readable name of the standard.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Filter by `resourceType` the received standards. Allowed values are `technicalService`.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return Specifies the type of resource this inclusion applies to.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardsStandard defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String description;
        private List<GetStandardsStandardExclusion> exclusions;
        private String id;
        private List<GetStandardsStandardInclusion> inclusions;
        private String name;
        private String resourceType;
        private String type;
        public Builder() {}
        public Builder(GetStandardsStandard defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.description = defaults.description;
    	      this.exclusions = defaults.exclusions;
    	      this.id = defaults.id;
    	      this.inclusions = defaults.inclusions;
    	      this.name = defaults.name;
    	      this.resourceType = defaults.resourceType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder exclusions(List<GetStandardsStandardExclusion> exclusions) {
            if (exclusions == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "exclusions");
            }
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(GetStandardsStandardExclusion... exclusions) {
            return exclusions(List.of(exclusions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inclusions(List<GetStandardsStandardInclusion> inclusions) {
            if (inclusions == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "inclusions");
            }
            this.inclusions = inclusions;
            return this;
        }
        public Builder inclusions(GetStandardsStandardInclusion... inclusions) {
            return inclusions(List.of(inclusions));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStandardsStandard", "type");
            }
            this.type = type;
            return this;
        }
        public GetStandardsStandard build() {
            final var _resultValue = new GetStandardsStandard();
            _resultValue.active = active;
            _resultValue.description = description;
            _resultValue.exclusions = exclusions;
            _resultValue.id = id;
            _resultValue.inclusions = inclusions;
            _resultValue.name = name;
            _resultValue.resourceType = resourceType;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
