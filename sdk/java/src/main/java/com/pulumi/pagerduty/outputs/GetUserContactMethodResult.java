// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserContactMethodResult {
    /**
     * @return The &#34;address&#34; to deliver to: `email`, `phone number`, etc., depending on the type.
     * 
     */
    private String address;
    /**
     * @return If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)
     * 
     */
    private Boolean blacklisted;
    /**
     * @return The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)
     * 
     */
    private Integer countryCode;
    /**
     * @return Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)
     * 
     */
    private String deviceType;
    /**
     * @return If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The label (e.g., &#34;Work&#34;, &#34;Mobile&#34;, &#34;Ashley&#39;s iPhone&#34;, etc.).
     * 
     */
    private String label;
    /**
     * @return Send an abbreviated email message instead of the standard email output. (Email contact method only.)
     * 
     */
    private Boolean sendShortEmail;
    /**
     * @return The type of the found contact method. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
     * 
     */
    private String type;
    private String userId;

    private GetUserContactMethodResult() {}
    /**
     * @return The &#34;address&#34; to deliver to: `email`, `phone number`, etc., depending on the type.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)
     * 
     */
    public Boolean blacklisted() {
        return this.blacklisted;
    }
    /**
     * @return The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)
     * 
     */
    public Integer countryCode() {
        return this.countryCode;
    }
    /**
     * @return Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)
     * 
     */
    public String deviceType() {
        return this.deviceType;
    }
    /**
     * @return If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The label (e.g., &#34;Work&#34;, &#34;Mobile&#34;, &#34;Ashley&#39;s iPhone&#34;, etc.).
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return Send an abbreviated email message instead of the standard email output. (Email contact method only.)
     * 
     */
    public Boolean sendShortEmail() {
        return this.sendShortEmail;
    }
    /**
     * @return The type of the found contact method. May be (`emailContactMethod`, `phoneContactMethod`, `smsContactMethod`, `pushNotificationContactMethod`).
     * 
     */
    public String type() {
        return this.type;
    }
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserContactMethodResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Boolean blacklisted;
        private Integer countryCode;
        private String deviceType;
        private Boolean enabled;
        private String id;
        private String label;
        private Boolean sendShortEmail;
        private String type;
        private String userId;
        public Builder() {}
        public Builder(GetUserContactMethodResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.blacklisted = defaults.blacklisted;
    	      this.countryCode = defaults.countryCode;
    	      this.deviceType = defaults.deviceType;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.sendShortEmail = defaults.sendShortEmail;
    	      this.type = defaults.type;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder blacklisted(Boolean blacklisted) {
            if (blacklisted == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "blacklisted");
            }
            this.blacklisted = blacklisted;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(Integer countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder deviceType(String deviceType) {
            if (deviceType == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "deviceType");
            }
            this.deviceType = deviceType;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder sendShortEmail(Boolean sendShortEmail) {
            if (sendShortEmail == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "sendShortEmail");
            }
            this.sendShortEmail = sendShortEmail;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetUserContactMethodResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetUserContactMethodResult build() {
            final var _resultValue = new GetUserContactMethodResult();
            _resultValue.address = address;
            _resultValue.blacklisted = blacklisted;
            _resultValue.countryCode = countryCode;
            _resultValue.deviceType = deviceType;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.sendShortEmail = sendShortEmail;
            _resultValue.type = type;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
