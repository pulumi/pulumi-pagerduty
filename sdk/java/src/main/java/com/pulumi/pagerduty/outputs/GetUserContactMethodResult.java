// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserContactMethodResult {
    /**
     * @return The &#34;address&#34; to deliver to: `email`, `phone number`, etc., depending on the type.
     * 
     */
    private final String address;
    /**
     * @return If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)
     * 
     */
    private final Boolean blacklisted;
    /**
     * @return The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)
     * 
     */
    private final Integer countryCode;
    /**
     * @return Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)
     * 
     */
    private final String deviceType;
    /**
     * @return If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)
     * 
     */
    private final Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The label (e.g., &#34;Work&#34;, &#34;Mobile&#34;, &#34;Ashley&#39;s iPhone&#34;, etc.).
     * 
     */
    private final String label;
    /**
     * @return Send an abbreviated email message instead of the standard email output. (Email contact method only.)
     * 
     */
    private final Boolean sendShortEmail;
    /**
     * @return The type of the found contact method. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).
     * 
     */
    private final String type;
    private final String userId;

    @CustomType.Constructor
    private GetUserContactMethodResult(
        @CustomType.Parameter("address") String address,
        @CustomType.Parameter("blacklisted") Boolean blacklisted,
        @CustomType.Parameter("countryCode") Integer countryCode,
        @CustomType.Parameter("deviceType") String deviceType,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("sendShortEmail") Boolean sendShortEmail,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("userId") String userId) {
        this.address = address;
        this.blacklisted = blacklisted;
        this.countryCode = countryCode;
        this.deviceType = deviceType;
        this.enabled = enabled;
        this.id = id;
        this.label = label;
        this.sendShortEmail = sendShortEmail;
        this.type = type;
        this.userId = userId;
    }

    /**
     * @return The &#34;address&#34; to deliver to: `email`, `phone number`, etc., depending on the type.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it. (Phone and SMS contact methods only.)
     * 
     */
    public Boolean blacklisted() {
        return this.blacklisted;
    }
    /**
     * @return The 1-to-3 digit country calling code. (Phone and SMS contact methods only.)
     * 
     */
    public Integer countryCode() {
        return this.countryCode;
    }
    /**
     * @return Either `ios` or `android`, depending on the type of the device receiving notifications. (Push notification contact method only.)
     * 
     */
    public String deviceType() {
        return this.deviceType;
    }
    /**
     * @return If true, this phone is capable of receiving SMS messages. (Phone and SMS contact methods only.)
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The label (e.g., &#34;Work&#34;, &#34;Mobile&#34;, &#34;Ashley&#39;s iPhone&#34;, etc.).
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return Send an abbreviated email message instead of the standard email output. (Email contact method only.)
     * 
     */
    public Boolean sendShortEmail() {
        return this.sendShortEmail;
    }
    /**
     * @return The type of the found contact method. May be (`email_contact_method`, `phone_contact_method`, `sms_contact_method`, `push_notification_contact_method`).
     * 
     */
    public String type() {
        return this.type;
    }
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserContactMethodResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String address;
        private Boolean blacklisted;
        private Integer countryCode;
        private String deviceType;
        private Boolean enabled;
        private String id;
        private String label;
        private Boolean sendShortEmail;
        private String type;
        private String userId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserContactMethodResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.blacklisted = defaults.blacklisted;
    	      this.countryCode = defaults.countryCode;
    	      this.deviceType = defaults.deviceType;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.sendShortEmail = defaults.sendShortEmail;
    	      this.type = defaults.type;
    	      this.userId = defaults.userId;
        }

        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        public Builder blacklisted(Boolean blacklisted) {
            this.blacklisted = Objects.requireNonNull(blacklisted);
            return this;
        }
        public Builder countryCode(Integer countryCode) {
            this.countryCode = Objects.requireNonNull(countryCode);
            return this;
        }
        public Builder deviceType(String deviceType) {
            this.deviceType = Objects.requireNonNull(deviceType);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder sendShortEmail(Boolean sendShortEmail) {
            this.sendShortEmail = Objects.requireNonNull(sendShortEmail);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }        public GetUserContactMethodResult build() {
            return new GetUserContactMethodResult(address, blacklisted, countryCode, deviceType, enabled, id, label, sendShortEmail, type, userId);
        }
    }
}
