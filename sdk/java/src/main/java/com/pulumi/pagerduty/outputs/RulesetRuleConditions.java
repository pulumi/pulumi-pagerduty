// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.pagerduty.outputs.RulesetRuleConditionsSubcondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleConditions {
    /**
     * @return Operator to combine sub-conditions. Can be `and` or `or`.
     * 
     */
    private final @Nullable String operator;
    /**
     * @return List of sub-conditions that define the condition.
     * 
     */
    private final @Nullable List<RulesetRuleConditionsSubcondition> subconditions;

    @CustomType.Constructor
    private RulesetRuleConditions(
        @CustomType.Parameter("operator") @Nullable String operator,
        @CustomType.Parameter("subconditions") @Nullable List<RulesetRuleConditionsSubcondition> subconditions) {
        this.operator = operator;
        this.subconditions = subconditions;
    }

    /**
     * @return Operator to combine sub-conditions. Can be `and` or `or`.
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    /**
     * @return List of sub-conditions that define the condition.
     * 
     */
    public List<RulesetRuleConditionsSubcondition> subconditions() {
        return this.subconditions == null ? List.of() : this.subconditions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleConditions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String operator;
        private @Nullable List<RulesetRuleConditionsSubcondition> subconditions;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesetRuleConditions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operator = defaults.operator;
    	      this.subconditions = defaults.subconditions;
        }

        public Builder operator(@Nullable String operator) {
            this.operator = operator;
            return this;
        }
        public Builder subconditions(@Nullable List<RulesetRuleConditionsSubcondition> subconditions) {
            this.subconditions = subconditions;
            return this;
        }
        public Builder subconditions(RulesetRuleConditionsSubcondition... subconditions) {
            return subconditions(List.of(subconditions));
        }        public RulesetRuleConditions build() {
            return new RulesetRuleConditions(operator, subconditions);
        }
    }
}
