// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.pagerduty.outputs.ServiceDependencyDependencyDependentService;
import com.pulumi.pagerduty.outputs.ServiceDependencyDependencySupportingService;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceDependencyDependency {
    /**
     * @return The service that dependents on the supporting service. Dependency dependent service documented below.
     * 
     */
    private List<ServiceDependencyDependencyDependentService> dependentServices;
    /**
     * @return The service that supports the dependent service. Dependency supporting service documented below.
     * 
     */
    private List<ServiceDependencyDependencySupportingService> supportingServices;
    /**
     * @return Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
     * 
     */
    private @Nullable String type;

    private ServiceDependencyDependency() {}
    /**
     * @return The service that dependents on the supporting service. Dependency dependent service documented below.
     * 
     */
    public List<ServiceDependencyDependencyDependentService> dependentServices() {
        return this.dependentServices;
    }
    /**
     * @return The service that supports the dependent service. Dependency supporting service documented below.
     * 
     */
    public List<ServiceDependencyDependencySupportingService> supportingServices() {
        return this.supportingServices;
    }
    /**
     * @return Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceDependencyDependency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ServiceDependencyDependencyDependentService> dependentServices;
        private List<ServiceDependencyDependencySupportingService> supportingServices;
        private @Nullable String type;
        public Builder() {}
        public Builder(ServiceDependencyDependency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependentServices = defaults.dependentServices;
    	      this.supportingServices = defaults.supportingServices;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder dependentServices(List<ServiceDependencyDependencyDependentService> dependentServices) {
            this.dependentServices = Objects.requireNonNull(dependentServices);
            return this;
        }
        public Builder dependentServices(ServiceDependencyDependencyDependentService... dependentServices) {
            return dependentServices(List.of(dependentServices));
        }
        @CustomType.Setter
        public Builder supportingServices(List<ServiceDependencyDependencySupportingService> supportingServices) {
            this.supportingServices = Objects.requireNonNull(supportingServices);
            return this;
        }
        public Builder supportingServices(ServiceDependencyDependencySupportingService... supportingServices) {
            return supportingServices(List.of(supportingServices));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public ServiceDependencyDependency build() {
            final var _resultValue = new ServiceDependencyDependency();
            _resultValue.dependentServices = dependentServices;
            _resultValue.supportingServices = supportingServices;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
