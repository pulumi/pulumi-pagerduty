// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.pagerduty.outputs.ServiceIncidentUrgencyRuleDuringSupportHours;
import com.pulumi.pagerduty.outputs.ServiceIncidentUrgencyRuleOutsideSupportHours;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceIncidentUrgencyRule {
    /**
     * @return Incidents&#39; urgency during support hours.
     * 
     */
    private final @Nullable ServiceIncidentUrgencyRuleDuringSupportHours duringSupportHours;
    /**
     * @return Incidents&#39; urgency outside support hours.
     * 
     */
    private final @Nullable ServiceIncidentUrgencyRuleOutsideSupportHours outsideSupportHours;
    /**
     * @return The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    private final String type;
    /**
     * @return The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
     * 
     */
    private final @Nullable String urgency;

    @CustomType.Constructor
    private ServiceIncidentUrgencyRule(
        @CustomType.Parameter("duringSupportHours") @Nullable ServiceIncidentUrgencyRuleDuringSupportHours duringSupportHours,
        @CustomType.Parameter("outsideSupportHours") @Nullable ServiceIncidentUrgencyRuleOutsideSupportHours outsideSupportHours,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("urgency") @Nullable String urgency) {
        this.duringSupportHours = duringSupportHours;
        this.outsideSupportHours = outsideSupportHours;
        this.type = type;
        this.urgency = urgency;
    }

    /**
     * @return Incidents&#39; urgency during support hours.
     * 
     */
    public Optional<ServiceIncidentUrgencyRuleDuringSupportHours> duringSupportHours() {
        return Optional.ofNullable(this.duringSupportHours);
    }
    /**
     * @return Incidents&#39; urgency outside support hours.
     * 
     */
    public Optional<ServiceIncidentUrgencyRuleOutsideSupportHours> outsideSupportHours() {
        return Optional.ofNullable(this.outsideSupportHours);
    }
    /**
     * @return The type of alert grouping; one of `intelligent`, `time` or `content_based`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set&#39;s the urgency of the incident based on the severity set by the triggering monitoring tool.
     * 
     */
    public Optional<String> urgency() {
        return Optional.ofNullable(this.urgency);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceIncidentUrgencyRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ServiceIncidentUrgencyRuleDuringSupportHours duringSupportHours;
        private @Nullable ServiceIncidentUrgencyRuleOutsideSupportHours outsideSupportHours;
        private String type;
        private @Nullable String urgency;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceIncidentUrgencyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.duringSupportHours = defaults.duringSupportHours;
    	      this.outsideSupportHours = defaults.outsideSupportHours;
    	      this.type = defaults.type;
    	      this.urgency = defaults.urgency;
        }

        public Builder duringSupportHours(@Nullable ServiceIncidentUrgencyRuleDuringSupportHours duringSupportHours) {
            this.duringSupportHours = duringSupportHours;
            return this;
        }
        public Builder outsideSupportHours(@Nullable ServiceIncidentUrgencyRuleOutsideSupportHours outsideSupportHours) {
            this.outsideSupportHours = outsideSupportHours;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder urgency(@Nullable String urgency) {
            this.urgency = urgency;
            return this;
        }        public ServiceIncidentUrgencyRule build() {
            return new ServiceIncidentUrgencyRule(duringSupportHours, outsideSupportHours, type, urgency);
        }
    }
}
