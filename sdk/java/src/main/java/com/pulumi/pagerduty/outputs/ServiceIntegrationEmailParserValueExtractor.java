// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceIntegrationEmailParserValueExtractor {
    private @Nullable String endsBefore;
    /**
     * @return Can be `subject` or `body`.
     * 
     */
    private String part;
    /**
     * @return If `type` has value `regex` this value should contain valid regex.
     * 
     */
    private @Nullable String regex;
    private @Nullable String startsAfter;
    /**
     * @return Can be `between`, `entire` or `regex`.
     * 
     */
    private String type;
    /**
     * @return First value extractor should have name `incident_key` other value extractors should contain custom names.
     * 
     */
    private String valueName;

    private ServiceIntegrationEmailParserValueExtractor() {}
    public Optional<String> endsBefore() {
        return Optional.ofNullable(this.endsBefore);
    }
    /**
     * @return Can be `subject` or `body`.
     * 
     */
    public String part() {
        return this.part;
    }
    /**
     * @return If `type` has value `regex` this value should contain valid regex.
     * 
     */
    public Optional<String> regex() {
        return Optional.ofNullable(this.regex);
    }
    public Optional<String> startsAfter() {
        return Optional.ofNullable(this.startsAfter);
    }
    /**
     * @return Can be `between`, `entire` or `regex`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return First value extractor should have name `incident_key` other value extractors should contain custom names.
     * 
     */
    public String valueName() {
        return this.valueName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceIntegrationEmailParserValueExtractor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endsBefore;
        private String part;
        private @Nullable String regex;
        private @Nullable String startsAfter;
        private String type;
        private String valueName;
        public Builder() {}
        public Builder(ServiceIntegrationEmailParserValueExtractor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endsBefore = defaults.endsBefore;
    	      this.part = defaults.part;
    	      this.regex = defaults.regex;
    	      this.startsAfter = defaults.startsAfter;
    	      this.type = defaults.type;
    	      this.valueName = defaults.valueName;
        }

        @CustomType.Setter
        public Builder endsBefore(@Nullable String endsBefore) {
            this.endsBefore = endsBefore;
            return this;
        }
        @CustomType.Setter
        public Builder part(String part) {
            this.part = Objects.requireNonNull(part);
            return this;
        }
        @CustomType.Setter
        public Builder regex(@Nullable String regex) {
            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder startsAfter(@Nullable String startsAfter) {
            this.startsAfter = startsAfter;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder valueName(String valueName) {
            this.valueName = Objects.requireNonNull(valueName);
            return this;
        }
        public ServiceIntegrationEmailParserValueExtractor build() {
            final var o = new ServiceIntegrationEmailParserValueExtractor();
            o.endsBefore = endsBefore;
            o.part = part;
            o.regex = regex;
            o.startsAfter = startsAfter;
            o.type = type;
            o.valueName = valueName;
            return o;
        }
    }
}
