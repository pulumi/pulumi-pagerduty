// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SlackConnectionConfig {
    /**
     * @return A list of strings to filter events by PagerDuty event type. `&#34;incident.triggered&#34;` is required. The follow event types are also possible:
     * - `incident.acknowledged`
     * - `incident.escalated`
     * - `incident.resolved`
     * - `incident.reassigned`
     * - `incident.annotated`
     * - `incident.unacknowledged`
     * - `incident.delegated`
     * - `incident.priority_updated`
     * - `incident.responder.added`
     * - `incident.responder.replied`
     * - `incident.status_update_published`
     * - `incident.reopened`
     * 
     */
    private List<String> events;
    /**
     * @return Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through pagerduty.getPriority data source.
     * - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behavior is to set `priorities` to `No Priority` value.
     * - When set to `[&#34;*&#34;]` its corresponding value for `priorities` in Slack Connection&#39;s configuration will be `Any Priority`.
     * 
     */
    private @Nullable List<String> priorities;
    /**
     * @return Allows you to filter events by urgency. Either `high`, `low` or `null` for Any urgency. Default is `null`.
     * 
     */
    private @Nullable String urgency;

    private SlackConnectionConfig() {}
    /**
     * @return A list of strings to filter events by PagerDuty event type. `&#34;incident.triggered&#34;` is required. The follow event types are also possible:
     * - `incident.acknowledged`
     * - `incident.escalated`
     * - `incident.resolved`
     * - `incident.reassigned`
     * - `incident.annotated`
     * - `incident.unacknowledged`
     * - `incident.delegated`
     * - `incident.priority_updated`
     * - `incident.responder.added`
     * - `incident.responder.replied`
     * - `incident.status_update_published`
     * - `incident.reopened`
     * 
     */
    public List<String> events() {
        return this.events;
    }
    /**
     * @return Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through pagerduty.getPriority data source.
     * - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behavior is to set `priorities` to `No Priority` value.
     * - When set to `[&#34;*&#34;]` its corresponding value for `priorities` in Slack Connection&#39;s configuration will be `Any Priority`.
     * 
     */
    public List<String> priorities() {
        return this.priorities == null ? List.of() : this.priorities;
    }
    /**
     * @return Allows you to filter events by urgency. Either `high`, `low` or `null` for Any urgency. Default is `null`.
     * 
     */
    public Optional<String> urgency() {
        return Optional.ofNullable(this.urgency);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SlackConnectionConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> events;
        private @Nullable List<String> priorities;
        private @Nullable String urgency;
        public Builder() {}
        public Builder(SlackConnectionConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.events = defaults.events;
    	      this.priorities = defaults.priorities;
    	      this.urgency = defaults.urgency;
        }

        @CustomType.Setter
        public Builder events(List<String> events) {
            if (events == null) {
              throw new MissingRequiredPropertyException("SlackConnectionConfig", "events");
            }
            this.events = events;
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder priorities(@Nullable List<String> priorities) {

            this.priorities = priorities;
            return this;
        }
        public Builder priorities(String... priorities) {
            return priorities(List.of(priorities));
        }
        @CustomType.Setter
        public Builder urgency(@Nullable String urgency) {

            this.urgency = urgency;
            return this;
        }
        public SlackConnectionConfig build() {
            final var _resultValue = new SlackConnectionConfig();
            _resultValue.events = events;
            _resultValue.priorities = priorities;
            _resultValue.urgency = urgency;
            return _resultValue;
        }
    }
}
