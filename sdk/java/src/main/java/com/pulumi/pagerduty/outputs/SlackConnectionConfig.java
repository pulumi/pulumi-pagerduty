// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pagerduty.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SlackConnectionConfig {
    /**
     * @return A list of strings to filter events by PagerDuty event type. `&#34;incident.triggered&#34;` is required. The follow event types are also possible:
     * - `incident.acknowledged`
     * - `incident.escalated`
     * - `incident.resolved`
     * - `incident.reassigned`
     * - `incident.annotated`
     * - `incident.unacknowledged`
     * - `incident.delegated`
     * - `incident.priority_updated`
     * - `incident.responder.added`
     * - `incident.responder.replied`
     * - `incident.status_update_published`
     * - `incident.reopened`
     * 
     */
    private final List<String> events;
    private final @Nullable List<String> priorities;
    /**
     * @return Allows you to filter events by urgency. Either `high` or `low`.
     * 
     */
    private final @Nullable String urgency;

    @CustomType.Constructor
    private SlackConnectionConfig(
        @CustomType.Parameter("events") List<String> events,
        @CustomType.Parameter("priorities") @Nullable List<String> priorities,
        @CustomType.Parameter("urgency") @Nullable String urgency) {
        this.events = events;
        this.priorities = priorities;
        this.urgency = urgency;
    }

    /**
     * @return A list of strings to filter events by PagerDuty event type. `&#34;incident.triggered&#34;` is required. The follow event types are also possible:
     * - `incident.acknowledged`
     * - `incident.escalated`
     * - `incident.resolved`
     * - `incident.reassigned`
     * - `incident.annotated`
     * - `incident.unacknowledged`
     * - `incident.delegated`
     * - `incident.priority_updated`
     * - `incident.responder.added`
     * - `incident.responder.replied`
     * - `incident.status_update_published`
     * - `incident.reopened`
     * 
     */
    public List<String> events() {
        return this.events;
    }
    public List<String> priorities() {
        return this.priorities == null ? List.of() : this.priorities;
    }
    /**
     * @return Allows you to filter events by urgency. Either `high` or `low`.
     * 
     */
    public Optional<String> urgency() {
        return Optional.ofNullable(this.urgency);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SlackConnectionConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> events;
        private @Nullable List<String> priorities;
        private @Nullable String urgency;

        public Builder() {
    	      // Empty
        }

        public Builder(SlackConnectionConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.events = defaults.events;
    	      this.priorities = defaults.priorities;
    	      this.urgency = defaults.urgency;
        }

        public Builder events(List<String> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        public Builder priorities(@Nullable List<String> priorities) {
            this.priorities = priorities;
            return this;
        }
        public Builder priorities(String... priorities) {
            return priorities(List.of(priorities));
        }
        public Builder urgency(@Nullable String urgency) {
            this.urgency = urgency;
            return this;
        }        public SlackConnectionConfig build() {
            return new SlackConnectionConfig(events, priorities, urgency);
        }
    }
}
