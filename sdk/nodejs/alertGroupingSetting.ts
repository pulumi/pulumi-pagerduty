// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * An [alert grouping setting](https://developer.pagerduty.com/api-reference/587edbc8ff416-create-an-alert-grouping-setting)
 * stores and centralize the configuration used during grouping of the alerts.
 *
 * ## Migration from `alertGroupingParameters`
 *
 * To migrate from using the field `alertGroupingParameters` of a
 * service
 * to a `pagerduty.AlertGroupingSetting` resource, you can cut-and-paste the
 * contents of an `alertGroupingParameters` field from a `pagerduty.Service`
 * resource into the new resource, but you also need to add at least one value in
 * the field `services` to create the alert grouping setting with a service
 * associated to it.
 *
 * If you are using `timeout = 0` or `timeWindow = 0` in order to use the values
 * recommended by PagerDuty you also need to set its value to null or delete it,
 * since a value of `0` is no longer accepted.
 *
 * Since the `alertGroupingParameters` field creates an Alert Grouping Setting
 * behind the scenes, it is necessary to import them if you want to keep your
 * configuration the same as it is right now.
 *
 * **Example**:
 *
 * Before:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const _default = pagerduty.getEscalationPolicy({
 *     name: "Default",
 * });
 * const foo = new pagerduty.Service("foo", {
 *     name: "Foo",
 *     escalationPolicy: _default.then(_default => _default.id),
 *     alertGroupingParameters: {
 *         type: "time",
 *         config: {
 *             timeout: 0,
 *         },
 *     },
 * });
 * ```
 *
 * After:
 * ## Import
 *
 * Alert grouping settings can be imported using its `id`, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/alertGroupingSetting:AlertGroupingSetting example P3DH5M6
 * ```
 */
export class AlertGroupingSetting extends pulumi.CustomResource {
    /**
     * Get an existing AlertGroupingSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertGroupingSettingState, opts?: pulumi.CustomResourceOptions): AlertGroupingSetting {
        return new AlertGroupingSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/alertGroupingSetting:AlertGroupingSetting';

    /**
     * Returns true if the given object is an instance of AlertGroupingSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertGroupingSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertGroupingSetting.__pulumiType;
    }

    /**
     * The set of values used for configuration.
     */
    public readonly config!: pulumi.Output<outputs.AlertGroupingSettingConfig | undefined>;
    /**
     * A human-friendly text to describe and identify this alert grouping setting.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name for the alert groupig settings.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [Updating can cause a resource replacement] The list IDs of services associated to this setting.
     */
    public readonly services!: pulumi.Output<string[]>;
    /**
     * The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AlertGroupingSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertGroupingSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertGroupingSettingArgs | AlertGroupingSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertGroupingSettingState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AlertGroupingSettingArgs | undefined;
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertGroupingSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertGroupingSetting resources.
 */
export interface AlertGroupingSettingState {
    /**
     * The set of values used for configuration.
     */
    config?: pulumi.Input<inputs.AlertGroupingSettingConfig>;
    /**
     * A human-friendly text to describe and identify this alert grouping setting.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the alert groupig settings.
     */
    name?: pulumi.Input<string>;
    /**
     * [Updating can cause a resource replacement] The list IDs of services associated to this setting.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertGroupingSetting resource.
 */
export interface AlertGroupingSettingArgs {
    /**
     * The set of values used for configuration.
     */
    config?: pulumi.Input<inputs.AlertGroupingSettingConfig>;
    /**
     * A human-friendly text to describe and identify this alert grouping setting.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the alert groupig settings.
     */
    name?: pulumi.Input<string>;
    /**
     * [Updating can cause a resource replacement] The list IDs of services associated to this setting.
     */
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of alert grouping; one of `intelligent`, `time`, `contentBased` or  `contentBasedIntelligent`.
     */
    type: pulumi.Input<string>;
}
