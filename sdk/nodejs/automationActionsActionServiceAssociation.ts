// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * An Automation Actions [action association with a service](https://developer.pagerduty.com/api-reference/5d2f051f3fb43-associate-an-automation-action-with-a-service) configures the relation of a specific Action with a Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const example = new pagerduty.User("example", {
 *     name: "Earline Greenholt",
 *     email: "125.greenholt.earline@graham.name",
 * });
 * const foo = new pagerduty.EscalationPolicy("foo", {
 *     name: "Engineering Escalation Policy",
 *     numLoops: 2,
 *     rules: [{
 *         escalationDelayInMinutes: 10,
 *         targets: [{
 *             type: "user_reference",
 *             id: example.id,
 *         }],
 *     }],
 * });
 * const exampleService = new pagerduty.Service("example", {
 *     name: "My Web App",
 *     autoResolveTimeout: "14400",
 *     acknowledgementTimeout: "600",
 *     escalationPolicy: foo.id,
 *     alertCreation: "create_alerts_and_incidents",
 *     autoPauseNotificationsParameters: {
 *         enabled: true,
 *         timeout: 300,
 *     },
 * });
 * const paActionExample = new pagerduty.AutomationActionsAction("pa_action_example", {
 *     name: "PA Action created via TF",
 *     description: "Description of the PA Action created via TF",
 *     actionType: "process_automation",
 *     actionDataReference: {
 *         processAutomationJobId: "P123456",
 *     },
 * });
 * const fooAutomationActionsActionServiceAssociation = new pagerduty.AutomationActionsActionServiceAssociation("foo", {
 *     actionId: paActionExample.id,
 *     serviceId: exampleService.id,
 * });
 * ```
 *
 * ## Import
 *
 * Action service association can be imported using the `action_id` and `service_id` separated by a colon, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation example 01DER7CUUBF7TH4116K0M4WKPU:PLB09Z
 * ```
 */
export class AutomationActionsActionServiceAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AutomationActionsActionServiceAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationActionsActionServiceAssociationState, opts?: pulumi.CustomResourceOptions): AutomationActionsActionServiceAssociation {
        return new AutomationActionsActionServiceAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation';

    /**
     * Returns true if the given object is an instance of AutomationActionsActionServiceAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationActionsActionServiceAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationActionsActionServiceAssociation.__pulumiType;
    }

    /**
     * Id of the action.
     */
    declare public readonly actionId: pulumi.Output<string>;
    /**
     * Id of the service associated to the action.
     */
    declare public readonly serviceId: pulumi.Output<string>;

    /**
     * Create a AutomationActionsActionServiceAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationActionsActionServiceAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationActionsActionServiceAssociationArgs | AutomationActionsActionServiceAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationActionsActionServiceAssociationState | undefined;
            resourceInputs["actionId"] = state?.actionId;
            resourceInputs["serviceId"] = state?.serviceId;
        } else {
            const args = argsOrState as AutomationActionsActionServiceAssociationArgs | undefined;
            if (args?.actionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'actionId'");
            }
            if (args?.serviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["actionId"] = args?.actionId;
            resourceInputs["serviceId"] = args?.serviceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationActionsActionServiceAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutomationActionsActionServiceAssociation resources.
 */
export interface AutomationActionsActionServiceAssociationState {
    /**
     * Id of the action.
     */
    actionId?: pulumi.Input<string>;
    /**
     * Id of the service associated to the action.
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutomationActionsActionServiceAssociation resource.
 */
export interface AutomationActionsActionServiceAssociationArgs {
    /**
     * Id of the action.
     */
    actionId: pulumi.Input<string>;
    /**
     * Id of the service associated to the action.
     */
    serviceId: pulumi.Input<string>;
}
