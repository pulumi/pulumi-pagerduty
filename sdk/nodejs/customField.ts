// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * !> This Resource is no longer functional. Documentation is left here for the purpose of documenting migration steps.
 *
 * A [Custom Field](https://support.pagerduty.com/docs/custom-fields) is a resuable element which can be added to Custom Field Schemas.
 *
 * ## Migration
 *
 * The `incidentCustomField` resource provides similar functionality
 * with largely the same arguments and attributes. The key distinction is that while custom fields created by this data source
 * may have only applied to a subset of incidents within the account after being added to a schema and assigned to a service,
 * custom fields managed by the `incidentCustomField` resource are applied to all incidents in the account.
 *
 * Additionally:
 * * The separate `multiValue` and `fixedOptions` arguments have been merged into a single argument
 *   named `fieldType`.
 * * The `datatype` argument has been renamed `dataType` to match the Public API for the Custom Fields on Incidents feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const csImpact = new pagerduty.CustomField("csImpact", {datatype: "string"});
 * const sreEnvironment = new pagerduty.CustomField("sreEnvironment", {
 *     datatype: "string",
 *     fixedOptions: true,
 * });
 * ```
 *
 * ## Import
 *
 * Fields can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import pagerduty:index/customField:CustomField sre_environment PLBP09X
 * ```
 */
export class CustomField extends pulumi.CustomResource {
    /**
     * Get an existing CustomField resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomFieldState, opts?: pulumi.CustomResourceOptions): CustomField {
        return new CustomField(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/customField:CustomField';

    /**
     * Returns true if the given object is an instance of CustomField.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomField {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomField.__pulumiType;
    }

    /**
     * The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     */
    public readonly datatype!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    /**
     * True if the field can only accept values from a set of options.
     */
    public readonly fixedOptions!: pulumi.Output<boolean | undefined>;
    /**
     * True if the field can accept multiple values.
     */
    public readonly multiValue!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the field.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CustomField resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomFieldArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomFieldArgs | CustomFieldState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomFieldState | undefined;
            resourceInputs["datatype"] = state ? state.datatype : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fixedOptions"] = state ? state.fixedOptions : undefined;
            resourceInputs["multiValue"] = state ? state.multiValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as CustomFieldArgs | undefined;
            if ((!args || args.datatype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datatype'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["datatype"] = args ? args.datatype : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fixedOptions"] = args ? args.fixedOptions : undefined;
            resourceInputs["multiValue"] = args ? args.multiValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomField.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomField resources.
 */
export interface CustomFieldState {
    /**
     * The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     */
    datatype?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    /**
     * True if the field can only accept values from a set of options.
     */
    fixedOptions?: pulumi.Input<boolean>;
    /**
     * True if the field can accept multiple values.
     */
    multiValue?: pulumi.Input<boolean>;
    /**
     * The name of the field.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomField resource.
 */
export interface CustomFieldArgs {
    /**
     * The datatype of the field. Must be one of `string`, `integer`, `float`, `boolean`, `datetime`, or `url`.
     */
    datatype: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    /**
     * True if the field can only accept values from a set of options.
     */
    fixedOptions?: pulumi.Input<boolean>;
    /**
     * True if the field can accept multiple values.
     */
    multiValue?: pulumi.Input<boolean>;
    /**
     * The name of the field.
     */
    name?: pulumi.Input<string>;
}
