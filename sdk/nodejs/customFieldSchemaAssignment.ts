// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A [Custom Field Schema Assignment](https://support.pagerduty.com/docs/custom-fields#associate-schemas-with-services) is a relationship between a Custom Field Schema and a Service.
 *
 * > The Custom Fields feature is currently available in Early Access.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const csImpact = new pagerduty.CustomField("csImpact", {datatype: "string"});
 * const mySchema = new pagerduty.CustomFieldSchema("mySchema", {
 *     title: "My Schema",
 *     description: "Fields used on incidents",
 * });
 * const firstService = pagerduty.getService({
 *     name: "My First Service",
 * });
 * const assignment = new pagerduty.CustomFieldSchemaAssignment("assignment", {
 *     schema: mySchema.id,
 *     service: firstService.then(firstService => firstService.id),
 * });
 * ```
 */
export class CustomFieldSchemaAssignment extends pulumi.CustomResource {
    /**
     * Get an existing CustomFieldSchemaAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomFieldSchemaAssignmentState, opts?: pulumi.CustomResourceOptions): CustomFieldSchemaAssignment {
        return new CustomFieldSchemaAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/customFieldSchemaAssignment:CustomFieldSchemaAssignment';

    /**
     * Returns true if the given object is an instance of CustomFieldSchemaAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomFieldSchemaAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomFieldSchemaAssignment.__pulumiType;
    }

    /**
     * The id of the field schema.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * The id of the service.
     */
    public readonly service!: pulumi.Output<string>;

    /**
     * Create a CustomFieldSchemaAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomFieldSchemaAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomFieldSchemaAssignmentArgs | CustomFieldSchemaAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomFieldSchemaAssignmentState | undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
        } else {
            const args = argsOrState as CustomFieldSchemaAssignmentArgs | undefined;
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomFieldSchemaAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomFieldSchemaAssignment resources.
 */
export interface CustomFieldSchemaAssignmentState {
    /**
     * The id of the field schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * The id of the service.
     */
    service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomFieldSchemaAssignment resource.
 */
export interface CustomFieldSchemaAssignmentArgs {
    /**
     * The id of the field schema.
     */
    schema: pulumi.Input<string>;
    /**
     * The id of the service.
     */
    service: pulumi.Input<string>;
}
