// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * [Enablements](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Nw-list-enablements) allow you to enable or disable specific features for PagerDuty entities such as services and event orchestrations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const example = pagerduty.getService({
 *     name: "My Web Service",
 * });
 * const exampleEnablement = new pagerduty.Enablement("example", {
 *     entityType: "service",
 *     entityId: example.then(example => example.id),
 *     feature: "aiops",
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Enablements can be imported using the `id`, which is constructed by concatenating the `entity_type`, `entity_id`, and `feature` with dots, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/enablement:Enablement example service.P7HHMVK.aiops
 * ```
 */
export class Enablement extends pulumi.CustomResource {
    /**
     * Get an existing Enablement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnablementState, opts?: pulumi.CustomResourceOptions): Enablement {
        return new Enablement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/enablement:Enablement';

    /**
     * Returns true if the given object is an instance of Enablement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Enablement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Enablement.__pulumiType;
    }

    /**
     * Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of the entity for which to manage the enablement.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * The name of the feature to enable or disable. Possible values can be `aiops`.
     */
    public readonly feature!: pulumi.Output<string>;

    /**
     * Create a Enablement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnablementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnablementArgs | EnablementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnablementState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["feature"] = state ? state.feature : undefined;
        } else {
            const args = argsOrState as EnablementArgs | undefined;
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if ((!args || args.entityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if ((!args || args.feature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'feature'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["feature"] = args ? args.feature : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Enablement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Enablement resources.
 */
export interface EnablementState {
    /**
     * Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the entity for which to manage the enablement.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
     */
    entityType?: pulumi.Input<string>;
    /**
     * The name of the feature to enable or disable. Possible values can be `aiops`.
     */
    feature?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Enablement resource.
 */
export interface EnablementArgs {
    /**
     * Whether the feature should be enabled (`true`) or disabled (`false`) for the specified entity.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the entity for which to manage the enablement.
     */
    entityId: pulumi.Input<string>;
    /**
     * The type of entity for which to manage the enablement. Possible values can be `service` and `eventOrchestration`.
     */
    entityType: pulumi.Input<string>;
    /**
     * The name of the feature to enable or disable. Possible values can be `aiops`.
     */
    feature: pulumi.Input<string>;
}
