// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration
 *
 * ## Example of configuring a Cache Variable for a Global Event Orchestration
 *
 * This example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const databaseTeam = new pagerduty.Team("databaseTeam", {});
 * const eventOrchestration = new pagerduty.EventOrchestration("eventOrchestration", {team: databaseTeam.id});
 * const cacheVar = new pagerduty.EventOrchestrationGlobalCacheVariable("cacheVar", {
 *     eventOrchestration: eventOrchestration.id,
 *     conditions: [{
 *         expression: "event.source exists",
 *     }],
 *     configuration: {
 *         type: "recent_value",
 *         source: "event.source",
 *         regex: ".*",
 *     },
 * });
 * const global = new pagerduty.EventOrchestrationGlobal("global", {
 *     eventOrchestration: eventOrchestration.id,
 *     sets: [{
 *         id: "start",
 *         rules: [{
 *             label: "Always annotate the incident with the event source for all events",
 *             actions: {
 *                 annotate: "Last time, we saw this incident occur on host: {{cache_var.recent_host}}",
 *             },
 *         }],
 *     }],
 *     catchAll: {
 *         actions: {},
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
 * ```
 */
export class EventOrchestrationGlobalCacheVariable extends pulumi.CustomResource {
    /**
     * Get an existing EventOrchestrationGlobalCacheVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventOrchestrationGlobalCacheVariableState, opts?: pulumi.CustomResourceOptions): EventOrchestrationGlobalCacheVariable {
        return new EventOrchestrationGlobalCacheVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable';

    /**
     * Returns true if the given object is an instance of EventOrchestrationGlobalCacheVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventOrchestrationGlobalCacheVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventOrchestrationGlobalCacheVariable.__pulumiType;
    }

    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
     */
    public readonly conditions!: pulumi.Output<outputs.EventOrchestrationGlobalCacheVariableCondition[] | undefined>;
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     */
    public readonly configuration!: pulumi.Output<outputs.EventOrchestrationGlobalCacheVariableConfiguration>;
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     */
    public readonly eventOrchestration!: pulumi.Output<string>;
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a EventOrchestrationGlobalCacheVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventOrchestrationGlobalCacheVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventOrchestrationGlobalCacheVariableArgs | EventOrchestrationGlobalCacheVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventOrchestrationGlobalCacheVariableState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["eventOrchestration"] = state ? state.eventOrchestration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as EventOrchestrationGlobalCacheVariableArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.eventOrchestration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventOrchestration'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eventOrchestration"] = args ? args.eventOrchestration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventOrchestrationGlobalCacheVariable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventOrchestrationGlobalCacheVariable resources.
 */
export interface EventOrchestrationGlobalCacheVariableState {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCacheVariableCondition>[]>;
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     */
    configuration?: pulumi.Input<inputs.EventOrchestrationGlobalCacheVariableConfiguration>;
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     */
    eventOrchestration?: pulumi.Input<string>;
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventOrchestrationGlobalCacheVariable resource.
 */
export interface EventOrchestrationGlobalCacheVariableArgs {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCacheVariableCondition>[]>;
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     */
    configuration: pulumi.Input<inputs.EventOrchestrationGlobalCacheVariableConfiguration>;
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     */
    eventOrchestration: pulumi.Input<string>;
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration.
     */
    name?: pulumi.Input<string>;
}
