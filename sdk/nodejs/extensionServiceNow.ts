// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A special case for [extension](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODEzMw-create-an-extension) for ServiceNow.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const servicenow = pagerduty.getExtensionSchema({
 *     name: "ServiceNow (v7)",
 * });
 * const example = new pagerduty.User("example", {
 *     name: "Howard James",
 *     email: "howard.james@example.domain",
 * });
 * const exampleEscalationPolicy = new pagerduty.EscalationPolicy("example", {
 *     name: "Engineering Escalation Policy",
 *     numLoops: 2,
 *     rules: [{
 *         escalationDelayInMinutes: 10,
 *         targets: [{
 *             type: "user",
 *             id: example.id,
 *         }],
 *     }],
 * });
 * const exampleService = new pagerduty.Service("example", {
 *     name: "My Web App",
 *     autoResolveTimeout: "14400",
 *     acknowledgementTimeout: "600",
 *     escalationPolicy: exampleEscalationPolicy.id,
 * });
 * const snow = new pagerduty.ExtensionServiceNow("snow", {
 *     name: "My Web App Extension",
 *     extensionSchema: servicenow.then(servicenow => servicenow.id),
 *     extensionObjects: [exampleService.id],
 *     snowUser: "meeps",
 *     snowPassword: "zorz",
 *     syncOptions: "manual_sync",
 *     target: "https://foo.servicenow.com/webhook_foo",
 *     taskType: "incident",
 *     referer: "None",
 * });
 * ```
 *
 * ## Import
 *
 * Extensions can be imported using the id.e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/extensionServiceNow:ExtensionServiceNow main PLBP09X
 * ```
 */
export class ExtensionServiceNow extends pulumi.CustomResource {
    /**
     * Get an existing ExtensionServiceNow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensionServiceNowState, opts?: pulumi.CustomResourceOptions): ExtensionServiceNow {
        return new ExtensionServiceNow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/extensionServiceNow:ExtensionServiceNow';

    /**
     * Returns true if the given object is an instance of ExtensionServiceNow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtensionServiceNow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtensionServiceNow.__pulumiType;
    }

    public readonly endpointUrl!: pulumi.Output<string | undefined>;
    public readonly extensionObjects!: pulumi.Output<string[]>;
    public readonly extensionSchema!: pulumi.Output<string>;
    /**
     * URL at which the entity is uniquely displayed in the Web app.
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly referer!: pulumi.Output<string>;
    public readonly snowPassword!: pulumi.Output<string>;
    public readonly snowUser!: pulumi.Output<string>;
    public readonly summary!: pulumi.Output<string>;
    public readonly syncOptions!: pulumi.Output<string>;
    public readonly target!: pulumi.Output<string>;
    public readonly taskType!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ExtensionServiceNow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionServiceNowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensionServiceNowArgs | ExtensionServiceNowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtensionServiceNowState | undefined;
            resourceInputs["endpointUrl"] = state ? state.endpointUrl : undefined;
            resourceInputs["extensionObjects"] = state ? state.extensionObjects : undefined;
            resourceInputs["extensionSchema"] = state ? state.extensionSchema : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["referer"] = state ? state.referer : undefined;
            resourceInputs["snowPassword"] = state ? state.snowPassword : undefined;
            resourceInputs["snowUser"] = state ? state.snowUser : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
            resourceInputs["syncOptions"] = state ? state.syncOptions : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ExtensionServiceNowArgs | undefined;
            if ((!args || args.extensionObjects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionObjects'");
            }
            if ((!args || args.extensionSchema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionSchema'");
            }
            if ((!args || args.referer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'referer'");
            }
            if ((!args || args.snowPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snowPassword'");
            }
            if ((!args || args.snowUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snowUser'");
            }
            if ((!args || args.syncOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncOptions'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["endpointUrl"] = args?.endpointUrl ? pulumi.secret(args.endpointUrl) : undefined;
            resourceInputs["extensionObjects"] = args ? args.extensionObjects : undefined;
            resourceInputs["extensionSchema"] = args ? args.extensionSchema : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["referer"] = args ? args.referer : undefined;
            resourceInputs["snowPassword"] = args?.snowPassword ? pulumi.secret(args.snowPassword) : undefined;
            resourceInputs["snowUser"] = args ? args.snowUser : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
            resourceInputs["syncOptions"] = args ? args.syncOptions : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["endpointUrl", "snowPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExtensionServiceNow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtensionServiceNow resources.
 */
export interface ExtensionServiceNowState {
    endpointUrl?: pulumi.Input<string>;
    extensionObjects?: pulumi.Input<pulumi.Input<string>[]>;
    extensionSchema?: pulumi.Input<string>;
    /**
     * URL at which the entity is uniquely displayed in the Web app.
     */
    htmlUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    referer?: pulumi.Input<string>;
    snowPassword?: pulumi.Input<string>;
    snowUser?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    syncOptions?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExtensionServiceNow resource.
 */
export interface ExtensionServiceNowArgs {
    endpointUrl?: pulumi.Input<string>;
    extensionObjects: pulumi.Input<pulumi.Input<string>[]>;
    extensionSchema: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    referer: pulumi.Input<string>;
    snowPassword: pulumi.Input<string>;
    snowUser: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    syncOptions: pulumi.Input<string>;
    target: pulumi.Input<string>;
    taskType: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
