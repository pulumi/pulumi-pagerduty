// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const tfOrchA = new pagerduty.EventOrchestration("tf_orch_a", {name: "Test Event Orchestration"});
 * const tfMyMonitor = pagerduty.getEventOrchestrationOutput({
 *     name: tfOrchA.name,
 * });
 * const unrouted = new pagerduty.EventOrchestrationUnrouted("unrouted", {
 *     eventOrchestration: tfMyMonitor.apply(tfMyMonitor => tfMyMonitor.id),
 *     catchAll: {
 *         actions: {
 *             severity: "info",
 *         },
 *     },
 *     sets: [{
 *         id: "start",
 *         rules: [{
 *             actions: {
 *                 extractions: [{
 *                     target: "event.custom_details.integration_type",
 *                     template: tfMyMonitor.apply(tfMyMonitor => tfMyMonitor.integrationDetail?.[0]?.parameters?.[0]?.type),
 *                 }],
 *             },
 *         }],
 *     }],
 * });
 * ```
 */
export function getEventOrchestration(args: GetEventOrchestrationArgs, opts?: pulumi.InvokeOptions): Promise<GetEventOrchestrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pagerduty:index/getEventOrchestration:getEventOrchestration", {
        "integrationDetail": args.integrationDetail,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getEventOrchestration.
 */
export interface GetEventOrchestrationArgs {
    /**
     * A list of integrations for the Event Orchestration.
     */
    integrationDetail?: inputs.GetEventOrchestrationIntegrationDetail[];
    /**
     * The name of the Global Event Orchestration to find in the PagerDuty API.
     */
    name: string;
}

/**
 * A collection of values returned by getEventOrchestration.
 */
export interface GetEventOrchestrationResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of integrations for the Event Orchestration.
     */
    readonly integrationDetail: outputs.GetEventOrchestrationIntegrationDetail[];
    /**
     * The name of the found Event Orchestration.
     */
    readonly name: string;
}
/**
 * Use this data source to get information about a specific Global [Event Orchestration](https://developer.pagerduty.com/api-reference/7ba0fe7bdb26a-list-event-orchestrations)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const tfOrchA = new pagerduty.EventOrchestration("tf_orch_a", {name: "Test Event Orchestration"});
 * const tfMyMonitor = pagerduty.getEventOrchestrationOutput({
 *     name: tfOrchA.name,
 * });
 * const unrouted = new pagerduty.EventOrchestrationUnrouted("unrouted", {
 *     eventOrchestration: tfMyMonitor.apply(tfMyMonitor => tfMyMonitor.id),
 *     catchAll: {
 *         actions: {
 *             severity: "info",
 *         },
 *     },
 *     sets: [{
 *         id: "start",
 *         rules: [{
 *             actions: {
 *                 extractions: [{
 *                     target: "event.custom_details.integration_type",
 *                     template: tfMyMonitor.apply(tfMyMonitor => tfMyMonitor.integrationDetail?.[0]?.parameters?.[0]?.type),
 *                 }],
 *             },
 *         }],
 *     }],
 * });
 * ```
 */
export function getEventOrchestrationOutput(args: GetEventOrchestrationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEventOrchestrationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("pagerduty:index/getEventOrchestration:getEventOrchestration", {
        "integrationDetail": args.integrationDetail,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getEventOrchestration.
 */
export interface GetEventOrchestrationOutputArgs {
    /**
     * A list of integrations for the Event Orchestration.
     */
    integrationDetail?: pulumi.Input<pulumi.Input<inputs.GetEventOrchestrationIntegrationDetailArgs>[]>;
    /**
     * The name of the Global Event Orchestration to find in the PagerDuty API.
     */
    name: pulumi.Input<string>;
}
