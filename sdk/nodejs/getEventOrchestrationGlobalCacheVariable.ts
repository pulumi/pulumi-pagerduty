// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a specific [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) for a Global Event Orchestration.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const eventOrchestration = new pagerduty.EventOrchestration("event_orchestration", {name: "Test Event Orchestration"});
 * const cacheVariable = pagerduty.getEventOrchestrationGlobalCacheVariableOutput({
 *     eventOrchestration: eventOrchestration.id,
 *     name: "example_cache_variable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getEventOrchestrationGlobalCacheVariable(args: GetEventOrchestrationGlobalCacheVariableArgs, opts?: pulumi.InvokeOptions): Promise<GetEventOrchestrationGlobalCacheVariableResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pagerduty:index/getEventOrchestrationGlobalCacheVariable:getEventOrchestrationGlobalCacheVariable", {
        "eventOrchestration": args.eventOrchestration,
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableArgs {
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     */
    eventOrchestration: string;
    /**
     * ID of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     */
    id?: string;
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     */
    name?: string;
}

/**
 * A collection of values returned by getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableResult {
    /**
     * Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
     */
    readonly conditions: outputs.GetEventOrchestrationGlobalCacheVariableCondition[];
    /**
     * A configuration object to define what and how values will be stored in the Cache Variable.
     */
    readonly configurations: outputs.GetEventOrchestrationGlobalCacheVariableConfiguration[];
    /**
     * Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
     */
    readonly disabled: boolean;
    readonly eventOrchestration: string;
    readonly id?: string;
    readonly name?: string;
}
/**
 * Use this data source to get information about a specific [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) for a Global Event Orchestration.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const eventOrchestration = new pagerduty.EventOrchestration("event_orchestration", {name: "Test Event Orchestration"});
 * const cacheVariable = pagerduty.getEventOrchestrationGlobalCacheVariableOutput({
 *     eventOrchestration: eventOrchestration.id,
 *     name: "example_cache_variable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getEventOrchestrationGlobalCacheVariableOutput(args: GetEventOrchestrationGlobalCacheVariableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventOrchestrationGlobalCacheVariableResult> {
    return pulumi.output(args).apply((a: any) => getEventOrchestrationGlobalCacheVariable(a, opts))
}

/**
 * A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableOutputArgs {
    /**
     * ID of the Global Event Orchestration to which this Cache Variable belongs.
     */
    eventOrchestration: pulumi.Input<string>;
    /**
     * ID of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the Cache Variable associated with the Global Event Orchestration. Specify either `id` or `name`. If both are specified `id` takes precedence.
     */
    name?: pulumi.Input<string>;
}
