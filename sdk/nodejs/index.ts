// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddonArgs, AddonState } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { AutomationActionsActionArgs, AutomationActionsActionState } from "./automationActionsAction";
export type AutomationActionsAction = import("./automationActionsAction").AutomationActionsAction;
export const AutomationActionsAction: typeof import("./automationActionsAction").AutomationActionsAction = null as any;
utilities.lazyLoad(exports, ["AutomationActionsAction"], () => require("./automationActionsAction"));

export { AutomationActionsActionServiceAssociationArgs, AutomationActionsActionServiceAssociationState } from "./automationActionsActionServiceAssociation";
export type AutomationActionsActionServiceAssociation = import("./automationActionsActionServiceAssociation").AutomationActionsActionServiceAssociation;
export const AutomationActionsActionServiceAssociation: typeof import("./automationActionsActionServiceAssociation").AutomationActionsActionServiceAssociation = null as any;
utilities.lazyLoad(exports, ["AutomationActionsActionServiceAssociation"], () => require("./automationActionsActionServiceAssociation"));

export { AutomationActionsActionTeamAssociationArgs, AutomationActionsActionTeamAssociationState } from "./automationActionsActionTeamAssociation";
export type AutomationActionsActionTeamAssociation = import("./automationActionsActionTeamAssociation").AutomationActionsActionTeamAssociation;
export const AutomationActionsActionTeamAssociation: typeof import("./automationActionsActionTeamAssociation").AutomationActionsActionTeamAssociation = null as any;
utilities.lazyLoad(exports, ["AutomationActionsActionTeamAssociation"], () => require("./automationActionsActionTeamAssociation"));

export { AutomationActionsRunnerArgs, AutomationActionsRunnerState } from "./automationActionsRunner";
export type AutomationActionsRunner = import("./automationActionsRunner").AutomationActionsRunner;
export const AutomationActionsRunner: typeof import("./automationActionsRunner").AutomationActionsRunner = null as any;
utilities.lazyLoad(exports, ["AutomationActionsRunner"], () => require("./automationActionsRunner"));

export { AutomationActionsRunnerTeamAssociationArgs, AutomationActionsRunnerTeamAssociationState } from "./automationActionsRunnerTeamAssociation";
export type AutomationActionsRunnerTeamAssociation = import("./automationActionsRunnerTeamAssociation").AutomationActionsRunnerTeamAssociation;
export const AutomationActionsRunnerTeamAssociation: typeof import("./automationActionsRunnerTeamAssociation").AutomationActionsRunnerTeamAssociation = null as any;
utilities.lazyLoad(exports, ["AutomationActionsRunnerTeamAssociation"], () => require("./automationActionsRunnerTeamAssociation"));

export { BusinessServiceArgs, BusinessServiceState } from "./businessService";
export type BusinessService = import("./businessService").BusinessService;
export const BusinessService: typeof import("./businessService").BusinessService = null as any;
utilities.lazyLoad(exports, ["BusinessService"], () => require("./businessService"));

export { BusinessServiceSubscriberArgs, BusinessServiceSubscriberState } from "./businessServiceSubscriber";
export type BusinessServiceSubscriber = import("./businessServiceSubscriber").BusinessServiceSubscriber;
export const BusinessServiceSubscriber: typeof import("./businessServiceSubscriber").BusinessServiceSubscriber = null as any;
utilities.lazyLoad(exports, ["BusinessServiceSubscriber"], () => require("./businessServiceSubscriber"));

export { EscalationPolicyArgs, EscalationPolicyState } from "./escalationPolicy";
export type EscalationPolicy = import("./escalationPolicy").EscalationPolicy;
export const EscalationPolicy: typeof import("./escalationPolicy").EscalationPolicy = null as any;
utilities.lazyLoad(exports, ["EscalationPolicy"], () => require("./escalationPolicy"));

export { EventOrchestrationArgs, EventOrchestrationState } from "./eventOrchestration";
export type EventOrchestration = import("./eventOrchestration").EventOrchestration;
export const EventOrchestration: typeof import("./eventOrchestration").EventOrchestration = null as any;
utilities.lazyLoad(exports, ["EventOrchestration"], () => require("./eventOrchestration"));

export { EventOrchestrationRouterArgs, EventOrchestrationRouterState } from "./eventOrchestrationRouter";
export type EventOrchestrationRouter = import("./eventOrchestrationRouter").EventOrchestrationRouter;
export const EventOrchestrationRouter: typeof import("./eventOrchestrationRouter").EventOrchestrationRouter = null as any;
utilities.lazyLoad(exports, ["EventOrchestrationRouter"], () => require("./eventOrchestrationRouter"));

export { EventOrchestrationServiceArgs, EventOrchestrationServiceState } from "./eventOrchestrationService";
export type EventOrchestrationService = import("./eventOrchestrationService").EventOrchestrationService;
export const EventOrchestrationService: typeof import("./eventOrchestrationService").EventOrchestrationService = null as any;
utilities.lazyLoad(exports, ["EventOrchestrationService"], () => require("./eventOrchestrationService"));

export { EventOrchestrationUnroutedArgs, EventOrchestrationUnroutedState } from "./eventOrchestrationUnrouted";
export type EventOrchestrationUnrouted = import("./eventOrchestrationUnrouted").EventOrchestrationUnrouted;
export const EventOrchestrationUnrouted: typeof import("./eventOrchestrationUnrouted").EventOrchestrationUnrouted = null as any;
utilities.lazyLoad(exports, ["EventOrchestrationUnrouted"], () => require("./eventOrchestrationUnrouted"));

export { EventRuleArgs, EventRuleState } from "./eventRule";
export type EventRule = import("./eventRule").EventRule;
export const EventRule: typeof import("./eventRule").EventRule = null as any;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));

export { ExtensionArgs, ExtensionState } from "./extension";
export type Extension = import("./extension").Extension;
export const Extension: typeof import("./extension").Extension = null as any;
utilities.lazyLoad(exports, ["Extension"], () => require("./extension"));

export { ExtensionServiceNowArgs, ExtensionServiceNowState } from "./extensionServiceNow";
export type ExtensionServiceNow = import("./extensionServiceNow").ExtensionServiceNow;
export const ExtensionServiceNow: typeof import("./extensionServiceNow").ExtensionServiceNow = null as any;
utilities.lazyLoad(exports, ["ExtensionServiceNow"], () => require("./extensionServiceNow"));

export { GetAutomationActionsActionArgs, GetAutomationActionsActionResult, GetAutomationActionsActionOutputArgs } from "./getAutomationActionsAction";
export const getAutomationActionsAction: typeof import("./getAutomationActionsAction").getAutomationActionsAction = null as any;
export const getAutomationActionsActionOutput: typeof import("./getAutomationActionsAction").getAutomationActionsActionOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationActionsAction","getAutomationActionsActionOutput"], () => require("./getAutomationActionsAction"));

export { GetAutomationActionsRunnerArgs, GetAutomationActionsRunnerResult, GetAutomationActionsRunnerOutputArgs } from "./getAutomationActionsRunner";
export const getAutomationActionsRunner: typeof import("./getAutomationActionsRunner").getAutomationActionsRunner = null as any;
export const getAutomationActionsRunnerOutput: typeof import("./getAutomationActionsRunner").getAutomationActionsRunnerOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationActionsRunner","getAutomationActionsRunnerOutput"], () => require("./getAutomationActionsRunner"));

export { GetBusinessServiceArgs, GetBusinessServiceResult, GetBusinessServiceOutputArgs } from "./getBusinessService";
export const getBusinessService: typeof import("./getBusinessService").getBusinessService = null as any;
export const getBusinessServiceOutput: typeof import("./getBusinessService").getBusinessServiceOutput = null as any;
utilities.lazyLoad(exports, ["getBusinessService","getBusinessServiceOutput"], () => require("./getBusinessService"));

export { GetEscalationPolicyArgs, GetEscalationPolicyResult, GetEscalationPolicyOutputArgs } from "./getEscalationPolicy";
export const getEscalationPolicy: typeof import("./getEscalationPolicy").getEscalationPolicy = null as any;
export const getEscalationPolicyOutput: typeof import("./getEscalationPolicy").getEscalationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEscalationPolicy","getEscalationPolicyOutput"], () => require("./getEscalationPolicy"));

export { GetEventOrchestrationArgs, GetEventOrchestrationResult, GetEventOrchestrationOutputArgs } from "./getEventOrchestration";
export const getEventOrchestration: typeof import("./getEventOrchestration").getEventOrchestration = null as any;
export const getEventOrchestrationOutput: typeof import("./getEventOrchestration").getEventOrchestrationOutput = null as any;
utilities.lazyLoad(exports, ["getEventOrchestration","getEventOrchestrationOutput"], () => require("./getEventOrchestration"));

export { GetExtensionSchemaArgs, GetExtensionSchemaResult, GetExtensionSchemaOutputArgs } from "./getExtensionSchema";
export const getExtensionSchema: typeof import("./getExtensionSchema").getExtensionSchema = null as any;
export const getExtensionSchemaOutput: typeof import("./getExtensionSchema").getExtensionSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getExtensionSchema","getExtensionSchemaOutput"], () => require("./getExtensionSchema"));

export { GetIncidentWorkflowArgs, GetIncidentWorkflowResult, GetIncidentWorkflowOutputArgs } from "./getIncidentWorkflow";
export const getIncidentWorkflow: typeof import("./getIncidentWorkflow").getIncidentWorkflow = null as any;
export const getIncidentWorkflowOutput: typeof import("./getIncidentWorkflow").getIncidentWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentWorkflow","getIncidentWorkflowOutput"], () => require("./getIncidentWorkflow"));

export { GetPriorityArgs, GetPriorityResult, GetPriorityOutputArgs } from "./getPriority";
export const getPriority: typeof import("./getPriority").getPriority = null as any;
export const getPriorityOutput: typeof import("./getPriority").getPriorityOutput = null as any;
utilities.lazyLoad(exports, ["getPriority","getPriorityOutput"], () => require("./getPriority"));

export { GetRulesetArgs, GetRulesetResult, GetRulesetOutputArgs } from "./getRuleset";
export const getRuleset: typeof import("./getRuleset").getRuleset = null as any;
export const getRulesetOutput: typeof import("./getRuleset").getRulesetOutput = null as any;
utilities.lazyLoad(exports, ["getRuleset","getRulesetOutput"], () => require("./getRuleset"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceIntegrationArgs, GetServiceIntegrationResult, GetServiceIntegrationOutputArgs } from "./getServiceIntegration";
export const getServiceIntegration: typeof import("./getServiceIntegration").getServiceIntegration = null as any;
export const getServiceIntegrationOutput: typeof import("./getServiceIntegration").getServiceIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getServiceIntegration","getServiceIntegrationOutput"], () => require("./getServiceIntegration"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserContactMethodArgs, GetUserContactMethodResult, GetUserContactMethodOutputArgs } from "./getUserContactMethod";
export const getUserContactMethod: typeof import("./getUserContactMethod").getUserContactMethod = null as any;
export const getUserContactMethodOutput: typeof import("./getUserContactMethod").getUserContactMethodOutput = null as any;
utilities.lazyLoad(exports, ["getUserContactMethod","getUserContactMethodOutput"], () => require("./getUserContactMethod"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVendorArgs, GetVendorResult, GetVendorOutputArgs } from "./getVendor";
export const getVendor: typeof import("./getVendor").getVendor = null as any;
export const getVendorOutput: typeof import("./getVendor").getVendorOutput = null as any;
utilities.lazyLoad(exports, ["getVendor","getVendorOutput"], () => require("./getVendor"));

export { IncidentWorkflowArgs, IncidentWorkflowState } from "./incidentWorkflow";
export type IncidentWorkflow = import("./incidentWorkflow").IncidentWorkflow;
export const IncidentWorkflow: typeof import("./incidentWorkflow").IncidentWorkflow = null as any;
utilities.lazyLoad(exports, ["IncidentWorkflow"], () => require("./incidentWorkflow"));

export { IncidentWorkflowTriggerArgs, IncidentWorkflowTriggerState } from "./incidentWorkflowTrigger";
export type IncidentWorkflowTrigger = import("./incidentWorkflowTrigger").IncidentWorkflowTrigger;
export const IncidentWorkflowTrigger: typeof import("./incidentWorkflowTrigger").IncidentWorkflowTrigger = null as any;
utilities.lazyLoad(exports, ["IncidentWorkflowTrigger"], () => require("./incidentWorkflowTrigger"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResponsePlayArgs, ResponsePlayState } from "./responsePlay";
export type ResponsePlay = import("./responsePlay").ResponsePlay;
export const ResponsePlay: typeof import("./responsePlay").ResponsePlay = null as any;
utilities.lazyLoad(exports, ["ResponsePlay"], () => require("./responsePlay"));

export { RulesetArgs, RulesetState } from "./ruleset";
export type Ruleset = import("./ruleset").Ruleset;
export const Ruleset: typeof import("./ruleset").Ruleset = null as any;
utilities.lazyLoad(exports, ["Ruleset"], () => require("./ruleset"));

export { RulesetRuleArgs, RulesetRuleState } from "./rulesetRule";
export type RulesetRule = import("./rulesetRule").RulesetRule;
export const RulesetRule: typeof import("./rulesetRule").RulesetRule = null as any;
utilities.lazyLoad(exports, ["RulesetRule"], () => require("./rulesetRule"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceDependencyArgs, ServiceDependencyState } from "./serviceDependency";
export type ServiceDependency = import("./serviceDependency").ServiceDependency;
export const ServiceDependency: typeof import("./serviceDependency").ServiceDependency = null as any;
utilities.lazyLoad(exports, ["ServiceDependency"], () => require("./serviceDependency"));

export { ServiceEventRuleArgs, ServiceEventRuleState } from "./serviceEventRule";
export type ServiceEventRule = import("./serviceEventRule").ServiceEventRule;
export const ServiceEventRule: typeof import("./serviceEventRule").ServiceEventRule = null as any;
utilities.lazyLoad(exports, ["ServiceEventRule"], () => require("./serviceEventRule"));

export { ServiceIntegrationArgs, ServiceIntegrationState } from "./serviceIntegration";
export type ServiceIntegration = import("./serviceIntegration").ServiceIntegration;
export const ServiceIntegration: typeof import("./serviceIntegration").ServiceIntegration = null as any;
utilities.lazyLoad(exports, ["ServiceIntegration"], () => require("./serviceIntegration"));

export { SlackConnectionArgs, SlackConnectionState } from "./slackConnection";
export type SlackConnection = import("./slackConnection").SlackConnection;
export const SlackConnection: typeof import("./slackConnection").SlackConnection = null as any;
utilities.lazyLoad(exports, ["SlackConnection"], () => require("./slackConnection"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagAssignmentArgs, TagAssignmentState } from "./tagAssignment";
export type TagAssignment = import("./tagAssignment").TagAssignment;
export const TagAssignment: typeof import("./tagAssignment").TagAssignment = null as any;
utilities.lazyLoad(exports, ["TagAssignment"], () => require("./tagAssignment"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserContactMethodArgs, UserContactMethodState } from "./userContactMethod";
export type UserContactMethod = import("./userContactMethod").UserContactMethod;
export const UserContactMethod: typeof import("./userContactMethod").UserContactMethod = null as any;
utilities.lazyLoad(exports, ["UserContactMethod"], () => require("./userContactMethod"));

export { UserNotificationRuleArgs, UserNotificationRuleState } from "./userNotificationRule";
export type UserNotificationRule = import("./userNotificationRule").UserNotificationRule;
export const UserNotificationRule: typeof import("./userNotificationRule").UserNotificationRule = null as any;
utilities.lazyLoad(exports, ["UserNotificationRule"], () => require("./userNotificationRule"));

export { WebhookSubscriptionArgs, WebhookSubscriptionState } from "./webhookSubscription";
export type WebhookSubscription = import("./webhookSubscription").WebhookSubscription;
export const WebhookSubscription: typeof import("./webhookSubscription").WebhookSubscription = null as any;
utilities.lazyLoad(exports, ["WebhookSubscription"], () => require("./webhookSubscription"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pagerduty:index/addon:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "pagerduty:index/automationActionsAction:AutomationActionsAction":
                return new AutomationActionsAction(name, <any>undefined, { urn })
            case "pagerduty:index/automationActionsActionServiceAssociation:AutomationActionsActionServiceAssociation":
                return new AutomationActionsActionServiceAssociation(name, <any>undefined, { urn })
            case "pagerduty:index/automationActionsActionTeamAssociation:AutomationActionsActionTeamAssociation":
                return new AutomationActionsActionTeamAssociation(name, <any>undefined, { urn })
            case "pagerduty:index/automationActionsRunner:AutomationActionsRunner":
                return new AutomationActionsRunner(name, <any>undefined, { urn })
            case "pagerduty:index/automationActionsRunnerTeamAssociation:AutomationActionsRunnerTeamAssociation":
                return new AutomationActionsRunnerTeamAssociation(name, <any>undefined, { urn })
            case "pagerduty:index/businessService:BusinessService":
                return new BusinessService(name, <any>undefined, { urn })
            case "pagerduty:index/businessServiceSubscriber:BusinessServiceSubscriber":
                return new BusinessServiceSubscriber(name, <any>undefined, { urn })
            case "pagerduty:index/escalationPolicy:EscalationPolicy":
                return new EscalationPolicy(name, <any>undefined, { urn })
            case "pagerduty:index/eventOrchestration:EventOrchestration":
                return new EventOrchestration(name, <any>undefined, { urn })
            case "pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter":
                return new EventOrchestrationRouter(name, <any>undefined, { urn })
            case "pagerduty:index/eventOrchestrationService:EventOrchestrationService":
                return new EventOrchestrationService(name, <any>undefined, { urn })
            case "pagerduty:index/eventOrchestrationUnrouted:EventOrchestrationUnrouted":
                return new EventOrchestrationUnrouted(name, <any>undefined, { urn })
            case "pagerduty:index/eventRule:EventRule":
                return new EventRule(name, <any>undefined, { urn })
            case "pagerduty:index/extension:Extension":
                return new Extension(name, <any>undefined, { urn })
            case "pagerduty:index/extensionServiceNow:ExtensionServiceNow":
                return new ExtensionServiceNow(name, <any>undefined, { urn })
            case "pagerduty:index/incidentWorkflow:IncidentWorkflow":
                return new IncidentWorkflow(name, <any>undefined, { urn })
            case "pagerduty:index/incidentWorkflowTrigger:IncidentWorkflowTrigger":
                return new IncidentWorkflowTrigger(name, <any>undefined, { urn })
            case "pagerduty:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "pagerduty:index/responsePlay:ResponsePlay":
                return new ResponsePlay(name, <any>undefined, { urn })
            case "pagerduty:index/ruleset:Ruleset":
                return new Ruleset(name, <any>undefined, { urn })
            case "pagerduty:index/rulesetRule:RulesetRule":
                return new RulesetRule(name, <any>undefined, { urn })
            case "pagerduty:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "pagerduty:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "pagerduty:index/serviceDependency:ServiceDependency":
                return new ServiceDependency(name, <any>undefined, { urn })
            case "pagerduty:index/serviceEventRule:ServiceEventRule":
                return new ServiceEventRule(name, <any>undefined, { urn })
            case "pagerduty:index/serviceIntegration:ServiceIntegration":
                return new ServiceIntegration(name, <any>undefined, { urn })
            case "pagerduty:index/slackConnection:SlackConnection":
                return new SlackConnection(name, <any>undefined, { urn })
            case "pagerduty:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "pagerduty:index/tagAssignment:TagAssignment":
                return new TagAssignment(name, <any>undefined, { urn })
            case "pagerduty:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "pagerduty:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            case "pagerduty:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "pagerduty:index/userContactMethod:UserContactMethod":
                return new UserContactMethod(name, <any>undefined, { urn })
            case "pagerduty:index/userNotificationRule:UserNotificationRule":
                return new UserNotificationRule(name, <any>undefined, { urn })
            case "pagerduty:index/webhookSubscription:WebhookSubscription":
                return new WebhookSubscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pagerduty", "index/addon", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/automationActionsAction", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/automationActionsActionServiceAssociation", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/automationActionsActionTeamAssociation", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/automationActionsRunner", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/automationActionsRunnerTeamAssociation", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/businessService", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/businessServiceSubscriber", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/escalationPolicy", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/eventOrchestration", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/eventOrchestrationRouter", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/eventOrchestrationService", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/eventOrchestrationUnrouted", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/eventRule", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/extension", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/extensionServiceNow", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/incidentWorkflow", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/incidentWorkflowTrigger", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/responsePlay", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/ruleset", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/rulesetRule", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/schedule", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/service", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/serviceDependency", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/serviceEventRule", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/serviceIntegration", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/slackConnection", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/tag", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/tagAssignment", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/team", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/teamMembership", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/user", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/userContactMethod", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/userNotificationRule", _module)
pulumi.runtime.registerResourceModule("pagerduty", "index/webhookSubscription", _module)
pulumi.runtime.registerResourcePackage("pagerduty", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pagerduty") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
