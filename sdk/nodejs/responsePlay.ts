// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A [response play](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1response_plays/get) allows you to create packages of Incident Actions that can be applied during an Incident's life cycle.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const exampleUser = new pagerduty.User("exampleUser", {
 *     email: "125.greenholt.earline@graham.name",
 *     teams: [pagerduty_team.example.id],
 * });
 * const exampleEscalationPolicy = new pagerduty.EscalationPolicy("exampleEscalationPolicy", {
 *     numLoops: 2,
 *     rules: [{
 *         escalationDelayInMinutes: 10,
 *         targets: [{
 *             type: "user",
 *             id: exampleUser.id,
 *         }],
 *     }],
 * });
 * const exampleResponsePlay = new pagerduty.ResponsePlay("exampleResponsePlay", {
 *     from: exampleUser.email,
 *     responders: [{
 *         type: "escalation_policy_reference",
 *         id: exampleEscalationPolicy.id,
 *     }],
 *     subscribers: [{
 *         type: "user_reference",
 *         id: exampleUser.id,
 *     }],
 *     runnability: "services",
 * });
 * ```
 *
 * ## Import
 *
 * Response Plays can be imported using the `id.from(email)`, e.g.
 *
 * ```sh
 *  $ pulumi import pagerduty:index/responsePlay:ResponsePlay main 16208303-022b-f745-f2f5-560e537a2a74.user@email.com
 * ```
 */
export class ResponsePlay extends pulumi.CustomResource {
    /**
     * Get an existing ResponsePlay resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResponsePlayState, opts?: pulumi.CustomResourceOptions): ResponsePlay {
        return new ResponsePlay(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/responsePlay:ResponsePlay';

    /**
     * Returns true if the given object is an instance of ResponsePlay.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResponsePlay {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResponsePlay.__pulumiType;
    }

    /**
     * The telephone number that will be set as the conference number for any incident on which this response play is run.
     */
    public readonly conferenceNumber!: pulumi.Output<string | undefined>;
    /**
     * The URL that will be set as the conference URL for any incident on which this response play is run.
     */
    public readonly conferenceUrl!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    /**
     * The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.
     */
    public readonly from!: pulumi.Output<string>;
    /**
     * The name of the response play.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.
     */
    public readonly responders!: pulumi.Output<outputs.ResponsePlayResponder[] | undefined>;
    /**
     * The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.
     */
    public readonly respondersMessage!: pulumi.Output<string | undefined>;
    /**
     * String representing how this response play is allowed to be run. Valid options are:
     */
    public readonly runnability!: pulumi.Output<string | undefined>;
    /**
     * A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.
     */
    public readonly subscribers!: pulumi.Output<outputs.ResponsePlaySubscriber[] | undefined>;
    /**
     * The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.
     */
    public readonly subscribersMessage!: pulumi.Output<string | undefined>;
    /**
     * The ID of the team associated with the response play.
     */
    public readonly team!: pulumi.Output<string | undefined>;
    /**
     * A string that determines the schema of the object. If not set, the default value is "responsePlay".
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a ResponsePlay resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResponsePlayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResponsePlayArgs | ResponsePlayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResponsePlayState | undefined;
            inputs["conferenceNumber"] = state ? state.conferenceNumber : undefined;
            inputs["conferenceUrl"] = state ? state.conferenceUrl : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["from"] = state ? state.from : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["responders"] = state ? state.responders : undefined;
            inputs["respondersMessage"] = state ? state.respondersMessage : undefined;
            inputs["runnability"] = state ? state.runnability : undefined;
            inputs["subscribers"] = state ? state.subscribers : undefined;
            inputs["subscribersMessage"] = state ? state.subscribersMessage : undefined;
            inputs["team"] = state ? state.team : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ResponsePlayArgs | undefined;
            if ((!args || args.from === undefined) && !opts.urn) {
                throw new Error("Missing required property 'from'");
            }
            inputs["conferenceNumber"] = args ? args.conferenceNumber : undefined;
            inputs["conferenceUrl"] = args ? args.conferenceUrl : undefined;
            inputs["description"] = (args ? args.description : undefined) ?? "Managed by Pulumi";
            inputs["from"] = args ? args.from : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["responders"] = args ? args.responders : undefined;
            inputs["respondersMessage"] = args ? args.respondersMessage : undefined;
            inputs["runnability"] = args ? args.runnability : undefined;
            inputs["subscribers"] = args ? args.subscribers : undefined;
            inputs["subscribersMessage"] = args ? args.subscribersMessage : undefined;
            inputs["team"] = args ? args.team : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ResponsePlay.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResponsePlay resources.
 */
export interface ResponsePlayState {
    /**
     * The telephone number that will be set as the conference number for any incident on which this response play is run.
     */
    readonly conferenceNumber?: pulumi.Input<string>;
    /**
     * The URL that will be set as the conference URL for any incident on which this response play is run.
     */
    readonly conferenceUrl?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    /**
     * The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.
     */
    readonly from?: pulumi.Input<string>;
    /**
     * The name of the response play.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.
     */
    readonly responders?: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponder>[]>;
    /**
     * The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.
     */
    readonly respondersMessage?: pulumi.Input<string>;
    /**
     * String representing how this response play is allowed to be run. Valid options are:
     */
    readonly runnability?: pulumi.Input<string>;
    /**
     * A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.
     */
    readonly subscribers?: pulumi.Input<pulumi.Input<inputs.ResponsePlaySubscriber>[]>;
    /**
     * The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.
     */
    readonly subscribersMessage?: pulumi.Input<string>;
    /**
     * The ID of the team associated with the response play.
     */
    readonly team?: pulumi.Input<string>;
    /**
     * A string that determines the schema of the object. If not set, the default value is "responsePlay".
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResponsePlay resource.
 */
export interface ResponsePlayArgs {
    /**
     * The telephone number that will be set as the conference number for any incident on which this response play is run.
     */
    readonly conferenceNumber?: pulumi.Input<string>;
    /**
     * The URL that will be set as the conference URL for any incident on which this response play is run.
     */
    readonly conferenceUrl?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    /**
     * The email of the user attributed to the request. Needs to be a valid email address of a user in the PagerDuty account.
     */
    readonly from: pulumi.Input<string>;
    /**
     * The name of the response play.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A user and/or escalation policy to be requested as a responder to any incident on which this response play is run. There can be multiple responders defined on a single response play.
     */
    readonly responders?: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponder>[]>;
    /**
     * The message body of the notification that will be sent to this response play's set of responders. If empty, a default response request notification will be sent.
     */
    readonly respondersMessage?: pulumi.Input<string>;
    /**
     * String representing how this response play is allowed to be run. Valid options are:
     */
    readonly runnability?: pulumi.Input<string>;
    /**
     * A user and/or team to be added as a subscriber to any incident on which this response play is run. There can be multiple subscribers defined on a single response play.
     */
    readonly subscribers?: pulumi.Input<pulumi.Input<inputs.ResponsePlaySubscriber>[]>;
    /**
     * The content of the notification that will be sent to all incident subscribers upon the running of this response play. Note that this includes any users who may have already been subscribed to the incident prior to the running of this response play. If empty, no notifications will be sent.
     */
    readonly subscribersMessage?: pulumi.Input<string>;
    /**
     * The ID of the team associated with the response play.
     */
    readonly team?: pulumi.Input<string>;
    /**
     * A string that determines the schema of the object. If not set, the default value is "responsePlay".
     */
    readonly type?: pulumi.Input<string>;
}
