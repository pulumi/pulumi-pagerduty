// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A [service dependency](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1service_dependencies~1associate/post) is a relationship between a business service and technical and business services that this service uses, or that are used by this service, and are critical for successful operation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const foo = new pagerduty.ServiceDependency("foo", {dependencies: [{
 *     dependentServices: [{
 *         id: pagerduty_business_service.foo.id,
 *         type: "business_service",
 *     }],
 *     supportingServices: [{
 *         id: pagerduty_service.foo.id,
 *         type: "service",
 *     }],
 * }]});
 * const bar = new pagerduty.ServiceDependency("bar", {dependencies: [{
 *     dependentServices: [{
 *         id: pagerduty_business_service.foo.id,
 *         type: "business_service",
 *     }],
 *     supportingServices: [{
 *         id: pagerduty_service.two.id,
 *         type: "service",
 *     }],
 * }]});
 * ```
 *
 * ## Import
 *
 * Service dependencies can be imported using the related business service id and the dependency id separated by a dot, e.g.
 *
 * ```sh
 *  $ pulumi import pagerduty:index/serviceDependency:ServiceDependency main P4B2Z7G.D5RTHKRNGU4PYE90PJ
 * ```
 */
export class ServiceDependency extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDependency resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDependencyState, opts?: pulumi.CustomResourceOptions): ServiceDependency {
        return new ServiceDependency(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/serviceDependency:ServiceDependency';

    /**
     * Returns true if the given object is an instance of ServiceDependency.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDependency {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDependency.__pulumiType;
    }

    /**
     * The relationship between the `supportingService` and `dependentService`.
     */
    public readonly dependencies!: pulumi.Output<outputs.ServiceDependencyDependency[]>;

    /**
     * Create a ServiceDependency resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDependencyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDependencyArgs | ServiceDependencyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDependencyState | undefined;
            inputs["dependencies"] = state ? state.dependencies : undefined;
        } else {
            const args = argsOrState as ServiceDependencyArgs | undefined;
            if ((!args || args.dependencies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dependencies'");
            }
            inputs["dependencies"] = args ? args.dependencies : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceDependency.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDependency resources.
 */
export interface ServiceDependencyState {
    /**
     * The relationship between the `supportingService` and `dependentService`.
     */
    readonly dependencies?: pulumi.Input<pulumi.Input<inputs.ServiceDependencyDependency>[]>;
}

/**
 * The set of arguments for constructing a ServiceDependency resource.
 */
export interface ServiceDependencyArgs {
    /**
     * The relationship between the `supportingService` and `dependentService`.
     */
    readonly dependencies: pulumi.Input<pulumi.Input<inputs.ServiceDependencyDependency>[]>;
}
