// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A [service dependency](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODE5Mg-associate-service-dependencies) is a relationship between two services that this service uses, or that are used by this service, and are critical for successful operation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const foo = new pagerduty.ServiceDependency("foo", {dependency: {
 *     dependentServices: [{
 *         id: fooPagerdutyBusinessService.id,
 *         type: fooPagerdutyBusinessService.type,
 *     }],
 *     supportingServices: [{
 *         id: fooPagerdutyService.id,
 *         type: fooPagerdutyService.type,
 *     }],
 * }});
 * const bar = new pagerduty.ServiceDependency("bar", {dependency: {
 *     dependentServices: [{
 *         id: fooPagerdutyBusinessService.id,
 *         type: fooPagerdutyBusinessService.type,
 *     }],
 *     supportingServices: [{
 *         id: two.id,
 *         type: two.type,
 *     }],
 * }});
 * ```
 *
 * ## Import
 *
 * Service dependencies can be imported using the related supporting service id, supporting service type (`business_service` or `service`) and the dependency id separated by a dot, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/serviceDependency:ServiceDependency main P4B2Z7G.business_service.D5RTHKRNGU4PYE90PJ
 * ```
 */
export class ServiceDependency extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDependency resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDependencyState, opts?: pulumi.CustomResourceOptions): ServiceDependency {
        return new ServiceDependency(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/serviceDependency:ServiceDependency';

    /**
     * Returns true if the given object is an instance of ServiceDependency.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDependency {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDependency.__pulumiType;
    }

    /**
     * The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
     */
    public readonly dependency!: pulumi.Output<outputs.ServiceDependencyDependency>;

    /**
     * Create a ServiceDependency resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDependencyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDependencyArgs | ServiceDependencyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDependencyState | undefined;
            resourceInputs["dependency"] = state ? state.dependency : undefined;
        } else {
            const args = argsOrState as ServiceDependencyArgs | undefined;
            if ((!args || args.dependency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dependency'");
            }
            resourceInputs["dependency"] = args ? args.dependency : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDependency.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDependency resources.
 */
export interface ServiceDependencyState {
    /**
     * The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
     */
    dependency?: pulumi.Input<inputs.ServiceDependencyDependency>;
}

/**
 * The set of arguments for constructing a ServiceDependency resource.
 */
export interface ServiceDependencyArgs {
    /**
     * The relationship between the `supportingService` and `dependentService`. One and only one dependency block must be defined.
     */
    dependency: pulumi.Input<inputs.ServiceDependencyDependency>;
}
