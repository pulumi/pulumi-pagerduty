// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * An [user handoff notification rule](https://developer.pagerduty.com/api-reference/f2ab7a3c1418a-create-a-user-handoff-notification-rule) is a rule that specifies how a user should be notified when they are handed off an incident.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const example = new pagerduty.User("example", {
 *     name: "Earline Greenholt",
 *     email: "125.greenholt.earline@foo.test",
 * });
 * const phone = new pagerduty.UserContactMethod("phone", {
 *     userId: example.id,
 *     type: "phone_contact_method",
 *     countryCode: 1,
 *     address: "2025550199",
 *     label: "Work",
 * });
 * const example_oncall_offcall = new pagerduty.UserHandoffNotificationRule("example-oncall-offcall", {
 *     userId: example.id,
 *     handoffType: "both",
 *     notifyAdvanceInMinutes: 180,
 *     contactMethod: {
 *         id: phone.id,
 *         type: phone.type,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * User handoff notification rules can be imported using the `user_id` and `id` separated by a dot, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule main PX4IAP4.PULREBP
 * ```
 */
export class UserHandoffNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing UserHandoffNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserHandoffNotificationRuleState, opts?: pulumi.CustomResourceOptions): UserHandoffNotificationRule {
        return new UserHandoffNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/userHandoffNotificationRule:UserHandoffNotificationRule';

    /**
     * Returns true if the given object is an instance of UserHandoffNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserHandoffNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserHandoffNotificationRule.__pulumiType;
    }

    /**
     * The contact method to notify the user. Contact method documented below.
     */
    declare public readonly contactMethod: pulumi.Output<outputs.UserHandoffNotificationRuleContactMethod>;
    /**
     * The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     */
    declare public readonly handoffType: pulumi.Output<string>;
    /**
     * The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     */
    declare public readonly notifyAdvanceInMinutes: pulumi.Output<number>;
    /**
     * The ID of the user.
     */
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a UserHandoffNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserHandoffNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserHandoffNotificationRuleArgs | UserHandoffNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserHandoffNotificationRuleState | undefined;
            resourceInputs["contactMethod"] = state?.contactMethod;
            resourceInputs["handoffType"] = state?.handoffType;
            resourceInputs["notifyAdvanceInMinutes"] = state?.notifyAdvanceInMinutes;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserHandoffNotificationRuleArgs | undefined;
            if (args?.contactMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'contactMethod'");
            }
            if (args?.notifyAdvanceInMinutes === undefined && !opts.urn) {
                throw new Error("Missing required property 'notifyAdvanceInMinutes'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["contactMethod"] = args?.contactMethod;
            resourceInputs["handoffType"] = args?.handoffType;
            resourceInputs["notifyAdvanceInMinutes"] = args?.notifyAdvanceInMinutes;
            resourceInputs["userId"] = args?.userId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserHandoffNotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserHandoffNotificationRule resources.
 */
export interface UserHandoffNotificationRuleState {
    /**
     * The contact method to notify the user. Contact method documented below.
     */
    contactMethod?: pulumi.Input<inputs.UserHandoffNotificationRuleContactMethod>;
    /**
     * The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     */
    handoffType?: pulumi.Input<string>;
    /**
     * The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     */
    notifyAdvanceInMinutes?: pulumi.Input<number>;
    /**
     * The ID of the user.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserHandoffNotificationRule resource.
 */
export interface UserHandoffNotificationRuleArgs {
    /**
     * The contact method to notify the user. Contact method documented below.
     */
    contactMethod: pulumi.Input<inputs.UserHandoffNotificationRuleContactMethod>;
    /**
     * The type of handoff to notify the user about. Possible values are `oncall`, `offcall`, `both`.
     */
    handoffType?: pulumi.Input<string>;
    /**
     * The number of minutes before the handoff that the user should be notified. Must be a positive integer greater than or equal to 0.
     */
    notifyAdvanceInMinutes: pulumi.Input<number>;
    /**
     * The ID of the user.
     */
    userId: pulumi.Input<string>;
}
