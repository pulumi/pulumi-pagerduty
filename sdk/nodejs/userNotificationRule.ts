// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A [notification rule](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users_id_notification_rules_notification_rule_id) configures where and when a PagerDuty user is notified when a triggered incident is assigned to him. Unique notification rules can be created for both high and low-urgency incidents.
 * 
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-pagerduty/blob/master/website/docs/r/user_notification_rule.html.markdown.
 */
export class UserNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing UserNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserNotificationRuleState, opts?: pulumi.CustomResourceOptions): UserNotificationRule {
        return new UserNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/userNotificationRule:UserNotificationRule';

    /**
     * Returns true if the given object is an instance of UserNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserNotificationRule.__pulumiType;
    }

    /**
     * A contact method block, configured as a block described below.
     */
    public readonly contactMethod!: pulumi.Output<outputs.UserNotificationRuleContactMethod>;
    /**
     * The delay before firing the rule, in minutes.
     */
    public readonly startDelayInMinutes!: pulumi.Output<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    public readonly urgency!: pulumi.Output<string>;
    /**
     * The ID of the user.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserNotificationRuleArgs | UserNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as UserNotificationRuleState | undefined;
            inputs["contactMethod"] = state ? state.contactMethod : undefined;
            inputs["startDelayInMinutes"] = state ? state.startDelayInMinutes : undefined;
            inputs["urgency"] = state ? state.urgency : undefined;
            inputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserNotificationRuleArgs | undefined;
            if (!args || args.contactMethod === undefined) {
                throw new Error("Missing required property 'contactMethod'");
            }
            if (!args || args.startDelayInMinutes === undefined) {
                throw new Error("Missing required property 'startDelayInMinutes'");
            }
            if (!args || args.urgency === undefined) {
                throw new Error("Missing required property 'urgency'");
            }
            if (!args || args.userId === undefined) {
                throw new Error("Missing required property 'userId'");
            }
            inputs["contactMethod"] = args ? args.contactMethod : undefined;
            inputs["startDelayInMinutes"] = args ? args.startDelayInMinutes : undefined;
            inputs["urgency"] = args ? args.urgency : undefined;
            inputs["userId"] = args ? args.userId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserNotificationRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserNotificationRule resources.
 */
export interface UserNotificationRuleState {
    /**
     * A contact method block, configured as a block described below.
     */
    readonly contactMethod?: pulumi.Input<inputs.UserNotificationRuleContactMethod>;
    /**
     * The delay before firing the rule, in minutes.
     */
    readonly startDelayInMinutes?: pulumi.Input<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    readonly urgency?: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    readonly userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserNotificationRule resource.
 */
export interface UserNotificationRuleArgs {
    /**
     * A contact method block, configured as a block described below.
     */
    readonly contactMethod: pulumi.Input<inputs.UserNotificationRuleContactMethod>;
    /**
     * The delay before firing the rule, in minutes.
     */
    readonly startDelayInMinutes: pulumi.Input<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    readonly urgency: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    readonly userId: pulumi.Input<string>;
}
