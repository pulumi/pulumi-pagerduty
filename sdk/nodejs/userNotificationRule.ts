// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A [notification rule](https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI0NQ-create-a-user-notification-rule) configures where and when a PagerDuty user is notified when a triggered incident is assigned to them. Unique notification rules can be created for both high and low-urgency incidents.
 *
 * ## Import
 *
 * User notification rules can be imported using the `user_id` and the `id`, e.g.
 *
 * ```sh
 * $ pulumi import pagerduty:index/userNotificationRule:UserNotificationRule main PXPGF42:PPSCXAN
 * ```
 */
export class UserNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing UserNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserNotificationRuleState, opts?: pulumi.CustomResourceOptions): UserNotificationRule {
        return new UserNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/userNotificationRule:UserNotificationRule';

    /**
     * Returns true if the given object is an instance of UserNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserNotificationRule.__pulumiType;
    }

    /**
     * A contact method block, configured as a block described below.
     */
    declare public readonly contactMethod: pulumi.Output<outputs.UserNotificationRuleContactMethod | undefined>;
    /**
     * The delay before firing the rule, in minutes.
     */
    declare public readonly startDelayInMinutes: pulumi.Output<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    declare public readonly urgency: pulumi.Output<string>;
    /**
     * The ID of the user.
     */
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a UserNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserNotificationRuleArgs | UserNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserNotificationRuleState | undefined;
            resourceInputs["contactMethod"] = state?.contactMethod;
            resourceInputs["startDelayInMinutes"] = state?.startDelayInMinutes;
            resourceInputs["urgency"] = state?.urgency;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserNotificationRuleArgs | undefined;
            if (args?.startDelayInMinutes === undefined && !opts.urn) {
                throw new Error("Missing required property 'startDelayInMinutes'");
            }
            if (args?.urgency === undefined && !opts.urn) {
                throw new Error("Missing required property 'urgency'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["contactMethod"] = args?.contactMethod;
            resourceInputs["startDelayInMinutes"] = args?.startDelayInMinutes;
            resourceInputs["urgency"] = args?.urgency;
            resourceInputs["userId"] = args?.userId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserNotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserNotificationRule resources.
 */
export interface UserNotificationRuleState {
    /**
     * A contact method block, configured as a block described below.
     */
    contactMethod?: pulumi.Input<inputs.UserNotificationRuleContactMethod>;
    /**
     * The delay before firing the rule, in minutes.
     */
    startDelayInMinutes?: pulumi.Input<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    urgency?: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserNotificationRule resource.
 */
export interface UserNotificationRuleArgs {
    /**
     * A contact method block, configured as a block described below.
     */
    contactMethod?: pulumi.Input<inputs.UserNotificationRuleContactMethod>;
    /**
     * The delay before firing the rule, in minutes.
     */
    startDelayInMinutes: pulumi.Input<number>;
    /**
     * Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
     */
    urgency: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    userId: pulumi.Input<string>;
}
