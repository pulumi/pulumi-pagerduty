// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A [webhook subscription](https://developer.pagerduty.com/docs/ZG9jOjExMDI5NTkw-v3-overview) allow you to receive HTTP callbacks when incidents are created, updated and deleted. These are also known as V3 Webhooks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pagerduty from "@pulumi/pagerduty";
 *
 * const example = pagerduty.getService({
 *     name: "My Service",
 * });
 * const foo = new pagerduty.WebhookSubscription("foo", {
 *     deliveryMethods: [{
 *         type: "http_delivery_method",
 *         url: "https://example.com/receive_a_pagerduty_webhook",
 *     }],
 *     description: `%s`,
 *     events: [
 *         "incident.acknowledged",
 *         "incident.annotated",
 *         "incident.delegated",
 *         "incident.escalated",
 *         "incident.priority_updated",
 *         "incident.reassigned",
 *         "incident.reopened",
 *         "incident.resolved",
 *         "incident.responder.added",
 *         "incident.responder.replied",
 *         "incident.status_update_published",
 *         "incident.triggered",
 *         "incident.unacknowledged",
 *     ],
 *     active: true,
 *     filters: [{
 *         id: example.then(example => example.id),
 *         type: "service_reference",
 *     }],
 *     type: "webhook_subscription",
 * });
 * ```
 *
 * ## Import
 *
 * Webhook Subscriptions can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import pagerduty:index/webhookSubscription:WebhookSubscription main PUABCDL
 * ```
 */
export class WebhookSubscription extends pulumi.CustomResource {
    /**
     * Get an existing WebhookSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookSubscriptionState, opts?: pulumi.CustomResourceOptions): WebhookSubscription {
        return new WebhookSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/webhookSubscription:WebhookSubscription';

    /**
     * Returns true if the given object is an instance of WebhookSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebhookSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebhookSubscription.__pulumiType;
    }

    /**
     * Determines whether the subscription will produce webhook events.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * The object describing where to send the webhooks.
     */
    public readonly deliveryMethods!: pulumi.Output<outputs.WebhookSubscriptionDeliveryMethod[]>;
    /**
     * A short description of the webhook subscription
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A set of outbound event types the webhook will receive. The follow event types are possible: 
     * * `incident.acknowledged`
     * * `incident.annotated`
     * * `incident.delegated`
     * * `incident.escalated`
     * * `incident.priority_updated`
     * * `incident.reassigned`
     * * `incident.reopened`
     * * `incident.resolved`
     * * `incident.responder.added`
     * * `incident.responder.replied`
     * * `incident.status_update_published`
     * * `incident.triggered`
     * * `incident.unacknowledged`
     */
    public readonly events!: pulumi.Output<string[]>;
    /**
     * determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `serviceReference`, `teamReference` and `accountReference`.
     */
    public readonly filters!: pulumi.Output<outputs.WebhookSubscriptionFilter[]>;
    /**
     * The type indicating the schema of the object. The provider sets this as `webhookSubscription`, which is currently the only acceptable value.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a WebhookSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookSubscriptionArgs | WebhookSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookSubscriptionState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["deliveryMethods"] = state ? state.deliveryMethods : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["events"] = state ? state.events : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as WebhookSubscriptionArgs | undefined;
            if ((!args || args.deliveryMethods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryMethods'");
            }
            if ((!args || args.events === undefined) && !opts.urn) {
                throw new Error("Missing required property 'events'");
            }
            if ((!args || args.filters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            inputs["active"] = args ? args.active : undefined;
            inputs["deliveryMethods"] = args ? args.deliveryMethods : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["events"] = args ? args.events : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(WebhookSubscription.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebhookSubscription resources.
 */
export interface WebhookSubscriptionState {
    /**
     * Determines whether the subscription will produce webhook events.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The object describing where to send the webhooks.
     */
    deliveryMethods?: pulumi.Input<pulumi.Input<inputs.WebhookSubscriptionDeliveryMethod>[]>;
    /**
     * A short description of the webhook subscription
     */
    description?: pulumi.Input<string>;
    /**
     * A set of outbound event types the webhook will receive. The follow event types are possible: 
     * * `incident.acknowledged`
     * * `incident.annotated`
     * * `incident.delegated`
     * * `incident.escalated`
     * * `incident.priority_updated`
     * * `incident.reassigned`
     * * `incident.reopened`
     * * `incident.resolved`
     * * `incident.responder.added`
     * * `incident.responder.replied`
     * * `incident.status_update_published`
     * * `incident.triggered`
     * * `incident.unacknowledged`
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `serviceReference`, `teamReference` and `accountReference`.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.WebhookSubscriptionFilter>[]>;
    /**
     * The type indicating the schema of the object. The provider sets this as `webhookSubscription`, which is currently the only acceptable value.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebhookSubscription resource.
 */
export interface WebhookSubscriptionArgs {
    /**
     * Determines whether the subscription will produce webhook events.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The object describing where to send the webhooks.
     */
    deliveryMethods: pulumi.Input<pulumi.Input<inputs.WebhookSubscriptionDeliveryMethod>[]>;
    /**
     * A short description of the webhook subscription
     */
    description?: pulumi.Input<string>;
    /**
     * A set of outbound event types the webhook will receive. The follow event types are possible: 
     * * `incident.acknowledged`
     * * `incident.annotated`
     * * `incident.delegated`
     * * `incident.escalated`
     * * `incident.priority_updated`
     * * `incident.reassigned`
     * * `incident.reopened`
     * * `incident.resolved`
     * * `incident.responder.added`
     * * `incident.responder.replied`
     * * `incident.status_update_published`
     * * `incident.triggered`
     * * `incident.unacknowledged`
     */
    events: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * determines which events will match and produce a webhook. There are currently three types of filters that can be applied to webhook subscriptions: `serviceReference`, `teamReference` and `accountReference`.
     */
    filters: pulumi.Input<pulumi.Input<inputs.WebhookSubscriptionFilter>[]>;
    /**
     * The type indicating the schema of the object. The provider sets this as `webhookSubscription`, which is currently the only acceptable value.
     */
    type?: pulumi.Input<string>;
}
