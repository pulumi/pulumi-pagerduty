# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['BusinessService']


class BusinessService(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 point_of_contact: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        A [business service](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Business_Services/get_business_services) allows you to model capabilities that span multiple technical services and that may be owned by several different teams.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        example = pagerduty.BusinessService("example",
            description="A very descriptive description of this business service",
            point_of_contact="PagerDuty Admin")
        ```

        ## Import

        Services can be imported using the `id`, e.g.

        ```sh
         $ pulumi import pagerduty:index/businessService:BusinessService main PLBP09X
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the business service.
        :param pulumi.Input[str] point_of_contact: The owner of the business service.
        :param pulumi.Input[str] type: Default value is `business_service`. Can also be set as `business_service_reference`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['name'] = name
            __props__['point_of_contact'] = point_of_contact
            __props__['type'] = type
            __props__['html_url'] = None
            __props__['self'] = None
            __props__['summary'] = None
        super(BusinessService, __self__).__init__(
            'pagerduty:index/businessService:BusinessService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            html_url: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            point_of_contact: Optional[pulumi.Input[str]] = None,
            self: Optional[pulumi.Input[str]] = None,
            summary: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'BusinessService':
        """
        Get an existing BusinessService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the business service.
        :param pulumi.Input[str] point_of_contact: The owner of the business service.
        :param pulumi.Input[str] type: Default value is `business_service`. Can also be set as `business_service_reference`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["html_url"] = html_url
        __props__["name"] = name
        __props__["point_of_contact"] = point_of_contact
        __props__["self"] = self
        __props__["summary"] = summary
        __props__["type"] = type
        return BusinessService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the business service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pointOfContact")
    def point_of_contact(self) -> pulumi.Output[Optional[str]]:
        """
        The owner of the business service.
        """
        return pulumi.get(self, "point_of_contact")

    @property
    @pulumi.getter
    def self(self) -> pulumi.Output[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Default value is `business_service`. Can also be set as `business_service_reference`.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

