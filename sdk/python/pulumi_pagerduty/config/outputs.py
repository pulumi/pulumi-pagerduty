# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'UseAppOauthScopedToken',
]

@pulumi.output_type
class UseAppOauthScopedToken(dict):
    def __init__(__self__, *,
                 pd_client_id: str,
                 pd_client_secret: str,
                 pd_subdomain: str):
        UseAppOauthScopedToken._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pd_client_id=pd_client_id,
            pd_client_secret=pd_client_secret,
            pd_subdomain=pd_subdomain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pd_client_id: Optional[str] = None,
             pd_client_secret: Optional[str] = None,
             pd_subdomain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if pd_client_id is None and 'pdClientId' in kwargs:
            pd_client_id = kwargs['pdClientId']
        if pd_client_id is None:
            raise TypeError("Missing 'pd_client_id' argument")
        if pd_client_secret is None and 'pdClientSecret' in kwargs:
            pd_client_secret = kwargs['pdClientSecret']
        if pd_client_secret is None:
            raise TypeError("Missing 'pd_client_secret' argument")
        if pd_subdomain is None and 'pdSubdomain' in kwargs:
            pd_subdomain = kwargs['pdSubdomain']
        if pd_subdomain is None:
            raise TypeError("Missing 'pd_subdomain' argument")

        _setter("pd_client_id", pd_client_id)
        _setter("pd_client_secret", pd_client_secret)
        _setter("pd_subdomain", pd_subdomain)

    @property
    @pulumi.getter(name="pdClientId")
    def pd_client_id(self) -> str:
        return pulumi.get(self, "pd_client_id")

    @property
    @pulumi.getter(name="pdClientSecret")
    def pd_client_secret(self) -> str:
        return pulumi.get(self, "pd_client_secret")

    @property
    @pulumi.getter(name="pdSubdomain")
    def pd_subdomain(self) -> str:
        return pulumi.get(self, "pd_subdomain")


