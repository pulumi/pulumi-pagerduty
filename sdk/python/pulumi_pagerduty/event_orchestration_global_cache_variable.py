# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventOrchestrationGlobalCacheVariableArgs', 'EventOrchestrationGlobalCacheVariable']

@pulumi.input_type
class EventOrchestrationGlobalCacheVariableArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs'],
                 event_orchestration: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EventOrchestrationGlobalCacheVariable resource.
        :param pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs'] configuration: A configuration object to define what and how values will be stored in the Cache Variable.
        :param pulumi.Input[str] event_orchestration: ID of the Global Event Orchestration to which this Cache Variable belongs.
        :param pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]] conditions: Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        :param pulumi.Input[bool] disabled: Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        :param pulumi.Input[str] name: Name of the Cache Variable associated with the Global Event Orchestration.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "event_orchestration", event_orchestration)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs']:
        """
        A configuration object to define what and how values will be stored in the Cache Variable.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="eventOrchestration")
    def event_orchestration(self) -> pulumi.Input[str]:
        """
        ID of the Global Event Orchestration to which this Cache Variable belongs.
        """
        return pulumi.get(self, "event_orchestration")

    @event_orchestration.setter
    def event_orchestration(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_orchestration", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]]:
        """
        Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Cache Variable associated with the Global Event Orchestration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _EventOrchestrationGlobalCacheVariableState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]] = None,
                 configuration: Optional[pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs']] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 event_orchestration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EventOrchestrationGlobalCacheVariable resources.
        :param pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]] conditions: Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        :param pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs'] configuration: A configuration object to define what and how values will be stored in the Cache Variable.
        :param pulumi.Input[bool] disabled: Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        :param pulumi.Input[str] event_orchestration: ID of the Global Event Orchestration to which this Cache Variable belongs.
        :param pulumi.Input[str] name: Name of the Cache Variable associated with the Global Event Orchestration.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if event_orchestration is not None:
            pulumi.set(__self__, "event_orchestration", event_orchestration)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]]:
        """
        Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventOrchestrationGlobalCacheVariableConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs']]:
        """
        A configuration object to define what and how values will be stored in the Cache Variable.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['EventOrchestrationGlobalCacheVariableConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="eventOrchestration")
    def event_orchestration(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Global Event Orchestration to which this Cache Variable belongs.
        """
        return pulumi.get(self, "event_orchestration")

    @event_orchestration.setter
    def event_orchestration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_orchestration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Cache Variable associated with the Global Event Orchestration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class EventOrchestrationGlobalCacheVariable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConditionArgs']]]]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConfigurationArgs']]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 event_orchestration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration

        ## Example of configuring a Cache Variable for a Global Event Orchestration

        This example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        database_team = pagerduty.Team("database_team", name="Database Team")
        event_orchestration = pagerduty.EventOrchestration("event_orchestration",
            name="Example Orchestration",
            team=database_team.id)
        cache_var = pagerduty.EventOrchestrationGlobalCacheVariable("cache_var",
            event_orchestration=event_orchestration.id,
            name="recent_host",
            conditions=[pagerduty.EventOrchestrationGlobalCacheVariableConditionArgs(
                expression="event.source exists",
            )],
            configuration=pagerduty.EventOrchestrationGlobalCacheVariableConfigurationArgs(
                type="recent_value",
                source="event.source",
                regex=".*",
            ))
        global_ = pagerduty.EventOrchestrationGlobal("global",
            event_orchestration=event_orchestration.id,
            sets=[pagerduty.EventOrchestrationGlobalSetArgs(
                id="start",
                rules=[pagerduty.EventOrchestrationGlobalSetRuleArgs(
                    label="Always annotate the incident with the event source for all events",
                    actions=pagerduty.EventOrchestrationGlobalSetRuleActionsArgs(
                        annotate="Last time, we saw this incident occur on host: {{cache_var.recent_host}}",
                    ),
                )],
            )],
            catch_all=pagerduty.EventOrchestrationGlobalCatchAllArgs(
                actions=pagerduty.EventOrchestrationGlobalCatchAllActionsArgs(),
            ))
        ```

        ## Import

        Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.

        ```sh
        $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConditionArgs']]]] conditions: Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        :param pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConfigurationArgs']] configuration: A configuration object to define what and how values will be stored in the Cache Variable.
        :param pulumi.Input[bool] disabled: Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        :param pulumi.Input[str] event_orchestration: ID of the Global Event Orchestration to which this Cache Variable belongs.
        :param pulumi.Input[str] name: Name of the Cache Variable associated with the Global Event Orchestration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventOrchestrationGlobalCacheVariableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A [Cache Variable](https://support.pagerduty.com/docs/event-orchestration-variables) can be created on a Global Event Orchestration, in order to temporarily store event data to be referenced later within the Global Event Orchestration

        ## Example of configuring a Cache Variable for a Global Event Orchestration

        This example shows creating a global `Event Orchestration` and a `Cache Variable`. All events that have the `event.source` field will have its `source` value stored in this Cache Variable, and appended as a note for the subsequent incident created by this Event Orchestration.

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        database_team = pagerduty.Team("database_team", name="Database Team")
        event_orchestration = pagerduty.EventOrchestration("event_orchestration",
            name="Example Orchestration",
            team=database_team.id)
        cache_var = pagerduty.EventOrchestrationGlobalCacheVariable("cache_var",
            event_orchestration=event_orchestration.id,
            name="recent_host",
            conditions=[pagerduty.EventOrchestrationGlobalCacheVariableConditionArgs(
                expression="event.source exists",
            )],
            configuration=pagerduty.EventOrchestrationGlobalCacheVariableConfigurationArgs(
                type="recent_value",
                source="event.source",
                regex=".*",
            ))
        global_ = pagerduty.EventOrchestrationGlobal("global",
            event_orchestration=event_orchestration.id,
            sets=[pagerduty.EventOrchestrationGlobalSetArgs(
                id="start",
                rules=[pagerduty.EventOrchestrationGlobalSetRuleArgs(
                    label="Always annotate the incident with the event source for all events",
                    actions=pagerduty.EventOrchestrationGlobalSetRuleActionsArgs(
                        annotate="Last time, we saw this incident occur on host: {{cache_var.recent_host}}",
                    ),
                )],
            )],
            catch_all=pagerduty.EventOrchestrationGlobalCatchAllArgs(
                actions=pagerduty.EventOrchestrationGlobalCatchAllActionsArgs(),
            ))
        ```

        ## Import

        Cache Variables can be imported using colon-separated IDs, which is the combination of the Global Event Orchestration ID followed by the Cache Variable ID, e.g.

        ```sh
        $ pulumi import pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable cache_variable 5e7110bf-0ee7-429e-9724-34ed1fe15ac3:138ed254-3444-44ad-8cc7-701d69def439
        ```

        :param str resource_name: The name of the resource.
        :param EventOrchestrationGlobalCacheVariableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventOrchestrationGlobalCacheVariableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConditionArgs']]]]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConfigurationArgs']]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 event_orchestration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventOrchestrationGlobalCacheVariableArgs.__new__(EventOrchestrationGlobalCacheVariableArgs)

            __props__.__dict__["conditions"] = conditions
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["disabled"] = disabled
            if event_orchestration is None and not opts.urn:
                raise TypeError("Missing required property 'event_orchestration'")
            __props__.__dict__["event_orchestration"] = event_orchestration
            __props__.__dict__["name"] = name
        super(EventOrchestrationGlobalCacheVariable, __self__).__init__(
            'pagerduty:index/eventOrchestrationGlobalCacheVariable:EventOrchestrationGlobalCacheVariable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConditionArgs']]]]] = None,
            configuration: Optional[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConfigurationArgs']]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            event_orchestration: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'EventOrchestrationGlobalCacheVariable':
        """
        Get an existing EventOrchestrationGlobalCacheVariable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConditionArgs']]]] conditions: Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        :param pulumi.Input[pulumi.InputType['EventOrchestrationGlobalCacheVariableConfigurationArgs']] configuration: A configuration object to define what and how values will be stored in the Cache Variable.
        :param pulumi.Input[bool] disabled: Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        :param pulumi.Input[str] event_orchestration: ID of the Global Event Orchestration to which this Cache Variable belongs.
        :param pulumi.Input[str] name: Name of the Cache Variable associated with the Global Event Orchestration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventOrchestrationGlobalCacheVariableState.__new__(_EventOrchestrationGlobalCacheVariableState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["event_orchestration"] = event_orchestration
        __props__.__dict__["name"] = name
        return EventOrchestrationGlobalCacheVariable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.EventOrchestrationGlobalCacheVariableCondition']]]:
        """
        Conditions to be evaluated in order to determine whether or not to update the Cache Variable's stored value.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.EventOrchestrationGlobalCacheVariableConfiguration']:
        """
        A configuration object to define what and how values will be stored in the Cache Variable.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the Cache Variable is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="eventOrchestration")
    def event_orchestration(self) -> pulumi.Output[str]:
        """
        ID of the Global Event Orchestration to which this Cache Variable belongs.
        """
        return pulumi.get(self, "event_orchestration")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Cache Variable associated with the Global Event Orchestration.
        """
        return pulumi.get(self, "name")

