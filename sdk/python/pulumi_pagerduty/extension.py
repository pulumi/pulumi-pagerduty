# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Extension(pulumi.CustomResource):
    config: pulumi.Output[str]
    """
    The configuration of the service extension as string containing plain JSON-encoded data.
    """
    endpoint_url: pulumi.Output[str]
    """
    The url of the extension.  
    **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `.Extension` with no `endpoint_url`, but one with named `Slack` accepts.
    """
    extension_objects: pulumi.Output[list]
    """
    This is the objects for which the extension applies (An array of service ids).
    """
    extension_schema: pulumi.Output[str]
    """
    This is the schema for this extension.
    """
    html_url: pulumi.Output[str]
    """
    URL at which the entity is uniquely displayed in the Web app
    """
    name: pulumi.Output[str]
    """
    The name of the service extension.
    """
    type: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, config=None, endpoint_url=None, extension_objects=None, extension_schema=None, name=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        An [extension](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Extensions/post_extensions) can be associated with a service.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        webhook = pagerduty.get_extension_schema(name="Generic V2 Webhook")
        example_user = pagerduty.User("exampleUser",
            email="howard.james@example.domain",
            teams=[pagerduty_team["example"]["id"]])
        foo = pagerduty.EscalationPolicy("foo",
            num_loops=2,
            rules=[{
                "escalationDelayInMinutes": 10,
                "target": [{
                    "id": example_user.id,
                    "type": "user",
                }],
            }])
        example_service = pagerduty.Service("exampleService",
            acknowledgement_timeout=600,
            auto_resolve_timeout=14400,
            escalation_policy=pagerduty_escalation_policy["example"]["id"])
        slack = pagerduty.Extension("slack",
            config=\"\"\"{
        	"restrict": "any",
        	"notify_types": {
        			"resolve": false,
        			"acknowledge": false,
        			"assignments": false
        	},
        	"access_token": "XXX"
        }

        \"\"\",
            endpoint_url="https://generic_webhook_url/XXXXXX/BBBBBB",
            extension_objects=[example_service.id],
            extension_schema=webhook.id)
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The configuration of the service extension as string containing plain JSON-encoded data.
        :param pulumi.Input[str] endpoint_url: The url of the extension.  
               **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `.Extension` with no `endpoint_url`, but one with named `Slack` accepts.
        :param pulumi.Input[list] extension_objects: This is the objects for which the extension applies (An array of service ids).
        :param pulumi.Input[str] extension_schema: This is the schema for this extension.
        :param pulumi.Input[str] name: The name of the service extension.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config'] = config
            __props__['endpoint_url'] = endpoint_url
            if extension_objects is None:
                raise TypeError("Missing required property 'extension_objects'")
            __props__['extension_objects'] = extension_objects
            if extension_schema is None:
                raise TypeError("Missing required property 'extension_schema'")
            __props__['extension_schema'] = extension_schema
            __props__['name'] = name
            __props__['type'] = type
            __props__['html_url'] = None
        super(Extension, __self__).__init__(
            'pagerduty:index/extension:Extension',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, endpoint_url=None, extension_objects=None, extension_schema=None, html_url=None, name=None, type=None):
        """
        Get an existing Extension resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The configuration of the service extension as string containing plain JSON-encoded data.
        :param pulumi.Input[str] endpoint_url: The url of the extension.  
               **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `.getExtensionSchema` named `Generic V2 Webhook` doesn't accept `.Extension` with no `endpoint_url`, but one with named `Slack` accepts.
        :param pulumi.Input[list] extension_objects: This is the objects for which the extension applies (An array of service ids).
        :param pulumi.Input[str] extension_schema: This is the schema for this extension.
        :param pulumi.Input[str] html_url: URL at which the entity is uniquely displayed in the Web app
        :param pulumi.Input[str] name: The name of the service extension.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["endpoint_url"] = endpoint_url
        __props__["extension_objects"] = extension_objects
        __props__["extension_schema"] = extension_schema
        __props__["html_url"] = html_url
        __props__["name"] = name
        __props__["type"] = type
        return Extension(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

