# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Extension']


class Extension(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 endpoint_url: Optional[pulumi.Input[str]] = None,
                 extension_objects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extension_schema: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        An [extension](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Extensions/post_extensions) can be associated with a service.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        webhook = pagerduty.get_extension_schema(name="Generic V2 Webhook")
        example_user = pagerduty.User("exampleUser",
            email="howard.james@example.domain",
            teams=[pagerduty_team["example"]["id"]])
        foo = pagerduty.EscalationPolicy("foo",
            num_loops=2,
            rules=[pagerduty.EscalationPolicyRuleArgs(
                escalation_delay_in_minutes=10,
                targets=[pagerduty.EscalationPolicyRuleTargetArgs(
                    id=example_user.id,
                    type="user",
                )],
            )])
        example_service = pagerduty.Service("exampleService",
            acknowledgement_timeout="600",
            auto_resolve_timeout="14400",
            escalation_policy=pagerduty_escalation_policy["example"]["id"])
        slack = pagerduty.Extension("slack",
            config=\"\"\"{
        	"restrict": "any",
        	"notify_types": {
        			"resolve": false,
        			"acknowledge": false,
        			"assignments": false
        	},
        	"access_token": "XXX"
        }

        \"\"\",
            endpoint_url="https://generic_webhook_url/XXXXXX/BBBBBB",
            extension_objects=[example_service.id],
            extension_schema=webhook.id)
        ```

        ## Import

        Extensions can be imported using the id.e.g.

        ```sh
         $ pulumi import pagerduty:index/extension:Extension main PLBP09X
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The configuration of the service extension as string containing plain JSON-encoded data.
        :param pulumi.Input[str] endpoint_url: The url of the extension.  
               **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpoint_url`, but one with named `Slack` accepts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extension_objects: This is the objects for which the extension applies (An array of service ids).
        :param pulumi.Input[str] extension_schema: This is the schema for this extension.
        :param pulumi.Input[str] name: The name of the service extension.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config'] = config
            __props__['endpoint_url'] = endpoint_url
            if extension_objects is None and not opts.urn:
                raise TypeError("Missing required property 'extension_objects'")
            __props__['extension_objects'] = extension_objects
            if extension_schema is None and not opts.urn:
                raise TypeError("Missing required property 'extension_schema'")
            __props__['extension_schema'] = extension_schema
            __props__['name'] = name
            __props__['type'] = type
            __props__['html_url'] = None
        super(Extension, __self__).__init__(
            'pagerduty:index/extension:Extension',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[str]] = None,
            endpoint_url: Optional[pulumi.Input[str]] = None,
            extension_objects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            extension_schema: Optional[pulumi.Input[str]] = None,
            html_url: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Extension':
        """
        Get an existing Extension resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The configuration of the service extension as string containing plain JSON-encoded data.
        :param pulumi.Input[str] endpoint_url: The url of the extension.  
               **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpoint_url`, but one with named `Slack` accepts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extension_objects: This is the objects for which the extension applies (An array of service ids).
        :param pulumi.Input[str] extension_schema: This is the schema for this extension.
        :param pulumi.Input[str] html_url: URL at which the entity is uniquely displayed in the Web app
        :param pulumi.Input[str] name: The name of the service extension.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["endpoint_url"] = endpoint_url
        __props__["extension_objects"] = extension_objects
        __props__["extension_schema"] = extension_schema
        __props__["html_url"] = html_url
        __props__["name"] = name
        __props__["type"] = type
        return Extension(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[str]]:
        """
        The configuration of the service extension as string containing plain JSON-encoded data.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="endpointUrl")
    def endpoint_url(self) -> pulumi.Output[Optional[str]]:
        """
        The url of the extension.  
        **Note:** The [endpoint URL is Optional API wise](https://api-reference.pagerduty.com/#!/Extensions/post_extensions) in most cases. But in some cases it is a _Required_ parameter. For example, `getExtensionSchema` named `Generic V2 Webhook` doesn't accept `Extension` with no `endpoint_url`, but one with named `Slack` accepts.
        """
        return pulumi.get(self, "endpoint_url")

    @property
    @pulumi.getter(name="extensionObjects")
    def extension_objects(self) -> pulumi.Output[Sequence[str]]:
        """
        This is the objects for which the extension applies (An array of service ids).
        """
        return pulumi.get(self, "extension_objects")

    @property
    @pulumi.getter(name="extensionSchema")
    def extension_schema(self) -> pulumi.Output[str]:
        """
        This is the schema for this extension.
        """
        return pulumi.get(self, "extension_schema")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> pulumi.Output[str]:
        """
        URL at which the entity is uniquely displayed in the Web app
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the service extension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

