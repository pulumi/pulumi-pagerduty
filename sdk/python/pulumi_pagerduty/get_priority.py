# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetPriorityResult',
    'AwaitableGetPriorityResult',
    'get_priority',
]

@pulumi.output_type
class GetPriorityResult:
    """
    A collection of values returned by getPriority.
    """
    def __init__(__self__, description=None, id=None, name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the found priority.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the found priority.
        """
        return pulumi.get(self, "name")


class AwaitableGetPriorityResult(GetPriorityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPriorityResult(
            description=self.description,
            id=self.id,
            name=self.name)


def get_priority(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPriorityResult:
    """
    Use this data source to get information about a specific [priority](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1priorities/get) that you can use for other PagerDuty resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_pagerduty as pagerduty

    p1 = pagerduty.get_priority(name="P1")
    foo_ruleset = pagerduty.Ruleset("fooRuleset")
    foo_ruleset_rule = pagerduty.RulesetRule("fooRulesetRule",
        ruleset=foo_ruleset.id,
        position=0,
        disabled=False,
        conditions=pagerduty.RulesetRuleConditionsArgs(
            operator="and",
            subconditions=[
                pagerduty.RulesetRuleConditionsSubconditionArgs(
                    operator="contains",
                    parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(
                        value="disk space",
                        path="payload.summary",
                    )],
                ),
                pagerduty.RulesetRuleConditionsSubconditionArgs(
                    operator="contains",
                    parameters=[pagerduty.RulesetRuleConditionsSubconditionParameterArgs(
                        value="db",
                        path="payload.source",
                    )],
                ),
            ],
        ),
        actions=pagerduty.RulesetRuleActionsArgs(
            routes=[pagerduty.RulesetRuleActionsRouteArgs(
                value="P5DTL0K",
            )],
            priorities=[pagerduty.RulesetRuleActionsPriorityArgs(
                value=pagerduty_priority["p1"]["id"],
            )],
        ))
    ```


    :param str name: The name of the priority to find in the PagerDuty API.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('pagerduty:index/getPriority:getPriority', __args__, opts=opts, typ=GetPriorityResult).value

    return AwaitableGetPriorityResult(
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name)
