# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class MaintenanceWindow(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    A description for the maintenance window.
    """
    end_time: pulumi.Output[str]
    """
    The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.
    """
    services: pulumi.Output[list]
    """
    A list of service IDs to include in the maintenance window.
    """
    start_time: pulumi.Output[str]
    """
    The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
    """
    def __init__(__self__, resource_name, opts=None, description=None, end_time=None, services=None, start_time=None, __props__=None, __name__=None, __opts__=None):
        """
        A [maintenance window](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Maintenance_Windows/get_maintenance_windows) is used to temporarily disable one or more services for a set period of time. No incidents will be triggered and no notifications will be received while a service is disabled by a maintenance window.

        Maintenance windows are specified to start at a certain time and end after they have begun. Once started, a maintenance window cannot be deleted; it can only be ended immediately to re-enable the service.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        example = pagerduty.MaintenanceWindow("example",
            end_time="2015-11-09T22:00:00-05:00",
            services=[pagerduty_service["example"]["id"]],
            start_time="2015-11-09T20:00:00-05:00")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the maintenance window.
        :param pulumi.Input[str] end_time: The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.
        :param pulumi.Input[list] services: A list of service IDs to include in the maintenance window.
        :param pulumi.Input[str] start_time: The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            if end_time is None:
                raise TypeError("Missing required property 'end_time'")
            __props__['end_time'] = end_time
            if services is None:
                raise TypeError("Missing required property 'services'")
            __props__['services'] = services
            if start_time is None:
                raise TypeError("Missing required property 'start_time'")
            __props__['start_time'] = start_time
        super(MaintenanceWindow, __self__).__init__(
            'pagerduty:index/maintenanceWindow:MaintenanceWindow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, end_time=None, services=None, start_time=None):
        """
        Get an existing MaintenanceWindow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the maintenance window.
        :param pulumi.Input[str] end_time: The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`.
        :param pulumi.Input[list] services: A list of service IDs to include in the maintenance window.
        :param pulumi.Input[str] start_time: The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["end_time"] = end_time
        __props__["services"] = services
        __props__["start_time"] = start_time
        return MaintenanceWindow(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

