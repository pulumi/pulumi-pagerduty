# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AutomationActionsActionActionDataReference',
    'EscalationPolicyRule',
    'EscalationPolicyRuleTarget',
    'EventOrchestrationGlobalCatchAll',
    'EventOrchestrationGlobalCatchAllActions',
    'EventOrchestrationGlobalCatchAllActionsAutomationAction',
    'EventOrchestrationGlobalCatchAllActionsAutomationActionHeader',
    'EventOrchestrationGlobalCatchAllActionsAutomationActionParameter',
    'EventOrchestrationGlobalCatchAllActionsExtraction',
    'EventOrchestrationGlobalCatchAllActionsVariable',
    'EventOrchestrationGlobalSet',
    'EventOrchestrationGlobalSetRule',
    'EventOrchestrationGlobalSetRuleActions',
    'EventOrchestrationGlobalSetRuleActionsAutomationAction',
    'EventOrchestrationGlobalSetRuleActionsAutomationActionHeader',
    'EventOrchestrationGlobalSetRuleActionsAutomationActionParameter',
    'EventOrchestrationGlobalSetRuleActionsExtraction',
    'EventOrchestrationGlobalSetRuleActionsVariable',
    'EventOrchestrationGlobalSetRuleCondition',
    'EventOrchestrationIntegration',
    'EventOrchestrationIntegrationParameter',
    'EventOrchestrationRouterCatchAll',
    'EventOrchestrationRouterCatchAllActions',
    'EventOrchestrationRouterSet',
    'EventOrchestrationRouterSetRule',
    'EventOrchestrationRouterSetRuleActions',
    'EventOrchestrationRouterSetRuleCondition',
    'EventOrchestrationServiceCatchAll',
    'EventOrchestrationServiceCatchAllActions',
    'EventOrchestrationServiceCatchAllActionsAutomationAction',
    'EventOrchestrationServiceCatchAllActionsAutomationActionHeader',
    'EventOrchestrationServiceCatchAllActionsAutomationActionParameter',
    'EventOrchestrationServiceCatchAllActionsExtraction',
    'EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction',
    'EventOrchestrationServiceCatchAllActionsVariable',
    'EventOrchestrationServiceSet',
    'EventOrchestrationServiceSetRule',
    'EventOrchestrationServiceSetRuleActions',
    'EventOrchestrationServiceSetRuleActionsAutomationAction',
    'EventOrchestrationServiceSetRuleActionsAutomationActionHeader',
    'EventOrchestrationServiceSetRuleActionsAutomationActionParameter',
    'EventOrchestrationServiceSetRuleActionsExtraction',
    'EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction',
    'EventOrchestrationServiceSetRuleActionsVariable',
    'EventOrchestrationServiceSetRuleCondition',
    'EventOrchestrationUnroutedCatchAll',
    'EventOrchestrationUnroutedCatchAllActions',
    'EventOrchestrationUnroutedCatchAllActionsExtraction',
    'EventOrchestrationUnroutedCatchAllActionsVariable',
    'EventOrchestrationUnroutedSet',
    'EventOrchestrationUnroutedSetRule',
    'EventOrchestrationUnroutedSetRuleActions',
    'EventOrchestrationUnroutedSetRuleActionsExtraction',
    'EventOrchestrationUnroutedSetRuleActionsVariable',
    'EventOrchestrationUnroutedSetRuleCondition',
    'IncidentWorkflowStep',
    'IncidentWorkflowStepInput',
    'ResponsePlayResponder',
    'ResponsePlayResponderEscalationRule',
    'ResponsePlayResponderEscalationRuleTarget',
    'ResponsePlayResponderService',
    'ResponsePlayResponderTeam',
    'ResponsePlaySubscriber',
    'RulesetRuleActions',
    'RulesetRuleActionsAnnotate',
    'RulesetRuleActionsEventAction',
    'RulesetRuleActionsExtraction',
    'RulesetRuleActionsPriority',
    'RulesetRuleActionsRoute',
    'RulesetRuleActionsSeverity',
    'RulesetRuleActionsSuppress',
    'RulesetRuleActionsSuspend',
    'RulesetRuleConditions',
    'RulesetRuleConditionsSubcondition',
    'RulesetRuleConditionsSubconditionParameter',
    'RulesetRuleTimeFrame',
    'RulesetRuleTimeFrameActiveBetween',
    'RulesetRuleTimeFrameScheduledWeekly',
    'RulesetRuleVariable',
    'RulesetRuleVariableParameter',
    'RulesetTeam',
    'ScheduleFinalSchedule',
    'ScheduleLayer',
    'ScheduleLayerRestriction',
    'ServiceAlertGroupingParameters',
    'ServiceAlertGroupingParametersConfig',
    'ServiceAutoPauseNotificationsParameters',
    'ServiceDependencyDependency',
    'ServiceDependencyDependencyDependentService',
    'ServiceDependencyDependencySupportingService',
    'ServiceEventRuleActions',
    'ServiceEventRuleActionsAnnotate',
    'ServiceEventRuleActionsEventAction',
    'ServiceEventRuleActionsExtraction',
    'ServiceEventRuleActionsPriority',
    'ServiceEventRuleActionsSeverity',
    'ServiceEventRuleActionsSuppress',
    'ServiceEventRuleActionsSuspend',
    'ServiceEventRuleConditions',
    'ServiceEventRuleConditionsSubcondition',
    'ServiceEventRuleConditionsSubconditionParameter',
    'ServiceEventRuleTimeFrame',
    'ServiceEventRuleTimeFrameActiveBetween',
    'ServiceEventRuleTimeFrameScheduledWeekly',
    'ServiceEventRuleVariable',
    'ServiceEventRuleVariableParameter',
    'ServiceIncidentUrgencyRule',
    'ServiceIncidentUrgencyRuleDuringSupportHours',
    'ServiceIncidentUrgencyRuleOutsideSupportHours',
    'ServiceIntegrationEmailFilter',
    'ServiceIntegrationEmailParser',
    'ServiceIntegrationEmailParserMatchPredicate',
    'ServiceIntegrationEmailParserMatchPredicatePredicate',
    'ServiceIntegrationEmailParserMatchPredicatePredicatePredicate',
    'ServiceIntegrationEmailParserValueExtractor',
    'ServiceScheduledAction',
    'ServiceScheduledActionAt',
    'ServiceSupportHours',
    'SlackConnectionConfig',
    'WebhookSubscriptionDeliveryMethod',
    'WebhookSubscriptionDeliveryMethodCustomHeader',
    'WebhookSubscriptionFilter',
    'GetAutomationActionsActionActionDataReferenceResult',
    'GetEventOrchestrationIntegrationDetailResult',
    'GetEventOrchestrationIntegrationDetailParameterResult',
    'GetEventOrchestrationIntegrationParameterResult',
    'GetEventOrchestrationsEventOrchestrationResult',
    'GetEventOrchestrationsEventOrchestrationIntegrationResult',
    'GetEventOrchestrationsEventOrchestrationIntegrationParameterResult',
    'GetLicensesLicenseResult',
    'GetServiceTeamResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class AutomationActionsActionActionDataReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "invocationCommand":
            suggest = "invocation_command"
        elif key == "processAutomationJobArguments":
            suggest = "process_automation_job_arguments"
        elif key == "processAutomationJobId":
            suggest = "process_automation_job_id"
        elif key == "processAutomationNodeFilter":
            suggest = "process_automation_node_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationActionsActionActionDataReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationActionsActionActionDataReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationActionsActionActionDataReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 invocation_command: Optional[str] = None,
                 process_automation_job_arguments: Optional[str] = None,
                 process_automation_job_id: Optional[str] = None,
                 process_automation_node_filter: Optional[str] = None,
                 script: Optional[str] = None):
        """
        :param str invocation_command: The command to execute the script with.
        :param str process_automation_job_arguments: The arguments to pass to the Process Automation job execution.
        :param str process_automation_job_id: The ID of the Process Automation job to execute.
        :param str process_automation_node_filter: The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
        :param str script: Body of the script to be executed on the Runner. Max length is 16777215 characters.
        """
        AutomationActionsActionActionDataReference._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            invocation_command=invocation_command,
            process_automation_job_arguments=process_automation_job_arguments,
            process_automation_job_id=process_automation_job_id,
            process_automation_node_filter=process_automation_node_filter,
            script=script,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             invocation_command: Optional[str] = None,
             process_automation_job_arguments: Optional[str] = None,
             process_automation_job_id: Optional[str] = None,
             process_automation_node_filter: Optional[str] = None,
             script: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if invocation_command is not None:
            _setter("invocation_command", invocation_command)
        if process_automation_job_arguments is not None:
            _setter("process_automation_job_arguments", process_automation_job_arguments)
        if process_automation_job_id is not None:
            _setter("process_automation_job_id", process_automation_job_id)
        if process_automation_node_filter is not None:
            _setter("process_automation_node_filter", process_automation_node_filter)
        if script is not None:
            _setter("script", script)

    @property
    @pulumi.getter(name="invocationCommand")
    def invocation_command(self) -> Optional[str]:
        """
        The command to execute the script with.
        """
        return pulumi.get(self, "invocation_command")

    @property
    @pulumi.getter(name="processAutomationJobArguments")
    def process_automation_job_arguments(self) -> Optional[str]:
        """
        The arguments to pass to the Process Automation job execution.
        """
        return pulumi.get(self, "process_automation_job_arguments")

    @property
    @pulumi.getter(name="processAutomationJobId")
    def process_automation_job_id(self) -> Optional[str]:
        """
        The ID of the Process Automation job to execute.
        """
        return pulumi.get(self, "process_automation_job_id")

    @property
    @pulumi.getter(name="processAutomationNodeFilter")
    def process_automation_node_filter(self) -> Optional[str]:
        """
        The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
        """
        return pulumi.get(self, "process_automation_node_filter")

    @property
    @pulumi.getter
    def script(self) -> Optional[str]:
        """
        Body of the script to be executed on the Runner. Max length is 16777215 characters.
        """
        return pulumi.get(self, "script")


@pulumi.output_type
class EscalationPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escalationDelayInMinutes":
            suggest = "escalation_delay_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EscalationPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EscalationPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EscalationPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 escalation_delay_in_minutes: int,
                 targets: Sequence['outputs.EscalationPolicyRuleTarget'],
                 id: Optional[str] = None):
        """
        :param int escalation_delay_in_minutes: The number of minutes before an unacknowledged incident escalates away from this rule.
        :param str id: A target ID
        """
        EscalationPolicyRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            escalation_delay_in_minutes=escalation_delay_in_minutes,
            targets=targets,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             escalation_delay_in_minutes: int,
             targets: Sequence['outputs.EscalationPolicyRuleTarget'],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("escalation_delay_in_minutes", escalation_delay_in_minutes)
        _setter("targets", targets)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter(name="escalationDelayInMinutes")
    def escalation_delay_in_minutes(self) -> int:
        """
        The number of minutes before an unacknowledged incident escalates away from this rule.
        """
        return pulumi.get(self, "escalation_delay_in_minutes")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.EscalationPolicyRuleTarget']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A target ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EscalationPolicyRuleTarget(dict):
    def __init__(__self__, *,
                 id: str,
                 type: Optional[str] = None):
        """
        :param str id: A target ID
        :param str type: Can be `user_reference` or `schedule_reference`. Defaults to `user_reference`. For multiple users as example, repeat the target.
        """
        EscalationPolicyRuleTarget._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A target ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Can be `user_reference` or `schedule_reference`. Defaults to `user_reference`. For multiple users as example, repeat the target.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EventOrchestrationGlobalCatchAll(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationGlobalCatchAllActions'):
        """
        :param 'EventOrchestrationGlobalCatchAllActionsArgs' actions: These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        EventOrchestrationGlobalCatchAll._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationGlobalCatchAllActions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationGlobalCatchAllActions':
        """
        These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationAction":
            suggest = "automation_action"
        elif key == "dropEvent":
            suggest = "drop_event"
        elif key == "eventAction":
            suggest = "event_action"
        elif key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationGlobalCatchAllActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationGlobalCatchAllActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationGlobalCatchAllActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotate: Optional[str] = None,
                 automation_action: Optional['outputs.EventOrchestrationGlobalCatchAllActionsAutomationAction'] = None,
                 drop_event: Optional[bool] = None,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsExtraction']] = None,
                 priority: Optional[str] = None,
                 route_to: Optional[str] = None,
                 severity: Optional[str] = None,
                 suppress: Optional[bool] = None,
                 suspend: Optional[int] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsVariable']] = None):
        """
        :param str annotate: Add this text as a note on the resulting incident.
        :param 'EventOrchestrationGlobalCatchAllActionsAutomationActionArgs' automation_action: Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        :param bool drop_event: When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationGlobalCatchAllActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param str priority: The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        :param str route_to: The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param bool suppress: Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        :param int suspend: The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        :param Sequence['EventOrchestrationGlobalCatchAllActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationGlobalCatchAllActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotate=annotate,
            automation_action=automation_action,
            drop_event=drop_event,
            event_action=event_action,
            extractions=extractions,
            priority=priority,
            route_to=route_to,
            severity=severity,
            suppress=suppress,
            suspend=suspend,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotate: Optional[str] = None,
             automation_action: Optional['outputs.EventOrchestrationGlobalCatchAllActionsAutomationAction'] = None,
             drop_event: Optional[bool] = None,
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsExtraction']] = None,
             priority: Optional[str] = None,
             route_to: Optional[str] = None,
             severity: Optional[str] = None,
             suppress: Optional[bool] = None,
             suspend: Optional[int] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotate is not None:
            _setter("annotate", annotate)
        if automation_action is not None:
            _setter("automation_action", automation_action)
        if drop_event is not None:
            _setter("drop_event", drop_event)
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if priority is not None:
            _setter("priority", priority)
        if route_to is not None:
            _setter("route_to", route_to)
        if severity is not None:
            _setter("severity", severity)
        if suppress is not None:
            _setter("suppress", suppress)
        if suspend is not None:
            _setter("suspend", suspend)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def annotate(self) -> Optional[str]:
        """
        Add this text as a note on the resulting incident.
        """
        return pulumi.get(self, "annotate")

    @property
    @pulumi.getter(name="automationAction")
    def automation_action(self) -> Optional['outputs.EventOrchestrationGlobalCatchAllActionsAutomationAction']:
        """
        Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        """
        return pulumi.get(self, "automation_action")

    @property
    @pulumi.getter(name="dropEvent")
    def drop_event(self) -> Optional[bool]:
        """
        When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
        """
        return pulumi.get(self, "drop_event")

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> Optional[str]:
        """
        The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
        """
        return pulumi.get(self, "route_to")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def suppress(self) -> Optional[bool]:
        """
        Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        """
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter
    def suspend(self) -> Optional[int]:
        """
        The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        """
        return pulumi.get(self, "suspend")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActionsAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSend":
            suggest = "auto_send"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationGlobalCatchAllActionsAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationGlobalCatchAllActionsAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationGlobalCatchAllActionsAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 url: str,
                 auto_send: Optional[bool] = None,
                 headers: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionHeader']] = None,
                 parameters: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionParameter']] = None):
        """
        :param str name: The name of the variable
        :param str url: The API endpoint where PagerDuty's servers will send the webhook request.
        :param bool auto_send: When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        :param Sequence['EventOrchestrationGlobalCatchAllActionsAutomationActionHeaderArgs'] headers: Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        :param Sequence['EventOrchestrationGlobalCatchAllActionsAutomationActionParameterArgs'] parameters: Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        EventOrchestrationGlobalCatchAllActionsAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            url=url,
            auto_send=auto_send,
            headers=headers,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             url: str,
             auto_send: Optional[bool] = None,
             headers: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionHeader']] = None,
             parameters: Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("url", url)
        if auto_send is not None:
            _setter("auto_send", auto_send)
        if headers is not None:
            _setter("headers", headers)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The API endpoint where PagerDuty's servers will send the webhook request.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="autoSend")
    def auto_send(self) -> Optional[bool]:
        """
        When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        """
        return pulumi.get(self, "auto_send")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionHeader']]:
        """
        Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionParameter']]:
        """
        Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActionsAutomationActionHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalCatchAllActionsAutomationActionHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActionsAutomationActionParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalCatchAllActionsAutomationActionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationGlobalCatchAllActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationGlobalCatchAllActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalCatchAllActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalSet(dict):
    def __init__(__self__, *,
                 id: str,
                 rules: Optional[Sequence['outputs.EventOrchestrationGlobalSetRule']] = None):
        """
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        EventOrchestrationGlobalSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             rules: Optional[Sequence['outputs.EventOrchestrationGlobalSetRule']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class EventOrchestrationGlobalSetRule(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationGlobalSetRuleActions',
                 conditions: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleCondition']] = None,
                 disabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param 'EventOrchestrationGlobalSetRuleActionsArgs' actions: Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        :param Sequence['EventOrchestrationGlobalSetRuleConditionArgs'] conditions: Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        :param bool disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        :param str label: A description of this rule's purpose.
        """
        EventOrchestrationGlobalSetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            conditions=conditions,
            disabled=disabled,
            id=id,
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationGlobalSetRuleActions',
             conditions: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleCondition']] = None,
             disabled: Optional[bool] = None,
             id: Optional[str] = None,
             label: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if conditions is not None:
            _setter("conditions", conditions)
        if disabled is not None:
            _setter("disabled", disabled)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationGlobalSetRuleActions':
        """
        Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleCondition']]:
        """
        Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Indicates whether the rule is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        A description of this rule's purpose.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationAction":
            suggest = "automation_action"
        elif key == "dropEvent":
            suggest = "drop_event"
        elif key == "eventAction":
            suggest = "event_action"
        elif key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationGlobalSetRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationGlobalSetRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationGlobalSetRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotate: Optional[str] = None,
                 automation_action: Optional['outputs.EventOrchestrationGlobalSetRuleActionsAutomationAction'] = None,
                 drop_event: Optional[bool] = None,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsExtraction']] = None,
                 priority: Optional[str] = None,
                 route_to: Optional[str] = None,
                 severity: Optional[str] = None,
                 suppress: Optional[bool] = None,
                 suspend: Optional[int] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsVariable']] = None):
        """
        :param str annotate: Add this text as a note on the resulting incident.
        :param 'EventOrchestrationGlobalSetRuleActionsAutomationActionArgs' automation_action: Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        :param bool drop_event: When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationGlobalSetRuleActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param str priority: The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        :param str route_to: The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param bool suppress: Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        :param int suspend: The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        :param Sequence['EventOrchestrationGlobalSetRuleActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationGlobalSetRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotate=annotate,
            automation_action=automation_action,
            drop_event=drop_event,
            event_action=event_action,
            extractions=extractions,
            priority=priority,
            route_to=route_to,
            severity=severity,
            suppress=suppress,
            suspend=suspend,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotate: Optional[str] = None,
             automation_action: Optional['outputs.EventOrchestrationGlobalSetRuleActionsAutomationAction'] = None,
             drop_event: Optional[bool] = None,
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsExtraction']] = None,
             priority: Optional[str] = None,
             route_to: Optional[str] = None,
             severity: Optional[str] = None,
             suppress: Optional[bool] = None,
             suspend: Optional[int] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotate is not None:
            _setter("annotate", annotate)
        if automation_action is not None:
            _setter("automation_action", automation_action)
        if drop_event is not None:
            _setter("drop_event", drop_event)
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if priority is not None:
            _setter("priority", priority)
        if route_to is not None:
            _setter("route_to", route_to)
        if severity is not None:
            _setter("severity", severity)
        if suppress is not None:
            _setter("suppress", suppress)
        if suspend is not None:
            _setter("suspend", suspend)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def annotate(self) -> Optional[str]:
        """
        Add this text as a note on the resulting incident.
        """
        return pulumi.get(self, "annotate")

    @property
    @pulumi.getter(name="automationAction")
    def automation_action(self) -> Optional['outputs.EventOrchestrationGlobalSetRuleActionsAutomationAction']:
        """
        Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        """
        return pulumi.get(self, "automation_action")

    @property
    @pulumi.getter(name="dropEvent")
    def drop_event(self) -> Optional[bool]:
        """
        When true, this event will be dropped. Dropped events will not trigger or resolve an alert or an incident. Dropped events will not be evaluated against router rules.
        """
        return pulumi.get(self, "drop_event")

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> Optional[str]:
        """
        The ID of a Set from this Global Orchestration whose rules you also want to use with events that match this rule.
        """
        return pulumi.get(self, "route_to")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def suppress(self) -> Optional[bool]:
        """
        Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        """
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter
    def suspend(self) -> Optional[int]:
        """
        The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        """
        return pulumi.get(self, "suspend")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActionsAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSend":
            suggest = "auto_send"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationGlobalSetRuleActionsAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationGlobalSetRuleActionsAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationGlobalSetRuleActionsAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 url: str,
                 auto_send: Optional[bool] = None,
                 headers: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionHeader']] = None,
                 parameters: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionParameter']] = None):
        """
        :param str name: The name of the variable
        :param str url: The API endpoint where PagerDuty's servers will send the webhook request.
        :param bool auto_send: When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        :param Sequence['EventOrchestrationGlobalSetRuleActionsAutomationActionHeaderArgs'] headers: Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        :param Sequence['EventOrchestrationGlobalSetRuleActionsAutomationActionParameterArgs'] parameters: Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        EventOrchestrationGlobalSetRuleActionsAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            url=url,
            auto_send=auto_send,
            headers=headers,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             url: str,
             auto_send: Optional[bool] = None,
             headers: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionHeader']] = None,
             parameters: Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("url", url)
        if auto_send is not None:
            _setter("auto_send", auto_send)
        if headers is not None:
            _setter("headers", headers)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The API endpoint where PagerDuty's servers will send the webhook request.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="autoSend")
    def auto_send(self) -> Optional[bool]:
        """
        When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        """
        return pulumi.get(self, "auto_send")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionHeader']]:
        """
        Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionParameter']]:
        """
        Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActionsAutomationActionHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalSetRuleActionsAutomationActionHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActionsAutomationActionParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalSetRuleActionsAutomationActionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationGlobalSetRuleActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationGlobalSetRuleActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationGlobalSetRuleCondition(dict):
    def __init__(__self__, *,
                 expression: str):
        """
        :param str expression: A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        EventOrchestrationGlobalSetRuleCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class EventOrchestrationIntegration(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 label: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.EventOrchestrationIntegrationParameter']] = None):
        """
        :param str id: ID of the integration
        """
        EventOrchestrationIntegration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             label: Optional[str] = None,
             parameters: Optional[Sequence['outputs.EventOrchestrationIntegrationParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.EventOrchestrationIntegrationParameter']]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EventOrchestrationIntegrationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routingKey":
            suggest = "routing_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationIntegrationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationIntegrationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationIntegrationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 routing_key: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str routing_key: Routing key that routes to this Orchestration.
        :param str type: Type of the routing key. `global` is the default type.
        """
        EventOrchestrationIntegrationParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routing_key=routing_key,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routing_key: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if routing_key is not None:
            _setter("routing_key", routing_key)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[str]:
        """
        Routing key that routes to this Orchestration.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the routing key. `global` is the default type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EventOrchestrationRouterCatchAll(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationRouterCatchAllActions'):
        """
        :param 'EventOrchestrationRouterCatchAllActionsArgs' actions: These are the actions that will be taken to change the resulting alert and incident.
        """
        EventOrchestrationRouterCatchAll._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationRouterCatchAllActions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationRouterCatchAllActions':
        """
        These are the actions that will be taken to change the resulting alert and incident.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class EventOrchestrationRouterCatchAllActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationRouterCatchAllActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationRouterCatchAllActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationRouterCatchAllActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_to: str):
        """
        :param str route_to: The ID of the target Service for the resulting alert.
        """
        EventOrchestrationRouterCatchAllActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            route_to=route_to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             route_to: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("route_to", route_to)

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> str:
        """
        The ID of the target Service for the resulting alert.
        """
        return pulumi.get(self, "route_to")


@pulumi.output_type
class EventOrchestrationRouterSet(dict):
    def __init__(__self__, *,
                 id: str,
                 rules: Optional[Sequence['outputs.EventOrchestrationRouterSetRule']] = None):
        """
        :param str id: ID of the `start` set. Router supports only one set and it's id has to be `start`
        """
        EventOrchestrationRouterSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             rules: Optional[Sequence['outputs.EventOrchestrationRouterSetRule']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the `start` set. Router supports only one set and it's id has to be `start`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.EventOrchestrationRouterSetRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class EventOrchestrationRouterSetRule(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationRouterSetRuleActions',
                 conditions: Optional[Sequence['outputs.EventOrchestrationRouterSetRuleCondition']] = None,
                 disabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param 'EventOrchestrationRouterSetRuleActionsArgs' actions: Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        :param Sequence['EventOrchestrationRouterSetRuleConditionArgs'] conditions: Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.
        :param bool disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param str id: ID of the `start` set. Router supports only one set and it's id has to be `start`
        :param str label: A description of this rule's purpose.
        """
        EventOrchestrationRouterSetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            conditions=conditions,
            disabled=disabled,
            id=id,
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationRouterSetRuleActions',
             conditions: Optional[Sequence['outputs.EventOrchestrationRouterSetRuleCondition']] = None,
             disabled: Optional[bool] = None,
             id: Optional[str] = None,
             label: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if conditions is not None:
            _setter("conditions", conditions)
        if disabled is not None:
            _setter("disabled", disabled)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationRouterSetRuleActions':
        """
        Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.EventOrchestrationRouterSetRuleCondition']]:
        """
        Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will _always_ match against the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Indicates whether the rule is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the `start` set. Router supports only one set and it's id has to be `start`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        A description of this rule's purpose.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EventOrchestrationRouterSetRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationRouterSetRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationRouterSetRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationRouterSetRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_to: str):
        """
        :param str route_to: The ID of the target Service for the resulting alert.
        """
        EventOrchestrationRouterSetRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            route_to=route_to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             route_to: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("route_to", route_to)

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> str:
        """
        The ID of the target Service for the resulting alert.
        """
        return pulumi.get(self, "route_to")


@pulumi.output_type
class EventOrchestrationRouterSetRuleCondition(dict):
    def __init__(__self__, *,
                 expression: str):
        """
        :param str expression: A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        EventOrchestrationRouterSetRuleCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class EventOrchestrationServiceCatchAll(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationServiceCatchAllActions'):
        """
        :param 'EventOrchestrationServiceCatchAllActionsArgs' actions: These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        EventOrchestrationServiceCatchAll._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationServiceCatchAllActions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationServiceCatchAllActions':
        """
        These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationAction":
            suggest = "automation_action"
        elif key == "eventAction":
            suggest = "event_action"
        elif key == "pagerdutyAutomationAction":
            suggest = "pagerduty_automation_action"
        elif key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceCatchAllActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceCatchAllActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceCatchAllActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotate: Optional[str] = None,
                 automation_action: Optional['outputs.EventOrchestrationServiceCatchAllActionsAutomationAction'] = None,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsExtraction']] = None,
                 pagerduty_automation_action: Optional['outputs.EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction'] = None,
                 priority: Optional[str] = None,
                 route_to: Optional[str] = None,
                 severity: Optional[str] = None,
                 suppress: Optional[bool] = None,
                 suspend: Optional[int] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsVariable']] = None):
        """
        :param str annotate: Add this text as a note on the resulting incident.
        :param 'EventOrchestrationServiceCatchAllActionsAutomationActionArgs' automation_action: Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationServiceCatchAllActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param 'EventOrchestrationServiceCatchAllActionsPagerdutyAutomationActionArgs' pagerduty_automation_action: Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
        :param str priority: The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        :param str route_to: The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param bool suppress: Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        :param int suspend: The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        :param Sequence['EventOrchestrationServiceCatchAllActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationServiceCatchAllActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotate=annotate,
            automation_action=automation_action,
            event_action=event_action,
            extractions=extractions,
            pagerduty_automation_action=pagerduty_automation_action,
            priority=priority,
            route_to=route_to,
            severity=severity,
            suppress=suppress,
            suspend=suspend,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotate: Optional[str] = None,
             automation_action: Optional['outputs.EventOrchestrationServiceCatchAllActionsAutomationAction'] = None,
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsExtraction']] = None,
             pagerduty_automation_action: Optional['outputs.EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction'] = None,
             priority: Optional[str] = None,
             route_to: Optional[str] = None,
             severity: Optional[str] = None,
             suppress: Optional[bool] = None,
             suspend: Optional[int] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotate is not None:
            _setter("annotate", annotate)
        if automation_action is not None:
            _setter("automation_action", automation_action)
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if pagerduty_automation_action is not None:
            _setter("pagerduty_automation_action", pagerduty_automation_action)
        if priority is not None:
            _setter("priority", priority)
        if route_to is not None:
            _setter("route_to", route_to)
        if severity is not None:
            _setter("severity", severity)
        if suppress is not None:
            _setter("suppress", suppress)
        if suspend is not None:
            _setter("suspend", suspend)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def annotate(self) -> Optional[str]:
        """
        Add this text as a note on the resulting incident.
        """
        return pulumi.get(self, "annotate")

    @property
    @pulumi.getter(name="automationAction")
    def automation_action(self) -> Optional['outputs.EventOrchestrationServiceCatchAllActionsAutomationAction']:
        """
        Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        """
        return pulumi.get(self, "automation_action")

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter(name="pagerdutyAutomationAction")
    def pagerduty_automation_action(self) -> Optional['outputs.EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction']:
        """
        Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
        """
        return pulumi.get(self, "pagerduty_automation_action")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> Optional[str]:
        """
        The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
        """
        return pulumi.get(self, "route_to")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def suppress(self) -> Optional[bool]:
        """
        Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        """
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter
    def suspend(self) -> Optional[int]:
        """
        The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        """
        return pulumi.get(self, "suspend")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSend":
            suggest = "auto_send"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceCatchAllActionsAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceCatchAllActionsAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceCatchAllActionsAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 url: str,
                 auto_send: Optional[bool] = None,
                 headers: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionHeader']] = None,
                 parameters: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionParameter']] = None):
        """
        :param str name: The name of the variable
        :param str url: The API endpoint where PagerDuty's servers will send the webhook request.
        :param bool auto_send: When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        :param Sequence['EventOrchestrationServiceCatchAllActionsAutomationActionHeaderArgs'] headers: Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        :param Sequence['EventOrchestrationServiceCatchAllActionsAutomationActionParameterArgs'] parameters: Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        EventOrchestrationServiceCatchAllActionsAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            url=url,
            auto_send=auto_send,
            headers=headers,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             url: str,
             auto_send: Optional[bool] = None,
             headers: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionHeader']] = None,
             parameters: Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("url", url)
        if auto_send is not None:
            _setter("auto_send", auto_send)
        if headers is not None:
            _setter("headers", headers)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The API endpoint where PagerDuty's servers will send the webhook request.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="autoSend")
    def auto_send(self) -> Optional[bool]:
        """
        When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        """
        return pulumi.get(self, "auto_send")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionHeader']]:
        """
        Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.EventOrchestrationServiceCatchAllActionsAutomationActionParameter']]:
        """
        Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsAutomationActionHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceCatchAllActionsAutomationActionHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsAutomationActionParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceCatchAllActionsAutomationActionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationServiceCatchAllActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_id: str):
        """
        :param str action_id: Id of the Process Automation action to be triggered.
        """
        EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_id=action_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_id", action_id)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        """
        Id of the Process Automation action to be triggered.
        """
        return pulumi.get(self, "action_id")


@pulumi.output_type
class EventOrchestrationServiceCatchAllActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceCatchAllActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceSet(dict):
    def __init__(__self__, *,
                 id: str,
                 rules: Optional[Sequence['outputs.EventOrchestrationServiceSetRule']] = None):
        """
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        EventOrchestrationServiceSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             rules: Optional[Sequence['outputs.EventOrchestrationServiceSetRule']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class EventOrchestrationServiceSetRule(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationServiceSetRuleActions',
                 conditions: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleCondition']] = None,
                 disabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param 'EventOrchestrationServiceSetRuleActionsArgs' actions: Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        :param Sequence['EventOrchestrationServiceSetRuleConditionArgs'] conditions: Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        :param bool disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        :param str label: A description of this rule's purpose.
        """
        EventOrchestrationServiceSetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            conditions=conditions,
            disabled=disabled,
            id=id,
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationServiceSetRuleActions',
             conditions: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleCondition']] = None,
             disabled: Optional[bool] = None,
             id: Optional[str] = None,
             label: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if conditions is not None:
            _setter("conditions", conditions)
        if disabled is not None:
            _setter("disabled", disabled)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationServiceSetRuleActions':
        """
        Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRuleCondition']]:
        """
        Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Indicates whether the rule is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        A description of this rule's purpose.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationAction":
            suggest = "automation_action"
        elif key == "eventAction":
            suggest = "event_action"
        elif key == "pagerdutyAutomationAction":
            suggest = "pagerduty_automation_action"
        elif key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceSetRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceSetRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceSetRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotate: Optional[str] = None,
                 automation_action: Optional['outputs.EventOrchestrationServiceSetRuleActionsAutomationAction'] = None,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsExtraction']] = None,
                 pagerduty_automation_action: Optional['outputs.EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction'] = None,
                 priority: Optional[str] = None,
                 route_to: Optional[str] = None,
                 severity: Optional[str] = None,
                 suppress: Optional[bool] = None,
                 suspend: Optional[int] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsVariable']] = None):
        """
        :param str annotate: Add this text as a note on the resulting incident.
        :param 'EventOrchestrationServiceSetRuleActionsAutomationActionArgs' automation_action: Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationServiceSetRuleActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param 'EventOrchestrationServiceSetRuleActionsPagerdutyAutomationActionArgs' pagerduty_automation_action: Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
        :param str priority: The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        :param str route_to: The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param bool suppress: Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        :param int suspend: The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        :param Sequence['EventOrchestrationServiceSetRuleActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationServiceSetRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotate=annotate,
            automation_action=automation_action,
            event_action=event_action,
            extractions=extractions,
            pagerduty_automation_action=pagerduty_automation_action,
            priority=priority,
            route_to=route_to,
            severity=severity,
            suppress=suppress,
            suspend=suspend,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotate: Optional[str] = None,
             automation_action: Optional['outputs.EventOrchestrationServiceSetRuleActionsAutomationAction'] = None,
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsExtraction']] = None,
             pagerduty_automation_action: Optional['outputs.EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction'] = None,
             priority: Optional[str] = None,
             route_to: Optional[str] = None,
             severity: Optional[str] = None,
             suppress: Optional[bool] = None,
             suspend: Optional[int] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotate is not None:
            _setter("annotate", annotate)
        if automation_action is not None:
            _setter("automation_action", automation_action)
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if pagerduty_automation_action is not None:
            _setter("pagerduty_automation_action", pagerduty_automation_action)
        if priority is not None:
            _setter("priority", priority)
        if route_to is not None:
            _setter("route_to", route_to)
        if severity is not None:
            _setter("severity", severity)
        if suppress is not None:
            _setter("suppress", suppress)
        if suspend is not None:
            _setter("suspend", suspend)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def annotate(self) -> Optional[str]:
        """
        Add this text as a note on the resulting incident.
        """
        return pulumi.get(self, "annotate")

    @property
    @pulumi.getter(name="automationAction")
    def automation_action(self) -> Optional['outputs.EventOrchestrationServiceSetRuleActionsAutomationAction']:
        """
        Create a [Webhook](https://support.pagerduty.com/docs/event-orchestration#webhooks) associated with the resulting incident.
        """
        return pulumi.get(self, "automation_action")

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter(name="pagerdutyAutomationAction")
    def pagerduty_automation_action(self) -> Optional['outputs.EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction']:
        """
        Configure a [Process Automation](https://support.pagerduty.com/docs/event-orchestration#process-automation) associated with the resulting incident.
        """
        return pulumi.get(self, "pagerduty_automation_action")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The ID of the priority you want to set on resulting incident. Consider using the `get_priority` data source.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> Optional[str]:
        """
        The ID of a Set from this Service Orchestration whose rules you also want to use with events that match this rule.
        """
        return pulumi.get(self, "route_to")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def suppress(self) -> Optional[bool]:
        """
        Set whether the resulting alert is suppressed. Suppressed alerts will not trigger an incident.
        """
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter
    def suspend(self) -> Optional[int]:
        """
        The number of seconds to suspend the resulting alert before triggering. This effectively pauses incident notifications. If a `resolve` event arrives before the alert triggers then PagerDuty won't create an incident for this alert.
        """
        return pulumi.get(self, "suspend")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSend":
            suggest = "auto_send"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceSetRuleActionsAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceSetRuleActionsAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceSetRuleActionsAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 url: str,
                 auto_send: Optional[bool] = None,
                 headers: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeader']] = None,
                 parameters: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameter']] = None):
        """
        :param str name: The name of the variable
        :param str url: The API endpoint where PagerDuty's servers will send the webhook request.
        :param bool auto_send: When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        :param Sequence['EventOrchestrationServiceSetRuleActionsAutomationActionHeaderArgs'] headers: Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        :param Sequence['EventOrchestrationServiceSetRuleActionsAutomationActionParameterArgs'] parameters: Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        EventOrchestrationServiceSetRuleActionsAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            url=url,
            auto_send=auto_send,
            headers=headers,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             url: str,
             auto_send: Optional[bool] = None,
             headers: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeader']] = None,
             parameters: Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("url", url)
        if auto_send is not None:
            _setter("auto_send", auto_send)
        if headers is not None:
            _setter("headers", headers)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The API endpoint where PagerDuty's servers will send the webhook request.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="autoSend")
    def auto_send(self) -> Optional[bool]:
        """
        When true, PagerDuty's servers will automatically send this webhook request as soon as the resulting incident is created. When false, your incident responder will be able to manually trigger the Webhook via the PagerDuty website and mobile app.
        """
        return pulumi.get(self, "auto_send")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeader']]:
        """
        Specify custom key/value pairs that'll be sent with the webhook request as request headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameter']]:
        """
        Specify custom key/value pairs that'll be included in the webhook request's JSON payload.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsAutomationActionHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceSetRuleActionsAutomationActionHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsAutomationActionParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Name to identify the parameter
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceSetRuleActionsAutomationActionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name to identify the parameter
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationServiceSetRuleActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_id: str):
        """
        :param str action_id: Id of the Process Automation action to be triggered.
        """
        EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_id=action_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_id", action_id)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        """
        Id of the Process Automation action to be triggered.
        """
        return pulumi.get(self, "action_id")


@pulumi.output_type
class EventOrchestrationServiceSetRuleActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationServiceSetRuleActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationServiceSetRuleCondition(dict):
    def __init__(__self__, *,
                 expression: str):
        """
        :param str expression: A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        EventOrchestrationServiceSetRuleCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class EventOrchestrationUnroutedCatchAll(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationUnroutedCatchAllActions'):
        """
        :param 'EventOrchestrationUnroutedCatchAllActionsArgs' actions: These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        EventOrchestrationUnroutedCatchAll._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationUnroutedCatchAllActions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationUnroutedCatchAllActions':
        """
        These are the actions that will be taken to change the resulting alert and incident. `catch_all` supports all actions described above for `rule` _except_ `route_to` action.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class EventOrchestrationUnroutedCatchAllActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventAction":
            suggest = "event_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationUnroutedCatchAllActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationUnroutedCatchAllActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationUnroutedCatchAllActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsExtraction']] = None,
                 severity: Optional[str] = None,
                 suppress: Optional[bool] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsVariable']] = None):
        """
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationUnroutedCatchAllActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param Sequence['EventOrchestrationUnroutedCatchAllActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationUnroutedCatchAllActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_action=event_action,
            extractions=extractions,
            severity=severity,
            suppress=suppress,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsExtraction']] = None,
             severity: Optional[str] = None,
             suppress: Optional[bool] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if severity is not None:
            _setter("severity", severity)
        if suppress is not None:
            _setter("suppress", suppress)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def suppress(self) -> Optional[bool]:
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedCatchAllActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationUnroutedCatchAllActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationUnroutedCatchAllActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationUnroutedCatchAllActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationUnroutedCatchAllActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationUnroutedSet(dict):
    def __init__(__self__, *,
                 id: str,
                 rules: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRule']] = None):
        """
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        EventOrchestrationUnroutedSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             rules: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRule']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedSetRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class EventOrchestrationUnroutedSetRule(dict):
    def __init__(__self__, *,
                 actions: 'outputs.EventOrchestrationUnroutedSetRuleActions',
                 conditions: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleCondition']] = None,
                 disabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param 'EventOrchestrationUnroutedSetRuleActionsArgs' actions: Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        :param Sequence['EventOrchestrationUnroutedSetRuleConditionArgs'] conditions: Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        :param bool disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param str id: The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        :param str label: A description of this rule's purpose.
        """
        EventOrchestrationUnroutedSetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            conditions=conditions,
            disabled=disabled,
            id=id,
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.EventOrchestrationUnroutedSetRuleActions',
             conditions: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleCondition']] = None,
             disabled: Optional[bool] = None,
             id: Optional[str] = None,
             label: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if conditions is not None:
            _setter("conditions", conditions)
        if disabled is not None:
            _setter("disabled", disabled)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.EventOrchestrationUnroutedSetRuleActions':
        """
        Actions that will be taken to change the resulting alert and incident, when an event matches this rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleCondition']]:
        """
        Each of these conditions is evaluated to check if an event matches this rule. The rule is considered a match if any of these conditions match. If none are provided, the event will `always` match against the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Indicates whether the rule is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this set of rules. Rules in other sets can route events into this set using the rule's `route_to` property.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        A description of this rule's purpose.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EventOrchestrationUnroutedSetRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventAction":
            suggest = "event_action"
        elif key == "routeTo":
            suggest = "route_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventOrchestrationUnroutedSetRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventOrchestrationUnroutedSetRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventOrchestrationUnroutedSetRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_action: Optional[str] = None,
                 extractions: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsExtraction']] = None,
                 route_to: Optional[str] = None,
                 severity: Optional[str] = None,
                 variables: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsVariable']] = None):
        """
        :param str event_action: sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        :param Sequence['EventOrchestrationUnroutedSetRuleActionsExtractionArgs'] extractions: Replace any CEF field or Custom Details object field using custom variables.
        :param str route_to: The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.
        :param str severity: sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        :param Sequence['EventOrchestrationUnroutedSetRuleActionsVariableArgs'] variables: Populate variables from event payloads and use those variables in other event actions.
        """
        EventOrchestrationUnroutedSetRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_action=event_action,
            extractions=extractions,
            route_to=route_to,
            severity=severity,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_action: Optional[str] = None,
             extractions: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsExtraction']] = None,
             route_to: Optional[str] = None,
             severity: Optional[str] = None,
             variables: Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsVariable']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if event_action is not None:
            _setter("event_action", event_action)
        if extractions is not None:
            _setter("extractions", extractions)
        if route_to is not None:
            _setter("route_to", route_to)
        if severity is not None:
            _setter("severity", severity)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> Optional[str]:
        """
        sets whether the resulting alert status is trigger or resolve. Allowed values are: `trigger`, `resolve`
        """
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsExtraction']]:
        """
        Replace any CEF field or Custom Details object field using custom variables.
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter(name="routeTo")
    def route_to(self) -> Optional[str]:
        """
        The ID of a Set from this Unrouted Orchestration whose rules you also want to use with events that match this rule.
        """
        return pulumi.get(self, "route_to")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        sets Severity of the resulting alert. Allowed values are: `info`, `error`, `warning`, `critical`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.EventOrchestrationUnroutedSetRuleActionsVariable']]:
        """
        Populate variables from event payloads and use those variables in other event actions.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class EventOrchestrationUnroutedSetRuleActionsExtraction(dict):
    def __init__(__self__, *,
                 target: str,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str target: The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        :param str regex: A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        :param str source: The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        :param str template: A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
               * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
               * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        EventOrchestrationUnroutedSetRuleActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            regex=regex,
            source=source,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             regex: Optional[str] = None,
             source: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The PagerDuty Common Event Format [PD-CEF](https://support.pagerduty.com/docs/pd-cef) field that will be set with the value from the `template` or based on `regex` and `source` fields.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        A [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) that will be matched against field specified via the `source` argument. If the regex contains one or more capture groups, their values will be extracted and appended together. If it contains no capture groups, the whole match is used. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The path to the event field where the `regex` will be applied to extract a value. You can use any valid [PCL path](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview#paths) like `event.summary` and you can reference previously-defined variables using a path like `variables.hostname`. This field can be ignored for `template` based extractions.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A string that will be used to populate the `target` field. You can reference variables or event data within your template using double curly braces. For example:
        * Use variables named `ip` and `subnet` with a template like: `{{variables.ip}}/{{variables.subnet}}`
        * Combine the event severity & summary with template like: `{{event.severity}}:{{event.summary}}`
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class EventOrchestrationUnroutedSetRuleActionsVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: str,
                 value: str):
        """
        :param str name: The name of the variable
        :param str path: Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
        :param str type: Only `regex` is supported
        :param str value: The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        EventOrchestrationUnroutedSetRuleActionsVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to a field in an event, in dot-notation. This supports both [PD-CEF](https://support.pagerduty.com/docs/pd-cef) and non-CEF fields. Eg: Use `event.summary` for the `summary` CEF field. Use `raw_event.fieldname` to read from the original event `fieldname` data.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Only `regex` is supported
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Regex expression to match against. Must use valid [RE2 regular expression](https://github.com/google/re2/wiki/Syntax) syntax.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventOrchestrationUnroutedSetRuleCondition(dict):
    def __init__(__self__, *,
                 expression: str):
        """
        :param str expression: A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        EventOrchestrationUnroutedSetRuleCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        A [PCL condition](https://developer.pagerduty.com/docs/ZG9jOjM1NTE0MDc0-pcl-overview) string.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class IncidentWorkflowStep(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 id: Optional[str] = None,
                 inputs: Optional[Sequence['outputs.IncidentWorkflowStepInput']] = None):
        """
        :param str action: The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
        :param str name: The name of the workflow step.
        :param str id: The ID of the incident workflow.
        :param Sequence['IncidentWorkflowStepInputArgs'] inputs: The list of inputs for the workflow action.
        """
        IncidentWorkflowStep._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            name=name,
            id=id,
            inputs=inputs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             name: str,
             id: Optional[str] = None,
             inputs: Optional[Sequence['outputs.IncidentWorkflowStepInput']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("name", name)
        if id is not None:
            _setter("id", id)
        if inputs is not None:
            _setter("inputs", inputs)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action id for the workflow step, including the version. A list of actions available can be retrieved using the [PagerDuty API](https://developer.pagerduty.com/api-reference/aa192a25fac39-list-actions).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workflow step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the incident workflow.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inputs(self) -> Optional[Sequence['outputs.IncidentWorkflowStepInput']]:
        """
        The list of inputs for the workflow action.
        """
        return pulumi.get(self, "inputs")


@pulumi.output_type
class IncidentWorkflowStepInput(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 generated: Optional[bool] = None):
        """
        :param str name: The name of the input.
        :param str value: The value of the input.
        """
        IncidentWorkflowStepInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
            generated=generated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             generated: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)
        if generated is not None:
            _setter("generated", generated)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the input.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the input.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def generated(self) -> Optional[bool]:
        return pulumi.get(self, "generated")


@pulumi.output_type
class ResponsePlayResponder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escalationRules":
            suggest = "escalation_rules"
        elif key == "numLoops":
            suggest = "num_loops"
        elif key == "onCallHandoffNotifications":
            suggest = "on_call_handoff_notifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponsePlayResponder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponsePlayResponder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponsePlayResponder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 escalation_rules: Optional[Sequence['outputs.ResponsePlayResponderEscalationRule']] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 num_loops: Optional[int] = None,
                 on_call_handoff_notifications: Optional[str] = None,
                 services: Optional[Sequence['outputs.ResponsePlayResponderService']] = None,
                 teams: Optional[Sequence['outputs.ResponsePlayResponderTeam']] = None,
                 type: Optional[str] = None):
        """
        :param str description: Description of escalation policy
        :param Sequence['ResponsePlayResponderEscalationRuleArgs'] escalation_rules: The escalation rules
        :param str id: ID of the user defined as the responder
        :param str name: Name of the escalation policy
        :param int num_loops: The number of times the escalation policy will repeat after reaching the end of its escalation.
        :param str on_call_handoff_notifications: Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "if_has_services". Could be "if_has_services", "always
        :param Sequence['ResponsePlayResponderServiceArgs'] services: There can be multiple services associated with a policy.
        :param Sequence['ResponsePlayResponderTeamArgs'] teams: Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
        :param str type: Type of object of the target. Supported types are `user_reference`, `schedule_reference`.
        """
        ResponsePlayResponder._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            escalation_rules=escalation_rules,
            id=id,
            name=name,
            num_loops=num_loops,
            on_call_handoff_notifications=on_call_handoff_notifications,
            services=services,
            teams=teams,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             escalation_rules: Optional[Sequence['outputs.ResponsePlayResponderEscalationRule']] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             num_loops: Optional[int] = None,
             on_call_handoff_notifications: Optional[str] = None,
             services: Optional[Sequence['outputs.ResponsePlayResponderService']] = None,
             teams: Optional[Sequence['outputs.ResponsePlayResponderTeam']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if escalation_rules is not None:
            _setter("escalation_rules", escalation_rules)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if num_loops is not None:
            _setter("num_loops", num_loops)
        if on_call_handoff_notifications is not None:
            _setter("on_call_handoff_notifications", on_call_handoff_notifications)
        if services is not None:
            _setter("services", services)
        if teams is not None:
            _setter("teams", teams)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of escalation policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="escalationRules")
    def escalation_rules(self) -> Optional[Sequence['outputs.ResponsePlayResponderEscalationRule']]:
        """
        The escalation rules
        """
        return pulumi.get(self, "escalation_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the escalation policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numLoops")
    def num_loops(self) -> Optional[int]:
        """
        The number of times the escalation policy will repeat after reaching the end of its escalation.
        """
        return pulumi.get(self, "num_loops")

    @property
    @pulumi.getter(name="onCallHandoffNotifications")
    def on_call_handoff_notifications(self) -> Optional[str]:
        """
        Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to "if_has_services". Could be "if_has_services", "always
        """
        return pulumi.get(self, "on_call_handoff_notifications")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.ResponsePlayResponderService']]:
        """
        There can be multiple services associated with a policy.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence['outputs.ResponsePlayResponderTeam']]:
        """
        Teams associated with the policy. Account must have the `teams` ability to use this parameter. There can be multiple teams associated with a policy.
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of object of the target. Supported types are `user_reference`, `schedule_reference`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResponsePlayResponderEscalationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escalationDelayInMinutes":
            suggest = "escalation_delay_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponsePlayResponderEscalationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponsePlayResponderEscalationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponsePlayResponderEscalationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 targets: Sequence['outputs.ResponsePlayResponderEscalationRuleTarget'],
                 escalation_delay_in_minutes: Optional[int] = None,
                 id: Optional[str] = None):
        """
        :param Sequence['ResponsePlayResponderEscalationRuleTargetArgs'] targets: The targets an incident should be assigned to upon reaching this rule.
        :param int escalation_delay_in_minutes: The number of minutes before an unacknowledged incident escalates away from this rule.
        :param str id: ID of the user defined as the responder
        """
        ResponsePlayResponderEscalationRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            targets=targets,
            escalation_delay_in_minutes=escalation_delay_in_minutes,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             targets: Sequence['outputs.ResponsePlayResponderEscalationRuleTarget'],
             escalation_delay_in_minutes: Optional[int] = None,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("targets", targets)
        if escalation_delay_in_minutes is not None:
            _setter("escalation_delay_in_minutes", escalation_delay_in_minutes)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.ResponsePlayResponderEscalationRuleTarget']:
        """
        The targets an incident should be assigned to upon reaching this rule.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="escalationDelayInMinutes")
    def escalation_delay_in_minutes(self) -> Optional[int]:
        """
        The number of minutes before an unacknowledged incident escalates away from this rule.
        """
        return pulumi.get(self, "escalation_delay_in_minutes")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ResponsePlayResponderEscalationRuleTarget(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: ID of the user defined as the responder
        :param str type: A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        ResponsePlayResponderEscalationRuleTarget._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResponsePlayResponderService(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: ID of the user defined as the responder
        :param str type: A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        ResponsePlayResponderService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResponsePlayResponderTeam(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str type: A string that determines the schema of the object. If not set, the default value is "response_play".
        :param str id: ID of the user defined as the responder
        """
        ResponsePlayResponderTeam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ResponsePlaySubscriber(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: ID of the user defined as the responder
        :param str type: A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        ResponsePlaySubscriber._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the user defined as the responder
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        A string that determines the schema of the object. If not set, the default value is "response_play".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RulesetRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventActions":
            suggest = "event_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesetRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesetRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesetRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotates: Optional[Sequence['outputs.RulesetRuleActionsAnnotate']] = None,
                 event_actions: Optional[Sequence['outputs.RulesetRuleActionsEventAction']] = None,
                 extractions: Optional[Sequence['outputs.RulesetRuleActionsExtraction']] = None,
                 priorities: Optional[Sequence['outputs.RulesetRuleActionsPriority']] = None,
                 routes: Optional[Sequence['outputs.RulesetRuleActionsRoute']] = None,
                 severities: Optional[Sequence['outputs.RulesetRuleActionsSeverity']] = None,
                 suppresses: Optional[Sequence['outputs.RulesetRuleActionsSuppress']] = None,
                 suspends: Optional[Sequence['outputs.RulesetRuleActionsSuspend']] = None):
        """
        :param Sequence['RulesetRuleActionsAnnotateArgs'] annotates: Note added to the event.
        :param Sequence['RulesetRuleActionsEventActionArgs'] event_actions: An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
        :param Sequence['RulesetRuleActionsExtractionArgs'] extractions: Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
        :param Sequence['RulesetRuleActionsPriorityArgs'] priorities: The ID of the priority applied to the event.
        :param Sequence['RulesetRuleActionsRouteArgs'] routes: The ID of the service where the event will be routed.
        :param Sequence['RulesetRuleActionsSeverityArgs'] severities: The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
        :param Sequence['RulesetRuleActionsSuppressArgs'] suppresses: Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
        :param Sequence['RulesetRuleActionsSuspendArgs'] suspends: An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
        """
        RulesetRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotates=annotates,
            event_actions=event_actions,
            extractions=extractions,
            priorities=priorities,
            routes=routes,
            severities=severities,
            suppresses=suppresses,
            suspends=suspends,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotates: Optional[Sequence['outputs.RulesetRuleActionsAnnotate']] = None,
             event_actions: Optional[Sequence['outputs.RulesetRuleActionsEventAction']] = None,
             extractions: Optional[Sequence['outputs.RulesetRuleActionsExtraction']] = None,
             priorities: Optional[Sequence['outputs.RulesetRuleActionsPriority']] = None,
             routes: Optional[Sequence['outputs.RulesetRuleActionsRoute']] = None,
             severities: Optional[Sequence['outputs.RulesetRuleActionsSeverity']] = None,
             suppresses: Optional[Sequence['outputs.RulesetRuleActionsSuppress']] = None,
             suspends: Optional[Sequence['outputs.RulesetRuleActionsSuspend']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotates is not None:
            _setter("annotates", annotates)
        if event_actions is not None:
            _setter("event_actions", event_actions)
        if extractions is not None:
            _setter("extractions", extractions)
        if priorities is not None:
            _setter("priorities", priorities)
        if routes is not None:
            _setter("routes", routes)
        if severities is not None:
            _setter("severities", severities)
        if suppresses is not None:
            _setter("suppresses", suppresses)
        if suspends is not None:
            _setter("suspends", suspends)

    @property
    @pulumi.getter
    def annotates(self) -> Optional[Sequence['outputs.RulesetRuleActionsAnnotate']]:
        """
        Note added to the event.
        """
        return pulumi.get(self, "annotates")

    @property
    @pulumi.getter(name="eventActions")
    def event_actions(self) -> Optional[Sequence['outputs.RulesetRuleActionsEventAction']]:
        """
        An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
        """
        return pulumi.get(self, "event_actions")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.RulesetRuleActionsExtraction']]:
        """
        Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter
    def priorities(self) -> Optional[Sequence['outputs.RulesetRuleActionsPriority']]:
        """
        The ID of the priority applied to the event.
        """
        return pulumi.get(self, "priorities")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.RulesetRuleActionsRoute']]:
        """
        The ID of the service where the event will be routed.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence['outputs.RulesetRuleActionsSeverity']]:
        """
        The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`warning`,`error`, or `critical`.
        """
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def suppresses(self) -> Optional[Sequence['outputs.RulesetRuleActionsSuppress']]:
        """
        Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident). Note: If a threshold is set, the rule must also have a `route` action.
        """
        return pulumi.get(self, "suppresses")

    @property
    @pulumi.getter
    def suspends(self) -> Optional[Sequence['outputs.RulesetRuleActionsSuspend']]:
        """
        An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering. Note: A rule with a `suspend` action must also have a `route` action.
        """
        return pulumi.get(self, "suspends")


@pulumi.output_type
class RulesetRuleActionsAnnotate(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsAnnotate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsEventAction(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsEventAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsExtraction(dict):
    def __init__(__self__, *,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 target: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str regex: The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
               
               *- **OR** -*
        :param str source: Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        :param str target: Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
               
               *NOTE: A rule can have multiple `extraction` objects attributed to it.*
        :param str template: A customized field message. This can also include variables extracted from the payload by using string interpolation.
        """
        RulesetRuleActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            regex=regex,
            source=source,
            target=target,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             regex: Optional[str] = None,
             source: Optional[str] = None,
             target: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if target is not None:
            _setter("target", target)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).

        *- **OR** -*
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.

        *NOTE: A rule can have multiple `extraction` objects attributed to it.*
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A customized field message. This can also include variables extracted from the payload by using string interpolation.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class RulesetRuleActionsPriority(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsPriority._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsRoute(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsRoute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsSeverity(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsSuppress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdTimeAmount":
            suggest = "threshold_time_amount"
        elif key == "thresholdTimeUnit":
            suggest = "threshold_time_unit"
        elif key == "thresholdValue":
            suggest = "threshold_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesetRuleActionsSuppress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesetRuleActionsSuppress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesetRuleActionsSuppress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 threshold_time_amount: Optional[int] = None,
                 threshold_time_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None,
                 value: Optional[bool] = None):
        """
        :param int threshold_time_amount: The number value of the `threshold_time_unit` before an incident is created. Must be greater than 0.
        :param str threshold_time_unit: The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.
        :param int threshold_value: The number of alerts that should be suppressed. Must be greater than 0.
        :param bool value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsSuppress._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            threshold_time_amount=threshold_time_amount,
            threshold_time_unit=threshold_time_unit,
            threshold_value=threshold_value,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             threshold_time_amount: Optional[int] = None,
             threshold_time_unit: Optional[str] = None,
             threshold_value: Optional[int] = None,
             value: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if threshold_time_amount is not None:
            _setter("threshold_time_amount", threshold_time_amount)
        if threshold_time_unit is not None:
            _setter("threshold_time_unit", threshold_time_unit)
        if threshold_value is not None:
            _setter("threshold_value", threshold_value)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="thresholdTimeAmount")
    def threshold_time_amount(self) -> Optional[int]:
        """
        The number value of the `threshold_time_unit` before an incident is created. Must be greater than 0.
        """
        return pulumi.get(self, "threshold_time_amount")

    @property
    @pulumi.getter(name="thresholdTimeUnit")
    def threshold_time_unit(self) -> Optional[str]:
        """
        The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.
        """
        return pulumi.get(self, "threshold_time_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        """
        The number of alerts that should be suppressed. Must be greater than 0.
        """
        return pulumi.get(self, "threshold_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[bool]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleActionsSuspend(dict):
    def __init__(__self__, *,
                 value: Optional[int] = None):
        """
        :param int value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleActionsSuspend._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleConditions(dict):
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 subconditions: Optional[Sequence['outputs.RulesetRuleConditionsSubcondition']] = None):
        """
        :param str operator: Operator to combine sub-conditions. Can be `and` or `or`.
        :param Sequence['RulesetRuleConditionsSubconditionArgs'] subconditions: List of sub-conditions that define the condition.
        """
        RulesetRuleConditions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            subconditions=subconditions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[str] = None,
             subconditions: Optional[Sequence['outputs.RulesetRuleConditionsSubcondition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operator is not None:
            _setter("operator", operator)
        if subconditions is not None:
            _setter("subconditions", subconditions)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator to combine sub-conditions. Can be `and` or `or`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def subconditions(self) -> Optional[Sequence['outputs.RulesetRuleConditionsSubcondition']]:
        """
        List of sub-conditions that define the condition.
        """
        return pulumi.get(self, "subconditions")


@pulumi.output_type
class RulesetRuleConditionsSubcondition(dict):
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.RulesetRuleConditionsSubconditionParameter']] = None):
        """
        :param str operator: Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
        :param Sequence['RulesetRuleConditionsSubconditionParameterArgs'] parameters: Parameter for the sub-condition. It requires both a `path` and `value` to be set.
        """
        RulesetRuleConditionsSubcondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[str] = None,
             parameters: Optional[Sequence['outputs.RulesetRuleConditionsSubconditionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operator is not None:
            _setter("operator", operator)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.RulesetRuleConditionsSubconditionParameter']]:
        """
        Parameter for the sub-condition. It requires both a `path` and `value` to be set.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RulesetRuleConditionsSubconditionParameter(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleConditionsSubconditionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if path is not None:
            _setter("path", path)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetRuleTimeFrame(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeBetweens":
            suggest = "active_betweens"
        elif key == "scheduledWeeklies":
            suggest = "scheduled_weeklies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesetRuleTimeFrame. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesetRuleTimeFrame.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesetRuleTimeFrame.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_betweens: Optional[Sequence['outputs.RulesetRuleTimeFrameActiveBetween']] = None,
                 scheduled_weeklies: Optional[Sequence['outputs.RulesetRuleTimeFrameScheduledWeekly']] = None):
        """
        :param Sequence['RulesetRuleTimeFrameActiveBetweenArgs'] active_betweens: Values for executing the rule during a specific time period.
        :param Sequence['RulesetRuleTimeFrameScheduledWeeklyArgs'] scheduled_weeklies: Values for executing the rule on a recurring schedule.
        """
        RulesetRuleTimeFrame._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active_betweens=active_betweens,
            scheduled_weeklies=scheduled_weeklies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active_betweens: Optional[Sequence['outputs.RulesetRuleTimeFrameActiveBetween']] = None,
             scheduled_weeklies: Optional[Sequence['outputs.RulesetRuleTimeFrameScheduledWeekly']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if active_betweens is not None:
            _setter("active_betweens", active_betweens)
        if scheduled_weeklies is not None:
            _setter("scheduled_weeklies", scheduled_weeklies)

    @property
    @pulumi.getter(name="activeBetweens")
    def active_betweens(self) -> Optional[Sequence['outputs.RulesetRuleTimeFrameActiveBetween']]:
        """
        Values for executing the rule during a specific time period.
        """
        return pulumi.get(self, "active_betweens")

    @property
    @pulumi.getter(name="scheduledWeeklies")
    def scheduled_weeklies(self) -> Optional[Sequence['outputs.RulesetRuleTimeFrameScheduledWeekly']]:
        """
        Values for executing the rule on a recurring schedule.
        """
        return pulumi.get(self, "scheduled_weeklies")


@pulumi.output_type
class RulesetRuleTimeFrameActiveBetween(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesetRuleTimeFrameActiveBetween. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesetRuleTimeFrameActiveBetween.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesetRuleTimeFrameActiveBetween.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[int] = None,
                 start_time: Optional[int] = None):
        """
        :param int start_time: A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
        """
        RulesetRuleTimeFrameActiveBetween._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: Optional[int] = None,
             start_time: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class RulesetRuleTimeFrameScheduledWeekly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesetRuleTimeFrameScheduledWeekly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesetRuleTimeFrameScheduledWeekly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesetRuleTimeFrameScheduledWeekly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[int] = None,
                 start_time: Optional[int] = None,
                 timezone: Optional[str] = None,
                 weekdays: Optional[Sequence[int]] = None):
        """
        :param int duration: Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `start_time`.
        :param int start_time: A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
        :param str timezone: [The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = "America/Toronto"`
        :param Sequence[int] weekdays: An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
        """
        RulesetRuleTimeFrameScheduledWeekly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            start_time=start_time,
            timezone=timezone,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[int] = None,
             start_time: Optional[int] = None,
             timezone: Optional[str] = None,
             weekdays: Optional[Sequence[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if duration is not None:
            _setter("duration", duration)
        if start_time is not None:
            _setter("start_time", start_time)
        if timezone is not None:
            _setter("timezone", timezone)
        if weekdays is not None:
            _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        Length of time the schedule will be active in milliseconds. For example `duration = 2 * 60 * 60 * 1000` if you want your rule to apply for 2 hours, from the specified `start_time`.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        A Unix timestamp in milliseconds which is combined with the `timezone` to determine the time this rule will start on each specified `weekday`. Note that the _date_ of the timestamp you specify does **not** matter, except that it lets you determine whether daylight saving time is in effect so that you use the correct UTC offset for the timezone you specify. In practice, you may want to use the `time_static` resource to generate this value, as demonstrated in the `resource.pagerduty_ruleset_rule.foo` code example at the top of this page. To generate this timestamp manually, if you want your rule to apply starting at 9:30am in the `America/New_York` timezone, use your programing language of choice to determine a Unix timestamp that represents 9:30am in that timezone, like [1554989400000](https://www.epochconverter.com/timezones?q=1554989400000&tz=America%2FNew_York).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        [The name of the timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the given schedule, which will be used to determine UTC offset including adjustment for daylight saving time. For example: `timezone = "America/Toronto"`
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        """
        An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class RulesetRuleVariable(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.RulesetRuleVariableParameter']] = None,
                 type: Optional[str] = None):
        RulesetRuleVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             parameters: Optional[Sequence['outputs.RulesetRuleVariableParameter']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.RulesetRuleVariableParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class RulesetRuleVariableParameter(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        RulesetRuleVariableParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if path is not None:
            _setter("path", path)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RulesetTeam(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The ID of the ruleset.
        """
        RulesetTeam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the ruleset.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ScheduleFinalSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renderedCoveragePercentage":
            suggest = "rendered_coverage_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleFinalSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleFinalSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleFinalSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 rendered_coverage_percentage: Optional[str] = None):
        """
        :param str name: The name of the schedule.
        """
        ScheduleFinalSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            rendered_coverage_percentage=rendered_coverage_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             rendered_coverage_percentage: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if rendered_coverage_percentage is not None:
            _setter("rendered_coverage_percentage", rendered_coverage_percentage)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the schedule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="renderedCoveragePercentage")
    def rendered_coverage_percentage(self) -> Optional[str]:
        return pulumi.get(self, "rendered_coverage_percentage")


@pulumi.output_type
class ScheduleLayer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rotationTurnLengthSeconds":
            suggest = "rotation_turn_length_seconds"
        elif key == "rotationVirtualStart":
            suggest = "rotation_virtual_start"
        elif key == "renderedCoveragePercentage":
            suggest = "rendered_coverage_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleLayer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleLayer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleLayer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rotation_turn_length_seconds: int,
                 rotation_virtual_start: str,
                 start: str,
                 users: Sequence[str],
                 end: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 rendered_coverage_percentage: Optional[str] = None,
                 restrictions: Optional[Sequence['outputs.ScheduleLayerRestriction']] = None):
        """
        :param int rotation_turn_length_seconds: The duration of each on-call shift in `seconds`.
        :param str rotation_virtual_start: The effective start time of the schedule layer. This can be before the start time of the schedule.
        :param str start: The start time of the schedule layer.
        :param Sequence[str] users: The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
        :param str end: The end time of the schedule layer. If not specified, the layer does not end.
        :param str id: The ID of the schedule.
        :param str name: The name of the schedule layer.
        :param Sequence['ScheduleLayerRestrictionArgs'] restrictions: A schedule layer restriction block. Restriction blocks documented below.
        """
        ScheduleLayer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rotation_turn_length_seconds=rotation_turn_length_seconds,
            rotation_virtual_start=rotation_virtual_start,
            start=start,
            users=users,
            end=end,
            id=id,
            name=name,
            rendered_coverage_percentage=rendered_coverage_percentage,
            restrictions=restrictions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rotation_turn_length_seconds: int,
             rotation_virtual_start: str,
             start: str,
             users: Sequence[str],
             end: Optional[str] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             rendered_coverage_percentage: Optional[str] = None,
             restrictions: Optional[Sequence['outputs.ScheduleLayerRestriction']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("rotation_turn_length_seconds", rotation_turn_length_seconds)
        _setter("rotation_virtual_start", rotation_virtual_start)
        _setter("start", start)
        _setter("users", users)
        if end is not None:
            _setter("end", end)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if rendered_coverage_percentage is not None:
            _setter("rendered_coverage_percentage", rendered_coverage_percentage)
        if restrictions is not None:
            _setter("restrictions", restrictions)

    @property
    @pulumi.getter(name="rotationTurnLengthSeconds")
    def rotation_turn_length_seconds(self) -> int:
        """
        The duration of each on-call shift in `seconds`.
        """
        return pulumi.get(self, "rotation_turn_length_seconds")

    @property
    @pulumi.getter(name="rotationVirtualStart")
    def rotation_virtual_start(self) -> str:
        """
        The effective start time of the schedule layer. This can be before the start time of the schedule.
        """
        return pulumi.get(self, "rotation_virtual_start")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The start time of the schedule layer.
        """
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        """
        The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        The end time of the schedule layer. If not specified, the layer does not end.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the schedule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the schedule layer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="renderedCoveragePercentage")
    def rendered_coverage_percentage(self) -> Optional[str]:
        return pulumi.get(self, "rendered_coverage_percentage")

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[Sequence['outputs.ScheduleLayerRestriction']]:
        """
        A schedule layer restriction block. Restriction blocks documented below.
        """
        return pulumi.get(self, "restrictions")


@pulumi.output_type
class ScheduleLayerRestriction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "startTimeOfDay":
            suggest = "start_time_of_day"
        elif key == "startDayOfWeek":
            suggest = "start_day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleLayerRestriction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleLayerRestriction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleLayerRestriction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: int,
                 start_time_of_day: str,
                 type: str,
                 start_day_of_week: Optional[int] = None):
        """
        :param int duration_seconds: The duration of the restriction in `seconds`.
        :param str start_time_of_day: The start time in `HH:mm:ss` format.
        :param str type: Can be `daily_restriction` or `weekly_restriction`.
        :param int start_day_of_week: Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
        """
        ScheduleLayerRestriction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration_seconds=duration_seconds,
            start_time_of_day=start_time_of_day,
            type=type,
            start_day_of_week=start_day_of_week,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration_seconds: int,
             start_time_of_day: str,
             type: str,
             start_day_of_week: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("duration_seconds", duration_seconds)
        _setter("start_time_of_day", start_time_of_day)
        _setter("type", type)
        if start_day_of_week is not None:
            _setter("start_day_of_week", start_day_of_week)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> int:
        """
        The duration of the restriction in `seconds`.
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="startTimeOfDay")
    def start_time_of_day(self) -> str:
        """
        The start time in `HH:mm:ss` format.
        """
        return pulumi.get(self, "start_time_of_day")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `daily_restriction` or `weekly_restriction`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="startDayOfWeek")
    def start_day_of_week(self) -> Optional[int]:
        """
        Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
        """
        return pulumi.get(self, "start_day_of_week")


@pulumi.output_type
class ServiceAlertGroupingParameters(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.ServiceAlertGroupingParametersConfig'] = None,
                 type: Optional[str] = None):
        """
        :param 'ServiceAlertGroupingParametersConfigArgs' config: Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        ServiceAlertGroupingParameters._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config=config,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config: Optional['outputs.ServiceAlertGroupingParametersConfig'] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if config is not None:
            _setter("config", config)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ServiceAlertGroupingParametersConfig']:
        """
        Alert grouping parameters dependent on `type`. If `type` is set to `intelligent` or empty then `config` can be empty.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAlertGroupingParametersConfig(dict):
    def __init__(__self__, *,
                 aggregate: Optional[str] = None,
                 fields: Optional[Sequence[str]] = None,
                 timeout: Optional[int] = None):
        """
        :param str aggregate: One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
        :param Sequence[str] fields: Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
        :param int timeout: The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
        """
        ServiceAlertGroupingParametersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate=aggregate,
            fields=fields,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate: Optional[str] = None,
             fields: Optional[Sequence[str]] = None,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregate is not None:
            _setter("aggregate", aggregate)
        if fields is not None:
            _setter("fields", fields)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[str]:
        """
        One of `any` or `all`. This setting applies only when `type` is set to `content_based`. Group alerts based on one or all of `fields` value(s).
        """
        return pulumi.get(self, "aggregate")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        Alerts will be grouped together if the content of these fields match. This setting applies only when `type` is set to `content_based`.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The duration in minutes within which to automatically group incoming alerts. This setting applies only when `type` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ServiceAutoPauseNotificationsParameters(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 timeout: Optional[int] = None):
        """
        :param bool enabled: Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
        :param int timeout: Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.
               
               
               You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
               Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
               The block contains the following arguments:
        """
        ServiceAutoPauseNotificationsParameters._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Indicates in seconds how long alerts should be suspended before triggering. Allowed values: `120`, `180`, `300`, `600`, `900` if `enabled` is `true`. Must be omitted or set to `null` if `enabled` is `false`.


        You may specify one optional `incident_urgency_rule` block configuring what urgencies to use.
        Your PagerDuty account must have the `urgencies` ability to assign an incident urgency rule.
        The block contains the following arguments:
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ServiceDependencyDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dependentServices":
            suggest = "dependent_services"
        elif key == "supportingServices":
            suggest = "supporting_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDependencyDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDependencyDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDependencyDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dependent_services: Sequence['outputs.ServiceDependencyDependencyDependentService'],
                 supporting_services: Sequence['outputs.ServiceDependencyDependencySupportingService'],
                 type: Optional[str] = None):
        """
        :param Sequence['ServiceDependencyDependencyDependentServiceArgs'] dependent_services: The service that dependents on the supporting service. Dependency dependent service documented below.
        :param Sequence['ServiceDependencyDependencySupportingServiceArgs'] supporting_services: The service that supports the dependent service. Dependency supporting service documented below.
        :param str type: Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        ServiceDependencyDependency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dependent_services=dependent_services,
            supporting_services=supporting_services,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dependent_services: Sequence['outputs.ServiceDependencyDependencyDependentService'],
             supporting_services: Sequence['outputs.ServiceDependencyDependencySupportingService'],
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dependent_services", dependent_services)
        _setter("supporting_services", supporting_services)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="dependentServices")
    def dependent_services(self) -> Sequence['outputs.ServiceDependencyDependencyDependentService']:
        """
        The service that dependents on the supporting service. Dependency dependent service documented below.
        """
        return pulumi.get(self, "dependent_services")

    @property
    @pulumi.getter(name="supportingServices")
    def supporting_services(self) -> Sequence['outputs.ServiceDependencyDependencySupportingService']:
        """
        The service that supports the dependent service. Dependency supporting service documented below.
        """
        return pulumi.get(self, "supporting_services")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceDependencyDependencyDependentService(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The ID of the service dependency.
        :param str type: Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        ServiceDependencyDependencyDependentService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service dependency.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceDependencyDependencySupportingService(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The ID of the service dependency.
        :param str type: Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        ServiceDependencyDependencySupportingService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service dependency.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `business_service`,  `service`, `business_service_reference` or `technical_service_reference`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceEventRuleActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventActions":
            suggest = "event_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceEventRuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceEventRuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceEventRuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotates: Optional[Sequence['outputs.ServiceEventRuleActionsAnnotate']] = None,
                 event_actions: Optional[Sequence['outputs.ServiceEventRuleActionsEventAction']] = None,
                 extractions: Optional[Sequence['outputs.ServiceEventRuleActionsExtraction']] = None,
                 priorities: Optional[Sequence['outputs.ServiceEventRuleActionsPriority']] = None,
                 severities: Optional[Sequence['outputs.ServiceEventRuleActionsSeverity']] = None,
                 suppresses: Optional[Sequence['outputs.ServiceEventRuleActionsSuppress']] = None,
                 suspends: Optional[Sequence['outputs.ServiceEventRuleActionsSuspend']] = None):
        """
        :param Sequence['ServiceEventRuleActionsAnnotateArgs'] annotates: Note added to the event.
        :param Sequence['ServiceEventRuleActionsEventActionArgs'] event_actions: An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
        :param Sequence['ServiceEventRuleActionsExtractionArgs'] extractions: Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
        :param Sequence['ServiceEventRuleActionsPriorityArgs'] priorities: The ID of the priority applied to the event.
        :param Sequence['ServiceEventRuleActionsSeverityArgs'] severities: The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
        :param Sequence['ServiceEventRuleActionsSuppressArgs'] suppresses: Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
        :param Sequence['ServiceEventRuleActionsSuspendArgs'] suspends: An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
        """
        ServiceEventRuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotates=annotates,
            event_actions=event_actions,
            extractions=extractions,
            priorities=priorities,
            severities=severities,
            suppresses=suppresses,
            suspends=suspends,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotates: Optional[Sequence['outputs.ServiceEventRuleActionsAnnotate']] = None,
             event_actions: Optional[Sequence['outputs.ServiceEventRuleActionsEventAction']] = None,
             extractions: Optional[Sequence['outputs.ServiceEventRuleActionsExtraction']] = None,
             priorities: Optional[Sequence['outputs.ServiceEventRuleActionsPriority']] = None,
             severities: Optional[Sequence['outputs.ServiceEventRuleActionsSeverity']] = None,
             suppresses: Optional[Sequence['outputs.ServiceEventRuleActionsSuppress']] = None,
             suspends: Optional[Sequence['outputs.ServiceEventRuleActionsSuspend']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotates is not None:
            _setter("annotates", annotates)
        if event_actions is not None:
            _setter("event_actions", event_actions)
        if extractions is not None:
            _setter("extractions", extractions)
        if priorities is not None:
            _setter("priorities", priorities)
        if severities is not None:
            _setter("severities", severities)
        if suppresses is not None:
            _setter("suppresses", suppresses)
        if suspends is not None:
            _setter("suspends", suspends)

    @property
    @pulumi.getter
    def annotates(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsAnnotate']]:
        """
        Note added to the event.
        """
        return pulumi.get(self, "annotates")

    @property
    @pulumi.getter(name="eventActions")
    def event_actions(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsEventAction']]:
        """
        An object with a single `value` field. The value sets whether the resulting alert status is `trigger` or `resolve`.
        """
        return pulumi.get(self, "event_actions")

    @property
    @pulumi.getter
    def extractions(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsExtraction']]:
        """
        Allows you to copy important data from one event field to another. Extraction objects may use *either* of the following field structures:
        """
        return pulumi.get(self, "extractions")

    @property
    @pulumi.getter
    def priorities(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsPriority']]:
        """
        The ID of the priority applied to the event.
        """
        return pulumi.get(self, "priorities")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsSeverity']]:
        """
        The [severity level](https://support.pagerduty.com/docs/rulesets#section-set-severity-with-event-rules) of the event. Can be either `info`,`error`,`warning`, or `critical`.
        """
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def suppresses(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsSuppress']]:
        """
        Controls whether an alert is [suppressed](https://support.pagerduty.com/docs/rulesets#section-suppress-but-create-triggering-thresholds-with-event-rules) (does not create an incident).
        """
        return pulumi.get(self, "suppresses")

    @property
    @pulumi.getter
    def suspends(self) -> Optional[Sequence['outputs.ServiceEventRuleActionsSuspend']]:
        """
        An object with a single `value` field. The value sets the length of time to suspend the resulting alert before triggering.
        """
        return pulumi.get(self, "suspends")


@pulumi.output_type
class ServiceEventRuleActionsAnnotate(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsAnnotate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleActionsEventAction(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsEventAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleActionsExtraction(dict):
    def __init__(__self__, *,
                 regex: Optional[str] = None,
                 source: Optional[str] = None,
                 target: Optional[str] = None,
                 template: Optional[str] = None):
        """
        :param str regex: The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).
               
               *- **OR** -*
        :param str source: Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        :param str target: Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
               
               *NOTE: A rule can have multiple `extraction` objects attributed to it.*
        :param str template: A customized field message. This can also include variables extracted from the payload by using string interpolation.
        """
        ServiceEventRuleActionsExtraction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            regex=regex,
            source=source,
            target=target,
            template=template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             regex: Optional[str] = None,
             source: Optional[str] = None,
             target: Optional[str] = None,
             template: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if regex is not None:
            _setter("regex", regex)
        if source is not None:
            _setter("source", source)
        if target is not None:
            _setter("target", target)
        if template is not None:
            _setter("template", template)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        The conditions that need to be met for the extraction to happen. Must use valid [RE2 regular expression syntax](https://github.com/google/re2/wiki/Syntax).

        *- **OR** -*
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Field where the data is being copied from. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Field where the data is being copied to. Must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.

        *NOTE: A rule can have multiple `extraction` objects attributed to it.*
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        A customized field message. This can also include variables extracted from the payload by using string interpolation.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class ServiceEventRuleActionsPriority(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsPriority._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleActionsSeverity(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleActionsSuppress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdTimeAmount":
            suggest = "threshold_time_amount"
        elif key == "thresholdTimeUnit":
            suggest = "threshold_time_unit"
        elif key == "thresholdValue":
            suggest = "threshold_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceEventRuleActionsSuppress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceEventRuleActionsSuppress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceEventRuleActionsSuppress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 threshold_time_amount: Optional[int] = None,
                 threshold_time_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None,
                 value: Optional[bool] = None):
        """
        :param int threshold_time_amount: The number value of the `threshold_time_unit` before an incident is created.
        :param str threshold_time_unit: The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.
        :param int threshold_value: The number of alerts that should be suppressed.
        :param bool value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsSuppress._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            threshold_time_amount=threshold_time_amount,
            threshold_time_unit=threshold_time_unit,
            threshold_value=threshold_value,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             threshold_time_amount: Optional[int] = None,
             threshold_time_unit: Optional[str] = None,
             threshold_value: Optional[int] = None,
             value: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if threshold_time_amount is not None:
            _setter("threshold_time_amount", threshold_time_amount)
        if threshold_time_unit is not None:
            _setter("threshold_time_unit", threshold_time_unit)
        if threshold_value is not None:
            _setter("threshold_value", threshold_value)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="thresholdTimeAmount")
    def threshold_time_amount(self) -> Optional[int]:
        """
        The number value of the `threshold_time_unit` before an incident is created.
        """
        return pulumi.get(self, "threshold_time_amount")

    @property
    @pulumi.getter(name="thresholdTimeUnit")
    def threshold_time_unit(self) -> Optional[str]:
        """
        The `seconds`,`minutes`, or `hours` the `threshold_time_amount` should be measured.
        """
        return pulumi.get(self, "threshold_time_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        """
        The number of alerts that should be suppressed.
        """
        return pulumi.get(self, "threshold_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[bool]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleActionsSuspend(dict):
    def __init__(__self__, *,
                 value: Optional[int] = None):
        """
        :param int value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleActionsSuspend._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleConditions(dict):
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 subconditions: Optional[Sequence['outputs.ServiceEventRuleConditionsSubcondition']] = None):
        """
        :param str operator: Operator to combine sub-conditions. Can be `and` or `or`.
        :param Sequence['ServiceEventRuleConditionsSubconditionArgs'] subconditions: List of sub-conditions that define the condition.
        """
        ServiceEventRuleConditions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            subconditions=subconditions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[str] = None,
             subconditions: Optional[Sequence['outputs.ServiceEventRuleConditionsSubcondition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operator is not None:
            _setter("operator", operator)
        if subconditions is not None:
            _setter("subconditions", subconditions)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator to combine sub-conditions. Can be `and` or `or`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def subconditions(self) -> Optional[Sequence['outputs.ServiceEventRuleConditionsSubcondition']]:
        """
        List of sub-conditions that define the condition.
        """
        return pulumi.get(self, "subconditions")


@pulumi.output_type
class ServiceEventRuleConditionsSubcondition(dict):
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ServiceEventRuleConditionsSubconditionParameter']] = None):
        """
        :param str operator: Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
        :param Sequence['ServiceEventRuleConditionsSubconditionParameterArgs'] parameters: Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        """
        ServiceEventRuleConditionsSubcondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[str] = None,
             parameters: Optional[Sequence['outputs.ServiceEventRuleConditionsSubconditionParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operator is not None:
            _setter("operator", operator)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Type of operator to apply to the sub-condition. Can be `exists`,`nexists`,`equals`,`nequals`,`contains`,`ncontains`,`matches`, or `nmatches`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ServiceEventRuleConditionsSubconditionParameter']]:
        """
        Parameter for the sub-condition. It requires both a `path` and `value` to be set. The `path` value must be a [PagerDuty Common Event Format (PD-CEF)](https://support.pagerduty.com/docs/pd-cef) field.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ServiceEventRuleConditionsSubconditionParameter(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str path: Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleConditionsSubconditionParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if path is not None:
            _setter("path", path)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceEventRuleTimeFrame(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeBetweens":
            suggest = "active_betweens"
        elif key == "scheduledWeeklies":
            suggest = "scheduled_weeklies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceEventRuleTimeFrame. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceEventRuleTimeFrame.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceEventRuleTimeFrame.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_betweens: Optional[Sequence['outputs.ServiceEventRuleTimeFrameActiveBetween']] = None,
                 scheduled_weeklies: Optional[Sequence['outputs.ServiceEventRuleTimeFrameScheduledWeekly']] = None):
        """
        :param Sequence['ServiceEventRuleTimeFrameActiveBetweenArgs'] active_betweens: Values for executing the rule during a specific time period.
        :param Sequence['ServiceEventRuleTimeFrameScheduledWeeklyArgs'] scheduled_weeklies: Values for executing the rule on a recurring schedule.
        """
        ServiceEventRuleTimeFrame._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active_betweens=active_betweens,
            scheduled_weeklies=scheduled_weeklies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active_betweens: Optional[Sequence['outputs.ServiceEventRuleTimeFrameActiveBetween']] = None,
             scheduled_weeklies: Optional[Sequence['outputs.ServiceEventRuleTimeFrameScheduledWeekly']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if active_betweens is not None:
            _setter("active_betweens", active_betweens)
        if scheduled_weeklies is not None:
            _setter("scheduled_weeklies", scheduled_weeklies)

    @property
    @pulumi.getter(name="activeBetweens")
    def active_betweens(self) -> Optional[Sequence['outputs.ServiceEventRuleTimeFrameActiveBetween']]:
        """
        Values for executing the rule during a specific time period.
        """
        return pulumi.get(self, "active_betweens")

    @property
    @pulumi.getter(name="scheduledWeeklies")
    def scheduled_weeklies(self) -> Optional[Sequence['outputs.ServiceEventRuleTimeFrameScheduledWeekly']]:
        """
        Values for executing the rule on a recurring schedule.
        """
        return pulumi.get(self, "scheduled_weeklies")


@pulumi.output_type
class ServiceEventRuleTimeFrameActiveBetween(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceEventRuleTimeFrameActiveBetween. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceEventRuleTimeFrameActiveBetween.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceEventRuleTimeFrameActiveBetween.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[int] = None,
                 start_time: Optional[int] = None):
        """
        :param int end_time: Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        :param int start_time: Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        """
        ServiceEventRuleTimeFrameActiveBetween._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: Optional[int] = None,
             start_time: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        """
        Ending of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ServiceEventRuleTimeFrameScheduledWeekly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceEventRuleTimeFrameScheduledWeekly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceEventRuleTimeFrameScheduledWeekly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceEventRuleTimeFrameScheduledWeekly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[int] = None,
                 start_time: Optional[int] = None,
                 timezone: Optional[str] = None,
                 weekdays: Optional[Sequence[int]] = None):
        """
        :param int duration: Length of time the schedule will be active.  Unix timestamp in milliseconds.
        :param int start_time: Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        :param str timezone: Timezone for the given schedule.
        :param Sequence[int] weekdays: An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
        """
        ServiceEventRuleTimeFrameScheduledWeekly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            start_time=start_time,
            timezone=timezone,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[int] = None,
             start_time: Optional[int] = None,
             timezone: Optional[str] = None,
             weekdays: Optional[Sequence[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if duration is not None:
            _setter("duration", duration)
        if start_time is not None:
            _setter("start_time", start_time)
        if timezone is not None:
            _setter("timezone", timezone)
        if weekdays is not None:
            _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        Length of time the schedule will be active.  Unix timestamp in milliseconds.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Beginning of the scheduled time when the rule should execute.  Unix timestamp in milliseconds.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone for the given schedule.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        """
        An integer array representing which days during the week the rule executes. For example `weekdays = [1,3,7]` would execute on Monday, Wednesday and Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class ServiceEventRuleVariable(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ServiceEventRuleVariableParameter']] = None,
                 type: Optional[str] = None):
        """
        :param str name: The name of the variable.
        :param Sequence['ServiceEventRuleVariableParameterArgs'] parameters: The parameters for performing the operation to populate the variable.
        :param str type: Type of operation to populate the variable. Usually `regex`.
        """
        ServiceEventRuleVariable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             parameters: Optional[Sequence['outputs.ServiceEventRuleVariableParameter']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ServiceEventRuleVariableParameter']]:
        """
        The parameters for performing the operation to populate the variable.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of operation to populate the variable. Usually `regex`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceEventRuleVariableParameter(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str path: Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
        :param str value: Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        ServiceEventRuleVariableParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if path is not None:
            _setter("path", path)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to a field in an event, in dot-notation. For Event Rules on a Service, this will have to be a [PD-CEF field](https://support.pagerduty.com/docs/pd-cef).
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Boolean value that indicates if the alert should be suppressed before the indicated threshold values are met.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceIncidentUrgencyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "duringSupportHours":
            suggest = "during_support_hours"
        elif key == "outsideSupportHours":
            suggest = "outside_support_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIncidentUrgencyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIncidentUrgencyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIncidentUrgencyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 during_support_hours: Optional['outputs.ServiceIncidentUrgencyRuleDuringSupportHours'] = None,
                 outside_support_hours: Optional['outputs.ServiceIncidentUrgencyRuleOutsideSupportHours'] = None,
                 urgency: Optional[str] = None):
        """
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        :param 'ServiceIncidentUrgencyRuleDuringSupportHoursArgs' during_support_hours: Incidents' urgency during support hours.
        :param 'ServiceIncidentUrgencyRuleOutsideSupportHoursArgs' outside_support_hours: Incidents' urgency outside support hours.
               
               When using `type = "use_support_hours"` in `incident_urgency_rule` you must specify exactly one (otherwise optional) `support_hours` block.
               Your PagerDuty account must have the `service_support_hours` ability to assign support hours.
               The block contains the following arguments:
        :param str urgency: The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        ServiceIncidentUrgencyRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            during_support_hours=during_support_hours,
            outside_support_hours=outside_support_hours,
            urgency=urgency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             during_support_hours: Optional['outputs.ServiceIncidentUrgencyRuleDuringSupportHours'] = None,
             outside_support_hours: Optional['outputs.ServiceIncidentUrgencyRuleOutsideSupportHours'] = None,
             urgency: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if during_support_hours is not None:
            _setter("during_support_hours", during_support_hours)
        if outside_support_hours is not None:
            _setter("outside_support_hours", outside_support_hours)
        if urgency is not None:
            _setter("urgency", urgency)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="duringSupportHours")
    def during_support_hours(self) -> Optional['outputs.ServiceIncidentUrgencyRuleDuringSupportHours']:
        """
        Incidents' urgency during support hours.
        """
        return pulumi.get(self, "during_support_hours")

    @property
    @pulumi.getter(name="outsideSupportHours")
    def outside_support_hours(self) -> Optional['outputs.ServiceIncidentUrgencyRuleOutsideSupportHours']:
        """
        Incidents' urgency outside support hours.

        When using `type = "use_support_hours"` in `incident_urgency_rule` you must specify exactly one (otherwise optional) `support_hours` block.
        Your PagerDuty account must have the `service_support_hours` ability to assign support hours.
        The block contains the following arguments:
        """
        return pulumi.get(self, "outside_support_hours")

    @property
    @pulumi.getter
    def urgency(self) -> Optional[str]:
        """
        The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        return pulumi.get(self, "urgency")


@pulumi.output_type
class ServiceIncidentUrgencyRuleDuringSupportHours(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 urgency: Optional[str] = None):
        """
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        :param str urgency: The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        ServiceIncidentUrgencyRuleDuringSupportHours._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            urgency=urgency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             urgency: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if type is not None:
            _setter("type", type)
        if urgency is not None:
            _setter("urgency", urgency)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def urgency(self) -> Optional[str]:
        """
        The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        return pulumi.get(self, "urgency")


@pulumi.output_type
class ServiceIncidentUrgencyRuleOutsideSupportHours(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 urgency: Optional[str] = None):
        """
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        :param str urgency: The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        ServiceIncidentUrgencyRuleOutsideSupportHours._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            urgency=urgency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             urgency: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if type is not None:
            _setter("type", type)
        if urgency is not None:
            _setter("urgency", urgency)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def urgency(self) -> Optional[str]:
        """
        The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
        """
        return pulumi.get(self, "urgency")


@pulumi.output_type
class ServiceIntegrationEmailFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyMode":
            suggest = "body_mode"
        elif key == "bodyRegex":
            suggest = "body_regex"
        elif key == "fromEmailMode":
            suggest = "from_email_mode"
        elif key == "fromEmailRegex":
            suggest = "from_email_regex"
        elif key == "subjectMode":
            suggest = "subject_mode"
        elif key == "subjectRegex":
            suggest = "subject_regex"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIntegrationEmailFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIntegrationEmailFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIntegrationEmailFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body_mode: Optional[str] = None,
                 body_regex: Optional[str] = None,
                 from_email_mode: Optional[str] = None,
                 from_email_regex: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_mode: Optional[str] = None,
                 subject_regex: Optional[str] = None):
        """
        :param str body_mode: Can be `always` or `match`.
        :param str body_regex: Should be a valid regex or `null`
        :param str from_email_mode: Can be `always` or `match`.
        :param str from_email_regex: Should be a valid regex or `null`
        :param str id: The ID of the service integration.
        :param str subject_mode: Can be `always` or `match`.
        :param str subject_regex: Should be a valid regex or `null`
        """
        ServiceIntegrationEmailFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_mode=body_mode,
            body_regex=body_regex,
            from_email_mode=from_email_mode,
            from_email_regex=from_email_regex,
            id=id,
            subject_mode=subject_mode,
            subject_regex=subject_regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_mode: Optional[str] = None,
             body_regex: Optional[str] = None,
             from_email_mode: Optional[str] = None,
             from_email_regex: Optional[str] = None,
             id: Optional[str] = None,
             subject_mode: Optional[str] = None,
             subject_regex: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body_mode is not None:
            _setter("body_mode", body_mode)
        if body_regex is not None:
            _setter("body_regex", body_regex)
        if from_email_mode is not None:
            _setter("from_email_mode", from_email_mode)
        if from_email_regex is not None:
            _setter("from_email_regex", from_email_regex)
        if id is not None:
            _setter("id", id)
        if subject_mode is not None:
            _setter("subject_mode", subject_mode)
        if subject_regex is not None:
            _setter("subject_regex", subject_regex)

    @property
    @pulumi.getter(name="bodyMode")
    def body_mode(self) -> Optional[str]:
        """
        Can be `always` or `match`.
        """
        return pulumi.get(self, "body_mode")

    @property
    @pulumi.getter(name="bodyRegex")
    def body_regex(self) -> Optional[str]:
        """
        Should be a valid regex or `null`
        """
        return pulumi.get(self, "body_regex")

    @property
    @pulumi.getter(name="fromEmailMode")
    def from_email_mode(self) -> Optional[str]:
        """
        Can be `always` or `match`.
        """
        return pulumi.get(self, "from_email_mode")

    @property
    @pulumi.getter(name="fromEmailRegex")
    def from_email_regex(self) -> Optional[str]:
        """
        Should be a valid regex or `null`
        """
        return pulumi.get(self, "from_email_regex")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the service integration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectMode")
    def subject_mode(self) -> Optional[str]:
        """
        Can be `always` or `match`.
        """
        return pulumi.get(self, "subject_mode")

    @property
    @pulumi.getter(name="subjectRegex")
    def subject_regex(self) -> Optional[str]:
        """
        Should be a valid regex or `null`
        """
        return pulumi.get(self, "subject_regex")


@pulumi.output_type
class ServiceIntegrationEmailParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchPredicate":
            suggest = "match_predicate"
        elif key == "valueExtractors":
            suggest = "value_extractors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIntegrationEmailParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIntegrationEmailParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIntegrationEmailParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 match_predicate: 'outputs.ServiceIntegrationEmailParserMatchPredicate',
                 id: Optional[int] = None,
                 value_extractors: Optional[Sequence['outputs.ServiceIntegrationEmailParserValueExtractor']] = None):
        """
        :param str action: Can be `resolve` or `trigger`.
        :param int id: The ID of the service integration.
        """
        ServiceIntegrationEmailParser._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match_predicate=match_predicate,
            id=id,
            value_extractors=value_extractors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             match_predicate: 'outputs.ServiceIntegrationEmailParserMatchPredicate',
             id: Optional[int] = None,
             value_extractors: Optional[Sequence['outputs.ServiceIntegrationEmailParserValueExtractor']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("match_predicate", match_predicate)
        if id is not None:
            _setter("id", id)
        if value_extractors is not None:
            _setter("value_extractors", value_extractors)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Can be `resolve` or `trigger`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="matchPredicate")
    def match_predicate(self) -> 'outputs.ServiceIntegrationEmailParserMatchPredicate':
        return pulumi.get(self, "match_predicate")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the service integration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="valueExtractors")
    def value_extractors(self) -> Optional[Sequence['outputs.ServiceIntegrationEmailParserValueExtractor']]:
        return pulumi.get(self, "value_extractors")


@pulumi.output_type
class ServiceIntegrationEmailParserMatchPredicate(dict):
    def __init__(__self__, *,
                 type: str,
                 predicates: Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicate']] = None):
        """
        :param str type: Can be `any` or `all`.
        """
        ServiceIntegrationEmailParserMatchPredicate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            predicates=predicates,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             predicates: Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicate']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if predicates is not None:
            _setter("predicates", predicates)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `any` or `all`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def predicates(self) -> Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicate']]:
        return pulumi.get(self, "predicates")


@pulumi.output_type
class ServiceIntegrationEmailParserMatchPredicatePredicate(dict):
    def __init__(__self__, *,
                 type: str,
                 matcher: Optional[str] = None,
                 part: Optional[str] = None,
                 predicates: Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicate']] = None):
        """
        :param str type: Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
        :param str matcher: Predicate value or valid regex.
        :param str part: Can be `subject`, `body` or `from_addresses`.
        """
        ServiceIntegrationEmailParserMatchPredicatePredicate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            matcher=matcher,
            part=part,
            predicates=predicates,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             matcher: Optional[str] = None,
             part: Optional[str] = None,
             predicates: Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicate']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if matcher is not None:
            _setter("matcher", matcher)
        if part is not None:
            _setter("part", part)
        if predicates is not None:
            _setter("predicates", predicates)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def matcher(self) -> Optional[str]:
        """
        Predicate value or valid regex.
        """
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter
    def part(self) -> Optional[str]:
        """
        Can be `subject`, `body` or `from_addresses`.
        """
        return pulumi.get(self, "part")

    @property
    @pulumi.getter
    def predicates(self) -> Optional[Sequence['outputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicate']]:
        return pulumi.get(self, "predicates")


@pulumi.output_type
class ServiceIntegrationEmailParserMatchPredicatePredicatePredicate(dict):
    def __init__(__self__, *,
                 matcher: str,
                 part: str,
                 type: str):
        """
        :param str matcher: Predicate value or valid regex.
        :param str part: Can be `subject`, `body` or `from_addresses`.
        :param str type: Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
        """
        ServiceIntegrationEmailParserMatchPredicatePredicatePredicate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            matcher=matcher,
            part=part,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             matcher: str,
             part: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("matcher", matcher)
        _setter("part", part)
        _setter("type", type)

    @property
    @pulumi.getter
    def matcher(self) -> str:
        """
        Predicate value or valid regex.
        """
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter
    def part(self) -> str:
        """
        Can be `subject`, `body` or `from_addresses`.
        """
        return pulumi.get(self, "part")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `contains`, `exactly`, `regex` or `not`. If type is `not` predicate should contain child predicate with all parameters.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceIntegrationEmailParserValueExtractor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueName":
            suggest = "value_name"
        elif key == "endsBefore":
            suggest = "ends_before"
        elif key == "startsAfter":
            suggest = "starts_after"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIntegrationEmailParserValueExtractor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIntegrationEmailParserValueExtractor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIntegrationEmailParserValueExtractor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 part: str,
                 type: str,
                 value_name: str,
                 ends_before: Optional[str] = None,
                 regex: Optional[str] = None,
                 starts_after: Optional[str] = None):
        """
        :param str part: Can be `subject` or `body`.
        :param str type: Can be `between`, `entire` or `regex`.
        :param str value_name: First value extractor should have name `incident_key` other value extractors should contain custom names.
        :param str regex: If `type` has value `regex` this value should contain valid regex.
               
               **Note:** You can use the `get_vendor` data source to locate the appropriate vendor ID.
        """
        ServiceIntegrationEmailParserValueExtractor._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            part=part,
            type=type,
            value_name=value_name,
            ends_before=ends_before,
            regex=regex,
            starts_after=starts_after,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             part: str,
             type: str,
             value_name: str,
             ends_before: Optional[str] = None,
             regex: Optional[str] = None,
             starts_after: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("part", part)
        _setter("type", type)
        _setter("value_name", value_name)
        if ends_before is not None:
            _setter("ends_before", ends_before)
        if regex is not None:
            _setter("regex", regex)
        if starts_after is not None:
            _setter("starts_after", starts_after)

    @property
    @pulumi.getter
    def part(self) -> str:
        """
        Can be `subject` or `body`.
        """
        return pulumi.get(self, "part")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be `between`, `entire` or `regex`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="valueName")
    def value_name(self) -> str:
        """
        First value extractor should have name `incident_key` other value extractors should contain custom names.
        """
        return pulumi.get(self, "value_name")

    @property
    @pulumi.getter(name="endsBefore")
    def ends_before(self) -> Optional[str]:
        return pulumi.get(self, "ends_before")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        If `type` has value `regex` this value should contain valid regex.

        **Note:** You can use the `get_vendor` data source to locate the appropriate vendor ID.
        """
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="startsAfter")
    def starts_after(self) -> Optional[str]:
        return pulumi.get(self, "starts_after")


@pulumi.output_type
class ServiceScheduledAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "toUrgency":
            suggest = "to_urgency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceScheduledAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceScheduledAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceScheduledAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ats: Optional[Sequence['outputs.ServiceScheduledActionAt']] = None,
                 to_urgency: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence['ServiceScheduledActionAtArgs'] ats: A block representing when the scheduled action will occur.
        :param str to_urgency: The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        ServiceScheduledAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ats=ats,
            to_urgency=to_urgency,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ats: Optional[Sequence['outputs.ServiceScheduledActionAt']] = None,
             to_urgency: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ats is not None:
            _setter("ats", ats)
        if to_urgency is not None:
            _setter("to_urgency", to_urgency)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def ats(self) -> Optional[Sequence['outputs.ServiceScheduledActionAt']]:
        """
        A block representing when the scheduled action will occur.
        """
        return pulumi.get(self, "ats")

    @property
    @pulumi.getter(name="toUrgency")
    def to_urgency(self) -> Optional[str]:
        """
        The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
        """
        return pulumi.get(self, "to_urgency")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceScheduledActionAt(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
               
               Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.
               
               Below is an example for a `Service` resource with `incident_urgency_rules` with `type = "use_support_hours"`, `support_hours` and a default `scheduled_action` as well.
               
               ```python
               import pulumi
               import pulumi_pagerduty as pagerduty
               
               foo = pagerduty.Service("foo",
                   description="bar bar bar",
                   auto_resolve_timeout="3600",
                   acknowledgement_timeout="3600",
                   escalation_policy=pagerduty_escalation_policy["foo"]["id"],
                   incident_urgency_rule=pagerduty.ServiceIncidentUrgencyRuleArgs(
                       type="use_support_hours",
                       during_support_hours=pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs(
                           type="constant",
                           urgency="high",
                       ),
                       outside_support_hours=pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs(
                           type="constant",
                           urgency="low",
                       ),
                   ),
                   support_hours=pagerduty.ServiceSupportHoursArgs(
                       type="fixed_time_per_day",
                       time_zone="America/Lima",
                       start_time="09:00:00",
                       end_time="17:00:00",
                       days_of_weeks=[
                           1,
                           2,
                           3,
                           4,
                           5,
                       ],
                   ),
                   scheduled_actions=[pagerduty.ServiceScheduledActionArgs(
                       type="urgency_change",
                       to_urgency="high",
                       ats=[pagerduty.ServiceScheduledActionAtArgs(
                           type="named_time",
                           name="support_hours_start",
                       )],
                   )])
               ```
        :param str type: The type of time specification. Currently, this must be set to `named_time`.
        """
        ServiceScheduledActionAt._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.

        Note that it is currently only possible to define the scheduled action when urgency is set to `high` for `during_support_hours` and to `low`  for `outside_support_hours` in `incident_urgency_rule`.

        Below is an example for a `Service` resource with `incident_urgency_rules` with `type = "use_support_hours"`, `support_hours` and a default `scheduled_action` as well.

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        foo = pagerduty.Service("foo",
            description="bar bar bar",
            auto_resolve_timeout="3600",
            acknowledgement_timeout="3600",
            escalation_policy=pagerduty_escalation_policy["foo"]["id"],
            incident_urgency_rule=pagerduty.ServiceIncidentUrgencyRuleArgs(
                type="use_support_hours",
                during_support_hours=pagerduty.ServiceIncidentUrgencyRuleDuringSupportHoursArgs(
                    type="constant",
                    urgency="high",
                ),
                outside_support_hours=pagerduty.ServiceIncidentUrgencyRuleOutsideSupportHoursArgs(
                    type="constant",
                    urgency="low",
                ),
            ),
            support_hours=pagerduty.ServiceSupportHoursArgs(
                type="fixed_time_per_day",
                time_zone="America/Lima",
                start_time="09:00:00",
                end_time="17:00:00",
                days_of_weeks=[
                    1,
                    2,
                    3,
                    4,
                    5,
                ],
            ),
            scheduled_actions=[pagerduty.ServiceScheduledActionArgs(
                type="urgency_change",
                to_urgency="high",
                ats=[pagerduty.ServiceScheduledActionAtArgs(
                    type="named_time",
                    name="support_hours_start",
                )],
            )])
        ```
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of time specification. Currently, this must be set to `named_time`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceSupportHours(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceSupportHours. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceSupportHours.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceSupportHours.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Optional[Sequence[int]] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[int] days_of_weeks: Array of days of week as integers. `1` to `7`, `1` being
               Monday and `7` being Sunday.
        :param str end_time: The support hours' ending time of day.
               
               A `scheduled_actions` block is required when using `type = "use_support_hours"` in `incident_urgency_rule`.
               
               The block contains the following arguments:
        :param str start_time: The support hours' starting time of day.
        :param str time_zone: The time zone for the support hours.
        :param str type: The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        ServiceSupportHours._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_weeks=days_of_weeks,
            end_time=end_time,
            start_time=start_time,
            time_zone=time_zone,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_weeks: Optional[Sequence[int]] = None,
             end_time: Optional[str] = None,
             start_time: Optional[str] = None,
             time_zone: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if days_of_weeks is not None:
            _setter("days_of_weeks", days_of_weeks)
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)
        if time_zone is not None:
            _setter("time_zone", time_zone)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence[int]]:
        """
        Array of days of week as integers. `1` to `7`, `1` being
        Monday and `7` being Sunday.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The support hours' ending time of day.

        A `scheduled_actions` block is required when using `type = "use_support_hours"` in `incident_urgency_rule`.

        The block contains the following arguments:
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The support hours' starting time of day.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        The time zone for the support hours.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of alert grouping; one of `intelligent`, `time` or `content_based`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SlackConnectionConfig(dict):
    def __init__(__self__, *,
                 events: Sequence[str],
                 priorities: Optional[Sequence[str]] = None,
                 urgency: Optional[str] = None):
        """
        :param Sequence[str] events: A list of strings to filter events by PagerDuty event type. `"incident.triggered"` is required. The follow event types are also possible:
               - `incident.acknowledged`
               - `incident.escalated`
               - `incident.resolved`
               - `incident.reassigned`
               - `incident.annotated`
               - `incident.unacknowledged`
               - `incident.delegated`
               - `incident.priority_updated`
               - `incident.responder.added`
               - `incident.responder.replied`
               - `incident.status_update_published`
               - `incident.reopened`
        :param Sequence[str] priorities: Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through get_priority data source.
               - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.
               - When set to `["*"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.
        :param str urgency: Allows you to filter events by urgency. Either `high` or `low`.
        """
        SlackConnectionConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            events=events,
            priorities=priorities,
            urgency=urgency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             events: Sequence[str],
             priorities: Optional[Sequence[str]] = None,
             urgency: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("events", events)
        if priorities is not None:
            _setter("priorities", priorities)
        if urgency is not None:
            _setter("urgency", urgency)

    @property
    @pulumi.getter
    def events(self) -> Sequence[str]:
        """
        A list of strings to filter events by PagerDuty event type. `"incident.triggered"` is required. The follow event types are also possible:
        - `incident.acknowledged`
        - `incident.escalated`
        - `incident.resolved`
        - `incident.reassigned`
        - `incident.annotated`
        - `incident.unacknowledged`
        - `incident.delegated`
        - `incident.priority_updated`
        - `incident.responder.added`
        - `incident.responder.replied`
        - `incident.status_update_published`
        - `incident.reopened`
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def priorities(self) -> Optional[Sequence[str]]:
        """
        Allows you to filter events by priority. Needs to be an array of PagerDuty priority IDs. Available through get_priority data source.
        - When omitted or set to an empty array (`[]`) in the configuration for a Slack Connection, its default behaviour is to set `priorities` to `No Priority` value.
        - When set to `["*"]` its corresponding value for `priorities` in Slack Connection's configuration will be `Any Priority`.
        """
        return pulumi.get(self, "priorities")

    @property
    @pulumi.getter
    def urgency(self) -> Optional[str]:
        """
        Allows you to filter events by urgency. Either `high` or `low`.
        """
        return pulumi.get(self, "urgency")


@pulumi.output_type
class WebhookSubscriptionDeliveryMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHeaders":
            suggest = "custom_headers"
        elif key == "temporarilyDisabled":
            suggest = "temporarily_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookSubscriptionDeliveryMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookSubscriptionDeliveryMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookSubscriptionDeliveryMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_headers: Optional[Sequence['outputs.WebhookSubscriptionDeliveryMethodCustomHeader']] = None,
                 temporarily_disabled: Optional[bool] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param Sequence['WebhookSubscriptionDeliveryMethodCustomHeaderArgs'] custom_headers: The custom_header of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.
        :param bool temporarily_disabled: Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.
        :param str type: Indicates the type of the delivery method. Allowed and default value: `http_delivery_method`.
        :param str url: The destination URL for webhook delivery.
        """
        WebhookSubscriptionDeliveryMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_headers=custom_headers,
            temporarily_disabled=temporarily_disabled,
            type=type,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_headers: Optional[Sequence['outputs.WebhookSubscriptionDeliveryMethodCustomHeader']] = None,
             temporarily_disabled: Optional[bool] = None,
             type: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_headers is not None:
            _setter("custom_headers", custom_headers)
        if temporarily_disabled is not None:
            _setter("temporarily_disabled", temporarily_disabled)
        if type is not None:
            _setter("type", type)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[Sequence['outputs.WebhookSubscriptionDeliveryMethodCustomHeader']]:
        """
        The custom_header of a webhook subscription define any optional headers that will be passed along with the payload to the destination URL.
        """
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="temporarilyDisabled")
    def temporarily_disabled(self) -> Optional[bool]:
        """
        Whether this webhook subscription is temporarily disabled. Becomes true if the delivery method URL is repeatedly rejected by the server.
        """
        return pulumi.get(self, "temporarily_disabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Indicates the type of the delivery method. Allowed and default value: `http_delivery_method`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The destination URL for webhook delivery.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WebhookSubscriptionDeliveryMethodCustomHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        WebhookSubscriptionDeliveryMethodCustomHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class WebhookSubscriptionFilter(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None):
        """
        :param str type: The type of object being used as the filter. Allowed values are `account_reference`, `service_reference`, and `team_reference`.
        :param str id: The id of the object being used as the filter. This field is required for all filter types except account_reference.
        """
        WebhookSubscriptionFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of object being used as the filter. Allowed values are `account_reference`, `service_reference`, and `team_reference`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of the object being used as the filter. This field is required for all filter types except account_reference.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAutomationActionsActionActionDataReferenceResult(dict):
    def __init__(__self__, *,
                 invocation_command: str,
                 process_automation_job_arguments: str,
                 process_automation_job_id: str,
                 process_automation_node_filter: str,
                 script: str):
        """
        :param str invocation_command: (Optional) The command to execute the script with.
        :param str process_automation_job_arguments: (Optional) The arguments to pass to the Process Automation job execution.
        :param str process_automation_job_id: (Required for `process_automation` action_type) The ID of the Process Automation job to execute.
        :param str process_automation_node_filter: (Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
        :param str script: (Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.
        """
        GetAutomationActionsActionActionDataReferenceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            invocation_command=invocation_command,
            process_automation_job_arguments=process_automation_job_arguments,
            process_automation_job_id=process_automation_job_id,
            process_automation_node_filter=process_automation_node_filter,
            script=script,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             invocation_command: str,
             process_automation_job_arguments: str,
             process_automation_job_id: str,
             process_automation_node_filter: str,
             script: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("invocation_command", invocation_command)
        _setter("process_automation_job_arguments", process_automation_job_arguments)
        _setter("process_automation_job_id", process_automation_job_id)
        _setter("process_automation_node_filter", process_automation_node_filter)
        _setter("script", script)

    @property
    @pulumi.getter(name="invocationCommand")
    def invocation_command(self) -> str:
        """
        (Optional) The command to execute the script with.
        """
        return pulumi.get(self, "invocation_command")

    @property
    @pulumi.getter(name="processAutomationJobArguments")
    def process_automation_job_arguments(self) -> str:
        """
        (Optional) The arguments to pass to the Process Automation job execution.
        """
        return pulumi.get(self, "process_automation_job_arguments")

    @property
    @pulumi.getter(name="processAutomationJobId")
    def process_automation_job_id(self) -> str:
        """
        (Required for `process_automation` action_type) The ID of the Process Automation job to execute.
        """
        return pulumi.get(self, "process_automation_job_id")

    @property
    @pulumi.getter(name="processAutomationNodeFilter")
    def process_automation_node_filter(self) -> str:
        """
        (Optional) The expression that filters on which nodes a Process Automation Job executes [Learn more](https://docs.rundeck.com/docs/manual/05-nodes.html#node-filtering).
        """
        return pulumi.get(self, "process_automation_node_filter")

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        (Required for `script` action_type) Body of the script to be executed on the Runner. Max length is 16777215 characters.
        """
        return pulumi.get(self, "script")


@pulumi.output_type
class GetEventOrchestrationIntegrationDetailResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 parameters: Sequence['outputs.GetEventOrchestrationIntegrationDetailParameterResult']):
        """
        :param str id: ID of the integration
        """
        GetEventOrchestrationIntegrationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             label: str,
             parameters: Sequence['outputs.GetEventOrchestrationIntegrationDetailParameterResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("parameters", parameters)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetEventOrchestrationIntegrationDetailParameterResult']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetEventOrchestrationIntegrationDetailParameterResult(dict):
    def __init__(__self__, *,
                 routing_key: str,
                 type: str):
        """
        :param str routing_key: Routing key that routes to this Orchestration.
        :param str type: Type of the routing key. `global` is the default type.
        """
        GetEventOrchestrationIntegrationDetailParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routing_key=routing_key,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routing_key: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("routing_key", routing_key)
        _setter("type", type)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> str:
        """
        Routing key that routes to this Orchestration.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the routing key. `global` is the default type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventOrchestrationIntegrationParameterResult(dict):
    def __init__(__self__, *,
                 routing_key: str,
                 type: str):
        """
        :param str routing_key: Routing key that routes to this Orchestration.
        :param str type: Type of the routing key. `global` is the default type.
        """
        GetEventOrchestrationIntegrationParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routing_key=routing_key,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routing_key: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("routing_key", routing_key)
        _setter("type", type)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> str:
        """
        Routing key that routes to this Orchestration.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the routing key. `global` is the default type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventOrchestrationsEventOrchestrationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 integrations: Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationResult'],
                 name: str):
        """
        :param str id: ID of the integration
        :param Sequence['GetEventOrchestrationsEventOrchestrationIntegrationArgs'] integrations: An integration for the Event Orchestration.
        :param str name: The name of the found Event Orchestration.
        """
        GetEventOrchestrationsEventOrchestrationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            integrations=integrations,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             integrations: Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationResult'],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("integrations", integrations)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def integrations(self) -> Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationResult']:
        """
        An integration for the Event Orchestration.
        """
        return pulumi.get(self, "integrations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the found Event Orchestration.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetEventOrchestrationsEventOrchestrationIntegrationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 parameters: Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationParameterResult']):
        """
        :param str id: ID of the integration
        """
        GetEventOrchestrationsEventOrchestrationIntegrationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             label: str,
             parameters: Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationParameterResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("parameters", parameters)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the integration
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetEventOrchestrationsEventOrchestrationIntegrationParameterResult']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetEventOrchestrationsEventOrchestrationIntegrationParameterResult(dict):
    def __init__(__self__, *,
                 routing_key: str,
                 type: str):
        """
        :param str routing_key: Routing key that routes to this Orchestration.
        :param str type: Type of the routing key. `global` is the default type.
        """
        GetEventOrchestrationsEventOrchestrationIntegrationParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routing_key=routing_key,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routing_key: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("routing_key", routing_key)
        _setter("type", type)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> str:
        """
        Routing key that routes to this Orchestration.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the routing key. `global` is the default type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLicensesLicenseResult(dict):
    def __init__(__self__, *,
                 allocations_available: int,
                 current_value: int,
                 description: str,
                 html_url: str,
                 id: str,
                 name: str,
                 role_group: str,
                 self: str,
                 summary: str,
                 type: str,
                 valid_roles: Sequence[str]):
        """
        :param int allocations_available: Available allocations to assign to users
        :param int current_value: The number of allocations already assigned to users
        :param str description: Description of the license
        :param str id: Allows to override the default behavior for setting the `id` attribute that is required for data sources.
        :param str name: Name of the license
        :param str role_group: The role group for the license that determines the available `valid_roles`
        :param str summary: Summary of the license
        :param Sequence[str] valid_roles: List of allowed roles that may be assigned to a user with this license
        """
        GetLicensesLicenseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocations_available=allocations_available,
            current_value=current_value,
            description=description,
            html_url=html_url,
            id=id,
            name=name,
            role_group=role_group,
            self=self,
            summary=summary,
            type=type,
            valid_roles=valid_roles,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocations_available: int,
             current_value: int,
             description: str,
             html_url: str,
             id: str,
             name: str,
             role_group: str,
             self: str,
             summary: str,
             type: str,
             valid_roles: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allocations_available", allocations_available)
        _setter("current_value", current_value)
        _setter("description", description)
        _setter("html_url", html_url)
        _setter("id", id)
        _setter("name", name)
        _setter("role_group", role_group)
        _setter("self", self)
        _setter("summary", summary)
        _setter("type", type)
        _setter("valid_roles", valid_roles)

    @property
    @pulumi.getter(name="allocationsAvailable")
    def allocations_available(self) -> int:
        """
        Available allocations to assign to users
        """
        return pulumi.get(self, "allocations_available")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> int:
        """
        The number of allocations already assigned to users
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the license
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> str:
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Allows to override the default behavior for setting the `id` attribute that is required for data sources.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the license
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleGroup")
    def role_group(self) -> str:
        """
        The role group for the license that determines the available `valid_roles`
        """
        return pulumi.get(self, "role_group")

    @property
    @pulumi.getter
    def self(self) -> str:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def summary(self) -> str:
        """
        Summary of the license
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validRoles")
    def valid_roles(self) -> Sequence[str]:
        """
        List of allowed roles that may be assigned to a user with this license
        """
        return pulumi.get(self, "valid_roles")


@pulumi.output_type
class GetServiceTeamResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: The ID of the found service.
        :param str name: The service name to use to find a service in the PagerDuty API.
        """
        GetServiceTeamResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the found service.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name to use to find a service in the PagerDuty API.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 name: str):
        """
        :param str email: The email to use to find a user in the PagerDuty API.
        :param str id: The ID of the found user.
        :param str name: The short name of the found user.
        """
        GetUsersUserResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email", email)
        _setter("id", id)
        _setter("name", name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email to use to find a user in the PagerDuty API.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the found user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The short name of the found user.
        """
        return pulumi.get(self, "name")


