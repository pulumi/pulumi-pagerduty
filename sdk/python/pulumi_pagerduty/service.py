# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Service(pulumi.CustomResource):
    acknowledgement_timeout: pulumi.Output[str]
    """
    Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `"null"` string.
    """
    alert_creation: pulumi.Output[str]
    """
    Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value "create_incidents" is default: events will create an incident that cannot be merged. Value "create_alerts_and_incidents" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.
    """
    alert_grouping: pulumi.Output[str]
    """
    Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.
    """
    alert_grouping_timeout: pulumi.Output[float]
    """
    The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
    """
    auto_resolve_timeout: pulumi.Output[str]
    """
    Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `"null"` string.
    """
    created_at: pulumi.Output[str]
    description: pulumi.Output[str]
    escalation_policy: pulumi.Output[str]
    """
    The escalation policy used by this service.
    """
    html_url: pulumi.Output[str]
    incident_urgency_rule: pulumi.Output[dict]
    last_incident_timestamp: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    The name of the service.
    """
    scheduled_actions: pulumi.Output[list]
    status: pulumi.Output[str]
    support_hours: pulumi.Output[dict]
    def __init__(__self__, resource_name, opts=None, acknowledgement_timeout=None, alert_creation=None, alert_grouping=None, alert_grouping_timeout=None, auto_resolve_timeout=None, description=None, escalation_policy=None, incident_urgency_rule=None, name=None, scheduled_actions=None, support_hours=None, __props__=None, __name__=None, __opts__=None):
        """
        A [service](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Services/get_services) represents something you monitor (like a web service, email service, or database service). It is a container for related incidents that associates them with escalation policies.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        example_user = pagerduty.User("exampleUser",
            email="125.greenholt.earline@graham.name",
            teams=[pagerduty_team["example"]["id"]])
        foo = pagerduty.EscalationPolicy("foo",
            num_loops=2,
            rules=[{
                "escalationDelayInMinutes": 10,
                "target": [{
                    "id": example_user.id,
                    "type": "user",
                }],
            }])
        example_service = pagerduty.Service("exampleService",
            acknowledgement_timeout=600,
            alert_creation="create_incidents",
            auto_resolve_timeout=14400,
            escalation_policy=pagerduty_escalation_policy["example"]["id"])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acknowledgement_timeout: Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `"null"` string.
        :param pulumi.Input[str] alert_creation: Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value "create_incidents" is default: events will create an incident that cannot be merged. Value "create_alerts_and_incidents" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.
        :param pulumi.Input[str] alert_grouping: Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.
        :param pulumi.Input[float] alert_grouping_timeout: The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
        :param pulumi.Input[str] auto_resolve_timeout: Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `"null"` string.
        :param pulumi.Input[str] escalation_policy: The escalation policy used by this service.
        :param pulumi.Input[str] name: The name of the service.

        The **incident_urgency_rule** object supports the following:

          * `duringSupportHours` (`pulumi.Input[dict]`) - Incidents' urgency during support hours.
            * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
            * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

          * `outsideSupportHours` (`pulumi.Input[dict]`) - Incidents' urgency outside of support hours.
            * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
            * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
          * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

        The **scheduled_actions** object supports the following:

          * `ats` (`pulumi.Input[list]`) - A block representing when the scheduled action will occur.
            * `name` (`pulumi.Input[str]`) - Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
            * `type` (`pulumi.Input[str]`) - The type of time specification. Currently, this must be set to `named_time`.

          * `toUrgency` (`pulumi.Input[str]`) - The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.

        The **support_hours** object supports the following:

          * `daysOfWeeks` (`pulumi.Input[list]`) - Array of days of week as integers. `1` to `7`, `1` being
            Monday and `7` being Sunday.
          * `end_time` (`pulumi.Input[str]`) - The support hours' ending time of day.
          * `start_time` (`pulumi.Input[str]`) - The support hours' starting time of day.
          * `time_zone` (`pulumi.Input[str]`) - The time zone for the support hours.
          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acknowledgement_timeout'] = acknowledgement_timeout
            __props__['alert_creation'] = alert_creation
            __props__['alert_grouping'] = alert_grouping
            __props__['alert_grouping_timeout'] = alert_grouping_timeout
            __props__['auto_resolve_timeout'] = auto_resolve_timeout
            __props__['description'] = description
            if escalation_policy is None:
                raise TypeError("Missing required property 'escalation_policy'")
            __props__['escalation_policy'] = escalation_policy
            __props__['incident_urgency_rule'] = incident_urgency_rule
            __props__['name'] = name
            __props__['scheduled_actions'] = scheduled_actions
            __props__['support_hours'] = support_hours
            __props__['created_at'] = None
            __props__['html_url'] = None
            __props__['last_incident_timestamp'] = None
            __props__['status'] = None
        super(Service, __self__).__init__(
            'pagerduty:index/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, acknowledgement_timeout=None, alert_creation=None, alert_grouping=None, alert_grouping_timeout=None, auto_resolve_timeout=None, created_at=None, description=None, escalation_policy=None, html_url=None, incident_urgency_rule=None, last_incident_timestamp=None, name=None, scheduled_actions=None, status=None, support_hours=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acknowledgement_timeout: Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the `"null"` string.
        :param pulumi.Input[str] alert_creation: Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value "create_incidents" is default: events will create an incident that cannot be merged. Value "create_alerts_and_incidents" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged.
        :param pulumi.Input[str] alert_grouping: Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to `time`: All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to `intelligent` - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan.
        :param pulumi.Input[float] alert_grouping_timeout: The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `time`. To continue grouping alerts until the incident is resolved, set this value to `0`.
        :param pulumi.Input[str] auto_resolve_timeout: Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the `"null"` string.
        :param pulumi.Input[str] escalation_policy: The escalation policy used by this service.
        :param pulumi.Input[str] name: The name of the service.

        The **incident_urgency_rule** object supports the following:

          * `duringSupportHours` (`pulumi.Input[dict]`) - Incidents' urgency during support hours.
            * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
            * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

          * `outsideSupportHours` (`pulumi.Input[dict]`) - Incidents' urgency outside of support hours.
            * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
            * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
          * `urgency` (`pulumi.Input[str]`) - The urgency: `low` Notify responders (does not escalate), `high` (follows escalation rules) or `severity_based` Set's the urgency of the incident based on the severity set by the triggering monitoring tool.

        The **scheduled_actions** object supports the following:

          * `ats` (`pulumi.Input[list]`) - A block representing when the scheduled action will occur.
            * `name` (`pulumi.Input[str]`) - Designates either the start or the end of the scheduled action. Can be `support_hours_start` or `support_hours_end`.
            * `type` (`pulumi.Input[str]`) - The type of time specification. Currently, this must be set to `named_time`.

          * `toUrgency` (`pulumi.Input[str]`) - The urgency to change to: `low` (does not escalate), or `high` (follows escalation rules).
          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.

        The **support_hours** object supports the following:

          * `daysOfWeeks` (`pulumi.Input[list]`) - Array of days of week as integers. `1` to `7`, `1` being
            Monday and `7` being Sunday.
          * `end_time` (`pulumi.Input[str]`) - The support hours' ending time of day.
          * `start_time` (`pulumi.Input[str]`) - The support hours' starting time of day.
          * `time_zone` (`pulumi.Input[str]`) - The time zone for the support hours.
          * `type` (`pulumi.Input[str]`) - The type of scheduled action. Currently, this must be set to `urgency_change`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acknowledgement_timeout"] = acknowledgement_timeout
        __props__["alert_creation"] = alert_creation
        __props__["alert_grouping"] = alert_grouping
        __props__["alert_grouping_timeout"] = alert_grouping_timeout
        __props__["auto_resolve_timeout"] = auto_resolve_timeout
        __props__["created_at"] = created_at
        __props__["description"] = description
        __props__["escalation_policy"] = escalation_policy
        __props__["html_url"] = html_url
        __props__["incident_urgency_rule"] = incident_urgency_rule
        __props__["last_incident_timestamp"] = last_incident_timestamp
        __props__["name"] = name
        __props__["scheduled_actions"] = scheduled_actions
        __props__["status"] = status
        __props__["support_hours"] = support_hours
        return Service(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

