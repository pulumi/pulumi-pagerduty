# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class ServiceDependency(pulumi.CustomResource):
    dependencies: pulumi.Output[list]
    """
    The relationship between the `supporting_service` and `dependent_service`.

      * `dependentServices` (`list`) - The service that id dependent on the supporting service.
        * `id` (`str`) - The ID of the service dependency.
        * `type` (`str`)

      * `supportingServices` (`list`) - The service that supports  the  dependent service.
        * `id` (`str`) - The ID of the service dependency.
        * `type` (`str`)

      * `type` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, dependencies=None, __props__=None, __name__=None, __opts__=None):
        """
        A [service dependency](https://developer.pagerduty.com/api-reference/reference/REST/openapiv3.json/paths/~1service_dependencies~1associate/post) is a relationship between a business service and technical and business services that this service uses, or that are used by this service, and are critical for successful operation.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        foo = pagerduty.ServiceDependency("foo", dependency=[{
            "dependent_service": [{
                "id": pagerduty_business_service["foo"]["id"],
                "type": "business_service",
            }],
            "supporting_service": [{
                "id": pagerduty_service["foo"]["id"],
                "type": "service",
            }],
        }])
        bar = pagerduty.ServiceDependency("bar", dependency=[{
            "dependent_service": [{
                "id": pagerduty_business_service["foo"]["id"],
                "type": "business_service",
            }],
            "supporting_service": [{
                "id": pagerduty_service["two"]["id"],
                "type": "service",
            }],
        }])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] dependencies: The relationship between the `supporting_service` and `dependent_service`.

        The **dependencies** object supports the following:

          * `dependentServices` (`pulumi.Input[list]`) - The service that id dependent on the supporting service.
            * `id` (`pulumi.Input[str]`) - The ID of the service dependency.
            * `type` (`pulumi.Input[str]`)

          * `supportingServices` (`pulumi.Input[list]`) - The service that supports  the  dependent service.
            * `id` (`pulumi.Input[str]`) - The ID of the service dependency.
            * `type` (`pulumi.Input[str]`)

          * `type` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if dependencies is None:
                raise TypeError("Missing required property 'dependencies'")
            __props__['dependencies'] = dependencies
        super(ServiceDependency, __self__).__init__(
            'pagerduty:index/serviceDependency:ServiceDependency',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, dependencies=None):
        """
        Get an existing ServiceDependency resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] dependencies: The relationship between the `supporting_service` and `dependent_service`.

        The **dependencies** object supports the following:

          * `dependentServices` (`pulumi.Input[list]`) - The service that id dependent on the supporting service.
            * `id` (`pulumi.Input[str]`) - The ID of the service dependency.
            * `type` (`pulumi.Input[str]`)

          * `supportingServices` (`pulumi.Input[list]`) - The service that supports  the  dependent service.
            * `id` (`pulumi.Input[str]`) - The ID of the service dependency.
            * `type` (`pulumi.Input[str]`)

          * `type` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["dependencies"] = dependencies
        return ServiceDependency(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

