# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ServiceEventRule']


class ServiceEventRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleActionsArgs']]] = None,
                 conditions: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleConditionsArgs']]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 time_frame: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleTimeFrameArgs']]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEventRuleVariableArgs']]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        A [service event rule](https://support.pagerduty.com/docs/rulesets#service-event-rules) allows you to set actions that should be taken on events for a service that meet the designated rule criteria.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        example = pagerduty.Service("example",
            auto_resolve_timeout="14400",
            acknowledgement_timeout="600",
            escalation_policy=pagerduty_escalation_policy["example"]["id"],
            alert_creation="create_alerts_and_incidents")
        foo = pagerduty.ServiceEventRule("foo",
            service=example.id,
            position=0,
            disabled=True,
            conditions=pagerduty.ServiceEventRuleConditionsArgs(
                operator="and",
                subconditions=[pagerduty.ServiceEventRuleConditionsSubconditionArgs(
                    operator="contains",
                    parameters=[pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs(
                        value="disk space",
                        path="summary",
                    )],
                )],
            ),
            variables=[pagerduty.ServiceEventRuleVariableArgs(
                type="regex",
                name="Src",
                parameters=[pagerduty.ServiceEventRuleVariableParameterArgs(
                    value="(.*)",
                    path="source",
                )],
            )],
            actions=pagerduty.ServiceEventRuleActionsArgs(
                annotates=[pagerduty.ServiceEventRuleActionsAnnotateArgs(
                    value="From Terraform",
                )],
                extractions=[
                    pagerduty.ServiceEventRuleActionsExtractionArgs(
                        target="dedup_key",
                        source="source",
                        regex="(.*)",
                    ),
                    pagerduty.ServiceEventRuleActionsExtractionArgs(
                        target="summary",
                        template="Warning: Disk Space Low on {{Src}}",
                    ),
                ],
            ))
        bar = pagerduty.ServiceEventRule("bar",
            service=pagerduty_service["foo"]["id"],
            position=1,
            disabled=True,
            conditions=pagerduty.ServiceEventRuleConditionsArgs(
                operator="and",
                subconditions=[pagerduty.ServiceEventRuleConditionsSubconditionArgs(
                    operator="contains",
                    parameters=[pagerduty.ServiceEventRuleConditionsSubconditionParameterArgs(
                        value="cpu spike",
                        path="summary",
                    )],
                )],
            ),
            actions=pagerduty.ServiceEventRuleActionsArgs(
                annotates=[pagerduty.ServiceEventRuleActionsAnnotateArgs(
                    value="From Terraform",
                )],
            ))
        ```

        ## Import

        Service event rules can be imported using using the related `service` id and the `service_event_rule` id separated by a dot, e.g.

        ```sh
         $ pulumi import pagerduty:index/serviceEventRule:ServiceEventRule main a19cdca1-3d5e-4b52-bfea-8c8de04da243.19acac92-027a-4ea0-b06c-bbf516519601
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleActionsArgs']] actions: Actions to apply to an event if the conditions match.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleConditionsArgs']] conditions: Conditions evaluated to check if an event matches this event rule.
        :param pulumi.Input[bool] disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param pulumi.Input[int] position: Position/index of the rule within the service.
        :param pulumi.Input[str] service: The ID of the service that the rule belongs to.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleTimeFrameArgs']] time_frame: Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEventRuleVariableArgs']]]] variables: Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['actions'] = actions
            __props__['conditions'] = conditions
            __props__['disabled'] = disabled
            __props__['position'] = position
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__['service'] = service
            __props__['time_frame'] = time_frame
            __props__['variables'] = variables
        super(ServiceEventRule, __self__).__init__(
            'pagerduty:index/serviceEventRule:ServiceEventRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleActionsArgs']]] = None,
            conditions: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleConditionsArgs']]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            position: Optional[pulumi.Input[int]] = None,
            service: Optional[pulumi.Input[str]] = None,
            time_frame: Optional[pulumi.Input[pulumi.InputType['ServiceEventRuleTimeFrameArgs']]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEventRuleVariableArgs']]]]] = None) -> 'ServiceEventRule':
        """
        Get an existing ServiceEventRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleActionsArgs']] actions: Actions to apply to an event if the conditions match.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleConditionsArgs']] conditions: Conditions evaluated to check if an event matches this event rule.
        :param pulumi.Input[bool] disabled: Indicates whether the rule is disabled and would therefore not be evaluated.
        :param pulumi.Input[int] position: Position/index of the rule within the service.
        :param pulumi.Input[str] service: The ID of the service that the rule belongs to.
        :param pulumi.Input[pulumi.InputType['ServiceEventRuleTimeFrameArgs']] time_frame: Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEventRuleVariableArgs']]]] variables: Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["actions"] = actions
        __props__["conditions"] = conditions
        __props__["disabled"] = disabled
        __props__["position"] = position
        __props__["service"] = service
        __props__["time_frame"] = time_frame
        __props__["variables"] = variables
        return ServiceEventRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional['outputs.ServiceEventRuleActions']]:
        """
        Actions to apply to an event if the conditions match.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional['outputs.ServiceEventRuleConditions']]:
        """
        Conditions evaluated to check if an event matches this event rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the rule is disabled and would therefore not be evaluated.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[Optional[int]]:
        """
        Position/index of the rule within the service.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        The ID of the service that the rule belongs to.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="timeFrame")
    def time_frame(self) -> pulumi.Output[Optional['outputs.ServiceEventRuleTimeFrame']]:
        """
        Settings for [scheduling the rule](https://support.pagerduty.com/docs/rulesets#section-scheduled-event-rules).
        """
        return pulumi.get(self, "time_frame")

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceEventRuleVariable']]]:
        """
        Populate variables from event payloads and use those variables in other event actions. *NOTE: A rule can have multiple `variable` objects.*
        """
        return pulumi.get(self, "variables")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

