# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['UserNotificationRule']


class UserNotificationRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_method: Optional[pulumi.Input[pulumi.InputType['UserNotificationRuleContactMethodArgs']]] = None,
                 start_delay_in_minutes: Optional[pulumi.Input[int]] = None,
                 urgency: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        A [notification rule](https://v2.developer.pagerduty.com/v2/page/api-reference#!/Users/get_users_id_notification_rules_notification_rule_id) configures where and when a PagerDuty user is notified when a triggered incident is assigned to him. Unique notification rules can be created for both high and low-urgency incidents.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pagerduty as pagerduty

        example = pagerduty.User("example", email="125.greenholt.earline@graham.name")
        email = pagerduty.UserContactMethod("email",
            user_id=example.id,
            type="email_contact_method",
            address="foo@bar.com",
            label="Work")
        phone = pagerduty.UserContactMethod("phone",
            user_id=example.id,
            type="phone_contact_method",
            country_code=1,
            address="2025550199",
            label="Work")
        sms = pagerduty.UserContactMethod("sms",
            user_id=example.id,
            type="sms_contact_method",
            country_code=1,
            address="2025550199",
            label="Work")
        high_urgency_phone = pagerduty.UserNotificationRule("highUrgencyPhone",
            user_id=example.id,
            start_delay_in_minutes=1,
            urgency="high",
            contact_method=pagerduty.UserNotificationRuleContactMethodArgs(
                type="phone_contact_method",
                id=phone.id,
            ))
        low_urgency_email = pagerduty.UserNotificationRule("lowUrgencyEmail",
            user_id=example.id,
            start_delay_in_minutes=1,
            urgency="low",
            contact_method=pagerduty.UserNotificationRuleContactMethodArgs(
                type="email_contact_method",
                id=email.id,
            ))
        low_urgency_sms = pagerduty.UserNotificationRule("lowUrgencySms",
            user_id=example.id,
            start_delay_in_minutes=10,
            urgency="low",
            contact_method=pagerduty.UserNotificationRuleContactMethodArgs(
                type="sms_contact_method",
                id=sms.id,
            ))
        ```

        ## Import

        User notification rules can be imported using the `user_id` and the `id`, e.g.

        ```sh
         $ pulumi import pagerduty:index/userNotificationRule:UserNotificationRule main PXPGF42:PPSCXAN
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UserNotificationRuleContactMethodArgs']] contact_method: A contact method block, configured as a block described below.
        :param pulumi.Input[int] start_delay_in_minutes: The delay before firing the rule, in minutes.
        :param pulumi.Input[str] urgency: Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
        :param pulumi.Input[str] user_id: The ID of the user.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if contact_method is None and not opts.urn:
                raise TypeError("Missing required property 'contact_method'")
            __props__['contact_method'] = contact_method
            if start_delay_in_minutes is None and not opts.urn:
                raise TypeError("Missing required property 'start_delay_in_minutes'")
            __props__['start_delay_in_minutes'] = start_delay_in_minutes
            if urgency is None and not opts.urn:
                raise TypeError("Missing required property 'urgency'")
            __props__['urgency'] = urgency
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__['user_id'] = user_id
        super(UserNotificationRule, __self__).__init__(
            'pagerduty:index/userNotificationRule:UserNotificationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contact_method: Optional[pulumi.Input[pulumi.InputType['UserNotificationRuleContactMethodArgs']]] = None,
            start_delay_in_minutes: Optional[pulumi.Input[int]] = None,
            urgency: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'UserNotificationRule':
        """
        Get an existing UserNotificationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UserNotificationRuleContactMethodArgs']] contact_method: A contact method block, configured as a block described below.
        :param pulumi.Input[int] start_delay_in_minutes: The delay before firing the rule, in minutes.
        :param pulumi.Input[str] urgency: Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
        :param pulumi.Input[str] user_id: The ID of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["contact_method"] = contact_method
        __props__["start_delay_in_minutes"] = start_delay_in_minutes
        __props__["urgency"] = urgency
        __props__["user_id"] = user_id
        return UserNotificationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactMethod")
    def contact_method(self) -> pulumi.Output['outputs.UserNotificationRuleContactMethod']:
        """
        A contact method block, configured as a block described below.
        """
        return pulumi.get(self, "contact_method")

    @property
    @pulumi.getter(name="startDelayInMinutes")
    def start_delay_in_minutes(self) -> pulumi.Output[int]:
        """
        The delay before firing the rule, in minutes.
        """
        return pulumi.get(self, "start_delay_in_minutes")

    @property
    @pulumi.getter
    def urgency(self) -> pulumi.Output[str]:
        """
        Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule. Can be `high` or `low`.
        """
        return pulumi.get(self, "urgency")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        The ID of the user.
        """
        return pulumi.get(self, "user_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

